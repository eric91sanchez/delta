
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  08014060  08014060  00024060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015db0  08015db0  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  08015db0  08015db0  00025db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015db8  08015db8  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015db8  08015db8  00025db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dbc  08015dbc  00025dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  24000000  08015dc0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  240002d0  0801608c  000302d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000d48  0801608c  00030d48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc36  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003842  00000000  00000000  0004cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00050778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00051ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000645d  00000000  00000000  00052c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df34  00000000  00000000  000590ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165a9d  00000000  00000000  00076fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dca7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061ec  00000000  00000000  001dcad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014044 	.word	0x08014044

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08014044 	.word	0x08014044

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <transpuesta>:
 *      Author: Elias Correa y Eliseo Elorga
 */

#include <GlobalFunc.h>

array2D transpuesta(double Maux[3][3]) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b096      	sub	sp, #88	; 0x58
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
 8000a8a:	e024      	b.n	8000ad6 <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a90:	e01b      	b.n	8000aca <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8000a92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	3358      	adds	r3, #88	; 0x58
 8000abc:	443b      	add	r3, r7
 8000abe:	3b50      	subs	r3, #80	; 0x50
 8000ac0:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8000ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8000aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	dde0      	ble.n	8000a92 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8000ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
 8000ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	ddd7      	ble.n	8000a8c <transpuesta+0x10>
		}
	}
	return MTaux;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2248      	movs	r2, #72	; 0x48
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f00f ffde 	bl	8010aa8 <memcpy>
}
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	3758      	adds	r7, #88	; 0x58
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <productDot>:

double productDot(double VectA[], double VectB[]) {
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e016      	b.n	8000b3e <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	ed93 6b00 	vldr	d6, [r3]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	ed93 7b00 	vldr	d7, [r3]
 8000b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b2c:	ed97 6b04 	vldr	d6, [r7, #16]
 8000b30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b34:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	dde5      	ble.n	8000b10 <productDot+0x1c>
	}
	return dotaux;
 8000b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b48:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <determinante>:

double determinante(double Maux[3][3]) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	ed93 6b00 	vldr	d6, [r3]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3330      	adds	r3, #48	; 0x30
 8000b78:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b80:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8000b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b88:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b8c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b094      	sub	sp, #80	; 0x50
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	ed93 6b02 	vldr	d6, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3330      	adds	r3, #48	; 0x30
 8000bb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	3330      	adds	r3, #48	; 0x30
 8000bbc:	ed93 5b02 	vldr	d5, [r3, #8]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3318      	adds	r3, #24
 8000bc4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bd0:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	ed93 6b00 	vldr	d6, [r3]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3330      	adds	r3, #48	; 0x30
 8000be0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000be4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3330      	adds	r3, #48	; 0x30
 8000bec:	ed93 5b00 	vldr	d5, [r3]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c00:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	3318      	adds	r3, #24
 8000c08:	ed93 6b00 	vldr	d6, [r3]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3330      	adds	r3, #48	; 0x30
 8000c10:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3330      	adds	r3, #48	; 0x30
 8000c1c:	ed93 5b00 	vldr	d5, [r3]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3318      	adds	r3, #24
 8000c24:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c30:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	3330      	adds	r3, #48	; 0x30
 8000c3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	3330      	adds	r3, #48	; 0x30
 8000c4a:	ed93 5b02 	vldr	d5, [r3, #8]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c5c:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	ed93 6b00 	vldr	d6, [r3]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3330      	adds	r3, #48	; 0x30
 8000c6a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	3330      	adds	r3, #48	; 0x30
 8000c76:	ed93 5b00 	vldr	d5, [r3]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c88:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	ed93 6b00 	vldr	d6, [r3]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3330      	adds	r3, #48	; 0x30
 8000c96:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	ed93 5b00 	vldr	d5, [r3]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	ed93 7b02 	vldr	d7, [r3, #8]
 8000cac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cb4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	ed93 6b02 	vldr	d6, [r3, #8]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3318      	adds	r3, #24
 8000cc2:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	ed93 5b02 	vldr	d5, [r3, #8]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cdc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ce0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	ed93 6b00 	vldr	d6, [r3]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3318      	adds	r3, #24
 8000cee:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cf2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3318      	adds	r3, #24
 8000cfa:	ed93 5b00 	vldr	d5, [r3]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d0c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	ed93 6b00 	vldr	d6, [r3]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3318      	adds	r3, #24
 8000d1a:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	3318      	adds	r3, #24
 8000d26:	ed93 5b00 	vldr	d5, [r3]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d38:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2248      	movs	r2, #72	; 0x48
 8000d46:	4619      	mov	r1, r3
 8000d48:	f00f feae 	bl	8010aa8 <memcpy>
}
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	3750      	adds	r7, #80	; 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <inv>:

array2D inv(double A[3][3]) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0bc      	sub	sp, #240	; 0xf0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000d5c:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8000d5e:	463b      	mov	r3, r7
 8000d60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff19 	bl	8000b9a <adjunta>
 8000d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	2248      	movs	r2, #72	; 0x48
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00f fe99 	bl	8010aa8 <memcpy>
	Maux = transpuesta(Maux.m);
 8000d76:	463b      	mov	r3, r7
 8000d78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe7c 	bl	8000a7c <transpuesta>
 8000d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d88:	4639      	mov	r1, r7
 8000d8a:	2248      	movs	r2, #72	; 0x48
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00f fe8b 	bl	8010aa8 <memcpy>
	det = determinante(A);
 8000d92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d94:	f7ff fee1 	bl	8000b5a <determinante>
 8000d98:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0

	for (int i = 0; i < 3; ++i) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000da2:	e035      	b.n	8000e10 <inv+0xbc>
		for (int j = 0; j < 3; ++j) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000daa:	e028      	b.n	8000dfe <inv+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8000dac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000db0:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8000db4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	33f0      	adds	r3, #240	; 0xf0
 8000dcc:	443b      	add	r3, r7
 8000dce:	3ba0      	subs	r3, #160	; 0xa0
 8000dd0:	ed93 7b00 	vldr	d7, [r3]
 8000dd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	33f0      	adds	r3, #240	; 0xf0
 8000dec:	443b      	add	r3, r7
 8000dee:	3b58      	subs	r3, #88	; 0x58
 8000df0:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8000df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	ddd2      	ble.n	8000dac <inv+0x58>
	for (int i = 0; i < 3; ++i) {
 8000e06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000e10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	ddc5      	ble.n	8000da4 <inv+0x50>
		}
	}
	return Minv;
 8000e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e20:	2248      	movs	r2, #72	; 0x48
 8000e22:	4619      	mov	r1, r3
 8000e24:	f00f fe40 	bl	8010aa8 <memcpy>
}
 8000e28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e2a:	37f0      	adds	r7, #240	; 0xf0
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	; 0x70
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e40:	e04b      	b.n	8000eda <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e46:	e042      	b.n	8000ece <productMatriz+0x9e>
			double suma = 0;
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e58:	e024      	b.n	8000ea4 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8000e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	461a      	mov	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	441a      	add	r2, r3
 8000e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	ed93 6b00 	vldr	d6, [r3]
 8000e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	441a      	add	r2, r3
 8000e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	ed93 7b00 	vldr	d7, [r3]
 8000e8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e92:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8000e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	ddd7      	ble.n	8000e5a <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8000eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	3370      	adds	r3, #112	; 0x70
 8000eba:	443b      	add	r3, r7
 8000ebc:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8000ec0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ec4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8000ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eca:	3301      	adds	r3, #1
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	ddb9      	ble.n	8000e48 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8000ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	ddb0      	ble.n	8000e42 <productMatriz+0x12>
		}
	}
	return producto;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2248      	movs	r2, #72	; 0x48
 8000eea:	4619      	mov	r1, r3
 8000eec:	f00f fddc 	bl	8010aa8 <memcpy>
}
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	3770      	adds	r7, #112	; 0x70
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_DMA_Init+0x5c>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <MX_DMA_Init+0x5c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_DMA_Init+0x5c>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	200b      	movs	r0, #11
 8000f22:	f005 fcda 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f26:	200b      	movs	r0, #11
 8000f28:	f005 fcf1 	bl	800690e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	200c      	movs	r0, #12
 8000f32:	f005 fcd2 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f36:	200c      	movs	r0, #12
 8000f38:	f005 fce9 	bl	800690e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	200d      	movs	r0, #13
 8000f42:	f005 fcca 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f46:	200d      	movs	r0, #13
 8000f48:	f005 fce1 	bl	800690e <HAL_NVIC_EnableIRQ>

}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400

08000f58 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b74      	ldr	r3, [pc, #464]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a72      	ldr	r2, [pc, #456]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b70      	ldr	r3, [pc, #448]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a6b      	ldr	r2, [pc, #428]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b68      	ldr	r3, [pc, #416]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a63      	ldr	r2, [pc, #396]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b61      	ldr	r3, [pc, #388]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc8:	4b5d      	ldr	r3, [pc, #372]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b59      	ldr	r3, [pc, #356]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a54      	ldr	r2, [pc, #336]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b52      	ldr	r3, [pc, #328]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <MX_GPIO_Init+0x1e8>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <MX_GPIO_Init+0x1e8>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <MX_GPIO_Init+0x1e8>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001046:	483f      	ldr	r0, [pc, #252]	; (8001144 <MX_GPIO_Init+0x1ec>)
 8001048:	f008 fc8e 	bl	8009968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2170      	movs	r1, #112	; 0x70
 8001050:	483d      	ldr	r0, [pc, #244]	; (8001148 <MX_GPIO_Init+0x1f0>)
 8001052:	f008 fc89 	bl	8009968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001056:	233f      	movs	r3, #63	; 0x3f
 8001058:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <MX_GPIO_Init+0x1f4>)
 800106c:	f008 fab4 	bl	80095d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001076:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107c:	2302      	movs	r3, #2
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <MX_GPIO_Init+0x1ec>)
 8001088:	f008 faa6 	bl	80095d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 800108c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4827      	ldr	r0, [pc, #156]	; (8001144 <MX_GPIO_Init+0x1ec>)
 80010a6:	f008 fa97 	bl	80095d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 80010aa:	2370      	movs	r3, #112	; 0x70
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <MX_GPIO_Init+0x1f0>)
 80010c2:	f008 fa89 	bl	80095d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	2006      	movs	r0, #6
 80010cc:	f005 fc05 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010d0:	2006      	movs	r0, #6
 80010d2:	f005 fc1c 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	2007      	movs	r0, #7
 80010dc:	f005 fbfd 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010e0:	2007      	movs	r0, #7
 80010e2:	f005 fc14 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	2008      	movs	r0, #8
 80010ec:	f005 fbf5 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010f0:	2008      	movs	r0, #8
 80010f2:	f005 fc0c 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2101      	movs	r1, #1
 80010fa:	2009      	movs	r0, #9
 80010fc:	f005 fbed 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001100:	2009      	movs	r0, #9
 8001102:	f005 fc04 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2101      	movs	r1, #1
 800110a:	200a      	movs	r0, #10
 800110c:	f005 fbe5 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001110:	200a      	movs	r0, #10
 8001112:	f005 fbfc 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2101      	movs	r1, #1
 800111a:	2017      	movs	r0, #23
 800111c:	f005 fbdd 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001120:	2017      	movs	r0, #23
 8001122:	f005 fbf4 	bl	800690e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2102      	movs	r1, #2
 800112a:	2028      	movs	r0, #40	; 0x28
 800112c:	f005 fbd5 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f005 fbec 	bl	800690e <HAL_NVIC_EnableIRQ>

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58024400 	.word	0x58024400
 8001144:	58020800 	.word	0x58020800
 8001148:	58020c00 	.word	0x58020c00
 800114c:	58021000 	.word	0x58021000

08001150 <homing>:

double rpm = 1.0;  //Valor experimental.
bool homAprox, homStart,homFin;


void homing(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

	homAprox = true;
 8001154:	4bba      	ldr	r3, [pc, #744]	; (8001440 <homing+0x2f0>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
	homStart = true;
 800115a:	4bba      	ldr	r3, [pc, #744]	; (8001444 <homing+0x2f4>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]

    homFin = false;
 8001160:	4bb9      	ldr	r3, [pc, #740]	; (8001448 <homing+0x2f8>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
    motor1.hom = false;
 8001166:	4bb9      	ldr	r3, [pc, #740]	; (800144c <homing+0x2fc>)
 8001168:	2200      	movs	r2, #0
 800116a:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 800116c:	4bb8      	ldr	r3, [pc, #736]	; (8001450 <homing+0x300>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8001172:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <homing+0x304>)
 8001174:	2200      	movs	r2, #0
 8001176:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	48b6      	ldr	r0, [pc, #728]	; (8001458 <homing+0x308>)
 8001180:	f008 fbf2 	bl	8009968 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118a:	48b3      	ldr	r0, [pc, #716]	; (8001458 <homing+0x308>)
 800118c:	f008 fbec 	bl	8009968 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001196:	48b0      	ldr	r0, [pc, #704]	; (8001458 <homing+0x308>)
 8001198:	f008 fbe6 	bl	8009968 <HAL_GPIO_WritePin>

	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800119c:	2100      	movs	r1, #0
 800119e:	48af      	ldr	r0, [pc, #700]	; (800145c <homing+0x30c>)
 80011a0:	f00b fd42 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 80011a4:	2104      	movs	r1, #4
 80011a6:	48ad      	ldr	r0, [pc, #692]	; (800145c <homing+0x30c>)
 80011a8:	f00b fd3e 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_3);
 80011ac:	2108      	movs	r1, #8
 80011ae:	48ab      	ldr	r0, [pc, #684]	; (800145c <homing+0x30c>)
 80011b0:	f00b fd3a 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 80011b4:	2006      	movs	r0, #6
 80011b6:	f005 fbb8 	bl	800692a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 80011ba:	2007      	movs	r0, #7
 80011bc:	f005 fbb5 	bl	800692a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 80011c0:	2008      	movs	r0, #8
 80011c2:	f005 fbb2 	bl	800692a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 80011c6:	2009      	movs	r0, #9
 80011c8:	f005 fbaf 	bl	800692a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 80011cc:	200a      	movs	r0, #10
 80011ce:	f005 fbac 	bl	800692a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 80011d2:	2017      	movs	r0, #23
 80011d4:	f005 fba9 	bl	800692a <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 80011d8:	2100      	movs	r1, #0
 80011da:	48a1      	ldr	r0, [pc, #644]	; (8001460 <homing+0x310>)
 80011dc:	f00b fa5a 	bl	800c694 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 80011e0:	2100      	movs	r1, #0
 80011e2:	48a0      	ldr	r0, [pc, #640]	; (8001464 <homing+0x314>)
 80011e4:	f00b fa56 	bl	800c694 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 80011e8:	2100      	movs	r1, #0
 80011ea:	489f      	ldr	r0, [pc, #636]	; (8001468 <homing+0x318>)
 80011ec:	f00b fa52 	bl	800c694 <HAL_TIM_PWM_Stop>
	motor2.counterPeriod =  COUNTERPERIOD(rpm);
	motor3.counterPeriod =  COUNTERPERIOD(rpm);
	*/


	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 80011f0:	4b9e      	ldr	r3, [pc, #632]	; (800146c <homing+0x31c>)
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001200:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001204:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001428 <homing+0x2d8>
 8001208:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800120c:	4b98      	ldr	r3, [pc, #608]	; (8001470 <homing+0x320>)
 800120e:	ed93 7b00 	vldr	d7, [r3]
 8001212:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001430 <homing+0x2e0>
 8001216:	ee27 5b05 	vmul.f64	d5, d7, d5
 800121a:	ed9f 4b87 	vldr	d4, [pc, #540]	; 8001438 <homing+0x2e8>
 800121e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800122a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800122e:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <homing+0x310>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001236:	ee17 2a90 	vmov	r2, s15
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
 800123c:	4b8b      	ldr	r3, [pc, #556]	; (800146c <homing+0x31c>)
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001248:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800124c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001250:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8001428 <homing+0x2d8>
 8001254:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001258:	4b85      	ldr	r3, [pc, #532]	; (8001470 <homing+0x320>)
 800125a:	ed93 7b00 	vldr	d7, [r3]
 800125e:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001430 <homing+0x2e0>
 8001262:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001266:	ed9f 4b74 	vldr	d4, [pc, #464]	; 8001438 <homing+0x2e8>
 800126a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800126e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001272:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001276:	ee37 7b46 	vsub.f64	d7, d7, d6
 800127a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <homing+0x310>)
 8001284:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <homing+0x31c>)
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001292:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001296:	ee37 7b06 	vadd.f64	d7, d7, d6
 800129a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8001428 <homing+0x2d8>
 800129e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012a2:	4b73      	ldr	r3, [pc, #460]	; (8001470 <homing+0x320>)
 80012a4:	ed93 7b00 	vldr	d7, [r3]
 80012a8:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8001430 <homing+0x2e0>
 80012ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012b0:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8001438 <homing+0x2e8>
 80012b4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80012b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012c4:	4b67      	ldr	r3, [pc, #412]	; (8001464 <homing+0x314>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012cc:	ee17 2a90 	vmov	r2, s15
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <homing+0x31c>)
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012e6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001428 <homing+0x2d8>
 80012ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <homing+0x320>)
 80012f0:	ed93 7b00 	vldr	d7, [r3]
 80012f4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001430 <homing+0x2e0>
 80012f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012fc:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8001438 <homing+0x2e8>
 8001300:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001308:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800130c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001310:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001314:	ee17 2a90 	vmov	r2, s15
 8001318:	4b52      	ldr	r3, [pc, #328]	; (8001464 <homing+0x314>)
 800131a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <homing+0x31c>)
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001328:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800132c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001330:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8001428 <homing+0x2d8>
 8001334:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <homing+0x320>)
 800133a:	ed93 7b00 	vldr	d7, [r3]
 800133e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001430 <homing+0x2e0>
 8001342:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001346:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8001438 <homing+0x2e8>
 800134a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800134e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001352:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001356:	ee37 7b46 	vsub.f64	d7, d7, d6
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <homing+0x318>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001362:	ee17 2a90 	vmov	r2, s15
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <homing+0x31c>)
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001374:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001378:	ee37 7b06 	vadd.f64	d7, d7, d6
 800137c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001428 <homing+0x2d8>
 8001380:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <homing+0x320>)
 8001386:	ed93 7b00 	vldr	d7, [r3]
 800138a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001430 <homing+0x2e0>
 800138e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001392:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8001438 <homing+0x2e8>
 8001396:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800139a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800139e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013aa:	ee17 2a90 	vmov	r2, s15
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <homing+0x318>)
 80013b0:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim2,3000); //Escritura del registro ARR
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <homing+0x30c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <homing+0x30c>)
 80013be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013c2:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <homing+0x31c>)
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80013d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <homing+0x31c>)
 80013da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013de:	ee17 2a90 	vmov	r2, s15
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <homing+0x324>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80013f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <homing+0x324>)
 80013fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <homing+0x328>)
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001410:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001414:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <homing+0x328>)
 800141a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800141e:	ee17 2a90 	vmov	r2, s15
 8001422:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8001424:	e072      	b.n	800150c <homing+0x3bc>
 8001426:	bf00      	nop
 8001428:	00000000 	.word	0x00000000
 800142c:	418e8480 	.word	0x418e8480
 8001430:	00000000 	.word	0x00000000
 8001434:	40bf4000 	.word	0x40bf4000
 8001438:	00000000 	.word	0x00000000
 800143c:	404e0000 	.word	0x404e0000
 8001440:	240002ec 	.word	0x240002ec
 8001444:	240002ed 	.word	0x240002ed
 8001448:	240002ee 	.word	0x240002ee
 800144c:	24000630 	.word	0x24000630
 8001450:	24000668 	.word	0x24000668
 8001454:	240006a0 	.word	0x240006a0
 8001458:	58020800 	.word	0x58020800
 800145c:	240007f8 	.word	0x240007f8
 8001460:	24000890 	.word	0x24000890
 8001464:	240008dc 	.word	0x240008dc
 8001468:	24000928 	.word	0x24000928
 800146c:	40001800 	.word	0x40001800
 8001470:	24000000 	.word	0x24000000
 8001474:	40001c00 	.word	0x40001c00
 8001478:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 800147c:	2100      	movs	r1, #0
 800147e:	4893      	ldr	r0, [pc, #588]	; (80016cc <homing+0x57c>)
 8001480:	f00a fffa 	bl	800c478 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8001484:	2100      	movs	r1, #0
 8001486:	4892      	ldr	r0, [pc, #584]	; (80016d0 <homing+0x580>)
 8001488:	f00a fff6 	bl	800c478 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 800148c:	2100      	movs	r1, #0
 800148e:	4891      	ldr	r0, [pc, #580]	; (80016d4 <homing+0x584>)
 8001490:	f00a fff2 	bl	800c478 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001494:	2101      	movs	r1, #1
 8001496:	4890      	ldr	r0, [pc, #576]	; (80016d8 <homing+0x588>)
 8001498:	f008 fa4e 	bl	8009938 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00d      	beq.n	80014be <homing+0x36e>
 80014a2:	2104      	movs	r1, #4
 80014a4:	488c      	ldr	r0, [pc, #560]	; (80016d8 <homing+0x588>)
 80014a6:	f008 fa47 	bl	8009938 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <homing+0x36e>
 80014b0:	2110      	movs	r1, #16
 80014b2:	4889      	ldr	r0, [pc, #548]	; (80016d8 <homing+0x588>)
 80014b4:	f008 fa40 	bl	8009938 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d126      	bne.n	800150c <homing+0x3bc>
            HAL_Delay(30);
 80014be:	201e      	movs	r0, #30
 80014c0:	f005 f8dc 	bl	800667c <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 80014c4:	2101      	movs	r1, #1
 80014c6:	4884      	ldr	r0, [pc, #528]	; (80016d8 <homing+0x588>)
 80014c8:	f008 fa36 	bl	8009938 <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <homing+0x39e>
 80014d2:	2104      	movs	r1, #4
 80014d4:	4880      	ldr	r0, [pc, #512]	; (80016d8 <homing+0x588>)
 80014d6:	f008 fa2f 	bl	8009938 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <homing+0x39e>
 80014e0:	2110      	movs	r1, #16
 80014e2:	487d      	ldr	r0, [pc, #500]	; (80016d8 <homing+0x588>)
 80014e4:	f008 fa28 	bl	8009938 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <homing+0x3bc>

                Stop_PWM_MOTOR_1;
 80014ee:	2100      	movs	r1, #0
 80014f0:	4876      	ldr	r0, [pc, #472]	; (80016cc <homing+0x57c>)
 80014f2:	f00b f8cf 	bl	800c694 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 80014f6:	2100      	movs	r1, #0
 80014f8:	4875      	ldr	r0, [pc, #468]	; (80016d0 <homing+0x580>)
 80014fa:	f00b f8cb 	bl	800c694 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 80014fe:	2100      	movs	r1, #0
 8001500:	4874      	ldr	r0, [pc, #464]	; (80016d4 <homing+0x584>)
 8001502:	f00b f8c7 	bl	800c694 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8001506:	4b75      	ldr	r3, [pc, #468]	; (80016dc <homing+0x58c>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 800150c:	4b73      	ldr	r3, [pc, #460]	; (80016dc <homing+0x58c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1b3      	bne.n	800147c <homing+0x32c>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 8001514:	e166      	b.n	80017e4 <homing+0x694>

        if (ES1s_PRESSED && !motor1.hom) {
 8001516:	2101      	movs	r1, #1
 8001518:	486f      	ldr	r0, [pc, #444]	; (80016d8 <homing+0x588>)
 800151a:	f008 fa0d 	bl	8009938 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d15c      	bne.n	80015de <homing+0x48e>
 8001524:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <homing+0x590>)
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d158      	bne.n	80015de <homing+0x48e>

            Stop_PWM_MOTOR_2;
 800152c:	2100      	movs	r1, #0
 800152e:	4868      	ldr	r0, [pc, #416]	; (80016d0 <homing+0x580>)
 8001530:	f00b f8b0 	bl	800c694 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001534:	2100      	movs	r1, #0
 8001536:	4867      	ldr	r0, [pc, #412]	; (80016d4 <homing+0x584>)
 8001538:	f00b f8ac 	bl	800c694 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 800153c:	201e      	movs	r0, #30
 800153e:	f005 f89d 	bl	800667c <HAL_Delay>

            while(ES1s_PRESSED){
 8001542:	e010      	b.n	8001566 <homing+0x416>

                negative_Dir_MOTOR_1;
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4866      	ldr	r0, [pc, #408]	; (80016e4 <homing+0x594>)
 800154c:	f008 fa0c 	bl	8009968 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 8001550:	2000      	movs	r0, #0
 8001552:	f005 f893 	bl	800667c <HAL_Delay>
                Start_PWM_MOTOR_1;
 8001556:	2100      	movs	r1, #0
 8001558:	485c      	ldr	r0, [pc, #368]	; (80016cc <homing+0x57c>)
 800155a:	f00a ff8d 	bl	800c478 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 800155e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001562:	f005 f88b 	bl	800667c <HAL_Delay>
            while(ES1s_PRESSED){
 8001566:	2101      	movs	r1, #1
 8001568:	485b      	ldr	r0, [pc, #364]	; (80016d8 <homing+0x588>)
 800156a:	f008 f9e5 	bl	8009938 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0e7      	beq.n	8001544 <homing+0x3f4>

            }

            Stop_PWM_MOTOR_1;
 8001574:	2100      	movs	r1, #0
 8001576:	4855      	ldr	r0, [pc, #340]	; (80016cc <homing+0x57c>)
 8001578:	f00b f88c 	bl	800c694 <HAL_TIM_PWM_Stop>
            motor1.theta = 0.0;
 800157c:	4958      	ldr	r1, [pc, #352]	; (80016e0 <homing+0x590>)
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9c1 2302 	strd	r2, r3, [r1, #8]
            motor1.hom=true;
 800158a:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <homing+0x590>)
 800158c:	2201      	movs	r2, #1
 800158e:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	2204      	movs	r2, #4
 8001594:	4954      	ldr	r1, [pc, #336]	; (80016e8 <homing+0x598>)
 8001596:	4855      	ldr	r0, [pc, #340]	; (80016ec <homing+0x59c>)
 8001598:	f00c ff4e 	bl	800e438 <HAL_UART_Transmit>
            HAL_Delay(30);
 800159c:	201e      	movs	r0, #30
 800159e:	f005 f86d 	bl	800667c <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80015a2:	2104      	movs	r1, #4
 80015a4:	484c      	ldr	r0, [pc, #304]	; (80016d8 <homing+0x588>)
 80015a6:	f008 f9c7 	bl	8009938 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <homing+0x470>
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <homing+0x5a0>)
 80015b2:	7e1b      	ldrb	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <homing+0x470>
 80015b8:	2100      	movs	r1, #0
 80015ba:	4845      	ldr	r0, [pc, #276]	; (80016d0 <homing+0x580>)
 80015bc:	f00a ff5c 	bl	800c478 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80015c0:	2110      	movs	r1, #16
 80015c2:	4845      	ldr	r0, [pc, #276]	; (80016d8 <homing+0x588>)
 80015c4:	f008 f9b8 	bl	8009938 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <homing+0x48e>
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <homing+0x5a4>)
 80015d0:	7e1b      	ldrb	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d103      	bne.n	80015de <homing+0x48e>
 80015d6:	2100      	movs	r1, #0
 80015d8:	483e      	ldr	r0, [pc, #248]	; (80016d4 <homing+0x584>)
 80015da:	f00a ff4d 	bl	800c478 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 80015de:	2104      	movs	r1, #4
 80015e0:	483d      	ldr	r0, [pc, #244]	; (80016d8 <homing+0x588>)
 80015e2:	f008 f9a9 	bl	8009938 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d15c      	bne.n	80016a6 <homing+0x556>
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <homing+0x5a0>)
 80015ee:	7e1b      	ldrb	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d158      	bne.n	80016a6 <homing+0x556>

            Stop_PWM_MOTOR_1;
 80015f4:	2100      	movs	r1, #0
 80015f6:	4835      	ldr	r0, [pc, #212]	; (80016cc <homing+0x57c>)
 80015f8:	f00b f84c 	bl	800c694 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80015fc:	2100      	movs	r1, #0
 80015fe:	4835      	ldr	r0, [pc, #212]	; (80016d4 <homing+0x584>)
 8001600:	f00b f848 	bl	800c694 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 8001604:	201e      	movs	r0, #30
 8001606:	f005 f839 	bl	800667c <HAL_Delay>

            while(ES2s_PRESSED){
 800160a:	e010      	b.n	800162e <homing+0x4de>

                negative_Dir_MOTOR_2;
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001612:	4834      	ldr	r0, [pc, #208]	; (80016e4 <homing+0x594>)
 8001614:	f008 f9a8 	bl	8009968 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001618:	2000      	movs	r0, #0
 800161a:	f005 f82f 	bl	800667c <HAL_Delay>
                Start_PWM_MOTOR_2;
 800161e:	2100      	movs	r1, #0
 8001620:	482b      	ldr	r0, [pc, #172]	; (80016d0 <homing+0x580>)
 8001622:	f00a ff29 	bl	800c478 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f005 f827 	bl	800667c <HAL_Delay>
            while(ES2s_PRESSED){
 800162e:	2104      	movs	r1, #4
 8001630:	4829      	ldr	r0, [pc, #164]	; (80016d8 <homing+0x588>)
 8001632:	f008 f981 	bl	8009938 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e7      	beq.n	800160c <homing+0x4bc>

            }

            Stop_PWM_MOTOR_2;
 800163c:	2100      	movs	r1, #0
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <homing+0x580>)
 8001640:	f00b f828 	bl	800c694 <HAL_TIM_PWM_Stop>
            motor2.theta = 0.0;
 8001644:	492a      	ldr	r1, [pc, #168]	; (80016f0 <homing+0x5a0>)
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            motor2.hom=true;
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <homing+0x5a0>)
 8001654:	2201      	movs	r2, #1
 8001656:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	2204      	movs	r2, #4
 800165c:	4926      	ldr	r1, [pc, #152]	; (80016f8 <homing+0x5a8>)
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <homing+0x59c>)
 8001660:	f00c feea 	bl	800e438 <HAL_UART_Transmit>
            HAL_Delay(30);
 8001664:	201e      	movs	r0, #30
 8001666:	f005 f809 	bl	800667c <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 800166a:	2101      	movs	r1, #1
 800166c:	481a      	ldr	r0, [pc, #104]	; (80016d8 <homing+0x588>)
 800166e:	f008 f963 	bl	8009938 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <homing+0x538>
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <homing+0x590>)
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <homing+0x538>
 8001680:	2100      	movs	r1, #0
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <homing+0x57c>)
 8001684:	f00a fef8 	bl	800c478 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001688:	2110      	movs	r1, #16
 800168a:	4813      	ldr	r0, [pc, #76]	; (80016d8 <homing+0x588>)
 800168c:	f008 f954 	bl	8009938 <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <homing+0x556>
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <homing+0x5a4>)
 8001698:	7e1b      	ldrb	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <homing+0x556>
 800169e:	2100      	movs	r1, #0
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <homing+0x584>)
 80016a2:	f00a fee9 	bl	800c478 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 80016a6:	2110      	movs	r1, #16
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <homing+0x588>)
 80016aa:	f008 f945 	bl	8009938 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d170      	bne.n	8001796 <homing+0x646>

            Stop_PWM_MOTOR_1;
 80016b4:	2100      	movs	r1, #0
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <homing+0x57c>)
 80016b8:	f00a ffec 	bl	800c694 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 80016bc:	2100      	movs	r1, #0
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <homing+0x580>)
 80016c0:	f00a ffe8 	bl	800c694 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 80016c4:	201e      	movs	r0, #30
 80016c6:	f004 ffd9 	bl	800667c <HAL_Delay>

            while(ES3s_PRESSED){
 80016ca:	e028      	b.n	800171e <homing+0x5ce>
 80016cc:	24000890 	.word	0x24000890
 80016d0:	240008dc 	.word	0x240008dc
 80016d4:	24000928 	.word	0x24000928
 80016d8:	58021000 	.word	0x58021000
 80016dc:	240002ec 	.word	0x240002ec
 80016e0:	24000630 	.word	0x24000630
 80016e4:	58020800 	.word	0x58020800
 80016e8:	08014060 	.word	0x08014060
 80016ec:	24000ca4 	.word	0x24000ca4
 80016f0:	24000668 	.word	0x24000668
 80016f4:	240006a0 	.word	0x240006a0
 80016f8:	08014064 	.word	0x08014064

                negative_Dir_MOTOR_3;
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	483c      	ldr	r0, [pc, #240]	; (80017f4 <homing+0x6a4>)
 8001704:	f008 f930 	bl	8009968 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001708:	2000      	movs	r0, #0
 800170a:	f004 ffb7 	bl	800667c <HAL_Delay>
                Start_PWM_MOTOR_3;
 800170e:	2100      	movs	r1, #0
 8001710:	4839      	ldr	r0, [pc, #228]	; (80017f8 <homing+0x6a8>)
 8001712:	f00a feb1 	bl	800c478 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171a:	f004 ffaf 	bl	800667c <HAL_Delay>
            while(ES3s_PRESSED){
 800171e:	2110      	movs	r1, #16
 8001720:	4836      	ldr	r0, [pc, #216]	; (80017fc <homing+0x6ac>)
 8001722:	f008 f909 	bl	8009938 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e7      	beq.n	80016fc <homing+0x5ac>
            }

            Stop_PWM_MOTOR_3;
 800172c:	2100      	movs	r1, #0
 800172e:	4832      	ldr	r0, [pc, #200]	; (80017f8 <homing+0x6a8>)
 8001730:	f00a ffb0 	bl	800c694 <HAL_TIM_PWM_Stop>
            motor3.theta = 0.0;
 8001734:	4932      	ldr	r1, [pc, #200]	; (8001800 <homing+0x6b0>)
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            motor3.hom = true;
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <homing+0x6b0>)
 8001744:	2201      	movs	r2, #1
 8001746:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	2204      	movs	r2, #4
 800174c:	492d      	ldr	r1, [pc, #180]	; (8001804 <homing+0x6b4>)
 800174e:	482e      	ldr	r0, [pc, #184]	; (8001808 <homing+0x6b8>)
 8001750:	f00c fe72 	bl	800e438 <HAL_UART_Transmit>
			HAL_Delay(30);
 8001754:	201e      	movs	r0, #30
 8001756:	f004 ff91 	bl	800667c <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 800175a:	2101      	movs	r1, #1
 800175c:	4827      	ldr	r0, [pc, #156]	; (80017fc <homing+0x6ac>)
 800175e:	f008 f8eb 	bl	8009938 <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <homing+0x628>
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <homing+0x6bc>)
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <homing+0x628>
 8001770:	2100      	movs	r1, #0
 8001772:	4827      	ldr	r0, [pc, #156]	; (8001810 <homing+0x6c0>)
 8001774:	f00a fe80 	bl	800c478 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001778:	2104      	movs	r1, #4
 800177a:	4820      	ldr	r0, [pc, #128]	; (80017fc <homing+0x6ac>)
 800177c:	f008 f8dc 	bl	8009938 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <homing+0x646>
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <homing+0x6c4>)
 8001788:	7e1b      	ldrb	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <homing+0x646>
 800178e:	2100      	movs	r1, #0
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <homing+0x6c8>)
 8001792:	f00a fe71 	bl	800c478 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <homing+0x6bc>)
 8001798:	7e1b      	ldrb	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d022      	beq.n	80017e4 <homing+0x694>
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <homing+0x6c4>)
 80017a0:	7e1b      	ldrb	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01e      	beq.n	80017e4 <homing+0x694>
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <homing+0x6b0>)
 80017a8:	7e1b      	ldrb	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01a      	beq.n	80017e4 <homing+0x694>
        	homFin=true;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <homing+0x6cc>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
        	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_ALL);	//Enciendo interrupcion input capture motor 1
        	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);	//Enciendo interrupcion input capture motor 2
        	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);	//Enciendo interrupcion input capture motor 3


        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 80017b4:	2006      	movs	r0, #6
 80017b6:	f005 f8aa 	bl	800690e <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 80017ba:	2007      	movs	r0, #7
 80017bc:	f005 f8a7 	bl	800690e <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 80017c0:	2008      	movs	r0, #8
 80017c2:	f005 f8a4 	bl	800690e <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 80017c6:	2009      	movs	r0, #9
 80017c8:	f005 f8a1 	bl	800690e <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 80017cc:	200a      	movs	r0, #10
 80017ce:	f005 f89e 	bl	800690e <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 80017d2:	2017      	movs	r0, #23
 80017d4:	f005 f89b 	bl	800690e <HAL_NVIC_EnableIRQ>


        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	2204      	movs	r2, #4
 80017dc:	4910      	ldr	r1, [pc, #64]	; (8001820 <homing+0x6d0>)
 80017de:	480a      	ldr	r0, [pc, #40]	; (8001808 <homing+0x6b8>)
 80017e0:	f00c fe2a 	bl	800e438 <HAL_UART_Transmit>
    while (!homFin){
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <homing+0x6cc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f43f ae94 	beq.w	8001516 <homing+0x3c6>
        }
       }


    }
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	58020800 	.word	0x58020800
 80017f8:	24000928 	.word	0x24000928
 80017fc:	58021000 	.word	0x58021000
 8001800:	240006a0 	.word	0x240006a0
 8001804:	08014068 	.word	0x08014068
 8001808:	24000ca4 	.word	0x24000ca4
 800180c:	24000630 	.word	0x24000630
 8001810:	24000890 	.word	0x24000890
 8001814:	24000668 	.word	0x24000668
 8001818:	240008dc 	.word	0x240008dc
 800181c:	240002ee 	.word	0x240002ee
 8001820:	0801406c 	.word	0x0801406c
 8001824:	00000000 	.word	0x00000000

08001828 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <interpretaComando+0x228>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b70      	cmp	r3, #112	; 0x70
 8001834:	d035      	beq.n	80018a2 <interpretaComando+0x7a>
 8001836:	2b70      	cmp	r3, #112	; 0x70
 8001838:	f300 8102 	bgt.w	8001a40 <interpretaComando+0x218>
 800183c:	2b68      	cmp	r3, #104	; 0x68
 800183e:	d007      	beq.n	8001850 <interpretaComando+0x28>
 8001840:	2b68      	cmp	r3, #104	; 0x68
 8001842:	f300 80fd 	bgt.w	8001a40 <interpretaComando+0x218>
 8001846:	2b48      	cmp	r3, #72	; 0x48
 8001848:	d002      	beq.n	8001850 <interpretaComando+0x28>
 800184a:	2b50      	cmp	r3, #80	; 0x50
 800184c:	d029      	beq.n	80018a2 <interpretaComando+0x7a>



	}

}
 800184e:	e0f7      	b.n	8001a40 <interpretaComando+0x218>
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2110      	movs	r1, #16
 8001854:	487f      	ldr	r0, [pc, #508]	; (8001a54 <interpretaComando+0x22c>)
 8001856:	f008 f887 	bl	8009968 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	487d      	ldr	r0, [pc, #500]	; (8001a54 <interpretaComando+0x22c>)
 8001860:	f008 f882 	bl	8009968 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2140      	movs	r1, #64	; 0x40
 8001868:	487a      	ldr	r0, [pc, #488]	; (8001a54 <interpretaComando+0x22c>)
 800186a:	f008 f87d 	bl	8009968 <HAL_GPIO_WritePin>
		HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 800186e:	2032      	movs	r0, #50	; 0x32
 8001870:	f004 ff04 	bl	800667c <HAL_Delay>
		homing();
 8001874:	f7ff fc6c 	bl	8001150 <homing>
		Pini.x=0;
 8001878:	4977      	ldr	r1, [pc, #476]	; (8001a58 <interpretaComando+0x230>)
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 8001886:	4974      	ldr	r1, [pc, #464]	; (8001a58 <interpretaComando+0x230>)
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z =-0.5208; //antes era -0.33
 8001894:	4970      	ldr	r1, [pc, #448]	; (8001a58 <interpretaComando+0x230>)
 8001896:	a36c      	add	r3, pc, #432	; (adr r3, 8001a48 <interpretaComando+0x220>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	break;
 80018a0:	e0ce      	b.n	8001a40 <interpretaComando+0x218>
		flagErrorEndStop = 0;
 80018a2:	496e      	ldr	r1, [pc, #440]	; (8001a5c <interpretaComando+0x234>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 80018b8:	e0ac      	b.n	8001a14 <interpretaComando+0x1ec>
			if(rx_buffer[i] == 'x'){
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <interpretaComando+0x228>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	2b78      	cmp	r3, #120	; 0x78
 80018c2:	d133      	bne.n	800192c <interpretaComando+0x104>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018c4:	e00c      	b.n	80018e0 <interpretaComando+0xb8>
					auxString[j] = rx_buffer[i+1];
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	4960      	ldr	r1, [pc, #384]	; (8001a50 <interpretaComando+0x228>)
 80018ce:	5c89      	ldrb	r1, [r1, r2]
 80018d0:	4a63      	ldr	r2, [pc, #396]	; (8001a60 <interpretaComando+0x238>)
 80018d2:	54d1      	strb	r1, [r2, r3]
					j++;
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73bb      	strb	r3, [r7, #14]
					i++;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a5a      	ldr	r2, [pc, #360]	; (8001a50 <interpretaComando+0x228>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d1ec      	bne.n	80018c6 <interpretaComando+0x9e>
				Pfin.x = strtod(&auxString[0], NULL);
 80018ec:	2100      	movs	r1, #0
 80018ee:	485c      	ldr	r0, [pc, #368]	; (8001a60 <interpretaComando+0x238>)
 80018f0:	f00f fec0 	bl	8011674 <strtod>
 80018f4:	eeb0 7b40 	vmov.f64	d7, d0
 80018f8:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <interpretaComando+0x23c>)
 80018fa:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	e007      	b.n	8001914 <interpretaComando+0xec>
					auxString[k] = 0;
 8001904:	4a56      	ldr	r2, [pc, #344]	; (8001a60 <interpretaComando+0x238>)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4413      	add	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3301      	adds	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b0a      	cmp	r3, #10
 8001918:	ddf4      	ble.n	8001904 <interpretaComando+0xdc>
				j=0;
 800191a:	2300      	movs	r3, #0
 800191c:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2207      	movs	r2, #7
 8001922:	4951      	ldr	r1, [pc, #324]	; (8001a68 <interpretaComando+0x240>)
 8001924:	4851      	ldr	r0, [pc, #324]	; (8001a6c <interpretaComando+0x244>)
 8001926:	f00c fd87 	bl	800e438 <HAL_UART_Transmit>
 800192a:	e070      	b.n	8001a0e <interpretaComando+0x1e6>
			else if(rx_buffer[i] == 'y'){
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <interpretaComando+0x228>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	2b79      	cmp	r3, #121	; 0x79
 8001934:	d133      	bne.n	800199e <interpretaComando+0x176>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001936:	e00c      	b.n	8001952 <interpretaComando+0x12a>
					auxString[j] = rx_buffer[i+1];
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	4944      	ldr	r1, [pc, #272]	; (8001a50 <interpretaComando+0x228>)
 8001940:	5c89      	ldrb	r1, [r1, r2]
 8001942:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <interpretaComando+0x238>)
 8001944:	54d1      	strb	r1, [r2, r3]
					j++;
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	3301      	adds	r3, #1
 800194a:	73bb      	strb	r3, [r7, #14]
					i++;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <interpretaComando+0x228>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	2b20      	cmp	r3, #32
 800195c:	d1ec      	bne.n	8001938 <interpretaComando+0x110>
				Pfin.y = strtod(&auxString[0], NULL);
 800195e:	2100      	movs	r1, #0
 8001960:	483f      	ldr	r0, [pc, #252]	; (8001a60 <interpretaComando+0x238>)
 8001962:	f00f fe87 	bl	8011674 <strtod>
 8001966:	eeb0 7b40 	vmov.f64	d7, d0
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <interpretaComando+0x23c>)
 800196c:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	e007      	b.n	8001986 <interpretaComando+0x15e>
					auxString[k] = 0;
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <interpretaComando+0x238>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0a      	cmp	r3, #10
 800198a:	ddf4      	ble.n	8001976 <interpretaComando+0x14e>
				j=0;
 800198c:	2300      	movs	r3, #0
 800198e:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	2207      	movs	r2, #7
 8001994:	4936      	ldr	r1, [pc, #216]	; (8001a70 <interpretaComando+0x248>)
 8001996:	4835      	ldr	r0, [pc, #212]	; (8001a6c <interpretaComando+0x244>)
 8001998:	f00c fd4e 	bl	800e438 <HAL_UART_Transmit>
 800199c:	e037      	b.n	8001a0e <interpretaComando+0x1e6>
			else if(rx_buffer[i] == 'z'){
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <interpretaComando+0x228>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	2b7a      	cmp	r3, #122	; 0x7a
 80019a6:	d132      	bne.n	8001a0e <interpretaComando+0x1e6>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019a8:	e00c      	b.n	80019c4 <interpretaComando+0x19c>
					auxString[j] = rx_buffer[i+1];
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	4927      	ldr	r1, [pc, #156]	; (8001a50 <interpretaComando+0x228>)
 80019b2:	5c89      	ldrb	r1, [r1, r2]
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <interpretaComando+0x238>)
 80019b6:	54d1      	strb	r1, [r2, r3]
					j++;
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	3301      	adds	r3, #1
 80019bc:	73bb      	strb	r3, [r7, #14]
					i++;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	3301      	adds	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <interpretaComando+0x228>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d1ec      	bne.n	80019aa <interpretaComando+0x182>
				Pfin.z = strtod(&auxString[0], NULL);
 80019d0:	2100      	movs	r1, #0
 80019d2:	4823      	ldr	r0, [pc, #140]	; (8001a60 <interpretaComando+0x238>)
 80019d4:	f00f fe4e 	bl	8011674 <strtod>
 80019d8:	eeb0 7b40 	vmov.f64	d7, d0
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <interpretaComando+0x23c>)
 80019de:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	e007      	b.n	80019f8 <interpretaComando+0x1d0>
					auxString[k] = 0;
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <interpretaComando+0x238>)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	ddf4      	ble.n	80019e8 <interpretaComando+0x1c0>
				j=0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 8001a02:	2364      	movs	r3, #100	; 0x64
 8001a04:	2207      	movs	r2, #7
 8001a06:	491b      	ldr	r1, [pc, #108]	; (8001a74 <interpretaComando+0x24c>)
 8001a08:	4818      	ldr	r0, [pc, #96]	; (8001a6c <interpretaComando+0x244>)
 8001a0a:	f00c fd15 	bl	800e438 <HAL_UART_Transmit>
			i++;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <interpretaComando+0x228>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f af4d 	bne.w	80018ba <interpretaComando+0x92>
		inverseKinematic(Pfin);
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <interpretaComando+0x23c>)
 8001a22:	ed93 5b00 	vldr	d5, [r3]
 8001a26:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a2e:	eeb0 0b45 	vmov.f64	d0, d5
 8001a32:	eeb0 1b46 	vmov.f64	d1, d6
 8001a36:	eeb0 2b47 	vmov.f64	d2, d7
 8001a3a:	f000 fb45 	bl	80020c8 <inverseKinematic>
		break;
 8001a3e:	bf00      	nop
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	c2f837b5 	.word	0xc2f837b5
 8001a4c:	bfe0aa64 	.word	0xbfe0aa64
 8001a50:	240007b4 	.word	0x240007b4
 8001a54:	58020c00 	.word	0x58020c00
 8001a58:	24000738 	.word	0x24000738
 8001a5c:	240007d8 	.word	0x240007d8
 8001a60:	240002f0 	.word	0x240002f0
 8001a64:	24000750 	.word	0x24000750
 8001a68:	08014070 	.word	0x08014070
 8001a6c:	24000ca4 	.word	0x24000ca4
 8001a70:	08014078 	.word	0x08014078
 8001a74:	08014080 	.word	0x08014080

08001a78 <inverseJacobian>:
double cross_P2[3];
double cross_P3[3];
double dot[3];


void inverseJacobian(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b0ad      	sub	sp, #180	; 0xb4
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8001a82:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8001a86:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8001a8a:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8001a8e:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8001a92:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8001a96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a9a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8001a9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001aa2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001aa6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001aaa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8001aae:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001ab2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001dc0 <inverseJacobian+0x348>
 8001ab6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001aba:	4bc9      	ldr	r3, [pc, #804]	; (8001de0 <inverseJacobian+0x368>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8001ac0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001ac4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001dc8 <inverseJacobian+0x350>
 8001ac8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001acc:	4bc4      	ldr	r3, [pc, #784]	; (8001de0 <inverseJacobian+0x368>)
 8001ace:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8001ad2:	49c3      	ldr	r1, [pc, #780]	; (8001de0 <inverseJacobian+0x368>)
 8001ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ad8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E2[0] = Pxaux + 0.060621778264911;
 8001adc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001ae0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8001dd0 <inverseJacobian+0x358>
 8001ae4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ae8:	4bbe      	ldr	r3, [pc, #760]	; (8001de4 <inverseJacobian+0x36c>)
 8001aea:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8001aee:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001af2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001dd8 <inverseJacobian+0x360>
 8001af6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001afa:	4bba      	ldr	r3, [pc, #744]	; (8001de4 <inverseJacobian+0x36c>)
 8001afc:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8001b00:	49b8      	ldr	r1, [pc, #736]	; (8001de4 <inverseJacobian+0x36c>)
 8001b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b06:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E3[0] = Pxaux - 0.060621778264911;
 8001b0a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001b0e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001dd0 <inverseJacobian+0x358>
 8001b12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b16:	4bb4      	ldr	r3, [pc, #720]	; (8001de8 <inverseJacobian+0x370>)
 8001b18:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8001b1c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001b20:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001dd8 <inverseJacobian+0x360>
 8001b24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b28:	4baf      	ldr	r3, [pc, #700]	; (8001de8 <inverseJacobian+0x370>)
 8001b2a:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8001b2e:	49ae      	ldr	r1, [pc, #696]	; (8001de8 <inverseJacobian+0x370>)
 8001b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b34:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8001b38:	4bac      	ldr	r3, [pc, #688]	; (8001dec <inverseJacobian+0x374>)
 8001b3a:	ed93 6b00 	vldr	d6, [r3]
 8001b3e:	4bac      	ldr	r3, [pc, #688]	; (8001df0 <inverseJacobian+0x378>)
 8001b40:	ed93 7b00 	vldr	d7, [r3]
 8001b44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b48:	4baa      	ldr	r3, [pc, #680]	; (8001df4 <inverseJacobian+0x37c>)
 8001b4a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8001b4e:	4baa      	ldr	r3, [pc, #680]	; (8001df8 <inverseJacobian+0x380>)
 8001b50:	ed93 6b00 	vldr	d6, [r3]
 8001b54:	4ba6      	ldr	r3, [pc, #664]	; (8001df0 <inverseJacobian+0x378>)
 8001b56:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b5e:	4ba5      	ldr	r3, [pc, #660]	; (8001df4 <inverseJacobian+0x37c>)
 8001b60:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8001b64:	4ba5      	ldr	r3, [pc, #660]	; (8001dfc <inverseJacobian+0x384>)
 8001b66:	ed93 6b00 	vldr	d6, [r3]
 8001b6a:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <inverseJacobian+0x378>)
 8001b6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b74:	4b9f      	ldr	r3, [pc, #636]	; (8001df4 <inverseJacobian+0x37c>)
 8001b76:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8001b7a:	4ba1      	ldr	r3, [pc, #644]	; (8001e00 <inverseJacobian+0x388>)
 8001b7c:	ed93 6b00 	vldr	d6, [r3]
 8001b80:	4ba0      	ldr	r3, [pc, #640]	; (8001e04 <inverseJacobian+0x38c>)
 8001b82:	ed93 7b00 	vldr	d7, [r3]
 8001b86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b8a:	4b9a      	ldr	r3, [pc, #616]	; (8001df4 <inverseJacobian+0x37c>)
 8001b8c:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8001b90:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <inverseJacobian+0x390>)
 8001b92:	ed93 6b00 	vldr	d6, [r3]
 8001b96:	4b9b      	ldr	r3, [pc, #620]	; (8001e04 <inverseJacobian+0x38c>)
 8001b98:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ba0:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <inverseJacobian+0x37c>)
 8001ba2:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8001ba6:	4b99      	ldr	r3, [pc, #612]	; (8001e0c <inverseJacobian+0x394>)
 8001ba8:	ed93 6b00 	vldr	d6, [r3]
 8001bac:	4b95      	ldr	r3, [pc, #596]	; (8001e04 <inverseJacobian+0x38c>)
 8001bae:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bb6:	4b8f      	ldr	r3, [pc, #572]	; (8001df4 <inverseJacobian+0x37c>)
 8001bb8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8001bbc:	4b94      	ldr	r3, [pc, #592]	; (8001e10 <inverseJacobian+0x398>)
 8001bbe:	ed93 6b00 	vldr	d6, [r3]
 8001bc2:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <inverseJacobian+0x39c>)
 8001bc4:	ed93 7b00 	vldr	d7, [r3]
 8001bc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bcc:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <inverseJacobian+0x37c>)
 8001bce:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8001bd2:	4b91      	ldr	r3, [pc, #580]	; (8001e18 <inverseJacobian+0x3a0>)
 8001bd4:	ed93 6b00 	vldr	d6, [r3]
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <inverseJacobian+0x39c>)
 8001bda:	ed93 7b02 	vldr	d7, [r3, #8]
 8001bde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001be2:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <inverseJacobian+0x37c>)
 8001be4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <inverseJacobian+0x3a4>)
 8001bea:	ed93 6b00 	vldr	d6, [r3]
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <inverseJacobian+0x39c>)
 8001bf0:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bf4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <inverseJacobian+0x37c>)
 8001bfa:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8001bfe:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <inverseJacobian+0x368>)
 8001c00:	ed93 6b00 	vldr	d6, [r3]
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <inverseJacobian+0x374>)
 8001c06:	ed93 7b00 	vldr	d7, [r3]
 8001c0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c0e:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c10:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8001c14:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <inverseJacobian+0x368>)
 8001c16:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c1a:	4b77      	ldr	r3, [pc, #476]	; (8001df8 <inverseJacobian+0x380>)
 8001c1c:	ed93 7b00 	vldr	d7, [r3]
 8001c20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c26:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <inverseJacobian+0x368>)
 8001c2c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001c30:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <inverseJacobian+0x384>)
 8001c32:	ed93 7b00 	vldr	d7, [r3]
 8001c36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c3a:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c3c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <inverseJacobian+0x36c>)
 8001c42:	ed93 6b00 	vldr	d6, [r3]
 8001c46:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <inverseJacobian+0x388>)
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c50:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c52:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <inverseJacobian+0x36c>)
 8001c58:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <inverseJacobian+0x390>)
 8001c5e:	ed93 7b00 	vldr	d7, [r3]
 8001c62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c66:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c68:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <inverseJacobian+0x36c>)
 8001c6e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001c72:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <inverseJacobian+0x394>)
 8001c74:	ed93 7b00 	vldr	d7, [r3]
 8001c78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c7e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8001c82:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <inverseJacobian+0x370>)
 8001c84:	ed93 6b00 	vldr	d6, [r3]
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <inverseJacobian+0x398>)
 8001c8a:	ed93 7b00 	vldr	d7, [r3]
 8001c8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <inverseJacobian+0x3a8>)
 8001c94:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <inverseJacobian+0x370>)
 8001c9a:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <inverseJacobian+0x3a0>)
 8001ca0:	ed93 7b00 	vldr	d7, [r3]
 8001ca4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <inverseJacobian+0x3a8>)
 8001caa:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8001cae:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <inverseJacobian+0x370>)
 8001cb0:	ed93 6b04 	vldr	d6, [r3, #16]
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <inverseJacobian+0x3a4>)
 8001cb6:	ed93 7b00 	vldr	d7, [r3]
 8001cba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <inverseJacobian+0x3a8>)
 8001cc0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8001cc4:	4c57      	ldr	r4, [pc, #348]	; (8001e24 <inverseJacobian+0x3ac>)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4955      	ldr	r1, [pc, #340]	; (8001e20 <inverseJacobian+0x3a8>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fed6 	bl	8000a7c <transpuesta>
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2248      	movs	r2, #72	; 0x48
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f00e fee6 	bl	8010aa8 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8001cdc:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <inverseJacobian+0x3b0>)
 8001cde:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <inverseJacobian+0x37c>)
 8001ce4:	ed93 7b04 	vldr	d7, [r3, #16]
 8001ce8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <inverseJacobian+0x3b0>)
 8001cee:	ed93 5b04 	vldr	d5, [r3, #16]
 8001cf2:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <inverseJacobian+0x37c>)
 8001cf4:	ed93 7b02 	vldr	d7, [r3, #8]
 8001cf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <inverseJacobian+0x3b4>)
 8001d02:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <inverseJacobian+0x3b0>)
 8001d08:	ed93 6b04 	vldr	d6, [r3, #16]
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <inverseJacobian+0x37c>)
 8001d0e:	ed93 7b00 	vldr	d7, [r3]
 8001d12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <inverseJacobian+0x3b0>)
 8001d18:	ed93 5b00 	vldr	d5, [r3]
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <inverseJacobian+0x37c>)
 8001d1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d26:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <inverseJacobian+0x3b4>)
 8001d2c:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <inverseJacobian+0x3b0>)
 8001d32:	ed93 6b00 	vldr	d6, [r3]
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <inverseJacobian+0x37c>)
 8001d38:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d3c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <inverseJacobian+0x3b0>)
 8001d42:	ed93 5b02 	vldr	d5, [r3, #8]
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <inverseJacobian+0x37c>)
 8001d48:	ed93 7b00 	vldr	d7, [r3]
 8001d4c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <inverseJacobian+0x3b4>)
 8001d56:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <inverseJacobian+0x3b8>)
 8001d5c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <inverseJacobian+0x37c>)
 8001d62:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001d66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <inverseJacobian+0x3b8>)
 8001d6c:	ed93 5b04 	vldr	d5, [r3, #16]
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <inverseJacobian+0x37c>)
 8001d72:	ed93 7b08 	vldr	d7, [r3, #32]
 8001d76:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <inverseJacobian+0x3bc>)
 8001d80:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <inverseJacobian+0x3b8>)
 8001d86:	ed93 6b04 	vldr	d6, [r3, #16]
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <inverseJacobian+0x37c>)
 8001d8c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001d90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <inverseJacobian+0x3b8>)
 8001d96:	ed93 5b00 	vldr	d5, [r3]
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <inverseJacobian+0x37c>)
 8001d9c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001da0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001da4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <inverseJacobian+0x3bc>)
 8001daa:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <inverseJacobian+0x3b8>)
 8001db0:	ed93 6b00 	vldr	d6, [r3]
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <inverseJacobian+0x37c>)
 8001db6:	ed93 7b08 	vldr	d7, [r3, #32]
 8001dba:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001dbe:	e03b      	b.n	8001e38 <inverseJacobian+0x3c0>
	...
 8001dc8:	1eb851ec 	.word	0x1eb851ec
 8001dcc:	3fb1eb85 	.word	0x3fb1eb85
 8001dd0:	562574c0 	.word	0x562574c0
 8001dd4:	3faf09d1 	.word	0x3faf09d1
 8001dd8:	1eb851ec 	.word	0x1eb851ec
 8001ddc:	3fa1eb85 	.word	0x3fa1eb85
 8001de0:	24000300 	.word	0x24000300
 8001de4:	24000318 	.word	0x24000318
 8001de8:	24000330 	.word	0x24000330
 8001dec:	24000570 	.word	0x24000570
 8001df0:	24000008 	.word	0x24000008
 8001df4:	24000348 	.word	0x24000348
 8001df8:	24000580 	.word	0x24000580
 8001dfc:	24000590 	.word	0x24000590
 8001e00:	240005b8 	.word	0x240005b8
 8001e04:	24000020 	.word	0x24000020
 8001e08:	240005c8 	.word	0x240005c8
 8001e0c:	240005d8 	.word	0x240005d8
 8001e10:	24000600 	.word	0x24000600
 8001e14:	24000038 	.word	0x24000038
 8001e18:	24000610 	.word	0x24000610
 8001e1c:	24000620 	.word	0x24000620
 8001e20:	24000390 	.word	0x24000390
 8001e24:	240003d8 	.word	0x240003d8
 8001e28:	24000050 	.word	0x24000050
 8001e2c:	240004f8 	.word	0x240004f8
 8001e30:	24000068 	.word	0x24000068
 8001e34:	24000510 	.word	0x24000510
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <inverseJacobian+0x60c>)
 8001e3a:	ed93 5b02 	vldr	d5, [r3, #8]
 8001e3e:	4b92      	ldr	r3, [pc, #584]	; (8002088 <inverseJacobian+0x610>)
 8001e40:	ed93 7b06 	vldr	d7, [r3, #24]
 8001e44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <inverseJacobian+0x614>)
 8001e4e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8001e52:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <inverseJacobian+0x618>)
 8001e54:	ed93 6b02 	vldr	d6, [r3, #8]
 8001e58:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <inverseJacobian+0x610>)
 8001e5a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001e5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <inverseJacobian+0x618>)
 8001e64:	ed93 5b04 	vldr	d5, [r3, #16]
 8001e68:	4b87      	ldr	r3, [pc, #540]	; (8002088 <inverseJacobian+0x610>)
 8001e6a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001e6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e76:	4b87      	ldr	r3, [pc, #540]	; (8002094 <inverseJacobian+0x61c>)
 8001e78:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8001e7c:	4b84      	ldr	r3, [pc, #528]	; (8002090 <inverseJacobian+0x618>)
 8001e7e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <inverseJacobian+0x610>)
 8001e84:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e8c:	4b80      	ldr	r3, [pc, #512]	; (8002090 <inverseJacobian+0x618>)
 8001e8e:	ed93 5b00 	vldr	d5, [r3]
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <inverseJacobian+0x610>)
 8001e94:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001e98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <inverseJacobian+0x61c>)
 8001ea2:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8001ea6:	4b7a      	ldr	r3, [pc, #488]	; (8002090 <inverseJacobian+0x618>)
 8001ea8:	ed93 6b00 	vldr	d6, [r3]
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <inverseJacobian+0x610>)
 8001eae:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001eb2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <inverseJacobian+0x618>)
 8001eb8:	ed93 5b02 	vldr	d5, [r3, #8]
 8001ebc:	4b72      	ldr	r3, [pc, #456]	; (8002088 <inverseJacobian+0x610>)
 8001ebe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001ec2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ec6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <inverseJacobian+0x61c>)
 8001ecc:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8001ed0:	4971      	ldr	r1, [pc, #452]	; (8002098 <inverseJacobian+0x620>)
 8001ed2:	4872      	ldr	r0, [pc, #456]	; (800209c <inverseJacobian+0x624>)
 8001ed4:	f7fe fe0e 	bl	8000af4 <productDot>
 8001ed8:	eeb0 7b40 	vmov.f64	d7, d0
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <inverseJacobian+0x628>)
 8001ede:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 8001ee2:	4970      	ldr	r1, [pc, #448]	; (80020a4 <inverseJacobian+0x62c>)
 8001ee4:	4869      	ldr	r0, [pc, #420]	; (800208c <inverseJacobian+0x614>)
 8001ee6:	f7fe fe05 	bl	8000af4 <productDot>
 8001eea:	eeb0 7b40 	vmov.f64	d7, d0
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <inverseJacobian+0x628>)
 8001ef0:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 8001ef4:	496c      	ldr	r1, [pc, #432]	; (80020a8 <inverseJacobian+0x630>)
 8001ef6:	4867      	ldr	r0, [pc, #412]	; (8002094 <inverseJacobian+0x61c>)
 8001ef8:	f7fe fdfc 	bl	8000af4 <productDot>
 8001efc:	eeb0 7b40 	vmov.f64	d7, d0
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <inverseJacobian+0x628>)
 8001f02:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f0c:	e03d      	b.n	8001f8a <inverseJacobian+0x512>
		for (int j = 0; j < 3; ++j) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f14:	e030      	b.n	8001f78 <inverseJacobian+0x500>
			if (i == j) {
 8001f16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d114      	bne.n	8001f4c <inverseJacobian+0x4d4>
				Jci[i][j] = dot[i];
 8001f22:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <inverseJacobian+0x628>)
 8001f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f30:	4c5e      	ldr	r4, [pc, #376]	; (80020ac <inverseJacobian+0x634>)
 8001f32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4423      	add	r3, r4
 8001f46:	e9c3 0100 	strd	r0, r1, [r3]
 8001f4a:	e010      	b.n	8001f6e <inverseJacobian+0x4f6>
			} else {
				Jci[i][j] = 0;
 8001f4c:	4957      	ldr	r1, [pc, #348]	; (80020ac <inverseJacobian+0x634>)
 8001f4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4419      	add	r1, r3
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 8001f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f72:	3301      	adds	r3, #1
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	ddca      	ble.n	8001f16 <inverseJacobian+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8001f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	ddbd      	ble.n	8001f0e <inverseJacobian+0x496>
			}
		}
	}

	Jci_inv = inv(Jci);
 8001f92:	4c47      	ldr	r4, [pc, #284]	; (80020b0 <inverseJacobian+0x638>)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4945      	ldr	r1, [pc, #276]	; (80020ac <inverseJacobian+0x634>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fedb 	bl	8000d54 <inv>
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2248      	movs	r2, #72	; 0x48
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f00e fd7f 	bl	8010aa8 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 8001faa:	4c42      	ldr	r4, [pc, #264]	; (80020b4 <inverseJacobian+0x63c>)
 8001fac:	463b      	mov	r3, r7
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <inverseJacobian+0x638>)
 8001fb0:	4939      	ldr	r1, [pc, #228]	; (8002098 <inverseJacobian+0x620>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff3c 	bl	8000e30 <productMatriz>
 8001fb8:	4620      	mov	r0, r4
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2248      	movs	r2, #72	; 0x48
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f00e fd72 	bl	8010aa8 <memcpy>

	for (int i = 0; i < 3; ++i) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fca:	e041      	b.n	8002050 <inverseJacobian+0x5d8>
		double sum = 0;
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fde:	e025      	b.n	800202c <inverseJacobian+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8001fe0:	4934      	ldr	r1, [pc, #208]	; (80020b4 <inverseJacobian+0x63c>)
 8001fe2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	ed93 6b00 	vldr	d6, [r3]
 8001ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	33b0      	adds	r3, #176	; 0xb0
 8002002:	443b      	add	r3, r7
 8002004:	3b38      	subs	r3, #56	; 0x38
 8002006:	ed93 7b00 	vldr	d7, [r3]
 800200a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800200e:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8002012:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002016:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 800201a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800201e:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8002022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002026:	3301      	adds	r3, #1
 8002028:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800202c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002030:	2b02      	cmp	r3, #2
 8002032:	ddd5      	ble.n	8001fe0 <inverseJacobian+0x568>
		}
		omega[i] = sum;
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <inverseJacobian+0x640>)
 8002036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	18d1      	adds	r1, r2, r3
 800203e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002042:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8002046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800204a:	3301      	adds	r3, #1
 800204c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002054:	2b02      	cmp	r3, #2
 8002056:	ddb9      	ble.n	8001fcc <inverseJacobian+0x554>
	}
	motor1.omega = omega[0];
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <inverseJacobian+0x640>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	4917      	ldr	r1, [pc, #92]	; (80020bc <inverseJacobian+0x644>)
 8002060:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.omega = omega[1];
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <inverseJacobian+0x640>)
 8002066:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800206a:	4915      	ldr	r1, [pc, #84]	; (80020c0 <inverseJacobian+0x648>)
 800206c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.omega = omega[2];
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <inverseJacobian+0x640>)
 8002072:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002076:	4913      	ldr	r1, [pc, #76]	; (80020c4 <inverseJacobian+0x64c>)
 8002078:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 800207c:	bf00      	nop
 800207e:	37b4      	adds	r7, #180	; 0xb4
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	24000068 	.word	0x24000068
 8002088:	24000348 	.word	0x24000348
 800208c:	24000510 	.word	0x24000510
 8002090:	24000080 	.word	0x24000080
 8002094:	24000528 	.word	0x24000528
 8002098:	240003d8 	.word	0x240003d8
 800209c:	240004f8 	.word	0x240004f8
 80020a0:	24000540 	.word	0x24000540
 80020a4:	240003f0 	.word	0x240003f0
 80020a8:	24000408 	.word	0x24000408
 80020ac:	24000420 	.word	0x24000420
 80020b0:	24000468 	.word	0x24000468
 80020b4:	240004b0 	.word	0x240004b0
 80020b8:	240006f0 	.word	0x240006f0
 80020bc:	24000630 	.word	0x24000630
 80020c0:	24000668 	.word	0x24000668
 80020c4:	240006a0 	.word	0x240006a0

080020c8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	ed2d 8b04 	vpush	{d8-d9}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	eeb0 5b40 	vmov.f64	d5, d0
 80020d6:	eeb0 6b41 	vmov.f64	d6, d1
 80020da:	eeb0 7b42 	vmov.f64	d7, d2
 80020de:	ed87 5b00 	vstr	d5, [r7]
 80020e2:	ed87 6b02 	vstr	d6, [r7, #8]
 80020e6:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80020ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80020ee:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80024a8 <inverseKinematic+0x3e0>
 80020f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020f6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80024b0 <inverseKinematic+0x3e8>
 80020fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020fe:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002102:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002106:	ed97 7b04 	vldr	d7, [r7, #16]
 800210a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800210e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002112:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002116:	eeb0 0b45 	vmov.f64	d0, d5
 800211a:	f011 fb65 	bl	80137e8 <pow>
 800211e:	eeb0 7b40 	vmov.f64	d7, d0
 8002122:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002126:	ee37 7b06 	vadd.f64	d7, d7, d6
 800212a:	4bf9      	ldr	r3, [pc, #996]	; (8002510 <inverseKinematic+0x448>)
 800212c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8002130:	ed97 7b00 	vldr	d7, [r7]
 8002134:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80024b8 <inverseKinematic+0x3f0>
 8002138:	ee37 7b06 	vadd.f64	d7, d7, d6
 800213c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80024c0 <inverseKinematic+0x3f8>
 8002140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002144:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80024c8 <inverseKinematic+0x400>
 8002148:	ee36 6b47 	vsub.f64	d6, d6, d7
 800214c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002150:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80024d0 <inverseKinematic+0x408>
 8002154:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002158:	ee37 7b07 	vadd.f64	d7, d7, d7
 800215c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002160:	ed97 7b04 	vldr	d7, [r7, #16]
 8002164:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002168:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800216c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002170:	eeb0 0b45 	vmov.f64	d0, d5
 8002174:	f011 fb38 	bl	80137e8 <pow>
 8002178:	eeb0 7b40 	vmov.f64	d7, d0
 800217c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002180:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002184:	4be3      	ldr	r3, [pc, #908]	; (8002514 <inverseKinematic+0x44c>)
 8002186:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 800218a:	ed97 7b00 	vldr	d7, [r7]
 800218e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80024b8 <inverseKinematic+0x3f0>
 8002192:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002196:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80024c0 <inverseKinematic+0x3f8>
 800219a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800219e:	ed97 7b02 	vldr	d7, [r7, #8]
 80021a2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 80024d0 <inverseKinematic+0x408>
 80021a6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021b2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80024d8 <inverseKinematic+0x410>
 80021b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021ba:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 80024b0 <inverseKinematic+0x3e8>
 80021be:	ee37 6b06 	vadd.f64	d6, d7, d6
 80021c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021ca:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80021ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021d2:	eeb0 0b45 	vmov.f64	d0, d5
 80021d6:	f011 fb07 	bl	80137e8 <pow>
 80021da:	eeb0 7b40 	vmov.f64	d7, d0
 80021de:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80021e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021e6:	4bcc      	ldr	r3, [pc, #816]	; (8002518 <inverseKinematic+0x450>)
 80021e8:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80021ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80021f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80024a8 <inverseKinematic+0x3e0>
 80021f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021f8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80024b0 <inverseKinematic+0x3e8>
 80021fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002200:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002204:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002208:	ed97 7b04 	vldr	d7, [r7, #16]
 800220c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002210:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002214:	ee37 8b07 	vadd.f64	d8, d7, d7
 8002218:	ed97 7b02 	vldr	d7, [r7, #8]
 800221c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80024a8 <inverseKinematic+0x3e0>
 8002220:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002224:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002228:	eeb0 0b47 	vmov.f64	d0, d7
 800222c:	f011 fadc 	bl	80137e8 <pow>
 8002230:	eeb0 7b40 	vmov.f64	d7, d0
 8002234:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80024e0 <inverseKinematic+0x418>
 8002238:	ee37 9b06 	vadd.f64	d9, d7, d6
 800223c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002240:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002244:	eeb0 0b47 	vmov.f64	d0, d7
 8002248:	f011 face 	bl	80137e8 <pow>
 800224c:	eeb0 7b40 	vmov.f64	d7, d0
 8002250:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002254:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80024e8 <inverseKinematic+0x420>
 8002258:	ee37 9b46 	vsub.f64	d9, d7, d6
 800225c:	ed97 7b00 	vldr	d7, [r7]
 8002260:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002264:	eeb0 0b47 	vmov.f64	d0, d7
 8002268:	f011 fabe 	bl	80137e8 <pow>
 800226c:	eeb0 7b40 	vmov.f64	d7, d0
 8002270:	ee39 5b07 	vadd.f64	d5, d9, d7
 8002274:	ed97 7b04 	vldr	d7, [r7, #16]
 8002278:	ee37 6b07 	vadd.f64	d6, d7, d7
 800227c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002280:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002284:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 80024f0 <inverseKinematic+0x428>
 8002288:	ee37 7b06 	vadd.f64	d7, d7, d6
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <inverseKinematic+0x454>)
 800228e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002292:	ed97 7b00 	vldr	d7, [r7]
 8002296:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80024b8 <inverseKinematic+0x3f0>
 800229a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800229e:	ed9f 6b96 	vldr	d6, [pc, #600]	; 80024f8 <inverseKinematic+0x430>
 80022a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80022aa:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80024d0 <inverseKinematic+0x408>
 80022ae:	ee37 7b05 	vadd.f64	d7, d7, d5
 80022b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022ba:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80024c8 <inverseKinematic+0x400>
 80022be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80022c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80022c6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80022ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022ce:	ee37 8b07 	vadd.f64	d8, d7, d7
 80022d2:	ed97 7b00 	vldr	d7, [r7]
 80022d6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80024b8 <inverseKinematic+0x3f0>
 80022da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022e2:	eeb0 0b47 	vmov.f64	d0, d7
 80022e6:	f011 fa7f 	bl	80137e8 <pow>
 80022ea:	eeb0 7b40 	vmov.f64	d7, d0
 80022ee:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80024e0 <inverseKinematic+0x418>
 80022f2:	ee37 9b06 	vadd.f64	d9, d7, d6
 80022f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80022fa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80024d0 <inverseKinematic+0x408>
 80022fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002302:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002306:	eeb0 0b47 	vmov.f64	d0, d7
 800230a:	f011 fa6d 	bl	80137e8 <pow>
 800230e:	eeb0 7b40 	vmov.f64	d7, d0
 8002312:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002316:	ed97 7b04 	vldr	d7, [r7, #16]
 800231a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800231e:	eeb0 0b47 	vmov.f64	d0, d7
 8002322:	f011 fa61 	bl	80137e8 <pow>
 8002326:	eeb0 7b40 	vmov.f64	d7, d0
 800232a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800232e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80024e8 <inverseKinematic+0x420>
 8002332:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002336:	ed97 7b04 	vldr	d7, [r7, #16]
 800233a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800233e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002342:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002346:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80024c8 <inverseKinematic+0x400>
 800234a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <inverseKinematic+0x458>)
 8002350:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002354:	ed97 7b00 	vldr	d7, [r7]
 8002358:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80024b8 <inverseKinematic+0x3f0>
 800235c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002360:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80024c0 <inverseKinematic+0x3f8>
 8002364:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002368:	ed97 7b02 	vldr	d7, [r7, #8]
 800236c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80024d0 <inverseKinematic+0x408>
 8002370:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002374:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002378:	ee36 7b47 	vsub.f64	d7, d6, d7
 800237c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80024d8 <inverseKinematic+0x410>
 8002380:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002384:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80024b0 <inverseKinematic+0x3e8>
 8002388:	ee37 5b06 	vadd.f64	d5, d7, d6
 800238c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002390:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002394:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002398:	ee37 8b07 	vadd.f64	d8, d7, d7
 800239c:	ed97 7b00 	vldr	d7, [r7]
 80023a0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80024b8 <inverseKinematic+0x3f0>
 80023a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023ac:	eeb0 0b47 	vmov.f64	d0, d7
 80023b0:	f011 fa1a 	bl	80137e8 <pow>
 80023b4:	eeb0 9b40 	vmov.f64	d9, d0
 80023b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80023bc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80024d0 <inverseKinematic+0x408>
 80023c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023c8:	eeb0 0b47 	vmov.f64	d0, d7
 80023cc:	f011 fa0c 	bl	80137e8 <pow>
 80023d0:	eeb0 7b40 	vmov.f64	d7, d0
 80023d4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80023d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80023dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023e0:	eeb0 0b47 	vmov.f64	d0, d7
 80023e4:	f011 fa00 	bl	80137e8 <pow>
 80023e8:	eeb0 7b40 	vmov.f64	d7, d0
 80023ec:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023f0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80024e8 <inverseKinematic+0x420>
 80023f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023f8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002500 <inverseKinematic+0x438>
 80023fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002400:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002508 <inverseKinematic+0x440>
 8002404:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002408:	ed97 7b04 	vldr	d7, [r7, #16]
 800240c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002410:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002414:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002418:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80024c8 <inverseKinematic+0x400>
 800241c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <inverseKinematic+0x45c>)
 8002422:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8002426:	ed97 7b02 	vldr	d7, [r7, #8]
 800242a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80024a8 <inverseKinematic+0x3e0>
 800242e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002432:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002436:	eeb0 0b47 	vmov.f64	d0, d7
 800243a:	f011 f9d5 	bl	80137e8 <pow>
 800243e:	eeb0 8b40 	vmov.f64	d8, d0
 8002442:	ed97 7b04 	vldr	d7, [r7, #16]
 8002446:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800244a:	eeb0 0b47 	vmov.f64	d0, d7
 800244e:	f011 f9cb 	bl	80137e8 <pow>
 8002452:	eeb0 7b40 	vmov.f64	d7, d0
 8002456:	ee38 7b07 	vadd.f64	d7, d8, d7
 800245a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80024e8 <inverseKinematic+0x420>
 800245e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8002462:	ed97 7b00 	vldr	d7, [r7]
 8002466:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800246a:	eeb0 0b47 	vmov.f64	d0, d7
 800246e:	f011 f9bb 	bl	80137e8 <pow>
 8002472:	eeb0 7b40 	vmov.f64	d7, d0
 8002476:	ee38 7b07 	vadd.f64	d7, d8, d7
 800247a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002500 <inverseKinematic+0x438>
 800247e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002482:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002508 <inverseKinematic+0x440>
 8002486:	ee37 6b06 	vadd.f64	d6, d7, d6
 800248a:	ed97 7b04 	vldr	d7, [r7, #16]
 800248e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002492:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002496:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800249a:	eeb0 0b45 	vmov.f64	d0, d5
 800249e:	f011 f9a3 	bl	80137e8 <pow>
 80024a2:	eeb0 7b40 	vmov.f64	d7, d0
 80024a6:	e03f      	b.n	8002528 <inverseKinematic+0x460>
 80024a8:	1eb851ec 	.word	0x1eb851ec
 80024ac:	3fb1eb85 	.word	0x3fb1eb85
 80024b0:	24dd2f1b 	.word	0x24dd2f1b
 80024b4:	3fc58106 	.word	0x3fc58106
 80024b8:	5625749b 	.word	0x5625749b
 80024bc:	3faf09d1 	.word	0x3faf09d1
 80024c0:	e8584caa 	.word	0xe8584caa
 80024c4:	400bb67a 	.word	0x400bb67a
 80024c8:	24dd2f1d 	.word	0x24dd2f1d
 80024cc:	3fe58106 	.word	0x3fe58106
 80024d0:	1eb851ec 	.word	0x1eb851ec
 80024d4:	3fa1eb85 	.word	0x3fa1eb85
 80024d8:	9ba5e356 	.word	0x9ba5e356
 80024dc:	3fe020c4 	.word	0x3fe020c4
 80024e0:	f705857e 	.word	0xf705857e
 80024e4:	3f881e03 	.word	0x3f881e03
 80024e8:	70a3d70a 	.word	0x70a3d70a
 80024ec:	3fd70a3d 	.word	0x3fd70a3d
 80024f0:	24dd2f1b 	.word	0x24dd2f1b
 80024f4:	3fd58106 	.word	0x3fd58106
 80024f8:	e8584caa 	.word	0xe8584caa
 80024fc:	c00bb67a 	.word	0xc00bb67a
 8002500:	93d96639 	.word	0x93d96639
 8002504:	3f9ce6c0 	.word	0x3f9ce6c0
 8002508:	47ae147c 	.word	0x47ae147c
 800250c:	3fa47ae1 	.word	0x3fa47ae1
 8002510:	24000558 	.word	0x24000558
 8002514:	240005a0 	.word	0x240005a0
 8002518:	240005e8 	.word	0x240005e8
 800251c:	24000560 	.word	0x24000560
 8002520:	240005a8 	.word	0x240005a8
 8002524:	240005f0 	.word	0x240005f0
 8002528:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 80028a8 <inverseKinematic+0x7e0>
 800252c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002530:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 80028b0 <inverseKinematic+0x7e8>
 8002534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002538:	4be7      	ldr	r3, [pc, #924]	; (80028d8 <inverseKinematic+0x810>)
 800253a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 800253e:	ed97 7b00 	vldr	d7, [r7]
 8002542:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 80028b8 <inverseKinematic+0x7f0>
 8002546:	ee37 7b06 	vadd.f64	d7, d7, d6
 800254a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800254e:	eeb0 0b47 	vmov.f64	d0, d7
 8002552:	f011 f949 	bl	80137e8 <pow>
 8002556:	eeb0 7b40 	vmov.f64	d7, d0
 800255a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 80028c0 <inverseKinematic+0x7f8>
 800255e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8002562:	ed97 7b02 	vldr	d7, [r7, #8]
 8002566:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 80028c8 <inverseKinematic+0x800>
 800256a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800256e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002572:	eeb0 0b47 	vmov.f64	d0, d7
 8002576:	f011 f937 	bl	80137e8 <pow>
 800257a:	eeb0 7b40 	vmov.f64	d7, d0
 800257e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002582:	ed97 7b04 	vldr	d7, [r7, #16]
 8002586:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800258a:	eeb0 0b47 	vmov.f64	d0, d7
 800258e:	f011 f92b 	bl	80137e8 <pow>
 8002592:	eeb0 7b40 	vmov.f64	d7, d0
 8002596:	ee38 7b07 	vadd.f64	d7, d8, d7
 800259a:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 80028d0 <inverseKinematic+0x808>
 800259e:	ee37 6b46 	vsub.f64	d6, d7, d6
 80025a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80025a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80025aa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025ae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80025b2:	eeb0 0b45 	vmov.f64	d0, d5
 80025b6:	f011 f917 	bl	80137e8 <pow>
 80025ba:	eeb0 7b40 	vmov.f64	d7, d0
 80025be:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80028c0 <inverseKinematic+0x7f8>
 80025c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025c6:	4bc5      	ldr	r3, [pc, #788]	; (80028dc <inverseKinematic+0x814>)
 80025c8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80025cc:	ed97 7b00 	vldr	d7, [r7]
 80025d0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80028b8 <inverseKinematic+0x7f0>
 80025d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80025dc:	eeb0 0b47 	vmov.f64	d0, d7
 80025e0:	f011 f902 	bl	80137e8 <pow>
 80025e4:	eeb0 8b40 	vmov.f64	d8, d0
 80025e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80025ec:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80028c8 <inverseKinematic+0x800>
 80025f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80025f8:	eeb0 0b47 	vmov.f64	d0, d7
 80025fc:	f011 f8f4 	bl	80137e8 <pow>
 8002600:	eeb0 7b40 	vmov.f64	d7, d0
 8002604:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002608:	ed97 7b04 	vldr	d7, [r7, #16]
 800260c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002610:	eeb0 0b47 	vmov.f64	d0, d7
 8002614:	f011 f8e8 	bl	80137e8 <pow>
 8002618:	eeb0 7b40 	vmov.f64	d7, d0
 800261c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002620:	ed9f 6bab 	vldr	d6, [pc, #684]	; 80028d0 <inverseKinematic+0x808>
 8002624:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002628:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80028b0 <inverseKinematic+0x7e8>
 800262c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002630:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80028a8 <inverseKinematic+0x7e0>
 8002634:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002638:	ed97 7b04 	vldr	d7, [r7, #16]
 800263c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002640:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002644:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002648:	eeb0 0b45 	vmov.f64	d0, d5
 800264c:	f011 f8cc 	bl	80137e8 <pow>
 8002650:	eeb0 7b40 	vmov.f64	d7, d0
 8002654:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 80028c0 <inverseKinematic+0x7f8>
 8002658:	ee37 7b46 	vsub.f64	d7, d7, d6
 800265c:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <inverseKinematic+0x818>)
 800265e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8002662:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <inverseKinematic+0x81c>)
 8002664:	ed93 7b00 	vldr	d7, [r3]
 8002668:	eeb1 8b47 	vneg.f64	d8, d7
 800266c:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <inverseKinematic+0x81c>)
 800266e:	ed93 7b00 	vldr	d7, [r3]
 8002672:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002676:	eeb0 0b47 	vmov.f64	d0, d7
 800267a:	f011 f8b5 	bl	80137e8 <pow>
 800267e:	eeb0 5b40 	vmov.f64	d5, d0
 8002682:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <inverseKinematic+0x820>)
 8002684:	ed93 7b00 	vldr	d7, [r3]
 8002688:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800268c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002690:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <inverseKinematic+0x810>)
 8002692:	ed93 7b00 	vldr	d7, [r3]
 8002696:	ee26 7b07 	vmul.f64	d7, d6, d7
 800269a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800269e:	eeb0 0b47 	vmov.f64	d0, d7
 80026a2:	f011 fb21 	bl	8013ce8 <sqrt>
 80026a6:	eeb0 7b40 	vmov.f64	d7, d0
 80026aa:	ee38 5b47 	vsub.f64	d5, d8, d7
 80026ae:	4b8e      	ldr	r3, [pc, #568]	; (80028e8 <inverseKinematic+0x820>)
 80026b0:	ed93 7b00 	vldr	d7, [r3]
 80026b4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80026b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026bc:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <inverseKinematic+0x824>)
 80026be:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <inverseKinematic+0x81c>)
 80026c4:	ed93 7b00 	vldr	d7, [r3]
 80026c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80026cc:	eeb0 0b47 	vmov.f64	d0, d7
 80026d0:	f011 f88a 	bl	80137e8 <pow>
 80026d4:	eeb0 5b40 	vmov.f64	d5, d0
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <inverseKinematic+0x820>)
 80026da:	ed93 7b00 	vldr	d7, [r3]
 80026de:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80026e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026e6:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <inverseKinematic+0x810>)
 80026e8:	ed93 7b00 	vldr	d7, [r3]
 80026ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80026f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80026f4:	eeb0 0b47 	vmov.f64	d0, d7
 80026f8:	f011 faf6 	bl	8013ce8 <sqrt>
 80026fc:	eeb0 6b40 	vmov.f64	d6, d0
 8002700:	4b78      	ldr	r3, [pc, #480]	; (80028e4 <inverseKinematic+0x81c>)
 8002702:	ed93 7b00 	vldr	d7, [r3]
 8002706:	ee36 5b47 	vsub.f64	d5, d6, d7
 800270a:	4b77      	ldr	r3, [pc, #476]	; (80028e8 <inverseKinematic+0x820>)
 800270c:	ed93 7b00 	vldr	d7, [r3]
 8002710:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002714:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002718:	4b75      	ldr	r3, [pc, #468]	; (80028f0 <inverseKinematic+0x828>)
 800271a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800271e:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <inverseKinematic+0x82c>)
 8002720:	ed93 7b00 	vldr	d7, [r3]
 8002724:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002728:	eeb0 0b47 	vmov.f64	d0, d7
 800272c:	f011 f85c 	bl	80137e8 <pow>
 8002730:	eeb0 5b40 	vmov.f64	d5, d0
 8002734:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <inverseKinematic+0x830>)
 8002736:	ed93 7b00 	vldr	d7, [r3]
 800273a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800273e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002742:	4b66      	ldr	r3, [pc, #408]	; (80028dc <inverseKinematic+0x814>)
 8002744:	ed93 7b00 	vldr	d7, [r3]
 8002748:	ee26 7b07 	vmul.f64	d7, d6, d7
 800274c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002750:	eeb0 0b47 	vmov.f64	d0, d7
 8002754:	f011 fac8 	bl	8013ce8 <sqrt>
 8002758:	eeb0 6b40 	vmov.f64	d6, d0
 800275c:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <inverseKinematic+0x82c>)
 800275e:	ed93 7b00 	vldr	d7, [r3]
 8002762:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002766:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <inverseKinematic+0x830>)
 8002768:	ed93 7b00 	vldr	d7, [r3]
 800276c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002770:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <inverseKinematic+0x834>)
 8002776:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800277a:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <inverseKinematic+0x82c>)
 800277c:	ed93 7b00 	vldr	d7, [r3]
 8002780:	eeb1 8b47 	vneg.f64	d8, d7
 8002784:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <inverseKinematic+0x82c>)
 8002786:	ed93 7b00 	vldr	d7, [r3]
 800278a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800278e:	eeb0 0b47 	vmov.f64	d0, d7
 8002792:	f011 f829 	bl	80137e8 <pow>
 8002796:	eeb0 5b40 	vmov.f64	d5, d0
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <inverseKinematic+0x830>)
 800279c:	ed93 7b00 	vldr	d7, [r3]
 80027a0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80027a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027a8:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <inverseKinematic+0x814>)
 80027aa:	ed93 7b00 	vldr	d7, [r3]
 80027ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80027b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80027b6:	eeb0 0b47 	vmov.f64	d0, d7
 80027ba:	f011 fa95 	bl	8013ce8 <sqrt>
 80027be:	eeb0 7b40 	vmov.f64	d7, d0
 80027c2:	ee38 5b47 	vsub.f64	d5, d8, d7
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <inverseKinematic+0x830>)
 80027c8:	ed93 7b00 	vldr	d7, [r3]
 80027cc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80027d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80027d4:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <inverseKinematic+0x838>)
 80027d6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80027da:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <inverseKinematic+0x83c>)
 80027dc:	ed93 7b00 	vldr	d7, [r3]
 80027e0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80027e4:	eeb0 0b47 	vmov.f64	d0, d7
 80027e8:	f010 fffe 	bl	80137e8 <pow>
 80027ec:	eeb0 5b40 	vmov.f64	d5, d0
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <inverseKinematic+0x840>)
 80027f2:	ed93 7b00 	vldr	d7, [r3]
 80027f6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80027fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <inverseKinematic+0x818>)
 8002800:	ed93 7b00 	vldr	d7, [r3]
 8002804:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002808:	ee35 7b47 	vsub.f64	d7, d5, d7
 800280c:	eeb0 0b47 	vmov.f64	d0, d7
 8002810:	f011 fa6a 	bl	8013ce8 <sqrt>
 8002814:	eeb0 6b40 	vmov.f64	d6, d0
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <inverseKinematic+0x83c>)
 800281a:	ed93 7b00 	vldr	d7, [r3]
 800281e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <inverseKinematic+0x840>)
 8002824:	ed93 7b00 	vldr	d7, [r3]
 8002828:	ee37 6b07 	vadd.f64	d6, d7, d7
 800282c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <inverseKinematic+0x844>)
 8002832:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <inverseKinematic+0x83c>)
 8002838:	ed93 7b00 	vldr	d7, [r3]
 800283c:	eeb1 8b47 	vneg.f64	d8, d7
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <inverseKinematic+0x83c>)
 8002842:	ed93 7b00 	vldr	d7, [r3]
 8002846:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800284a:	eeb0 0b47 	vmov.f64	d0, d7
 800284e:	f010 ffcb 	bl	80137e8 <pow>
 8002852:	eeb0 5b40 	vmov.f64	d5, d0
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <inverseKinematic+0x840>)
 8002858:	ed93 7b00 	vldr	d7, [r3]
 800285c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002860:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <inverseKinematic+0x818>)
 8002866:	ed93 7b00 	vldr	d7, [r3]
 800286a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800286e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002872:	eeb0 0b47 	vmov.f64	d0, d7
 8002876:	f011 fa37 	bl	8013ce8 <sqrt>
 800287a:	eeb0 7b40 	vmov.f64	d7, d0
 800287e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <inverseKinematic+0x840>)
 8002884:	ed93 7b00 	vldr	d7, [r3]
 8002888:	ee37 6b07 	vadd.f64	d6, d7, d7
 800288c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <inverseKinematic+0x848>)
 8002892:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8002896:	491f      	ldr	r1, [pc, #124]	; (8002914 <inverseKinematic+0x84c>)
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9c1 2300 	strd	r2, r3, [r1]
 80028a4:	e038      	b.n	8002918 <inverseKinematic+0x850>
 80028a6:	bf00      	nop
 80028a8:	47ae147c 	.word	0x47ae147c
 80028ac:	3fa47ae1 	.word	0x3fa47ae1
 80028b0:	93d96639 	.word	0x93d96639
 80028b4:	3f9ce6c0 	.word	0x3f9ce6c0
 80028b8:	5625749b 	.word	0x5625749b
 80028bc:	3faf09d1 	.word	0x3faf09d1
 80028c0:	f705857e 	.word	0xf705857e
 80028c4:	3f881e03 	.word	0x3f881e03
 80028c8:	1eb851ec 	.word	0x1eb851ec
 80028cc:	3fa1eb85 	.word	0x3fa1eb85
 80028d0:	70a3d70a 	.word	0x70a3d70a
 80028d4:	3fd70a3d 	.word	0x3fd70a3d
 80028d8:	24000568 	.word	0x24000568
 80028dc:	240005b0 	.word	0x240005b0
 80028e0:	240005f8 	.word	0x240005f8
 80028e4:	24000560 	.word	0x24000560
 80028e8:	24000558 	.word	0x24000558
 80028ec:	24000580 	.word	0x24000580
 80028f0:	24000588 	.word	0x24000588
 80028f4:	240005a8 	.word	0x240005a8
 80028f8:	240005a0 	.word	0x240005a0
 80028fc:	240005c8 	.word	0x240005c8
 8002900:	240005d0 	.word	0x240005d0
 8002904:	240005f0 	.word	0x240005f0
 8002908:	240005e8 	.word	0x240005e8
 800290c:	24000610 	.word	0x24000610
 8002910:	24000618 	.word	0x24000618
 8002914:	24000570 	.word	0x24000570
	XJ1_2 = 0;
 8002918:	49f1      	ldr	r1, [pc, #964]	; (8002ce0 <inverseKinematic+0xc18>)
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8002926:	4bef      	ldr	r3, [pc, #956]	; (8002ce4 <inverseKinematic+0xc1c>)
 8002928:	ed93 7b00 	vldr	d7, [r3]
 800292c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002c78 <inverseKinematic+0xbb0>
 8002930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002934:	4bec      	ldr	r3, [pc, #944]	; (8002ce8 <inverseKinematic+0xc20>)
 8002936:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 800293a:	4bec      	ldr	r3, [pc, #944]	; (8002cec <inverseKinematic+0xc24>)
 800293c:	ed93 7b00 	vldr	d7, [r3]
 8002940:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002c78 <inverseKinematic+0xbb0>
 8002944:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002948:	4be9      	ldr	r3, [pc, #932]	; (8002cf0 <inverseKinematic+0xc28>)
 800294a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 800294e:	4be9      	ldr	r3, [pc, #932]	; (8002cf4 <inverseKinematic+0xc2c>)
 8002950:	ed93 7b00 	vldr	d7, [r3]
 8002954:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002c80 <inverseKinematic+0xbb8>
 8002958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800295c:	4be6      	ldr	r3, [pc, #920]	; (8002cf8 <inverseKinematic+0xc30>)
 800295e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8002962:	4be6      	ldr	r3, [pc, #920]	; (8002cfc <inverseKinematic+0xc34>)
 8002964:	ed93 7b00 	vldr	d7, [r3]
 8002968:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002c80 <inverseKinematic+0xbb8>
 800296c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002970:	4be3      	ldr	r3, [pc, #908]	; (8002d00 <inverseKinematic+0xc38>)
 8002972:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002976:	ed97 7b02 	vldr	d7, [r7, #8]
 800297a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002c88 <inverseKinematic+0xbc0>
 800297e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002982:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002c90 <inverseKinematic+0xbc8>
 8002986:	ee37 7b06 	vadd.f64	d7, d7, d6
 800298a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800298e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002992:	ed97 7b04 	vldr	d7, [r7, #16]
 8002996:	ee37 7b07 	vadd.f64	d7, d7, d7
 800299a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800299e:	4bd9      	ldr	r3, [pc, #868]	; (8002d04 <inverseKinematic+0xc3c>)
 80029a0:	ed93 7b00 	vldr	d7, [r3]
 80029a4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80029a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80029ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002c88 <inverseKinematic+0xbc0>
 80029b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029b8:	eeb0 0b47 	vmov.f64	d0, d7
 80029bc:	f010 ff14 	bl	80137e8 <pow>
 80029c0:	eeb0 9b40 	vmov.f64	d9, d0
 80029c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80029c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029cc:	eeb0 0b47 	vmov.f64	d0, d7
 80029d0:	f010 ff0a 	bl	80137e8 <pow>
 80029d4:	eeb0 7b40 	vmov.f64	d7, d0
 80029d8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80029dc:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002c98 <inverseKinematic+0xbd0>
 80029e0:	ee37 9b46 	vsub.f64	d9, d7, d6
 80029e4:	ed97 7b00 	vldr	d7, [r7]
 80029e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029ec:	eeb0 0b47 	vmov.f64	d0, d7
 80029f0:	f010 fefa 	bl	80137e8 <pow>
 80029f4:	eeb0 7b40 	vmov.f64	d7, d0
 80029f8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80029fc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002ca0 <inverseKinematic+0xbd8>
 8002a00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a04:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002ca8 <inverseKinematic+0xbe0>
 8002a08:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002a0c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a10:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002a14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a18:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002a1c:	4bba      	ldr	r3, [pc, #744]	; (8002d08 <inverseKinematic+0xc40>)
 8002a1e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002a22:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a26:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c88 <inverseKinematic+0xbc0>
 8002a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a2e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c90 <inverseKinematic+0xbc8>
 8002a32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a36:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002a3a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002a3e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a46:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a4a:	4bb0      	ldr	r3, [pc, #704]	; (8002d0c <inverseKinematic+0xc44>)
 8002a4c:	ed93 7b00 	vldr	d7, [r3]
 8002a50:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002a54:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a58:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002c88 <inverseKinematic+0xbc0>
 8002a5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002a64:	eeb0 0b47 	vmov.f64	d0, d7
 8002a68:	f010 febe 	bl	80137e8 <pow>
 8002a6c:	eeb0 9b40 	vmov.f64	d9, d0
 8002a70:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a74:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002a78:	eeb0 0b47 	vmov.f64	d0, d7
 8002a7c:	f010 feb4 	bl	80137e8 <pow>
 8002a80:	eeb0 7b40 	vmov.f64	d7, d0
 8002a84:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002a88:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002c98 <inverseKinematic+0xbd0>
 8002a8c:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002a90:	ed97 7b00 	vldr	d7, [r7]
 8002a94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002a98:	eeb0 0b47 	vmov.f64	d0, d7
 8002a9c:	f010 fea4 	bl	80137e8 <pow>
 8002aa0:	eeb0 7b40 	vmov.f64	d7, d0
 8002aa4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002aa8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002ca0 <inverseKinematic+0xbd8>
 8002aac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ab0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002ca8 <inverseKinematic+0xbe0>
 8002ab4:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002ab8:	ed97 7b04 	vldr	d7, [r7, #16]
 8002abc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002ac0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ac4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002ac8:	4b91      	ldr	r3, [pc, #580]	; (8002d10 <inverseKinematic+0xc48>)
 8002aca:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002ace:	ed97 7b00 	vldr	d7, [r7]
 8002ad2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002cb0 <inverseKinematic+0xbe8>
 8002ad6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ada:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002cb8 <inverseKinematic+0xbf0>
 8002ade:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ae2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ae6:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002cc0 <inverseKinematic+0xbf8>
 8002aea:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002aee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002af2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002af6:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002cc8 <inverseKinematic+0xc00>
 8002afa:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002afe:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b06:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <inverseKinematic+0xc1c>)
 8002b0c:	ed93 7b00 	vldr	d7, [r3]
 8002b10:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002b14:	ed97 7b00 	vldr	d7, [r7]
 8002b18:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002cb0 <inverseKinematic+0xbe8>
 8002b1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b20:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b24:	eeb0 0b47 	vmov.f64	d0, d7
 8002b28:	f010 fe5e 	bl	80137e8 <pow>
 8002b2c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b30:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002cd0 <inverseKinematic+0xc08>
 8002b34:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002b38:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b3c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002cc0 <inverseKinematic+0xbf8>
 8002b40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b48:	eeb0 0b47 	vmov.f64	d0, d7
 8002b4c:	f010 fe4c 	bl	80137e8 <pow>
 8002b50:	eeb0 7b40 	vmov.f64	d7, d0
 8002b54:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002b58:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b60:	eeb0 0b47 	vmov.f64	d0, d7
 8002b64:	f010 fe40 	bl	80137e8 <pow>
 8002b68:	eeb0 7b40 	vmov.f64	d7, d0
 8002b6c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002b70:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002c98 <inverseKinematic+0xbd0>
 8002b74:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002b78:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b7c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002b80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b84:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <inverseKinematic+0xc4c>)
 8002b8a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002b8e:	ed97 7b00 	vldr	d7, [r7]
 8002b92:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002cb0 <inverseKinematic+0xbe8>
 8002b96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b9a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002cb8 <inverseKinematic+0xbf0>
 8002b9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ba2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ba6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002cc0 <inverseKinematic+0xbf8>
 8002baa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002bae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bb6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002cc8 <inverseKinematic+0xc00>
 8002bba:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002bbe:	ed97 7b04 	vldr	d7, [r7, #16]
 8002bc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bc6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <inverseKinematic+0xc24>)
 8002bcc:	ed93 7b00 	vldr	d7, [r3]
 8002bd0:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002bd4:	ed97 7b00 	vldr	d7, [r7]
 8002bd8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002cb0 <inverseKinematic+0xbe8>
 8002bdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002be0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002be4:	eeb0 0b47 	vmov.f64	d0, d7
 8002be8:	f010 fdfe 	bl	80137e8 <pow>
 8002bec:	eeb0 7b40 	vmov.f64	d7, d0
 8002bf0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002cd0 <inverseKinematic+0xc08>
 8002bf4:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002bf8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bfc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002cc0 <inverseKinematic+0xbf8>
 8002c00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002c08:	eeb0 0b47 	vmov.f64	d0, d7
 8002c0c:	f010 fdec 	bl	80137e8 <pow>
 8002c10:	eeb0 7b40 	vmov.f64	d7, d0
 8002c14:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002c18:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002c20:	eeb0 0b47 	vmov.f64	d0, d7
 8002c24:	f010 fde0 	bl	80137e8 <pow>
 8002c28:	eeb0 7b40 	vmov.f64	d7, d0
 8002c2c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002c30:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002c98 <inverseKinematic+0xbd0>
 8002c34:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002c38:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c3c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002c40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c44:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002c48:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <inverseKinematic+0xc50>)
 8002c4a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002c4e:	ed97 7b00 	vldr	d7, [r7]
 8002c52:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002cb0 <inverseKinematic+0xbe8>
 8002c56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c5a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002cd8 <inverseKinematic+0xc10>
 8002c5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c62:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c66:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002cc0 <inverseKinematic+0xbf8>
 8002c6a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002c6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c76:	e051      	b.n	8002d1c <inverseKinematic+0xc54>
 8002c78:	e8584caa 	.word	0xe8584caa
 8002c7c:	3ffbb67a 	.word	0x3ffbb67a
 8002c80:	e8584caa 	.word	0xe8584caa
 8002c84:	bffbb67a 	.word	0xbffbb67a
 8002c88:	1eb851ec 	.word	0x1eb851ec
 8002c8c:	3fb1eb85 	.word	0x3fb1eb85
 8002c90:	24dd2f1b 	.word	0x24dd2f1b
 8002c94:	3fc58106 	.word	0x3fc58106
 8002c98:	70a3d70a 	.word	0x70a3d70a
 8002c9c:	3fd70a3d 	.word	0x3fd70a3d
 8002ca0:	93d96639 	.word	0x93d96639
 8002ca4:	3f9ce6c0 	.word	0x3f9ce6c0
 8002ca8:	47ae147c 	.word	0x47ae147c
 8002cac:	3fa47ae1 	.word	0x3fa47ae1
 8002cb0:	5625749b 	.word	0x5625749b
 8002cb4:	3faf09d1 	.word	0x3faf09d1
 8002cb8:	e8584caa 	.word	0xe8584caa
 8002cbc:	c00bb67a 	.word	0xc00bb67a
 8002cc0:	1eb851ec 	.word	0x1eb851ec
 8002cc4:	3fa1eb85 	.word	0x3fa1eb85
 8002cc8:	24dd2f1d 	.word	0x24dd2f1d
 8002ccc:	3fe58106 	.word	0x3fe58106
 8002cd0:	f705857e 	.word	0xf705857e
 8002cd4:	3f881e03 	.word	0x3f881e03
 8002cd8:	e8584caa 	.word	0xe8584caa
 8002cdc:	400bb67a 	.word	0x400bb67a
 8002ce0:	24000578 	.word	0x24000578
 8002ce4:	240005c8 	.word	0x240005c8
 8002ce8:	240005b8 	.word	0x240005b8
 8002cec:	240005d0 	.word	0x240005d0
 8002cf0:	240005c0 	.word	0x240005c0
 8002cf4:	24000610 	.word	0x24000610
 8002cf8:	24000600 	.word	0x24000600
 8002cfc:	24000618 	.word	0x24000618
 8002d00:	24000608 	.word	0x24000608
 8002d04:	24000580 	.word	0x24000580
 8002d08:	24000590 	.word	0x24000590
 8002d0c:	24000588 	.word	0x24000588
 8002d10:	24000598 	.word	0x24000598
 8002d14:	240005d8 	.word	0x240005d8
 8002d18:	240005e0 	.word	0x240005e0
 8002d1c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002f60 <inverseKinematic+0xe98>
 8002d20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d24:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002f68 <inverseKinematic+0xea0>
 8002d28:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002d2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d34:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002d38:	4b9f      	ldr	r3, [pc, #636]	; (8002fb8 <inverseKinematic+0xef0>)
 8002d3a:	ed93 7b00 	vldr	d7, [r3]
 8002d3e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002d42:	ed97 7b00 	vldr	d7, [r7]
 8002d46:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002f70 <inverseKinematic+0xea8>
 8002d4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d52:	eeb0 0b47 	vmov.f64	d0, d7
 8002d56:	f010 fd47 	bl	80137e8 <pow>
 8002d5a:	eeb0 9b40 	vmov.f64	d9, d0
 8002d5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d62:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002f78 <inverseKinematic+0xeb0>
 8002d66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d6e:	eeb0 0b47 	vmov.f64	d0, d7
 8002d72:	f010 fd39 	bl	80137e8 <pow>
 8002d76:	eeb0 7b40 	vmov.f64	d7, d0
 8002d7a:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002d7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d86:	eeb0 0b47 	vmov.f64	d0, d7
 8002d8a:	f010 fd2d 	bl	80137e8 <pow>
 8002d8e:	eeb0 7b40 	vmov.f64	d7, d0
 8002d92:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002d96:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002f80 <inverseKinematic+0xeb8>
 8002d9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d9e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002f88 <inverseKinematic+0xec0>
 8002da2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002da6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002f90 <inverseKinematic+0xec8>
 8002daa:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002dae:	ed97 7b04 	vldr	d7, [r7, #16]
 8002db2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002db6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002dba:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <inverseKinematic+0xef4>)
 8002dc0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002dc4:	ed97 7b00 	vldr	d7, [r7]
 8002dc8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002f70 <inverseKinematic+0xea8>
 8002dcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dd0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002f98 <inverseKinematic+0xed0>
 8002dd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002dd8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ddc:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002f78 <inverseKinematic+0xeb0>
 8002de0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002de4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002de8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dec:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002f60 <inverseKinematic+0xe98>
 8002df0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002df4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002f68 <inverseKinematic+0xea0>
 8002df8:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002dfc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002e04:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002e08:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <inverseKinematic+0xef8>)
 8002e0a:	ed93 7b00 	vldr	d7, [r3]
 8002e0e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002e12:	ed97 7b00 	vldr	d7, [r7]
 8002e16:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002f70 <inverseKinematic+0xea8>
 8002e1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e22:	eeb0 0b47 	vmov.f64	d0, d7
 8002e26:	f010 fcdf 	bl	80137e8 <pow>
 8002e2a:	eeb0 9b40 	vmov.f64	d9, d0
 8002e2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e32:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002f78 <inverseKinematic+0xeb0>
 8002e36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e3a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e3e:	eeb0 0b47 	vmov.f64	d0, d7
 8002e42:	f010 fcd1 	bl	80137e8 <pow>
 8002e46:	eeb0 7b40 	vmov.f64	d7, d0
 8002e4a:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002e4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e52:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e56:	eeb0 0b47 	vmov.f64	d0, d7
 8002e5a:	f010 fcc5 	bl	80137e8 <pow>
 8002e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8002e62:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002e66:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002f80 <inverseKinematic+0xeb8>
 8002e6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e6e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002f88 <inverseKinematic+0xec0>
 8002e72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e76:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002f90 <inverseKinematic+0xec8>
 8002e7a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002e7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e82:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002e86:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e8a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e8e:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <inverseKinematic+0xefc>)
 8002e90:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <inverseKinematic+0xf00>)
 8002e96:	ed93 7b00 	vldr	d7, [r3]
 8002e9a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002fa0 <inverseKinematic+0xed8>
 8002e9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ea2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ea6:	f010 fef1 	bl	8013c8c <asin>
 8002eaa:	eeb0 7b40 	vmov.f64	d7, d0
 8002eae:	eeb1 7b47 	vneg.f64	d7, d7
 8002eb2:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <inverseKinematic+0xf04>)
 8002eb4:	ed83 7b02 	vstr	d7, [r3, #8]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8002eb8:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <inverseKinematic+0xf04>)
 8002eba:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ebe:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002fa8 <inverseKinematic+0xee0>
 8002ec2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ec6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002fb0 <inverseKinematic+0xee8>
 8002eca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <inverseKinematic+0xf04>)
 8002ed0:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <inverseKinematic+0xf08>)
 8002ed6:	ed93 7b00 	vldr	d7, [r3]
 8002eda:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002fa0 <inverseKinematic+0xed8>
 8002ede:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ee2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ee6:	f010 fed1 	bl	8013c8c <asin>
 8002eea:	eeb0 7b40 	vmov.f64	d7, d0
 8002eee:	eeb1 7b47 	vneg.f64	d7, d7
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <inverseKinematic+0xf0c>)
 8002ef4:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <inverseKinematic+0xf0c>)
 8002efa:	ed93 7b02 	vldr	d7, [r3, #8]
 8002efe:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002fa8 <inverseKinematic+0xee0>
 8002f02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f06:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002fb0 <inverseKinematic+0xee8>
 8002f0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <inverseKinematic+0xf0c>)
 8002f10:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <inverseKinematic+0xef4>)
 8002f16:	ed93 7b00 	vldr	d7, [r3]
 8002f1a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002fa0 <inverseKinematic+0xed8>
 8002f1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002f22:	eeb0 0b46 	vmov.f64	d0, d6
 8002f26:	f010 feb1 	bl	8013c8c <asin>
 8002f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002f2e:	eeb1 7b47 	vneg.f64	d7, d7
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <inverseKinematic+0xf10>)
 8002f34:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <inverseKinematic+0xf10>)
 8002f3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002f3e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002fa8 <inverseKinematic+0xee0>
 8002f42:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f46:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002fb0 <inverseKinematic+0xee8>
 8002f4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <inverseKinematic+0xf10>)
 8002f50:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	ecbd 8b04 	vpop	{d8-d9}
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	9ba5e356 	.word	0x9ba5e356
 8002f64:	3fe020c4 	.word	0x3fe020c4
 8002f68:	24dd2f1b 	.word	0x24dd2f1b
 8002f6c:	3fc58106 	.word	0x3fc58106
 8002f70:	5625749b 	.word	0x5625749b
 8002f74:	3faf09d1 	.word	0x3faf09d1
 8002f78:	1eb851ec 	.word	0x1eb851ec
 8002f7c:	3fa1eb85 	.word	0x3fa1eb85
 8002f80:	70a3d70a 	.word	0x70a3d70a
 8002f84:	3fd70a3d 	.word	0x3fd70a3d
 8002f88:	93d96639 	.word	0x93d96639
 8002f8c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002f90:	47ae147c 	.word	0x47ae147c
 8002f94:	3fa47ae1 	.word	0x3fa47ae1
 8002f98:	e8584caa 	.word	0xe8584caa
 8002f9c:	400bb67a 	.word	0x400bb67a
 8002fa0:	9999999a 	.word	0x9999999a
 8002fa4:	3fc99999 	.word	0x3fc99999
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40668000 	.word	0x40668000
 8002fb0:	54442eea 	.word	0x54442eea
 8002fb4:	400921fb 	.word	0x400921fb
 8002fb8:	24000610 	.word	0x24000610
 8002fbc:	24000620 	.word	0x24000620
 8002fc0:	24000618 	.word	0x24000618
 8002fc4:	24000628 	.word	0x24000628
 8002fc8:	24000590 	.word	0x24000590
 8002fcc:	24000630 	.word	0x24000630
 8002fd0:	240005d8 	.word	0x240005d8
 8002fd4:	24000668 	.word	0x24000668
 8002fd8:	240006a0 	.word	0x240006a0

08002fdc <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0

	//double rpm = 1.0;



	HAL_TIM_Base_Start(&htim12);
 8002fe0:	481b      	ldr	r0, [pc, #108]	; (8003050 <robotInitialization+0x74>)
 8002fe2:	f009 f8a9 	bl	800c138 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002fe6:	481b      	ldr	r0, [pc, #108]	; (8003054 <robotInitialization+0x78>)
 8002fe8:	f009 f8a6 	bl	800c138 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002fec:	481a      	ldr	r0, [pc, #104]	; (8003058 <robotInitialization+0x7c>)
 8002fee:	f009 f8a3 	bl	800c138 <HAL_TIM_Base_Start>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_ALL);	//Enciendo interrupcion input capture motor 1
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);	//Enciendo interrupcion input capture motor 2
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);	//Enciendo interrupcion input capture motor 3


	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	4819      	ldr	r0, [pc, #100]	; (800305c <robotInitialization+0x80>)
 8002ff8:	f006 fcb6 	bl	8009968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2120      	movs	r1, #32
 8003000:	4816      	ldr	r0, [pc, #88]	; (800305c <robotInitialization+0x80>)
 8003002:	f006 fcb1 	bl	8009968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	4814      	ldr	r0, [pc, #80]	; (800305c <robotInitialization+0x80>)
 800300c:	f006 fcac 	bl	8009968 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8003010:	2032      	movs	r0, #50	; 0x32
 8003012:	f003 fb33 	bl	800667c <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8003016:	2200      	movs	r2, #0
 8003018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800301c:	4810      	ldr	r0, [pc, #64]	; (8003060 <robotInitialization+0x84>)
 800301e:	f006 fca3 	bl	8009968 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <robotInitialization+0x84>)
 800302a:	f006 fc9d 	bl	8009968 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 800302e:	2200      	movs	r2, #0
 8003030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003034:	480a      	ldr	r0, [pc, #40]	; (8003060 <robotInitialization+0x84>)
 8003036:	f006 fc97 	bl	8009968 <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <robotInitialization+0x88>)
 800303c:	2200      	movs	r2, #0
 800303e:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <robotInitialization+0x8c>)
 8003042:	2200      	movs	r2, #0
 8003044:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <robotInitialization+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	765a      	strb	r2, [r3, #25]


}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	24000890 	.word	0x24000890
 8003054:	240008dc 	.word	0x240008dc
 8003058:	24000928 	.word	0x24000928
 800305c:	58020c00 	.word	0x58020c00
 8003060:	58020800 	.word	0x58020800
 8003064:	24000630 	.word	0x24000630
 8003068:	24000668 	.word	0x24000668
 800306c:	240006a0 	.word	0x240006a0

08003070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	ed2d 8b02 	vpush	{d8}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003078:	f003 fa6e 	bl	8006558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800307c:	f000 f9a0 	bl	80033c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003080:	f7fd ff6a 	bl	8000f58 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003084:	f000 fef4 	bl	8003e70 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8003088:	f003 f8c4 	bl	8006214 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800308c:	f000 ffc4 	bl	8004018 <MX_TIM12_Init>
  MX_TIM13_Init();
 8003090:	f001 f824 	bl	80040dc <MX_TIM13_Init>
  MX_TIM14_Init();
 8003094:	f001 f86e 	bl	8004174 <MX_TIM14_Init>
  MX_TIM5_Init();
 8003098:	f000 ff70 	bl	8003f7c <MX_TIM5_Init>
  MX_TIM15_Init();
 800309c:	f001 f8b6 	bl	800420c <MX_TIM15_Init>
  MX_DMA_Init();
 80030a0:	f7fd ff2a 	bl	8000ef8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80030a4:	f003 f86a 	bl	800617c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80030a8:	f003 f81c 	bl	80060e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 80030ac:	2364      	movs	r3, #100	; 0x64
 80030ae:	221c      	movs	r2, #28
 80030b0:	49a2      	ldr	r1, [pc, #648]	; (800333c <main+0x2cc>)
 80030b2:	48a3      	ldr	r0, [pc, #652]	; (8003340 <main+0x2d0>)
 80030b4:	f00b f9c0 	bl	800e438 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80030b8:	2201      	movs	r2, #1
 80030ba:	49a2      	ldr	r1, [pc, #648]	; (8003344 <main+0x2d4>)
 80030bc:	48a0      	ldr	r0, [pc, #640]	; (8003340 <main+0x2d0>)
 80030be:	f00b fa51 	bl	800e564 <HAL_UART_Receive_IT>

  robotInitialization();
 80030c2:	f7ff ff8b 	bl	8002fdc <robotInitialization>

  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 80030c6:	2364      	movs	r3, #100	; 0x64
 80030c8:	2227      	movs	r2, #39	; 0x27
 80030ca:	499f      	ldr	r1, [pc, #636]	; (8003348 <main+0x2d8>)
 80030cc:	489c      	ldr	r0, [pc, #624]	; (8003340 <main+0x2d0>)
 80030ce:	f00b f9b3 	bl	800e438 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 80030d2:	4b9e      	ldr	r3, [pc, #632]	; (800334c <main+0x2dc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 80de 	bne.w	8003298 <main+0x228>

			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80030dc:	2100      	movs	r1, #0
 80030de:	489c      	ldr	r0, [pc, #624]	; (8003350 <main+0x2e0>)
 80030e0:	f009 fda2 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 80030e4:	2104      	movs	r1, #4
 80030e6:	489a      	ldr	r0, [pc, #616]	; (8003350 <main+0x2e0>)
 80030e8:	f009 fd9e 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_3);
 80030ec:	2108      	movs	r1, #8
 80030ee:	4898      	ldr	r0, [pc, #608]	; (8003350 <main+0x2e0>)
 80030f0:	f009 fd9a 	bl	800cc28 <HAL_TIM_IC_Stop_DMA>

			FlagButton = 0;
 80030f4:	4b95      	ldr	r3, [pc, #596]	; (800334c <main+0x2dc>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
			euclideanDistance = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 80030fa:	4b96      	ldr	r3, [pc, #600]	; (8003354 <main+0x2e4>)
 80030fc:	ed93 6b00 	vldr	d6, [r3]
 8003100:	4b95      	ldr	r3, [pc, #596]	; (8003358 <main+0x2e8>)
 8003102:	ed93 7b00 	vldr	d7, [r3]
 8003106:	ee36 7b47 	vsub.f64	d7, d6, d7
 800310a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800310e:	eeb0 0b47 	vmov.f64	d0, d7
 8003112:	f010 fb69 	bl	80137e8 <pow>
 8003116:	eeb0 8b40 	vmov.f64	d8, d0
 800311a:	4b8e      	ldr	r3, [pc, #568]	; (8003354 <main+0x2e4>)
 800311c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003120:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <main+0x2e8>)
 8003122:	ed93 7b02 	vldr	d7, [r3, #8]
 8003126:	ee36 7b47 	vsub.f64	d7, d6, d7
 800312a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800312e:	eeb0 0b47 	vmov.f64	d0, d7
 8003132:	f010 fb59 	bl	80137e8 <pow>
 8003136:	eeb0 7b40 	vmov.f64	d7, d0
 800313a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <main+0x2e4>)
 8003140:	ed93 6b04 	vldr	d6, [r3, #16]
 8003144:	4b84      	ldr	r3, [pc, #528]	; (8003358 <main+0x2e8>)
 8003146:	ed93 7b04 	vldr	d7, [r3, #16]
 800314a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800314e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003152:	eeb0 0b47 	vmov.f64	d0, d7
 8003156:	f010 fb47 	bl	80137e8 <pow>
 800315a:	eeb0 7b40 	vmov.f64	d7, d0
 800315e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003162:	eeb0 0b47 	vmov.f64	d0, d7
 8003166:	f010 fdbf 	bl	8013ce8 <sqrt>
 800316a:	eeb0 7b40 	vmov.f64	d7, d0
 800316e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003172:	4b7a      	ldr	r3, [pc, #488]	; (800335c <main+0x2ec>)
 8003174:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / euclideanDistance;	//Vector director en X
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <main+0x2e4>)
 800317a:	ed93 6b00 	vldr	d6, [r3]
 800317e:	4b76      	ldr	r3, [pc, #472]	; (8003358 <main+0x2e8>)
 8003180:	ed93 7b00 	vldr	d7, [r3]
 8003184:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003188:	4b74      	ldr	r3, [pc, #464]	; (800335c <main+0x2ec>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003192:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003196:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800319a:	4b71      	ldr	r3, [pc, #452]	; (8003360 <main+0x2f0>)
 800319c:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / euclideanDistance;	//Vector director en Y
 80031a0:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <main+0x2e4>)
 80031a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80031a6:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <main+0x2e8>)
 80031a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80031ac:	ee36 5b47 	vsub.f64	d5, d6, d7
 80031b0:	4b6a      	ldr	r3, [pc, #424]	; (800335c <main+0x2ec>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80031be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <main+0x2f0>)
 80031c4:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / euclideanDistance;	//Vector director en Z
 80031c8:	4b62      	ldr	r3, [pc, #392]	; (8003354 <main+0x2e4>)
 80031ca:	ed93 6b04 	vldr	d6, [r3, #16]
 80031ce:	4b62      	ldr	r3, [pc, #392]	; (8003358 <main+0x2e8>)
 80031d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80031d4:	ee36 5b47 	vsub.f64	d5, d6, d7
 80031d8:	4b60      	ldr	r3, [pc, #384]	; (800335c <main+0x2ec>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80031e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <main+0x2f0>)
 80031ec:	edc3 7a02 	vstr	s15, [r3, #8]

			configMotor(&motor1,1);
 80031f0:	2101      	movs	r1, #1
 80031f2:	485c      	ldr	r0, [pc, #368]	; (8003364 <main+0x2f4>)
 80031f4:	f000 fb74 	bl	80038e0 <configMotor>
			configMotor(&motor2,2);
 80031f8:	2102      	movs	r1, #2
 80031fa:	485b      	ldr	r0, [pc, #364]	; (8003368 <main+0x2f8>)
 80031fc:	f000 fb70 	bl	80038e0 <configMotor>
			configMotor(&motor3,3);
 8003200:	2103      	movs	r1, #3
 8003202:	485a      	ldr	r0, [pc, #360]	; (800336c <main+0x2fc>)
 8003204:	f000 fb6c 	bl	80038e0 <configMotor>

			update_ScurveTraj(0, euclideanDistance, vi, vf, vmax, amax, jmax);
 8003208:	4b54      	ldr	r3, [pc, #336]	; (800335c <main+0x2ec>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <main+0x300>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	4b57      	ldr	r3, [pc, #348]	; (8003374 <main+0x304>)
 8003216:	edd3 6a00 	vldr	s13, [r3]
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <main+0x308>)
 800321c:	ed93 6a00 	vldr	s12, [r3]
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <main+0x30c>)
 8003222:	edd3 5a00 	vldr	s11, [r3]
 8003226:	4b56      	ldr	r3, [pc, #344]	; (8003380 <main+0x310>)
 8003228:	ed93 5a00 	vldr	s10, [r3]
 800322c:	eeb0 3a45 	vmov.f32	s6, s10
 8003230:	eef0 2a65 	vmov.f32	s5, s11
 8003234:	eeb0 2a46 	vmov.f32	s4, s12
 8003238:	eef0 1a66 	vmov.f32	s3, s13
 800323c:	eeb0 1a47 	vmov.f32	s2, s14
 8003240:	eef0 0a67 	vmov.f32	s1, s15
 8003244:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003384 <main+0x314>
 8003248:	f002 f8f6 	bl	8005438 <update_ScurveTraj>

			FlagTiempo = 0;
 800324c:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <main+0x318>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]


			Start=1;
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <main+0x31c>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <main+0x320>)
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8003266:	494b      	ldr	r1, [pc, #300]	; (8003394 <main+0x324>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8003274:	4948      	ldr	r1, [pc, #288]	; (8003398 <main+0x328>)
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_TIM_Base_Start(&htim5);
 8003282:	4846      	ldr	r0, [pc, #280]	; (800339c <main+0x32c>)
 8003284:	f008 ff58 	bl	800c138 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8003288:	4845      	ldr	r0, [pc, #276]	; (80033a0 <main+0x330>)
 800328a:	f008 ffed 	bl	800c268 <HAL_TIM_Base_Start_IT>
			testinMain++;
 800328e:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <main+0x334>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	4a43      	ldr	r2, [pc, #268]	; (80033a4 <main+0x334>)
 8003296:	6013      	str	r3, [r2, #0]
		}
		//--------------------------------------------------
		if (motor1.stepReached){
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <main+0x2f4>)
 800329a:	7e5b      	ldrb	r3, [r3, #25]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <main+0x240>
			Stop_PWM_MOTOR_1; 		//Apago el PWM del motor 1
 80032a0:	2100      	movs	r1, #0
 80032a2:	4841      	ldr	r0, [pc, #260]	; (80033a8 <main+0x338>)
 80032a4:	f009 f9f6 	bl	800c694 <HAL_TIM_PWM_Stop>
			HAL_Delay(1);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f003 f9e7 	bl	800667c <HAL_Delay>
 80032ae:	e016      	b.n	80032de <main+0x26e>
		}else if(motor2.stepReached){
 80032b0:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <main+0x2f8>)
 80032b2:	7e5b      	ldrb	r3, [r3, #25]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <main+0x258>
			Stop_PWM_MOTOR_2; 		//Apago el PWM del motor 1
 80032b8:	2100      	movs	r1, #0
 80032ba:	483c      	ldr	r0, [pc, #240]	; (80033ac <main+0x33c>)
 80032bc:	f009 f9ea 	bl	800c694 <HAL_TIM_PWM_Stop>
			HAL_Delay(1);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f003 f9db 	bl	800667c <HAL_Delay>
 80032c6:	e00a      	b.n	80032de <main+0x26e>
		}else if(motor3.stepReached){
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <main+0x2fc>)
 80032ca:	7e5b      	ldrb	r3, [r3, #25]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <main+0x26e>
			Stop_PWM_MOTOR_3; 		//Apago el PWM del motor 1
 80032d0:	2100      	movs	r1, #0
 80032d2:	4837      	ldr	r0, [pc, #220]	; (80033b0 <main+0x340>)
 80032d4:	f009 f9de 	bl	800c694 <HAL_TIM_PWM_Stop>
			HAL_Delay(1);
 80032d8:	2001      	movs	r0, #1
 80032da:	f003 f9cf 	bl	800667c <HAL_Delay>
		}
		//---------------------------------------------------
		if(Start==1){
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <main+0x31c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f47f aef5 	bne.w	80030d2 <main+0x62>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, fallData1, numval);
 80032e8:	2301      	movs	r3, #1
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <main+0x344>)
 80032ec:	2100      	movs	r1, #0
 80032ee:	4818      	ldr	r0, [pc, #96]	; (8003350 <main+0x2e0>)
 80032f0:	f009 fac8 	bl	800c884 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, fallData2, numval);
 80032f4:	2301      	movs	r3, #1
 80032f6:	4a30      	ldr	r2, [pc, #192]	; (80033b8 <main+0x348>)
 80032f8:	2104      	movs	r1, #4
 80032fa:	4815      	ldr	r0, [pc, #84]	; (8003350 <main+0x2e0>)
 80032fc:	f009 fac2 	bl	800c884 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, fallData3, numval);
 8003300:	2301      	movs	r3, #1
 8003302:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <main+0x34c>)
 8003304:	2108      	movs	r1, #8
 8003306:	4812      	ldr	r0, [pc, #72]	; (8003350 <main+0x2e0>)
 8003308:	f009 fabc 	bl	800c884 <HAL_TIM_IC_Start_DMA>

			setProfilTimer();
 800330c:	f002 fdd4 	bl	8005eb8 <setProfilTimer>

			Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8003310:	2100      	movs	r1, #0
 8003312:	4825      	ldr	r0, [pc, #148]	; (80033a8 <main+0x338>)
 8003314:	f009 f8b0 	bl	800c478 <HAL_TIM_PWM_Start>
			HAL_Delay(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f003 f9af 	bl	800667c <HAL_Delay>
			Start_PWM_MOTOR_2;	// Activar generacion de pwm
 800331e:	2100      	movs	r1, #0
 8003320:	4822      	ldr	r0, [pc, #136]	; (80033ac <main+0x33c>)
 8003322:	f009 f8a9 	bl	800c478 <HAL_TIM_PWM_Start>
			HAL_Delay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f003 f9a8 	bl	800667c <HAL_Delay>
			Start_PWM_MOTOR_3;	// Activar generacion de pwm
 800332c:	2100      	movs	r1, #0
 800332e:	4820      	ldr	r0, [pc, #128]	; (80033b0 <main+0x340>)
 8003330:	f009 f8a2 	bl	800c478 <HAL_TIM_PWM_Start>
			HAL_Delay(1);
 8003334:	2001      	movs	r0, #1
 8003336:	f003 f9a1 	bl	800667c <HAL_Delay>
		if (FlagButton == 1) {
 800333a:	e6ca      	b.n	80030d2 <main+0x62>
 800333c:	240000a4 	.word	0x240000a4
 8003340:	24000ca4 	.word	0x24000ca4
 8003344:	240007d2 	.word	0x240007d2
 8003348:	240000c0 	.word	0x240000c0
 800334c:	240007e4 	.word	0x240007e4
 8003350:	240007f8 	.word	0x240007f8
 8003354:	24000750 	.word	0x24000750
 8003358:	24000738 	.word	0x24000738
 800335c:	24000768 	.word	0x24000768
 8003360:	2400076c 	.word	0x2400076c
 8003364:	24000630 	.word	0x24000630
 8003368:	24000668 	.word	0x24000668
 800336c:	240006a0 	.word	0x240006a0
 8003370:	2400072c 	.word	0x2400072c
 8003374:	24000730 	.word	0x24000730
 8003378:	2400009c 	.word	0x2400009c
 800337c:	240000a0 	.word	0x240000a0
 8003380:	24000098 	.word	0x24000098
 8003384:	00000000 	.word	0x00000000
 8003388:	240007e1 	.word	0x240007e1
 800338c:	240007f0 	.word	0x240007f0
 8003390:	240006d8 	.word	0x240006d8
 8003394:	240006e0 	.word	0x240006e0
 8003398:	240006e8 	.word	0x240006e8
 800339c:	24000844 	.word	0x24000844
 80033a0:	24000974 	.word	0x24000974
 80033a4:	240007ec 	.word	0x240007ec
 80033a8:	24000890 	.word	0x24000890
 80033ac:	240008dc 	.word	0x240008dc
 80033b0:	24000928 	.word	0x24000928
 80033b4:	24000708 	.word	0x24000708
 80033b8:	2400070c 	.word	0x2400070c
 80033bc:	24000710 	.word	0x24000710

080033c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b09c      	sub	sp, #112	; 0x70
 80033c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	224c      	movs	r2, #76	; 0x4c
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f00d fb78 	bl	8010ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	2220      	movs	r2, #32
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f00d fb72 	bl	8010ac4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80033e0:	2002      	movs	r0, #2
 80033e2:	f006 faf5 	bl	80099d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <SystemClock_Config+0xf4>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <SystemClock_Config+0xf4>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <SystemClock_Config+0xf4>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <SystemClock_Config+0xf8>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <SystemClock_Config+0xf8>)
 800340a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340e:	6193      	str	r3, [r2, #24]
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <SystemClock_Config+0xf8>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800341c:	bf00      	nop
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <SystemClock_Config+0xf8>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	d1f8      	bne.n	800341e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800342c:	2302      	movs	r3, #2
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003430:	2301      	movs	r3, #1
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003434:	2340      	movs	r3, #64	; 0x40
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003438:	2302      	movs	r3, #2
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800343c:	2300      	movs	r3, #0
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003440:	2304      	movs	r3, #4
 8003442:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003444:	2310      	movs	r3, #16
 8003446:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003448:	2302      	movs	r3, #2
 800344a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800344c:	2302      	movs	r3, #2
 800344e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003450:	2302      	movs	r3, #2
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003454:	230c      	movs	r3, #12
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003458:	2300      	movs	r3, #0
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f006 faed 	bl	8009a44 <HAL_RCC_OscConfig>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003470:	f000 fa2c 	bl	80038cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003474:	233f      	movs	r3, #63	; 0x3f
 8003476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003478:	2303      	movs	r3, #3
 800347a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003480:	2308      	movs	r3, #8
 8003482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003488:	2340      	movs	r3, #64	; 0x40
 800348a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800348c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003490:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f006 ff00 	bl	800a2a0 <HAL_RCC_ClockConfig>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80034a6:	f000 fa11 	bl	80038cc <Error_Handler>
  }
}
 80034aa:	bf00      	nop
 80034ac:	3770      	adds	r7, #112	; 0x70
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	58000400 	.word	0x58000400
 80034b8:	58024800 	.word	0x58024800

080034bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]

	  if(GPIO_Pin == BUTTON_Pin) {
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d103      	bne.n	80034d6 <HAL_GPIO_EXTI_Callback+0x1a>
		  FlagButton=1;
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/


}
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_EXTI_Callback+0x1c>
	      __NOP();
 80034d6:	bf00      	nop
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	240007e4 	.word	0x240007e4

080034e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_UART_RxCpltCallback+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d14d      	bne.n	8003596 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80034fa:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_UART_RxCpltCallback+0xd4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b3a      	cmp	r3, #58	; 0x3a
 8003504:	d006      	beq.n	8003514 <HAL_UART_RxCpltCallback+0x2c>
 8003506:	2b3a      	cmp	r3, #58	; 0x3a
 8003508:	dc36      	bgt.n	8003578 <HAL_UART_RxCpltCallback+0x90>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d009      	beq.n	8003522 <HAL_UART_RxCpltCallback+0x3a>
 800350e:	2b0d      	cmp	r3, #13
 8003510:	d01e      	beq.n	8003550 <HAL_UART_RxCpltCallback+0x68>
 8003512:	e031      	b.n	8003578 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_UART_RxCpltCallback+0xdc>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
			break;
 8003520:	e040      	b.n	80035a4 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8003522:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d037      	beq.n	800359a <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	3b01      	subs	r3, #1
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003534:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003536:	e030      	b.n	800359a <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_UART_RxCpltCallback+0xe0>)
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 800354e:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b1e      	cmp	r3, #30
 8003556:	d1ef      	bne.n	8003538 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_UART_RxCpltCallback+0xdc>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d11e      	bne.n	800359e <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_UART_RxCpltCallback+0xe0>)
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 800356c:	f7fe f95c 	bl	8001828 <interpretaComando>
				cm0 = 0;
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_UART_RxCpltCallback+0xdc>)
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]

			}
			break;
 8003576:	e012      	b.n	800359e <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b1d      	cmp	r3, #29
 800357e:	d810      	bhi.n	80035a2 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	b2d1      	uxtb	r1, r2
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <HAL_UART_RxCpltCallback+0xd8>)
 800358a:	7011      	strb	r1, [r2, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_UART_RxCpltCallback+0xe0>)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	5453      	strb	r3, [r2, r1]
			}
			break;
 8003594:	e005      	b.n	80035a2 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8003596:	bf00      	nop
 8003598:	e004      	b.n	80035a4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80035a2:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 80035a4:	2201      	movs	r2, #1
 80035a6:	4905      	ldr	r1, [pc, #20]	; (80035bc <HAL_UART_RxCpltCallback+0xd4>)
 80035a8:	4808      	ldr	r0, [pc, #32]	; (80035cc <HAL_UART_RxCpltCallback+0xe4>)
 80035aa:	f00a ffdb 	bl	800e564 <HAL_UART_Receive_IT>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40004800 	.word	0x40004800
 80035bc:	240007d2 	.word	0x240007d2
 80035c0:	240007b0 	.word	0x240007b0
 80035c4:	240007e0 	.word	0x240007e0
 80035c8:	240007b4 	.word	0x240007b4
 80035cc:	24000ca4 	.word	0x24000ca4

080035d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	__NOP();
 80035d8:	bf00      	nop
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

	test++;
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80035f8:	6013      	str	r3, [r2, #0]
	if (htim->Instance == TIM2) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d13a      	bne.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
		//test1++;

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7f1b      	ldrb	r3, [r3, #28]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10f      	bne.n	800362c <HAL_TIM_IC_CaptureCallback+0x44>
			//test2++;
			if (motor1.pMotor == motor1.numStep) {
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d103      	bne.n	8003620 <HAL_TIM_IC_CaptureCallback+0x38>
				//Stop_PWM_MOTOR_1; 		//Apago el PWM del motor 1
				//HAL_Delay(1);
				motor1.stepReached = true;
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800361a:	2201      	movs	r2, #1
 800361c:	765a      	strb	r2, [r3, #25]
		}
		else{}
	}


}
 800361e:	e02c      	b.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
				motor1.pMotor++;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003628:	6013      	str	r3, [r2, #0]
}
 800362a:	e026      	b.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7f1b      	ldrb	r3, [r3, #28]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d10f      	bne.n	8003654 <HAL_TIM_IC_CaptureCallback+0x6c>
			if (motor2.pMotor == motor2.numStep) {
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d103      	bne.n	8003648 <HAL_TIM_IC_CaptureCallback+0x60>
				motor2.stepReached = true;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003642:	2201      	movs	r2, #1
 8003644:	765a      	strb	r2, [r3, #25]
}
 8003646:	e018      	b.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
				motor2.pMotor++;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003650:	6013      	str	r3, [r2, #0]
}
 8003652:	e012      	b.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7f1b      	ldrb	r3, [r3, #28]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d10e      	bne.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
			if (motor3.pMotor == motor3.numStep) {
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xac>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xac>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d103      	bne.n	8003670 <HAL_TIM_IC_CaptureCallback+0x88>
				motor3.stepReached = true;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xac>)
 800366a:	2201      	movs	r2, #1
 800366c:	765a      	strb	r2, [r3, #25]
}
 800366e:	e004      	b.n	800367a <HAL_TIM_IC_CaptureCallback+0x92>
				motor3.pMotor++;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	4a07      	ldr	r2, [pc, #28]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xac>)
 8003678:	6013      	str	r3, [r2, #0]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	240007e8 	.word	0x240007e8
 800368c:	24000630 	.word	0x24000630
 8003690:	24000668 	.word	0x24000668
 8003694:	240006a0 	.word	0x240006a0

08003698 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a79      	ldr	r2, [pc, #484]	; (8003888 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f040 80e4 	bne.w	8003872 <HAL_TIM_PeriodElapsedCallback+0x1da>


		if (motor1.stepReached && motor2.stepReached  && motor3.stepReached) {
 80036aa:	4b78      	ldr	r3, [pc, #480]	; (800388c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80036ac:	7e5b      	ldrb	r3, [r3, #25]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d035      	beq.n	800371e <HAL_TIM_PeriodElapsedCallback+0x86>
 80036b2:	4b77      	ldr	r3, [pc, #476]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80036b4:	7e5b      	ldrb	r3, [r3, #25]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d031      	beq.n	800371e <HAL_TIM_PeriodElapsedCallback+0x86>
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80036bc:	7e5b      	ldrb	r3, [r3, #25]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02d      	beq.n	800371e <HAL_TIM_PeriodElapsedCallback+0x86>

			motor1.pMotor = 0;
 80036c2:	4b72      	ldr	r3, [pc, #456]	; (800388c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
			motor2.pMotor = 0;
 80036c8:	4b71      	ldr	r3, [pc, #452]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
			motor3.pMotor = 0;
 80036ce:	4b71      	ldr	r3, [pc, #452]	; (8003894 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

			motor1.stepReached = false;
 80036d4:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 80036da:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 80036e0:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	765a      	strb	r2, [r3, #25]

			Pini.x = Pfin.x;
 80036e6:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	496b      	ldr	r1, [pc, #428]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80036ee:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 80036f2:	4b69      	ldr	r3, [pc, #420]	; (8003898 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80036f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036f8:	4968      	ldr	r1, [pc, #416]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80036fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 80036fe:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003700:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003704:	4965      	ldr	r1, [pc, #404]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003706:	e9c1 2304 	strd	r2, r3, [r1, #16]

			HAL_TIM_Base_Stop_IT(&htim15);
 800370a:	485f      	ldr	r0, [pc, #380]	; (8003888 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800370c:	f008 fe24 	bl	800c358 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8003710:	4863      	ldr	r0, [pc, #396]	; (80038a0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003712:	f008 fd81 	bl	800c218 <HAL_TIM_Base_Stop>

			Start = 0;
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
			}
			*/
		}
	}
}
 800371c:	e0a9      	b.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x1da>
			if (!FlagTiempo) {
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_TIM_PeriodElapsedCallback+0x9a>
				FlagTiempo = 1;
 8003726:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 800372c:	4b5f      	ldr	r3, [pc, #380]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x214>)
 800372e:	2200      	movs	r2, #0
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800373e:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	3301      	adds	r3, #1
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800374c:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8003880 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8003750:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003754:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800375a:	ed83 7b00 	vstr	d7, [r3]
			get_Straj(Tiempo);
 800375e:	4b54      	ldr	r3, [pc, #336]	; (80038b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003760:	ed93 7b00 	vldr	d7, [r3]
 8003764:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	f000 ffb6 	bl	80046dc <get_Straj>
			Recta3D[0] = Pini.x + q * vDirector[0];
 8003770:	4b4a      	ldr	r3, [pc, #296]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003772:	ed93 6b00 	vldr	d6, [r3]
 8003776:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003778:	ed93 7a00 	vldr	s14, [r3]
 800377c:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800378a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800378e:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003790:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + q * vDirector[1];
 8003794:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003796:	ed93 6b02 	vldr	d6, [r3, #8]
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800379c:	ed93 7a01 	vldr	s14, [r3, #4]
 80037a0:	4b45      	ldr	r3, [pc, #276]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037b2:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 80037b4:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + q * vDirector[2];
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80037ba:	ed93 6b04 	vldr	d6, [r3, #16]
 80037be:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80037c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 80037d8:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + qd * vDirector[0];
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80038c4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 80037f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80037fa:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + qd * vDirector[1];
 80037fe:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003800:	ed93 7a01 	vldr	s14, [r3, #4]
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80038c4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8003812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800381c:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + qd * vDirector[2];
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003822:	ed93 7a02 	vldr	s14, [r3, #8]
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80038c4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8003834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800383e:	ed83 7b04 	vstr	d7, [r3, #16]
			inverseJacobian(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 8003842:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003844:	ed93 7b00 	vldr	d7, [r3]
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800384a:	ed93 6b02 	vldr	d6, [r3, #8]
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003850:	ed93 2b04 	vldr	d2, [r3, #16]
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003856:	ed93 3b00 	vldr	d3, [r3]
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 800385c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003862:	ed93 5b04 	vldr	d5, [r3, #16]
 8003866:	eeb0 1b46 	vmov.f64	d1, d6
 800386a:	eeb0 0b47 	vmov.f64	d0, d7
 800386e:	f7fe f903 	bl	8001a78 <inverseJacobian>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	f3af 8000 	nop.w
 8003880:	00000000 	.word	0x00000000
 8003884:	418e8480 	.word	0x418e8480
 8003888:	24000974 	.word	0x24000974
 800388c:	24000630 	.word	0x24000630
 8003890:	24000668 	.word	0x24000668
 8003894:	240006a0 	.word	0x240006a0
 8003898:	24000750 	.word	0x24000750
 800389c:	24000738 	.word	0x24000738
 80038a0:	24000844 	.word	0x24000844
 80038a4:	240007f0 	.word	0x240007f0
 80038a8:	240007e1 	.word	0x240007e1
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	240007a8 	.word	0x240007a8
 80038b4:	2400076c 	.word	0x2400076c
 80038b8:	24000714 	.word	0x24000714
 80038bc:	24000778 	.word	0x24000778
 80038c0:	24000718 	.word	0x24000718
 80038c4:	00000000 	.word	0x00000000
 80038c8:	24000790 	.word	0x24000790

080038cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	0000      	movs	r0, r0
 80038dc:	0000      	movs	r0, r0
	...

080038e0 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	ed93 6b02 	vldr	d6, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	ed93 7b08 	vldr	d7, [r3, #32]
 80038fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	db39      	blt.n	800397a <configMotor+0x9a>
		if(ES1i_PRESSED){
 8003906:	2102      	movs	r1, #2
 8003908:	4861      	ldr	r0, [pc, #388]	; (8003a90 <configMotor+0x1b0>)
 800390a:	f006 f815 	bl	8009938 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <configMotor+0x42>
			flagErrorEndStop = 1;
 8003914:	495f      	ldr	r1, [pc, #380]	; (8003a94 <configMotor+0x1b4>)
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <configMotor+0x1b8>)
 800391c:	e9c1 2300 	strd	r2, r3, [r1]
 8003920:	e064      	b.n	80039ec <configMotor+0x10c>
		} else {
			diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	ed93 6b02 	vldr	d6, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	ed93 7b08 	vldr	d7, [r3, #32]
 800392e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003932:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <configMotor+0x74>
 8003948:	2201      	movs	r2, #1
 800394a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800394e:	4853      	ldr	r0, [pc, #332]	; (8003a9c <configMotor+0x1bc>)
 8003950:	f006 f80a 	bl	8009968 <HAL_GPIO_WritePin>
            if (i==1) negative_Dir_MOTOR_2;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <configMotor+0x86>
 800395a:	2201      	movs	r2, #1
 800395c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003960:	484e      	ldr	r0, [pc, #312]	; (8003a9c <configMotor+0x1bc>)
 8003962:	f006 f801 	bl	8009968 <HAL_GPIO_WritePin>
            if (i==2) negative_Dir_MOTOR_3;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d13f      	bne.n	80039ec <configMotor+0x10c>
 800396c:	2201      	movs	r2, #1
 800396e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003972:	484a      	ldr	r0, [pc, #296]	; (8003a9c <configMotor+0x1bc>)
 8003974:	f005 fff8 	bl	8009968 <HAL_GPIO_WritePin>
 8003978:	e038      	b.n	80039ec <configMotor+0x10c>
		}
	} else {
		if(ES1s_PRESSED){
 800397a:	2101      	movs	r1, #1
 800397c:	4844      	ldr	r0, [pc, #272]	; (8003a90 <configMotor+0x1b0>)
 800397e:	f005 ffdb 	bl	8009938 <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <configMotor+0xb6>
			flagErrorEndStop = 1;
 8003988:	4942      	ldr	r1, [pc, #264]	; (8003a94 <configMotor+0x1b4>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <configMotor+0x1b8>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
 8003994:	e02a      	b.n	80039ec <configMotor+0x10c>
		} else {
			diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	ed93 6b08 	vldr	d6, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	ed93 7b02 	vldr	d7, [r3, #8]
 80039a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039a6:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

			if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <configMotor+0xe8>
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039c2:	4836      	ldr	r0, [pc, #216]	; (8003a9c <configMotor+0x1bc>)
 80039c4:	f005 ffd0 	bl	8009968 <HAL_GPIO_WritePin>
            if (i==1) positive_Dir_MOTOR_2;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <configMotor+0xfa>
 80039ce:	2200      	movs	r2, #0
 80039d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d4:	4831      	ldr	r0, [pc, #196]	; (8003a9c <configMotor+0x1bc>)
 80039d6:	f005 ffc7 	bl	8009968 <HAL_GPIO_WritePin>
            if (i==2) positive_Dir_MOTOR_3;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d105      	bne.n	80039ec <configMotor+0x10c>
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039e6:	482d      	ldr	r0, [pc, #180]	; (8003a9c <configMotor+0x1bc>)
 80039e8:	f005 ffbe 	bl	8009968 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	motor->calcStep = (diffAngles * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 80039ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80039f0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003a80 <configMotor+0x1a0>
 80039f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80039f8:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003a88 <configMotor+0x1a8>
 80039fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003a0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a10:	ee17 2a90 	vmov	r2, s15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	605a      	str	r2, [r3, #4]
	motor->remanente = motor->remanente + (motor->calcStep - motor->numStep);// que el error no se amplifique.
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003a30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003a34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	if (motor->remanente >= 1) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003a44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	da00      	bge.n	8003a54 <configMotor+0x174>
		motor->remanente = motor->remanente - 1;
		motor->numStep = motor->numStep + 1;
	}

}
 8003a52:	e00e      	b.n	8003a72 <configMotor+0x192>
		motor->remanente = motor->remanente - 1;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003a5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		motor->numStep = motor->numStep + 1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	605a      	str	r2, [r3, #4]
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w
 8003a80:	00000000 	.word	0x00000000
 8003a84:	40bf4000 	.word	0x40bf4000
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	40768000 	.word	0x40768000
 8003a90:	58021000 	.word	0x58021000
 8003a94:	240007d8 	.word	0x240007d8
 8003a98:	3ff00000 	.word	0x3ff00000
 8003a9c:	58020800 	.word	0x58020800

08003aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_MspInit+0x44>)
 8003aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <HAL_MspInit+0x44>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_MspInit+0x44>)
 8003ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f002 fefd 	bl	80068c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2101      	movs	r1, #1
 8003ace:	2051      	movs	r0, #81	; 0x51
 8003ad0:	f002 ff03 	bl	80068da <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003ad4:	2051      	movs	r0, #81	; 0x51
 8003ad6:	f002 ff1a 	bl	800690e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	58024400 	.word	0x58024400

08003ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <MemManage_Handler+0x4>

08003b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <BusFault_Handler+0x4>

08003b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler+0x4>

08003b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3c:	f002 fd7e 	bl	800663c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f005 ff26 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003b56:	2002      	movs	r0, #2
 8003b58:	f005 ff1f 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003b64:	2004      	movs	r0, #4
 8003b66:	f005 ff18 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003b72:	2008      	movs	r0, #8
 8003b74:	f005 ff11 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003b80:	2010      	movs	r0, #16
 8003b82:	f005 ff0a 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <DMA1_Stream0_IRQHandler+0x10>)
 8003b92:	f004 fa0f 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	240009c0 	.word	0x240009c0

08003ba0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ba6:	f004 fa05 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	24000a38 	.word	0x24000a38

08003bb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <DMA1_Stream2_IRQHandler+0x10>)
 8003bba:	f004 f9fb 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	24000ab0 	.word	0x24000ab0

08003bc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003bcc:	2020      	movs	r0, #32
 8003bce:	f005 fee4 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <TIM2_IRQHandler+0x10>)
 8003bde:	f009 f8f5 	bl	800cdcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	240007f8 	.word	0x240007f8

08003bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <USART3_IRQHandler+0x10>)
 8003bf2:	f00a fd0d 	bl	800e610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	24000ca4 	.word	0x24000ca4

08003c00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003c04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c08:	f005 fec7 	bl	800999a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM15_IRQHandler+0x10>)
 8003c26:	f009 f8d1 	bl	800cdcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24000974 	.word	0x24000974

08003c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
	return 1;
 8003c38:	2301      	movs	r3, #1
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_kill>:

int _kill(int pid, int sig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c4e:	f00c ff01 	bl	8010a54 <__errno>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2216      	movs	r2, #22
 8003c56:	601a      	str	r2, [r3, #0]
	return -1;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_exit>:

void _exit (int status)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ffe7 	bl	8003c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c76:	e7fe      	b.n	8003c76 <_exit+0x12>

08003c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e00a      	b.n	8003ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c8a:	f3af 8000 	nop.w
 8003c8e:	4601      	mov	r1, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	60ba      	str	r2, [r7, #8]
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	dbf0      	blt.n	8003c8a <_read+0x12>
	}

return len;
 8003ca8:	687b      	ldr	r3, [r7, #4]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e009      	b.n	8003cd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	60ba      	str	r2, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	dbf1      	blt.n	8003cc4 <_write+0x12>
	}
	return len;
 8003ce0:	687b      	ldr	r3, [r7, #4]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_close>:

int _close(int file)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d12:	605a      	str	r2, [r3, #4]
	return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_isatty>:

int _isatty(int file)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
	return 1;
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	return 0;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <_sbrk+0x50>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <_sbrk+0x16>
		heap_end = &end;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <_sbrk+0x50>)
 8003d66:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <_sbrk+0x54>)
 8003d68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <_sbrk+0x50>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <_sbrk+0x50>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	466a      	mov	r2, sp
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d907      	bls.n	8003d8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d7e:	f00c fe69 	bl	8010a54 <__errno>
 8003d82:	4603      	mov	r3, r0
 8003d84:	220c      	movs	r2, #12
 8003d86:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e006      	b.n	8003d9c <_sbrk+0x48>
	}

	heap_end += incr;
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_sbrk+0x50>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	4a03      	ldr	r2, [pc, #12]	; (8003da4 <_sbrk+0x50>)
 8003d98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	240007f4 	.word	0x240007f4
 8003da8:	24000d48 	.word	0x24000d48

08003dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <SystemInit+0xac>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <SystemInit+0xac>)
 8003db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003dc0:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <SystemInit+0xb0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <SystemInit+0xb0>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <SystemInit+0xb0>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <SystemInit+0xb0>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4921      	ldr	r1, [pc, #132]	; (8003e5c <SystemInit+0xb0>)
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <SystemInit+0xb4>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003dde:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <SystemInit+0xb0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <SystemInit+0xb0>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003dea:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <SystemInit+0xb0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <SystemInit+0xb0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <SystemInit+0xb0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <SystemInit+0xb0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <SystemInit+0xb0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003e08:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <SystemInit+0xb0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <SystemInit+0xb0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <SystemInit+0xb0>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <SystemInit+0xb0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <SystemInit+0xb0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <SystemInit+0xb0>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <SystemInit+0xb0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <SystemInit+0xb8>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <SystemInit+0xbc>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d202      	bcs.n	8003e46 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <SystemInit+0xc0>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <SystemInit+0xac>)
 8003e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e4c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000ed00 	.word	0xe000ed00
 8003e5c:	58024400 	.word	0x58024400
 8003e60:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e64:	5c001000 	.word	0x5c001000
 8003e68:	ffff0000 	.word	0xffff0000
 8003e6c:	51008108 	.word	0x51008108

08003e70 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e76:	f107 0320 	add.w	r3, r7, #32
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e9c:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eaa:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ec4:	482c      	ldr	r0, [pc, #176]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003ec6:	f008 f8df 	bl	800c088 <HAL_TIM_Base_Init>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003ed0:	f7ff fcfc 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eda:	f107 0320 	add.w	r3, r7, #32
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4825      	ldr	r0, [pc, #148]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003ee2:	f009 fa43 	bl	800d36c <HAL_TIM_ConfigClockSource>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003eec:	f7ff fcee 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003ef0:	4821      	ldr	r0, [pc, #132]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003ef2:	f008 fc65 	bl	800c7c0 <HAL_TIM_IC_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003efc:	f7ff fce6 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	481a      	ldr	r0, [pc, #104]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003f10:	f00a f996 	bl	800e240 <HAL_TIMEx_MasterConfigSynchronization>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003f1a:	f7ff fcd7 	bl	80038cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f22:	2301      	movs	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	2200      	movs	r2, #0
 8003f32:	4619      	mov	r1, r3
 8003f34:	4810      	ldr	r0, [pc, #64]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003f36:	f009 f868 	bl	800d00a <HAL_TIM_IC_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003f40:	f7ff fcc4 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	2204      	movs	r2, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480b      	ldr	r0, [pc, #44]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003f4c:	f009 f85d 	bl	800d00a <HAL_TIM_IC_ConfigChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8003f56:	f7ff fcb9 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <MX_TIM2_Init+0x108>)
 8003f62:	f009 f852 	bl	800d00a <HAL_TIM_IC_ConfigChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8003f6c:	f7ff fcae 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	240007f8 	.word	0x240007f8

08003f7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f82:	f107 0310 	add.w	r3, r7, #16
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <MX_TIM5_Init+0x94>)
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <MX_TIM5_Init+0x98>)
 8003f9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003fc0:	4813      	ldr	r0, [pc, #76]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fc2:	f008 f861 	bl	800c088 <HAL_TIM_Base_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003fcc:	f7ff fc7e 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003fd6:	f107 0310 	add.w	r3, r7, #16
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <MX_TIM5_Init+0x94>)
 8003fde:	f009 f9c5 	bl	800d36c <HAL_TIM_ConfigClockSource>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003fe8:	f7ff fc70 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <MX_TIM5_Init+0x94>)
 8003ffa:	f00a f921 	bl	800e240 <HAL_TIMEx_MasterConfigSynchronization>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004004:	f7ff fc62 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004008:	bf00      	nop
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	24000844 	.word	0x24000844
 8004014:	40000c00 	.word	0x40000c00

08004018 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800401e:	f107 0320 	add.w	r3, r7, #32
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	615a      	str	r2, [r3, #20]
 800403c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <MX_TIM12_Init+0xc0>)
 8004042:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004046:	223f      	movs	r2, #63	; 0x3f
 8004048:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <MX_TIM12_Init+0xbc>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004056:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004058:	2200      	movs	r2, #0
 800405a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <MX_TIM12_Init+0xbc>)
 800405e:	2200      	movs	r2, #0
 8004060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004062:	481c      	ldr	r0, [pc, #112]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004064:	f008 f810 	bl	800c088 <HAL_TIM_Base_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800406e:	f7ff fc2d 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004076:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004078:	f107 0320 	add.w	r3, r7, #32
 800407c:	4619      	mov	r1, r3
 800407e:	4815      	ldr	r0, [pc, #84]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004080:	f009 f974 	bl	800d36c <HAL_TIM_ConfigClockSource>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800408a:	f7ff fc1f 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800408e:	4811      	ldr	r0, [pc, #68]	; (80040d4 <MX_TIM12_Init+0xbc>)
 8004090:	f008 f991 	bl	800c3b6 <HAL_TIM_PWM_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 800409a:	f7ff fc17 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800409e:	2360      	movs	r3, #96	; 0x60
 80040a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <MX_TIM12_Init+0xbc>)
 80040b6:	f009 f845 	bl	800d144 <HAL_TIM_PWM_ConfigChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 80040c0:	f7ff fc04 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80040c4:	4803      	ldr	r0, [pc, #12]	; (80040d4 <MX_TIM12_Init+0xbc>)
 80040c6:	f000 fa7b 	bl	80045c0 <HAL_TIM_MspPostInit>

}
 80040ca:	bf00      	nop
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	24000890 	.word	0x24000890
 80040d8:	40001800 	.word	0x40001800

080040dc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	615a      	str	r2, [r3, #20]
 80040f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <MX_TIM13_Init+0x90>)
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <MX_TIM13_Init+0x94>)
 80040f8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 80040fa:	4b1c      	ldr	r3, [pc, #112]	; (800416c <MX_TIM13_Init+0x90>)
 80040fc:	223f      	movs	r2, #63	; 0x3f
 80040fe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <MX_TIM13_Init+0x90>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8004106:	4b19      	ldr	r3, [pc, #100]	; (800416c <MX_TIM13_Init+0x90>)
 8004108:	2200      	movs	r2, #0
 800410a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <MX_TIM13_Init+0x90>)
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_TIM13_Init+0x90>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004118:	4814      	ldr	r0, [pc, #80]	; (800416c <MX_TIM13_Init+0x90>)
 800411a:	f007 ffb5 	bl	800c088 <HAL_TIM_Base_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004124:	f7ff fbd2 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004128:	4810      	ldr	r0, [pc, #64]	; (800416c <MX_TIM13_Init+0x90>)
 800412a:	f008 f944 	bl	800c3b6 <HAL_TIM_PWM_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004134:	f7ff fbca 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004138:	2360      	movs	r3, #96	; 0x60
 800413a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	2200      	movs	r2, #0
 800414c:	4619      	mov	r1, r3
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <MX_TIM13_Init+0x90>)
 8004150:	f008 fff8 	bl	800d144 <HAL_TIM_PWM_ConfigChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800415a:	f7ff fbb7 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <MX_TIM13_Init+0x90>)
 8004160:	f000 fa2e 	bl	80045c0 <HAL_TIM_MspPostInit>

}
 8004164:	bf00      	nop
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	240008dc 	.word	0x240008dc
 8004170:	40001c00 	.word	0x40001c00

08004174 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <MX_TIM14_Init+0x90>)
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <MX_TIM14_Init+0x94>)
 8004190:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <MX_TIM14_Init+0x90>)
 8004194:	223f      	movs	r2, #63	; 0x3f
 8004196:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <MX_TIM14_Init+0x90>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <MX_TIM14_Init+0x90>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <MX_TIM14_Init+0x90>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <MX_TIM14_Init+0x90>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80041b0:	4814      	ldr	r0, [pc, #80]	; (8004204 <MX_TIM14_Init+0x90>)
 80041b2:	f007 ff69 	bl	800c088 <HAL_TIM_Base_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80041bc:	f7ff fb86 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80041c0:	4810      	ldr	r0, [pc, #64]	; (8004204 <MX_TIM14_Init+0x90>)
 80041c2:	f008 f8f8 	bl	800c3b6 <HAL_TIM_PWM_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80041cc:	f7ff fb7e 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041d0:	2360      	movs	r3, #96	; 0x60
 80041d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	2200      	movs	r2, #0
 80041e4:	4619      	mov	r1, r3
 80041e6:	4807      	ldr	r0, [pc, #28]	; (8004204 <MX_TIM14_Init+0x90>)
 80041e8:	f008 ffac 	bl	800d144 <HAL_TIM_PWM_ConfigChannel>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80041f2:	f7ff fb6b 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80041f6:	4803      	ldr	r0, [pc, #12]	; (8004204 <MX_TIM14_Init+0x90>)
 80041f8:	f000 f9e2 	bl	80045c0 <HAL_TIM_MspPostInit>

}
 80041fc:	bf00      	nop
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	24000928 	.word	0x24000928
 8004208:	40002000 	.word	0x40002000

0800420c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004212:	f107 0310 	add.w	r3, r7, #16
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800422a:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <MX_TIM15_Init+0x9c>)
 800422c:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <MX_TIM15_Init+0xa0>)
 800422e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004232:	2200      	movs	r2, #0
 8004234:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004236:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <MX_TIM15_Init+0x9c>)
 800423e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004242:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <MX_TIM15_Init+0x9c>)
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004256:	4814      	ldr	r0, [pc, #80]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004258:	f007 ff16 	bl	800c088 <HAL_TIM_Base_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004262:	f7ff fb33 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	4619      	mov	r1, r3
 8004272:	480d      	ldr	r0, [pc, #52]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004274:	f009 f87a 	bl	800d36c <HAL_TIM_ConfigClockSource>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800427e:	f7ff fb25 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4806      	ldr	r0, [pc, #24]	; (80042a8 <MX_TIM15_Init+0x9c>)
 8004290:	f009 ffd6 	bl	800e240 <HAL_TIMEx_MasterConfigSynchronization>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800429a:	f7ff fb17 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800429e:	bf00      	nop
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	24000974 	.word	0x24000974
 80042ac:	40014000 	.word	0x40014000

080042b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b090      	sub	sp, #64	; 0x40
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	f040 80e4 	bne.w	800449c <HAL_TIM_Base_MspInit+0x1ec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d4:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80042d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042da:	4a9a      	ldr	r2, [pc, #616]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042e4:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80042e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f2:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80042f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f8:	4a92      	ldr	r2, [pc, #584]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004302:	4b90      	ldr	r3, [pc, #576]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004310:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004316:	4a8b      	ldr	r2, [pc, #556]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = StepFeedback_motor1_Pin|StepFeedback_motor2_Pin;
 800432e:	2303      	movs	r3, #3
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800433e:	2301      	movs	r3, #1
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	487f      	ldr	r0, [pc, #508]	; (8004548 <HAL_TIM_Base_MspInit+0x298>)
 800434a:	f005 f945 	bl	80095d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = StepFeedback_motor3_Pin;
 800434e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004354:	2302      	movs	r3, #2
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004358:	2300      	movs	r3, #0
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435c:	2300      	movs	r3, #0
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004360:	2301      	movs	r3, #1
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(StepFeedback_motor3_GPIO_Port, &GPIO_InitStruct);
 8004364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004368:	4619      	mov	r1, r3
 800436a:	4878      	ldr	r0, [pc, #480]	; (800454c <HAL_TIM_Base_MspInit+0x29c>)
 800436c:	f005 f934 	bl	80095d8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream0;
 8004370:	4b77      	ldr	r3, [pc, #476]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 8004372:	4a78      	ldr	r2, [pc, #480]	; (8004554 <HAL_TIM_Base_MspInit+0x2a4>)
 8004374:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8004376:	4b76      	ldr	r3, [pc, #472]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 8004378:	2212      	movs	r2, #18
 800437a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800437c:	4b74      	ldr	r3, [pc, #464]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004382:	4b73      	ldr	r3, [pc, #460]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 8004384:	2200      	movs	r2, #0
 8004386:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004388:	4b71      	ldr	r3, [pc, #452]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 800438a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800438e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 8004392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004396:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004398:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 800439a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800439e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80043a0:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ac:	4b68      	ldr	r3, [pc, #416]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80043b2:	4867      	ldr	r0, [pc, #412]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043b4:	f002 fad4 	bl	8006960 <HAL_DMA_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_TIM_Base_MspInit+0x112>
    {
      Error_Handler();
 80043be:	f7ff fa85 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a62      	ldr	r2, [pc, #392]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
 80043c8:	4a61      	ldr	r2, [pc, #388]	; (8004550 <HAL_TIM_Base_MspInit+0x2a0>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Stream1;
 80043ce:	4b62      	ldr	r3, [pc, #392]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043d0:	4a62      	ldr	r2, [pc, #392]	; (800455c <HAL_TIM_Base_MspInit+0x2ac>)
 80043d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043d6:	2213      	movs	r2, #19
 80043d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043da:	4b5f      	ldr	r3, [pc, #380]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e0:	4b5d      	ldr	r3, [pc, #372]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043ee:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 80043f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80043fe:	4b56      	ldr	r3, [pc, #344]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 8004400:	2200      	movs	r2, #0
 8004402:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004404:	4b54      	ldr	r3, [pc, #336]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 8004406:	2200      	movs	r2, #0
 8004408:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800440a:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 800440c:	2200      	movs	r2, #0
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8004410:	4851      	ldr	r0, [pc, #324]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 8004412:	f002 faa5 	bl	8006960 <HAL_DMA_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_TIM_Base_MspInit+0x170>
    {
      Error_Handler();
 800441c:	f7ff fa56 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a4d      	ldr	r2, [pc, #308]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
 8004426:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <HAL_TIM_Base_MspInit+0x2a8>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream2;
 800442c:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 800442e:	4a4d      	ldr	r2, [pc, #308]	; (8004564 <HAL_TIM_Base_MspInit+0x2b4>)
 8004430:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8004432:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004434:	2214      	movs	r2, #20
 8004436:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004438:	4b49      	ldr	r3, [pc, #292]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800443e:	4b48      	ldr	r3, [pc, #288]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004444:	4b46      	ldr	r3, [pc, #280]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800444a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800444c:	4b44      	ldr	r3, [pc, #272]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 800444e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004452:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004454:	4b42      	ldr	r3, [pc, #264]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800445a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800445c:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004462:	4b3f      	ldr	r3, [pc, #252]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004468:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 800446a:	2200      	movs	r2, #0
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800446e:	483c      	ldr	r0, [pc, #240]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004470:	f002 fa76 	bl	8006960 <HAL_DMA_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_TIM_Base_MspInit+0x1ce>
    {
      Error_Handler();
 800447a:	f7ff fa27 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a37      	ldr	r2, [pc, #220]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
 8004484:	4a36      	ldr	r2, [pc, #216]	; (8004560 <HAL_TIM_Base_MspInit+0x2b0>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	2101      	movs	r1, #1
 800448e:	201c      	movs	r0, #28
 8004490:	f002 fa23 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004494:	201c      	movs	r0, #28
 8004496:	f002 fa3a 	bl	800690e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800449a:	e089      	b.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
  else if(tim_baseHandle->Instance==TIM5)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a31      	ldr	r2, [pc, #196]	; (8004568 <HAL_TIM_Base_MspInit+0x2b8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10f      	bne.n	80044c6 <HAL_TIM_Base_MspInit+0x216>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ac:	4a25      	ldr	r2, [pc, #148]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	69fb      	ldr	r3, [r7, #28]
}
 80044c4:	e074      	b.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
  else if(tim_baseHandle->Instance==TIM12)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a28      	ldr	r2, [pc, #160]	; (800456c <HAL_TIM_Base_MspInit+0x2bc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10f      	bne.n	80044f0 <HAL_TIM_Base_MspInit+0x240>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d6:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	69bb      	ldr	r3, [r7, #24]
}
 80044ee:	e05f      	b.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
  else if(tim_baseHandle->Instance==TIM13)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <HAL_TIM_Base_MspInit+0x2c0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10f      	bne.n	800451a <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 80044fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004500:	4a10      	ldr	r2, [pc, #64]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 800450c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	e04a      	b.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
  else if(tim_baseHandle->Instance==TIM14)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIM_Base_MspInit+0x2c4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d129      	bne.n	8004578 <HAL_TIM_Base_MspInit+0x2c8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800452a:	4a06      	ldr	r2, [pc, #24]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_TIM_Base_MspInit+0x294>)
 8004536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
}
 8004542:	e035      	b.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
 8004544:	58024400 	.word	0x58024400
 8004548:	58020000 	.word	0x58020000
 800454c:	58020400 	.word	0x58020400
 8004550:	240009c0 	.word	0x240009c0
 8004554:	40020010 	.word	0x40020010
 8004558:	24000a38 	.word	0x24000a38
 800455c:	40020028 	.word	0x40020028
 8004560:	24000ab0 	.word	0x24000ab0
 8004564:	40020040 	.word	0x40020040
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40001800 	.word	0x40001800
 8004570:	40001c00 	.word	0x40001c00
 8004574:	40002000 	.word	0x40002000
  else if(tim_baseHandle->Instance==TIM15)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_TIM_Base_MspInit+0x308>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d116      	bne.n	80045b0 <HAL_TIM_Base_MspInit+0x300>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_TIM_Base_MspInit+0x30c>)
 8004584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004588:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <HAL_TIM_Base_MspInit+0x30c>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_TIM_Base_MspInit+0x30c>)
 8004594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80045a0:	2200      	movs	r2, #0
 80045a2:	2101      	movs	r1, #1
 80045a4:	2074      	movs	r0, #116	; 0x74
 80045a6:	f002 f998 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80045aa:	2074      	movs	r0, #116	; 0x74
 80045ac:	f002 f9af 	bl	800690e <HAL_NVIC_EnableIRQ>
}
 80045b0:	bf00      	nop
 80045b2:	3740      	adds	r7, #64	; 0x40
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40014000 	.word	0x40014000
 80045bc:	58024400 	.word	0x58024400

080045c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a39      	ldr	r2, [pc, #228]	; (80046c4 <HAL_TIM_MspPostInit+0x104>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d120      	bne.n	8004624 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 80045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e8:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 80045f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800460a:	2302      	movs	r3, #2
 800460c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004612:	2302      	movs	r3, #2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4619      	mov	r1, r3
 800461c:	482b      	ldr	r0, [pc, #172]	; (80046cc <HAL_TIM_MspPostInit+0x10c>)
 800461e:	f004 ffdb 	bl	80095d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004622:	e04a      	b.n	80046ba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_TIM_MspPostInit+0x110>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d120      	bne.n	8004670 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 8004630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 8004640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 800464c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004656:	2302      	movs	r3, #2
 8004658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800465e:	2309      	movs	r3, #9
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	4619      	mov	r1, r3
 8004668:	481a      	ldr	r0, [pc, #104]	; (80046d4 <HAL_TIM_MspPostInit+0x114>)
 800466a:	f004 ffb5 	bl	80095d8 <HAL_GPIO_Init>
}
 800466e:	e024      	b.n	80046ba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIM_MspPostInit+0x118>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d11f      	bne.n	80046ba <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 800467c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_TIM_MspPostInit+0x108>)
 800468c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800469c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
 80046a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046a2:	2302      	movs	r3, #2
 80046a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80046aa:	2309      	movs	r3, #9
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	4619      	mov	r1, r3
 80046b4:	4807      	ldr	r0, [pc, #28]	; (80046d4 <HAL_TIM_MspPostInit+0x114>)
 80046b6:	f004 ff8f 	bl	80095d8 <HAL_GPIO_Init>
}
 80046ba:	bf00      	nop
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40001800 	.word	0x40001800
 80046c8:	58024400 	.word	0x58024400
 80046cc:	58020400 	.word	0x58020400
 80046d0:	40001c00 	.word	0x40001c00
 80046d4:	58021400 	.word	0x58021400
 80046d8:	40002000 	.word	0x40002000

080046dc <get_Straj>:
float qi,qf;

double _rpm1,_rpm2,_rpm3;
uint32_t _peri1,_peri2,_peri3;

void get_Straj(float t){
 80046dc:	b580      	push	{r7, lr}
 80046de:	ed2d 8b06 	vpush	{d8-d10}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	ed87 0a01 	vstr	s0, [r7, #4]

    if (qf < qi){
 80046ea:	4bb6      	ldr	r3, [pc, #728]	; (80049c4 <get_Straj+0x2e8>)
 80046ec:	ed93 7a00 	vldr	s14, [r3]
 80046f0:	4bb5      	ldr	r3, [pc, #724]	; (80049c8 <get_Straj+0x2ec>)
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	f140 8081 	bpl.w	8004804 <get_Straj+0x128>

    flagInv = true;
 8004702:	4bb2      	ldr	r3, [pc, #712]	; (80049cc <get_Straj+0x2f0>)
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8004708:	4baf      	ldr	r3, [pc, #700]	; (80049c8 <get_Straj+0x2ec>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	eef1 7a67 	vneg.f32	s15, s15
 8004712:	4bad      	ldr	r3, [pc, #692]	; (80049c8 <get_Straj+0x2ec>)
 8004714:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 8004718:	4baa      	ldr	r3, [pc, #680]	; (80049c4 <get_Straj+0x2e8>)
 800471a:	edd3 7a00 	vldr	s15, [r3]
 800471e:	eef1 7a67 	vneg.f32	s15, s15
 8004722:	4ba8      	ldr	r3, [pc, #672]	; (80049c4 <get_Straj+0x2e8>)
 8004724:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 8004728:	4ba9      	ldr	r3, [pc, #676]	; (80049d0 <get_Straj+0x2f4>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	eef1 7a67 	vneg.f32	s15, s15
 8004732:	4ba7      	ldr	r3, [pc, #668]	; (80049d0 <get_Straj+0x2f4>)
 8004734:	edc3 7a00 	vstr	s15, [r3]
    vf = -vf;
 8004738:	4ba6      	ldr	r3, [pc, #664]	; (80049d4 <get_Straj+0x2f8>)
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	eef1 7a67 	vneg.f32	s15, s15
 8004742:	4ba4      	ldr	r3, [pc, #656]	; (80049d4 <get_Straj+0x2f8>)
 8004744:	edc3 7a00 	vstr	s15, [r3]

    vmax = -vmin;
 8004748:	4ba3      	ldr	r3, [pc, #652]	; (80049d8 <get_Straj+0x2fc>)
 800474a:	edd3 7a00 	vldr	s15, [r3]
 800474e:	eef1 7a67 	vneg.f32	s15, s15
 8004752:	4ba2      	ldr	r3, [pc, #648]	; (80049dc <get_Straj+0x300>)
 8004754:	edc3 7a00 	vstr	s15, [r3]
    vmin = -vmax;
 8004758:	4ba0      	ldr	r3, [pc, #640]	; (80049dc <get_Straj+0x300>)
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	eef1 7a67 	vneg.f32	s15, s15
 8004762:	4b9d      	ldr	r3, [pc, #628]	; (80049d8 <get_Straj+0x2fc>)
 8004764:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 8004768:	4b9d      	ldr	r3, [pc, #628]	; (80049e0 <get_Straj+0x304>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	eef1 7a67 	vneg.f32	s15, s15
 8004772:	4b9c      	ldr	r3, [pc, #624]	; (80049e4 <get_Straj+0x308>)
 8004774:	edc3 7a00 	vstr	s15, [r3]
    amin = -amax;
 8004778:	4b9a      	ldr	r3, [pc, #616]	; (80049e4 <get_Straj+0x308>)
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	eef1 7a67 	vneg.f32	s15, s15
 8004782:	4b97      	ldr	r3, [pc, #604]	; (80049e0 <get_Straj+0x304>)
 8004784:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 8004788:	4b97      	ldr	r3, [pc, #604]	; (80049e8 <get_Straj+0x30c>)
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	eef1 7a67 	vneg.f32	s15, s15
 8004792:	4b96      	ldr	r3, [pc, #600]	; (80049ec <get_Straj+0x310>)
 8004794:	edc3 7a00 	vstr	s15, [r3]
    jmin = -jmax;
 8004798:	4b94      	ldr	r3, [pc, #592]	; (80049ec <get_Straj+0x310>)
 800479a:	edd3 7a00 	vldr	s15, [r3]
 800479e:	eef1 7a67 	vneg.f32	s15, s15
 80047a2:	4b91      	ldr	r3, [pc, #580]	; (80049e8 <get_Straj+0x30c>)
 80047a4:	edc3 7a00 	vstr	s15, [r3]

    alima = jmax*Tj1;
 80047a8:	4b90      	ldr	r3, [pc, #576]	; (80049ec <get_Straj+0x310>)
 80047aa:	ed93 7a00 	vldr	s14, [r3]
 80047ae:	4b90      	ldr	r3, [pc, #576]	; (80049f0 <get_Straj+0x314>)
 80047b0:	edd3 7a00 	vldr	s15, [r3]
 80047b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b8:	4b8e      	ldr	r3, [pc, #568]	; (80049f4 <get_Straj+0x318>)
 80047ba:	edc3 7a00 	vstr	s15, [r3]
    alimd = -jmax*Tj2;
 80047be:	4b8b      	ldr	r3, [pc, #556]	; (80049ec <get_Straj+0x310>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	eeb1 7a67 	vneg.f32	s14, s15
 80047c8:	4b8b      	ldr	r3, [pc, #556]	; (80049f8 <get_Straj+0x31c>)
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <get_Straj+0x320>)
 80047d4:	edc3 7a00 	vstr	s15, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 80047d8:	4b89      	ldr	r3, [pc, #548]	; (8004a00 <get_Straj+0x324>)
 80047da:	ed93 7a00 	vldr	s14, [r3]
 80047de:	4b84      	ldr	r3, [pc, #528]	; (80049f0 <get_Straj+0x314>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047e8:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <get_Straj+0x318>)
 80047ea:	edd3 7a00 	vldr	s15, [r3]
 80047ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047f2:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <get_Straj+0x2f4>)
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fc:	4b81      	ldr	r3, [pc, #516]	; (8004a04 <get_Straj+0x328>)
 80047fe:	edc3 7a00 	vstr	s15, [r3]
 8004802:	e044      	b.n	800488e <get_Straj+0x1b2>

    }else{
        jmin = -jmax;
 8004804:	4b79      	ldr	r3, [pc, #484]	; (80049ec <get_Straj+0x310>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	eef1 7a67 	vneg.f32	s15, s15
 800480e:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <get_Straj+0x30c>)
 8004810:	edc3 7a00 	vstr	s15, [r3]
        amin = -amax;
 8004814:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <get_Straj+0x308>)
 8004816:	edd3 7a00 	vldr	s15, [r3]
 800481a:	eef1 7a67 	vneg.f32	s15, s15
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <get_Straj+0x304>)
 8004820:	edc3 7a00 	vstr	s15, [r3]
        vmin = -vmax;
 8004824:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <get_Straj+0x300>)
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	eef1 7a67 	vneg.f32	s15, s15
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <get_Straj+0x2fc>)
 8004830:	edc3 7a00 	vstr	s15, [r3]

        alima = jmax*Tj1;
 8004834:	4b6d      	ldr	r3, [pc, #436]	; (80049ec <get_Straj+0x310>)
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <get_Straj+0x314>)
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004844:	4b6b      	ldr	r3, [pc, #428]	; (80049f4 <get_Straj+0x318>)
 8004846:	edc3 7a00 	vstr	s15, [r3]
        alimd = -jmax*Tj2;
 800484a:	4b68      	ldr	r3, [pc, #416]	; (80049ec <get_Straj+0x310>)
 800484c:	edd3 7a00 	vldr	s15, [r3]
 8004850:	eeb1 7a67 	vneg.f32	s14, s15
 8004854:	4b68      	ldr	r3, [pc, #416]	; (80049f8 <get_Straj+0x31c>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <get_Straj+0x320>)
 8004860:	edc3 7a00 	vstr	s15, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004864:	4b66      	ldr	r3, [pc, #408]	; (8004a00 <get_Straj+0x324>)
 8004866:	ed93 7a00 	vldr	s14, [r3]
 800486a:	4b61      	ldr	r3, [pc, #388]	; (80049f0 <get_Straj+0x314>)
 800486c:	edd3 7a00 	vldr	s15, [r3]
 8004870:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004874:	4b5f      	ldr	r3, [pc, #380]	; (80049f4 <get_Straj+0x318>)
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800487e:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <get_Straj+0x2f4>)
 8004880:	edd3 7a00 	vldr	s15, [r3]
 8004884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004888:	4b5e      	ldr	r3, [pc, #376]	; (8004a04 <get_Straj+0x328>)
 800488a:	edc3 7a00 	vstr	s15, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 800488e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	f2c0 80bd 	blt.w	8004a18 <get_Straj+0x33c>
 800489e:	4b54      	ldr	r3, [pc, #336]	; (80049f0 <get_Straj+0x314>)
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80048a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	f200 80b2 	bhi.w	8004a18 <get_Straj+0x33c>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <get_Straj+0x2f4>)
 80048b6:	ed93 7a00 	vldr	s14, [r3]
 80048ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80048be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <get_Straj+0x2ec>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048cc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <get_Straj+0x310>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80048da:	edd7 7a01 	vldr	s15, [r7, #4]
 80048de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048e2:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80048e6:	eeb0 0b47 	vmov.f64	d0, d7
 80048ea:	f00e ff7d 	bl	80137e8 <pow>
 80048ee:	eeb0 7b40 	vmov.f64	d7, d0
 80048f2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80048f6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80048fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048fe:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <get_Straj+0x32c>)
 8004908:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+jmax*pow(t,2)/2;
 800490c:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <get_Straj+0x2f4>)
 800490e:	edd3 7a00 	vldr	s15, [r3]
 8004912:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <get_Straj+0x310>)
 8004918:	edd3 7a00 	vldr	s15, [r3]
 800491c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004920:	edd7 7a01 	vldr	s15, [r7, #4]
 8004924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004928:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800492c:	eeb0 0b47 	vmov.f64	d0, d7
 8004930:	f00e ff5a 	bl	80137e8 <pow>
 8004934:	eeb0 7b40 	vmov.f64	d7, d0
 8004938:	ee29 6b07 	vmul.f64	d6, d9, d7
 800493c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004940:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004944:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800494c:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <get_Straj+0x330>)
 800494e:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*t;
 8004952:	4b26      	ldr	r3, [pc, #152]	; (80049ec <get_Straj+0x310>)
 8004954:	ed93 7a00 	vldr	s14, [r3]
 8004958:	edd7 7a01 	vldr	s15, [r7, #4]
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <get_Straj+0x334>)
 8004962:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <get_Straj+0x310>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <get_Straj+0x338>)
 800496c:	6013      	str	r3, [r2, #0]
        if (flagInv){
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <get_Straj+0x2f0>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8545 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <get_Straj+0x32c>)
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	eef1 7a67 	vneg.f32	s15, s15
 8004982:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <get_Straj+0x32c>)
 8004984:	edc3 7a00 	vstr	s15, [r3]
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <get_Straj+0x330>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	eef1 7a67 	vneg.f32	s15, s15
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <get_Straj+0x330>)
 8004994:	edc3 7a00 	vstr	s15, [r3]
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <get_Straj+0x334>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	eef1 7a67 	vneg.f32	s15, s15
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <get_Straj+0x334>)
 80049a4:	edc3 7a00 	vstr	s15, [r3]
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <get_Straj+0x338>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	eef1 7a67 	vneg.f32	s15, s15
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <get_Straj+0x338>)
 80049b4:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <get_Straj+0x2f0>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80049be:	f000 bd20 	b.w	8005402 <get_Straj+0xd26>
 80049c2:	bf00      	nop
 80049c4:	24000b5c 	.word	0x24000b5c
 80049c8:	24000b58 	.word	0x24000b58
 80049cc:	24000b28 	.word	0x24000b28
 80049d0:	2400072c 	.word	0x2400072c
 80049d4:	24000730 	.word	0x24000730
 80049d8:	24000728 	.word	0x24000728
 80049dc:	2400009c 	.word	0x2400009c
 80049e0:	24000734 	.word	0x24000734
 80049e4:	240000a0 	.word	0x240000a0
 80049e8:	24000724 	.word	0x24000724
 80049ec:	24000098 	.word	0x24000098
 80049f0:	24000b48 	.word	0x24000b48
 80049f4:	24000b2c 	.word	0x24000b2c
 80049f8:	24000b4c 	.word	0x24000b4c
 80049fc:	24000b30 	.word	0x24000b30
 8004a00:	24000b3c 	.word	0x24000b3c
 8004a04:	24000b34 	.word	0x24000b34
 8004a08:	24000714 	.word	0x24000714
 8004a0c:	24000718 	.word	0x24000718
 8004a10:	2400071c 	.word	0x2400071c
 8004a14:	24000720 	.word	0x24000720
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004a18:	4bc1      	ldr	r3, [pc, #772]	; (8004d20 <get_Straj+0x644>)
 8004a1a:	edd3 7a00 	vldr	s15, [r3]
 8004a1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2a:	f340 80af 	ble.w	8004b8c <get_Straj+0x4b0>
 8004a2e:	4bbd      	ldr	r3, [pc, #756]	; (8004d24 <get_Straj+0x648>)
 8004a30:	ed93 7a00 	vldr	s14, [r3]
 8004a34:	4bba      	ldr	r3, [pc, #744]	; (8004d20 <get_Straj+0x644>)
 8004a36:	edd3 7a00 	vldr	s15, [r3]
 8004a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	f200 809f 	bhi.w	8004b8c <get_Straj+0x4b0>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004a4e:	4bb6      	ldr	r3, [pc, #728]	; (8004d28 <get_Straj+0x64c>)
 8004a50:	ed93 7a00 	vldr	s14, [r3]
 8004a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a5c:	4bb3      	ldr	r3, [pc, #716]	; (8004d2c <get_Straj+0x650>)
 8004a5e:	edd3 7a00 	vldr	s15, [r3]
 8004a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a66:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004a6a:	4bb1      	ldr	r3, [pc, #708]	; (8004d30 <get_Straj+0x654>)
 8004a6c:	ed93 7a00 	vldr	s14, [r3]
 8004a70:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8004a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a78:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a88:	eeb0 0b47 	vmov.f64	d0, d7
 8004a8c:	f00e feac 	bl	80137e8 <pow>
 8004a90:	eeb0 7b40 	vmov.f64	d7, d0
 8004a94:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004a98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a9c:	4ba0      	ldr	r3, [pc, #640]	; (8004d20 <get_Straj+0x644>)
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab6:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004aba:	4b99      	ldr	r3, [pc, #612]	; (8004d20 <get_Straj+0x644>)
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ac4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8004acc:	f00e fe8c 	bl	80137e8 <pow>
 8004ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ad4:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004ad8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004adc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004ae0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ae4:	4b93      	ldr	r3, [pc, #588]	; (8004d34 <get_Straj+0x658>)
 8004ae6:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <get_Straj+0x644>)
 8004aec:	ed93 7a00 	vldr	s14, [r3]
 8004af0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004af8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004afc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b00:	4b8d      	ldr	r3, [pc, #564]	; (8004d38 <get_Straj+0x65c>)
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0a:	4b87      	ldr	r3, [pc, #540]	; (8004d28 <get_Straj+0x64c>)
 8004b0c:	edd3 7a00 	vldr	s15, [r3]
 8004b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b14:	4b89      	ldr	r3, [pc, #548]	; (8004d3c <get_Straj+0x660>)
 8004b16:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*Tj1;
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <get_Straj+0x664>)
 8004b1c:	ed93 7a00 	vldr	s14, [r3]
 8004b20:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <get_Straj+0x644>)
 8004b22:	edd3 7a00 	vldr	s15, [r3]
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	4b86      	ldr	r3, [pc, #536]	; (8004d44 <get_Straj+0x668>)
 8004b2c:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 8004b30:	4b85      	ldr	r3, [pc, #532]	; (8004d48 <get_Straj+0x66c>)
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        if (flagInv){
 8004b38:	4b84      	ldr	r3, [pc, #528]	; (8004d4c <get_Straj+0x670>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8460 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004b42:	4b7c      	ldr	r3, [pc, #496]	; (8004d34 <get_Straj+0x658>)
 8004b44:	edd3 7a00 	vldr	s15, [r3]
 8004b48:	eef1 7a67 	vneg.f32	s15, s15
 8004b4c:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <get_Straj+0x658>)
 8004b4e:	edc3 7a00 	vstr	s15, [r3]
 8004b52:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <get_Straj+0x660>)
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	eef1 7a67 	vneg.f32	s15, s15
 8004b5c:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <get_Straj+0x660>)
 8004b5e:	edc3 7a00 	vstr	s15, [r3]
 8004b62:	4b78      	ldr	r3, [pc, #480]	; (8004d44 <get_Straj+0x668>)
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	eef1 7a67 	vneg.f32	s15, s15
 8004b6c:	4b75      	ldr	r3, [pc, #468]	; (8004d44 <get_Straj+0x668>)
 8004b6e:	edc3 7a00 	vstr	s15, [r3]
 8004b72:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <get_Straj+0x66c>)
 8004b74:	edd3 7a00 	vldr	s15, [r3]
 8004b78:	eef1 7a67 	vneg.f32	s15, s15
 8004b7c:	4b72      	ldr	r3, [pc, #456]	; (8004d48 <get_Straj+0x66c>)
 8004b7e:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004b82:	4b72      	ldr	r3, [pc, #456]	; (8004d4c <get_Straj+0x670>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004b88:	f000 bc3b 	b.w	8005402 <get_Straj+0xd26>
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004b8c:	4b65      	ldr	r3, [pc, #404]	; (8004d24 <get_Straj+0x648>)
 8004b8e:	ed93 7a00 	vldr	s14, [r3]
 8004b92:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <get_Straj+0x644>)
 8004b94:	edd3 7a00 	vldr	s15, [r3]
 8004b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	f340 80d8 	ble.w	8004d5c <get_Straj+0x680>
 8004bac:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <get_Straj+0x648>)
 8004bae:	edd3 7a00 	vldr	s15, [r3]
 8004bb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	f200 80cd 	bhi.w	8004d5c <get_Straj+0x680>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004bc2:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <get_Straj+0x674>)
 8004bc4:	ed93 7a00 	vldr	s14, [r3]
 8004bc8:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <get_Straj+0x64c>)
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bd2:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <get_Straj+0x648>)
 8004bd4:	edd3 7a00 	vldr	s15, [r3]
 8004bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004be0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004be4:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <get_Straj+0x650>)
 8004be6:	edd3 7a00 	vldr	s15, [r3]
 8004bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bee:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <get_Straj+0x648>)
 8004bf0:	edd3 6a00 	vldr	s13, [r3]
 8004bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004bfc:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <get_Straj+0x674>)
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004c0e:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <get_Straj+0x678>)
 8004c10:	edd3 7a00 	vldr	s15, [r3]
 8004c14:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <get_Straj+0x648>)
 8004c1a:	ed93 7a00 	vldr	s14, [r3]
 8004c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c2a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004c2e:	eeb0 0b47 	vmov.f64	d0, d7
 8004c32:	f00e fdd9 	bl	80137e8 <pow>
 8004c36:	eeb0 7b40 	vmov.f64	d7, d0
 8004c3a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004c3e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004c42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c46:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004c4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <get_Straj+0x658>)
 8004c50:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004c54:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <get_Straj+0x67c>)
 8004c56:	edd3 7a00 	vldr	s15, [r3]
 8004c5a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <get_Straj+0x678>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004c68:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <get_Straj+0x648>)
 8004c6a:	ed93 7a00 	vldr	s14, [r3]
 8004c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c7a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c7e:	eeb0 0b47 	vmov.f64	d0, d7
 8004c82:	f00e fdb1 	bl	80137e8 <pow>
 8004c86:	eeb0 7b40 	vmov.f64	d7, d0
 8004c8a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004c8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004c9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <get_Straj+0x660>)
 8004ca0:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmin*(Ta-t);
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <get_Straj+0x678>)
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	eeb1 7a67 	vneg.f32	s14, s15
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <get_Straj+0x648>)
 8004cb0:	edd3 6a00 	vldr	s13, [r3]
 8004cb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <get_Straj+0x668>)
 8004cc2:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmin;
 8004cc6:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <get_Straj+0x678>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <get_Straj+0x66c>)
 8004ccc:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8004cce:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <get_Straj+0x670>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8395 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <get_Straj+0x658>)
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	eef1 7a67 	vneg.f32	s15, s15
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <get_Straj+0x658>)
 8004ce4:	edc3 7a00 	vstr	s15, [r3]
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <get_Straj+0x660>)
 8004cea:	edd3 7a00 	vldr	s15, [r3]
 8004cee:	eef1 7a67 	vneg.f32	s15, s15
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <get_Straj+0x660>)
 8004cf4:	edc3 7a00 	vstr	s15, [r3]
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <get_Straj+0x668>)
 8004cfa:	edd3 7a00 	vldr	s15, [r3]
 8004cfe:	eef1 7a67 	vneg.f32	s15, s15
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <get_Straj+0x668>)
 8004d04:	edc3 7a00 	vstr	s15, [r3]
 8004d08:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <get_Straj+0x66c>)
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	eef1 7a67 	vneg.f32	s15, s15
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <get_Straj+0x66c>)
 8004d14:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <get_Straj+0x670>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004d1e:	e370      	b.n	8005402 <get_Straj+0xd26>
 8004d20:	24000b48 	.word	0x24000b48
 8004d24:	24000b3c 	.word	0x24000b3c
 8004d28:	2400072c 	.word	0x2400072c
 8004d2c:	24000b58 	.word	0x24000b58
 8004d30:	24000b2c 	.word	0x24000b2c
 8004d34:	24000714 	.word	0x24000714
 8004d38:	240000a0 	.word	0x240000a0
 8004d3c:	24000718 	.word	0x24000718
 8004d40:	24000098 	.word	0x24000098
 8004d44:	2400071c 	.word	0x2400071c
 8004d48:	24000720 	.word	0x24000720
 8004d4c:	24000b28 	.word	0x24000b28
 8004d50:	24000b34 	.word	0x24000b34
 8004d54:	24000724 	.word	0x24000724
 8004d58:	2400009c 	.word	0x2400009c
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004d5c:	4bae      	ldr	r3, [pc, #696]	; (8005018 <get_Straj+0x93c>)
 8004d5e:	edd3 7a00 	vldr	s15, [r3]
 8004d62:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	dd6a      	ble.n	8004e46 <get_Straj+0x76a>
 8004d70:	4ba9      	ldr	r3, [pc, #676]	; (8005018 <get_Straj+0x93c>)
 8004d72:	ed93 7a00 	vldr	s14, [r3]
 8004d76:	4ba9      	ldr	r3, [pc, #676]	; (800501c <get_Straj+0x940>)
 8004d78:	edd3 7a00 	vldr	s15, [r3]
 8004d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d80:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	d85b      	bhi.n	8004e46 <get_Straj+0x76a>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004d8e:	4ba4      	ldr	r3, [pc, #656]	; (8005020 <get_Straj+0x944>)
 8004d90:	ed93 7a00 	vldr	s14, [r3]
 8004d94:	4ba3      	ldr	r3, [pc, #652]	; (8005024 <get_Straj+0x948>)
 8004d96:	edd3 7a00 	vldr	s15, [r3]
 8004d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d9e:	4b9e      	ldr	r3, [pc, #632]	; (8005018 <get_Straj+0x93c>)
 8004da0:	edd3 7a00 	vldr	s15, [r3]
 8004da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004dac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004db0:	4b9d      	ldr	r3, [pc, #628]	; (8005028 <get_Straj+0x94c>)
 8004db2:	edd3 7a00 	vldr	s15, [r3]
 8004db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dba:	4b97      	ldr	r3, [pc, #604]	; (8005018 <get_Straj+0x93c>)
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	edd7 6a01 	vldr	s13, [r7, #4]
 8004dc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004dc8:	4b95      	ldr	r3, [pc, #596]	; (8005020 <get_Straj+0x944>)
 8004dca:	edd3 7a00 	vldr	s15, [r3]
 8004dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd6:	4b95      	ldr	r3, [pc, #596]	; (800502c <get_Straj+0x950>)
 8004dd8:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax;
 8004ddc:	4b94      	ldr	r3, [pc, #592]	; (8005030 <get_Straj+0x954>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a94      	ldr	r2, [pc, #592]	; (8005034 <get_Straj+0x958>)
 8004de2:	6013      	str	r3, [r2, #0]
        qdd = 0;
 8004de4:	4b94      	ldr	r3, [pc, #592]	; (8005038 <get_Straj+0x95c>)
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
        qddd = 0;
 8004dec:	4b93      	ldr	r3, [pc, #588]	; (800503c <get_Straj+0x960>)
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
        if (flagInv){
 8004df4:	4b92      	ldr	r3, [pc, #584]	; (8005040 <get_Straj+0x964>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8302 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	; (800502c <get_Straj+0x950>)
 8004e00:	edd3 7a00 	vldr	s15, [r3]
 8004e04:	eef1 7a67 	vneg.f32	s15, s15
 8004e08:	4b88      	ldr	r3, [pc, #544]	; (800502c <get_Straj+0x950>)
 8004e0a:	edc3 7a00 	vstr	s15, [r3]
 8004e0e:	4b89      	ldr	r3, [pc, #548]	; (8005034 <get_Straj+0x958>)
 8004e10:	edd3 7a00 	vldr	s15, [r3]
 8004e14:	eef1 7a67 	vneg.f32	s15, s15
 8004e18:	4b86      	ldr	r3, [pc, #536]	; (8005034 <get_Straj+0x958>)
 8004e1a:	edc3 7a00 	vstr	s15, [r3]
 8004e1e:	4b86      	ldr	r3, [pc, #536]	; (8005038 <get_Straj+0x95c>)
 8004e20:	edd3 7a00 	vldr	s15, [r3]
 8004e24:	eef1 7a67 	vneg.f32	s15, s15
 8004e28:	4b83      	ldr	r3, [pc, #524]	; (8005038 <get_Straj+0x95c>)
 8004e2a:	edc3 7a00 	vstr	s15, [r3]
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <get_Straj+0x960>)
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eef1 7a67 	vneg.f32	s15, s15
 8004e38:	4b80      	ldr	r3, [pc, #512]	; (800503c <get_Straj+0x960>)
 8004e3a:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004e3e:	4b80      	ldr	r3, [pc, #512]	; (8005040 <get_Straj+0x964>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e44:	e2dd      	b.n	8005402 <get_Straj+0xd26>
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004e46:	4b7f      	ldr	r3, [pc, #508]	; (8005044 <get_Straj+0x968>)
 8004e48:	ed93 7a00 	vldr	s14, [r3]
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	; (8005048 <get_Straj+0x96c>)
 8004e4e:	edd3 7a00 	vldr	s15, [r3]
 8004e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e56:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	f2c0 80fd 	blt.w	8005060 <get_Straj+0x984>
 8004e66:	4b77      	ldr	r3, [pc, #476]	; (8005044 <get_Straj+0x968>)
 8004e68:	ed93 7a00 	vldr	s14, [r3]
 8004e6c:	4b76      	ldr	r3, [pc, #472]	; (8005048 <get_Straj+0x96c>)
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e76:	4b75      	ldr	r3, [pc, #468]	; (800504c <get_Straj+0x970>)
 8004e78:	edd3 7a00 	vldr	s15, [r3]
 8004e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e80:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8c:	f200 80e8 	bhi.w	8005060 <get_Straj+0x984>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004e90:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <get_Straj+0x974>)
 8004e92:	ed93 7a00 	vldr	s14, [r3]
 8004e96:	4b62      	ldr	r3, [pc, #392]	; (8005020 <get_Straj+0x944>)
 8004e98:	edd3 6a00 	vldr	s13, [r3]
 8004e9c:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <get_Straj+0x978>)
 8004e9e:	edd3 7a00 	vldr	s15, [r3]
 8004ea2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004ea6:	4b68      	ldr	r3, [pc, #416]	; (8005048 <get_Straj+0x96c>)
 8004ea8:	edd3 7a00 	vldr	s15, [r3]
 8004eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004eb0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004eb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ebc:	4b61      	ldr	r3, [pc, #388]	; (8005044 <get_Straj+0x968>)
 8004ebe:	edd3 7a00 	vldr	s15, [r3]
 8004ec2:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ec6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004eca:	4b5f      	ldr	r3, [pc, #380]	; (8005048 <get_Straj+0x96c>)
 8004ecc:	edd3 7a00 	vldr	s15, [r3]
 8004ed0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004ed4:	4b52      	ldr	r3, [pc, #328]	; (8005020 <get_Straj+0x944>)
 8004ed6:	edd3 7a00 	vldr	s15, [r3]
 8004eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <get_Straj+0x97c>)
 8004ee8:	edd3 7a00 	vldr	s15, [r3]
 8004eec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004ef0:	4b54      	ldr	r3, [pc, #336]	; (8005044 <get_Straj+0x968>)
 8004ef2:	edd3 7a00 	vldr	s15, [r3]
 8004ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004efe:	4b52      	ldr	r3, [pc, #328]	; (8005048 <get_Straj+0x96c>)
 8004f00:	edd3 7a00 	vldr	s15, [r3]
 8004f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f0c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f10:	eeb0 0b47 	vmov.f64	d0, d7
 8004f14:	f00e fc68 	bl	80137e8 <pow>
 8004f18:	eeb0 6b40 	vmov.f64	d6, d0
 8004f1c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004f24:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f28:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004f2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <get_Straj+0x950>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004f36:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <get_Straj+0x944>)
 8004f38:	edd3 7a00 	vldr	s15, [r3]
 8004f3c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004f40:	4b45      	ldr	r3, [pc, #276]	; (8005058 <get_Straj+0x97c>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <get_Straj+0x968>)
 8004f4c:	edd3 7a00 	vldr	s15, [r3]
 8004f50:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f58:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <get_Straj+0x96c>)
 8004f5a:	edd3 7a00 	vldr	s15, [r3]
 8004f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f6e:	f00e fc3b 	bl	80137e8 <pow>
 8004f72:	eeb0 6b40 	vmov.f64	d6, d0
 8004f76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004f7e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f82:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004f86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <get_Straj+0x958>)
 8004f8c:	edc3 7a00 	vstr	s15, [r3]
        qdd=-jmax*(t-T+Td);
 8004f90:	4b31      	ldr	r3, [pc, #196]	; (8005058 <get_Straj+0x97c>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	eeb1 7a67 	vneg.f32	s14, s15
 8004f9a:	4b2a      	ldr	r3, [pc, #168]	; (8005044 <get_Straj+0x968>)
 8004f9c:	edd3 7a00 	vldr	s15, [r3]
 8004fa0:	edd7 6a01 	vldr	s13, [r7, #4]
 8004fa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <get_Straj+0x96c>)
 8004faa:	edd3 7a00 	vldr	s15, [r3]
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <get_Straj+0x95c>)
 8004fb8:	edc3 7a00 	vstr	s15, [r3]
        qddd=jmin;
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <get_Straj+0x980>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <get_Straj+0x960>)
 8004fc2:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <get_Straj+0x964>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 821a 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <get_Straj+0x950>)
 8004fd0:	edd3 7a00 	vldr	s15, [r3]
 8004fd4:	eef1 7a67 	vneg.f32	s15, s15
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <get_Straj+0x950>)
 8004fda:	edc3 7a00 	vstr	s15, [r3]
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <get_Straj+0x958>)
 8004fe0:	edd3 7a00 	vldr	s15, [r3]
 8004fe4:	eef1 7a67 	vneg.f32	s15, s15
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <get_Straj+0x958>)
 8004fea:	edc3 7a00 	vstr	s15, [r3]
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <get_Straj+0x95c>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	eef1 7a67 	vneg.f32	s15, s15
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <get_Straj+0x95c>)
 8004ffa:	edc3 7a00 	vstr	s15, [r3]
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	; (800503c <get_Straj+0x960>)
 8005000:	edd3 7a00 	vldr	s15, [r3]
 8005004:	eef1 7a67 	vneg.f32	s15, s15
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <get_Straj+0x960>)
 800500a:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <get_Straj+0x964>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005014:	e1f5      	b.n	8005402 <get_Straj+0xd26>
 8005016:	bf00      	nop
 8005018:	24000b3c 	.word	0x24000b3c
 800501c:	24000b44 	.word	0x24000b44
 8005020:	24000b34 	.word	0x24000b34
 8005024:	2400072c 	.word	0x2400072c
 8005028:	24000b58 	.word	0x24000b58
 800502c:	24000714 	.word	0x24000714
 8005030:	2400009c 	.word	0x2400009c
 8005034:	24000718 	.word	0x24000718
 8005038:	2400071c 	.word	0x2400071c
 800503c:	24000720 	.word	0x24000720
 8005040:	24000b28 	.word	0x24000b28
 8005044:	24000b38 	.word	0x24000b38
 8005048:	24000b40 	.word	0x24000b40
 800504c:	24000b4c 	.word	0x24000b4c
 8005050:	24000b5c 	.word	0x24000b5c
 8005054:	24000730 	.word	0x24000730
 8005058:	24000098 	.word	0x24000098
 800505c:	24000724 	.word	0x24000724
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8005060:	4b8d      	ldr	r3, [pc, #564]	; (8005298 <get_Straj+0xbbc>)
 8005062:	ed93 7a00 	vldr	s14, [r3]
 8005066:	4b8d      	ldr	r3, [pc, #564]	; (800529c <get_Straj+0xbc0>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005070:	4b8b      	ldr	r3, [pc, #556]	; (80052a0 <get_Straj+0xbc4>)
 8005072:	edd3 7a00 	vldr	s15, [r3]
 8005076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800507a:	ed97 7a01 	vldr	s14, [r7, #4]
 800507e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	f340 80eb 	ble.w	8005260 <get_Straj+0xb84>
 800508a:	4b83      	ldr	r3, [pc, #524]	; (8005298 <get_Straj+0xbbc>)
 800508c:	ed93 7a00 	vldr	s14, [r3]
 8005090:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <get_Straj+0xbc4>)
 8005092:	edd3 7a00 	vldr	s15, [r3]
 8005096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800509a:	ed97 7a01 	vldr	s14, [r7, #4]
 800509e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a6:	f200 80db 	bhi.w	8005260 <get_Straj+0xb84>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 80050aa:	4b7e      	ldr	r3, [pc, #504]	; (80052a4 <get_Straj+0xbc8>)
 80050ac:	ed93 7a00 	vldr	s14, [r3]
 80050b0:	4b7d      	ldr	r3, [pc, #500]	; (80052a8 <get_Straj+0xbcc>)
 80050b2:	edd3 6a00 	vldr	s13, [r3]
 80050b6:	4b7d      	ldr	r3, [pc, #500]	; (80052ac <get_Straj+0xbd0>)
 80050b8:	edd3 7a00 	vldr	s15, [r3]
 80050bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050c0:	4b76      	ldr	r3, [pc, #472]	; (800529c <get_Straj+0xbc0>)
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80050ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80050d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050d6:	4b70      	ldr	r3, [pc, #448]	; (8005298 <get_Straj+0xbbc>)
 80050d8:	edd3 7a00 	vldr	s15, [r3]
 80050dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80050e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80050e4:	4b6d      	ldr	r3, [pc, #436]	; (800529c <get_Straj+0xbc0>)
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050ee:	4b6e      	ldr	r3, [pc, #440]	; (80052a8 <get_Straj+0xbcc>)
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005100:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <get_Straj+0xbd4>)
 8005102:	ed93 7a00 	vldr	s14, [r3]
 8005106:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800510a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800510e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <get_Straj+0xbbc>)
 8005114:	edd3 7a00 	vldr	s15, [r3]
 8005118:	ed97 7a01 	vldr	s14, [r7, #4]
 800511c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005120:	4b5e      	ldr	r3, [pc, #376]	; (800529c <get_Straj+0xbc0>)
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800512e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005132:	eeb0 0b47 	vmov.f64	d0, d7
 8005136:	f00e fb57 	bl	80137e8 <pow>
 800513a:	eeb0 7b40 	vmov.f64	d7, d0
 800513e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005142:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005146:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <get_Straj+0xbc4>)
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005154:	4b50      	ldr	r3, [pc, #320]	; (8005298 <get_Straj+0xbbc>)
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	edd7 5a01 	vldr	s11, [r7, #4]
 800515e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005162:	4b4e      	ldr	r3, [pc, #312]	; (800529c <get_Straj+0xbc0>)
 8005164:	edd3 7a00 	vldr	s15, [r3]
 8005168:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800516c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005174:	ee36 ab47 	vsub.f64	d10, d6, d7
 8005178:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <get_Straj+0xbc4>)
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005182:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005186:	eeb0 0b47 	vmov.f64	d0, d7
 800518a:	f00e fb2d 	bl	80137e8 <pow>
 800518e:	eeb0 7b40 	vmov.f64	d7, d0
 8005192:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8005196:	ee29 7b07 	vmul.f64	d7, d9, d7
 800519a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800519e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80051a2:	4b44      	ldr	r3, [pc, #272]	; (80052b4 <get_Straj+0xbd8>)
 80051a4:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 80051a8:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <get_Straj+0xbbc>)
 80051aa:	edd3 7a00 	vldr	s15, [r3]
 80051ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80051b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <get_Straj+0xbc0>)
 80051b8:	edd3 7a00 	vldr	s15, [r3]
 80051bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <get_Straj+0xbc4>)
 80051c2:	edd3 6a00 	vldr	s13, [r3]
 80051c6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80051ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80051ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <get_Straj+0xbd4>)
 80051d4:	edd3 7a00 	vldr	s15, [r3]
 80051d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <get_Straj+0xbcc>)
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <get_Straj+0xbdc>)
 80051e8:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*Tj2;
 80051ec:	4b33      	ldr	r3, [pc, #204]	; (80052bc <get_Straj+0xbe0>)
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	eeb1 7a67 	vneg.f32	s14, s15
 80051f6:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <get_Straj+0xbc4>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005200:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <get_Straj+0xbe4>)
 8005202:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 8005206:	4b2f      	ldr	r3, [pc, #188]	; (80052c4 <get_Straj+0xbe8>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
        if (flagInv){
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <get_Straj+0xbec>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80f5 	beq.w	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005218:	4b26      	ldr	r3, [pc, #152]	; (80052b4 <get_Straj+0xbd8>)
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	eef1 7a67 	vneg.f32	s15, s15
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <get_Straj+0xbd8>)
 8005224:	edc3 7a00 	vstr	s15, [r3]
 8005228:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <get_Straj+0xbdc>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	eef1 7a67 	vneg.f32	s15, s15
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <get_Straj+0xbdc>)
 8005234:	edc3 7a00 	vstr	s15, [r3]
 8005238:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <get_Straj+0xbe4>)
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	eef1 7a67 	vneg.f32	s15, s15
 8005242:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <get_Straj+0xbe4>)
 8005244:	edc3 7a00 	vstr	s15, [r3]
 8005248:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <get_Straj+0xbe8>)
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	eef1 7a67 	vneg.f32	s15, s15
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <get_Straj+0xbe8>)
 8005254:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <get_Straj+0xbec>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800525e:	e0d0      	b.n	8005402 <get_Straj+0xd26>
        }

    } else if (t>T-Tj2 && t<=T){
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <get_Straj+0xbbc>)
 8005262:	ed93 7a00 	vldr	s14, [r3]
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <get_Straj+0xbc4>)
 8005268:	edd3 7a00 	vldr	s15, [r3]
 800526c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005270:	ed97 7a01 	vldr	s14, [r7, #4]
 8005274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527c:	dc00      	bgt.n	8005280 <get_Straj+0xba4>
            flagInv = false;
        }
    }


}
 800527e:	e0c0      	b.n	8005402 <get_Straj+0xd26>
    } else if (t>T-Tj2 && t<=T){
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <get_Straj+0xbbc>)
 8005282:	edd3 7a00 	vldr	s15, [r3]
 8005286:	ed97 7a01 	vldr	s14, [r7, #4]
 800528a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005292:	d91b      	bls.n	80052cc <get_Straj+0xbf0>
}
 8005294:	e0b5      	b.n	8005402 <get_Straj+0xd26>
 8005296:	bf00      	nop
 8005298:	24000b38 	.word	0x24000b38
 800529c:	24000b40 	.word	0x24000b40
 80052a0:	24000b4c 	.word	0x24000b4c
 80052a4:	24000b5c 	.word	0x24000b5c
 80052a8:	24000b34 	.word	0x24000b34
 80052ac:	24000730 	.word	0x24000730
 80052b0:	24000b30 	.word	0x24000b30
 80052b4:	24000714 	.word	0x24000714
 80052b8:	24000718 	.word	0x24000718
 80052bc:	24000098 	.word	0x24000098
 80052c0:	2400071c 	.word	0x2400071c
 80052c4:	24000720 	.word	0x24000720
 80052c8:	24000b28 	.word	0x24000b28
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 80052cc:	4b50      	ldr	r3, [pc, #320]	; (8005410 <get_Straj+0xd34>)
 80052ce:	ed93 7a00 	vldr	s14, [r3]
 80052d2:	4b50      	ldr	r3, [pc, #320]	; (8005414 <get_Straj+0xd38>)
 80052d4:	edd3 6a00 	vldr	s13, [r3]
 80052d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80052dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80052e0:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <get_Straj+0xd3c>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80052f2:	4b4a      	ldr	r3, [pc, #296]	; (800541c <get_Straj+0xd40>)
 80052f4:	edd3 7a00 	vldr	s15, [r3]
 80052f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <get_Straj+0xd38>)
 80052fe:	ed93 7a00 	vldr	s14, [r3]
 8005302:	edd7 7a01 	vldr	s15, [r7, #4]
 8005306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800530e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005312:	eeb0 0b47 	vmov.f64	d0, d7
 8005316:	f00e fa67 	bl	80137e8 <pow>
 800531a:	eeb0 6b40 	vmov.f64	d6, d0
 800531e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005322:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005326:	ee29 7b07 	vmul.f64	d7, d9, d7
 800532a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800532e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005332:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <get_Straj+0xd44>)
 8005334:	edc3 7a00 	vstr	s15, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 8005338:	4b37      	ldr	r3, [pc, #220]	; (8005418 <get_Straj+0xd3c>)
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <get_Straj+0xd40>)
 8005344:	edd3 7a00 	vldr	s15, [r3]
 8005348:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <get_Straj+0xd38>)
 800534e:	ed93 7a00 	vldr	s14, [r3]
 8005352:	edd7 7a01 	vldr	s15, [r7, #4]
 8005356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800535a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800535e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005362:	eeb0 0b47 	vmov.f64	d0, d7
 8005366:	f00e fa3f 	bl	80137e8 <pow>
 800536a:	eeb0 7b40 	vmov.f64	d7, d0
 800536e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8005372:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005376:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800537a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800537e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <get_Straj+0xd48>)
 8005384:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*(T-t);
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <get_Straj+0xd40>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	eeb1 7a67 	vneg.f32	s14, s15
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <get_Straj+0xd38>)
 8005394:	edd3 6a00 	vldr	s13, [r3]
 8005398:	edd7 7a01 	vldr	s15, [r7, #4]
 800539c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80053a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a4:	4b20      	ldr	r3, [pc, #128]	; (8005428 <get_Straj+0xd4c>)
 80053a6:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 80053aa:	4b1c      	ldr	r3, [pc, #112]	; (800541c <get_Straj+0xd40>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <get_Straj+0xd50>)
 80053b0:	6013      	str	r3, [r2, #0]
        if (flagInv){
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <get_Straj+0xd54>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d023      	beq.n	8005402 <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <get_Straj+0xd44>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	eef1 7a67 	vneg.f32	s15, s15
 80053c4:	4b16      	ldr	r3, [pc, #88]	; (8005420 <get_Straj+0xd44>)
 80053c6:	edc3 7a00 	vstr	s15, [r3]
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <get_Straj+0xd48>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	eef1 7a67 	vneg.f32	s15, s15
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <get_Straj+0xd48>)
 80053d6:	edc3 7a00 	vstr	s15, [r3]
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <get_Straj+0xd4c>)
 80053dc:	edd3 7a00 	vldr	s15, [r3]
 80053e0:	eef1 7a67 	vneg.f32	s15, s15
 80053e4:	4b10      	ldr	r3, [pc, #64]	; (8005428 <get_Straj+0xd4c>)
 80053e6:	edc3 7a00 	vstr	s15, [r3]
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <get_Straj+0xd50>)
 80053ec:	edd3 7a00 	vldr	s15, [r3]
 80053f0:	eef1 7a67 	vneg.f32	s15, s15
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <get_Straj+0xd50>)
 80053f6:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <get_Straj+0xd54>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
}
 8005400:	e7ff      	b.n	8005402 <get_Straj+0xd26>
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	ecbd 8b06 	vpop	{d8-d10}
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	24000b5c 	.word	0x24000b5c
 8005414:	24000b38 	.word	0x24000b38
 8005418:	24000730 	.word	0x24000730
 800541c:	24000098 	.word	0x24000098
 8005420:	24000714 	.word	0x24000714
 8005424:	24000718 	.word	0x24000718
 8005428:	2400071c 	.word	0x2400071c
 800542c:	24000720 	.word	0x24000720
 8005430:	24000b28 	.word	0x24000b28
 8005434:	00000000 	.word	0x00000000

08005438 <update_ScurveTraj>:


void update_ScurveTraj(float _qi ,float _qf, float vi,float vf ,float vmax,float amax,float jmax){
 8005438:	b580      	push	{r7, lr}
 800543a:	ed2d 8b06 	vpush	{d8-d10}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	ed87 0a07 	vstr	s0, [r7, #28]
 8005446:	edc7 0a06 	vstr	s1, [r7, #24]
 800544a:	ed87 1a05 	vstr	s2, [r7, #20]
 800544e:	edc7 1a04 	vstr	s3, [r7, #16]
 8005452:	ed87 2a03 	vstr	s4, [r7, #12]
 8005456:	edc7 2a02 	vstr	s5, [r7, #8]
 800545a:	ed87 3a01 	vstr	s6, [r7, #4]

jmin = -jmax;
 800545e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005462:	eef1 7a67 	vneg.f32	s15, s15
 8005466:	4bad      	ldr	r3, [pc, #692]	; (800571c <update_ScurveTraj+0x2e4>)
 8005468:	edc3 7a00 	vstr	s15, [r3]
amin = -amax;
 800546c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005470:	eef1 7a67 	vneg.f32	s15, s15
 8005474:	4baa      	ldr	r3, [pc, #680]	; (8005720 <update_ScurveTraj+0x2e8>)
 8005476:	edc3 7a00 	vstr	s15, [r3]
vmin = -vmax;
 800547a:	edd7 7a03 	vldr	s15, [r7, #12]
 800547e:	eef1 7a67 	vneg.f32	s15, s15
 8005482:	4ba8      	ldr	r3, [pc, #672]	; (8005724 <update_ScurveTraj+0x2ec>)
 8005484:	edc3 7a00 	vstr	s15, [r3]
qi=_qi;
 8005488:	4aa7      	ldr	r2, [pc, #668]	; (8005728 <update_ScurveTraj+0x2f0>)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	6013      	str	r3, [r2, #0]
qf=_qf;
 800548e:	4aa7      	ldr	r2, [pc, #668]	; (800572c <update_ScurveTraj+0x2f4>)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	6013      	str	r3, [r2, #0]

if (qf < qi){
 8005494:	4ba5      	ldr	r3, [pc, #660]	; (800572c <update_ScurveTraj+0x2f4>)
 8005496:	ed93 7a00 	vldr	s14, [r3]
 800549a:	4ba3      	ldr	r3, [pc, #652]	; (8005728 <update_ScurveTraj+0x2f0>)
 800549c:	edd3 7a00 	vldr	s15, [r3]
 80054a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	d548      	bpl.n	800553c <update_ScurveTraj+0x104>

    flagInv = true;
 80054aa:	4ba1      	ldr	r3, [pc, #644]	; (8005730 <update_ScurveTraj+0x2f8>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 80054b0:	4b9d      	ldr	r3, [pc, #628]	; (8005728 <update_ScurveTraj+0x2f0>)
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	eef1 7a67 	vneg.f32	s15, s15
 80054ba:	4b9b      	ldr	r3, [pc, #620]	; (8005728 <update_ScurveTraj+0x2f0>)
 80054bc:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 80054c0:	4b9a      	ldr	r3, [pc, #616]	; (800572c <update_ScurveTraj+0x2f4>)
 80054c2:	edd3 7a00 	vldr	s15, [r3]
 80054c6:	eef1 7a67 	vneg.f32	s15, s15
 80054ca:	4b98      	ldr	r3, [pc, #608]	; (800572c <update_ScurveTraj+0x2f4>)
 80054cc:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 80054d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80054d4:	eef1 7a67 	vneg.f32	s15, s15
 80054d8:	edc7 7a05 	vstr	s15, [r7, #20]
    vf = -vf;
 80054dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80054e0:	eef1 7a67 	vneg.f32	s15, s15
 80054e4:	edc7 7a04 	vstr	s15, [r7, #16]

    vmax = -vmin;
 80054e8:	4b8e      	ldr	r3, [pc, #568]	; (8005724 <update_ScurveTraj+0x2ec>)
 80054ea:	edd3 7a00 	vldr	s15, [r3]
 80054ee:	eef1 7a67 	vneg.f32	s15, s15
 80054f2:	edc7 7a03 	vstr	s15, [r7, #12]
    vmin = -vmax;
 80054f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80054fa:	eef1 7a67 	vneg.f32	s15, s15
 80054fe:	4b89      	ldr	r3, [pc, #548]	; (8005724 <update_ScurveTraj+0x2ec>)
 8005500:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 8005504:	4b86      	ldr	r3, [pc, #536]	; (8005720 <update_ScurveTraj+0x2e8>)
 8005506:	edd3 7a00 	vldr	s15, [r3]
 800550a:	eef1 7a67 	vneg.f32	s15, s15
 800550e:	edc7 7a02 	vstr	s15, [r7, #8]
    amin = -amax;
 8005512:	edd7 7a02 	vldr	s15, [r7, #8]
 8005516:	eef1 7a67 	vneg.f32	s15, s15
 800551a:	4b81      	ldr	r3, [pc, #516]	; (8005720 <update_ScurveTraj+0x2e8>)
 800551c:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 8005520:	4b7e      	ldr	r3, [pc, #504]	; (800571c <update_ScurveTraj+0x2e4>)
 8005522:	edd3 7a00 	vldr	s15, [r3]
 8005526:	eef1 7a67 	vneg.f32	s15, s15
 800552a:	edc7 7a01 	vstr	s15, [r7, #4]
    jmin = -jmax;
 800552e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005532:	eef1 7a67 	vneg.f32	s15, s15
 8005536:	4b79      	ldr	r3, [pc, #484]	; (800571c <update_ScurveTraj+0x2e4>)
 8005538:	edc3 7a00 	vstr	s15, [r3]

}

volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800553c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005540:	edd7 7a05 	vldr	s15, [r7, #20]
 8005544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005548:	eef0 7ae7 	vabs.f32	s15, s15
 800554c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005550:	edd7 7a01 	vldr	s15, [r7, #4]
 8005554:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005558:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800555c:	eeb0 0b45 	vmov.f64	d0, d5
 8005560:	f00e fbc2 	bl	8013ce8 <sqrt>
 8005564:	eeb0 6b40 	vmov.f64	d6, d0
 8005568:	edd7 5a02 	vldr	s11, [r7, #8]
 800556c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005570:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005578:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d518      	bpl.n	80055b4 <update_ScurveTraj+0x17c>
 8005582:	ed97 7a04 	vldr	s14, [r7, #16]
 8005586:	edd7 7a05 	vldr	s15, [r7, #20]
 800558a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558e:	eef0 7ae7 	vabs.f32	s15, s15
 8005592:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005596:	edd7 7a01 	vldr	s15, [r7, #4]
 800559a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800559e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80055a2:	eeb0 0b45 	vmov.f64	d0, d5
 80055a6:	f00e fb9f 	bl	8013ce8 <sqrt>
 80055aa:	eeb0 7b40 	vmov.f64	d7, d0
 80055ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055b2:	e005      	b.n	80055c0 <update_ScurveTraj+0x188>
 80055b4:	edd7 6a02 	vldr	s13, [r7, #8]
 80055b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80055bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


if (Tjaux<amax/jmax){
 80055c4:	edd7 6a02 	vldr	s13, [r7, #8]
 80055c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80055cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80055d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055dc:	dc00      	bgt.n	80055e0 <update_ScurveTraj+0x1a8>
    //if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
    //else {printf("the trajectory is NOT \n");}
}
else if (Tjaux == amax/jmax){
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    //if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
    //else {printf("the trajectory is NOT feasible\n");}
}
//Phase 1: acceleration
if ((vmax-vi)*jmax < pow(amax,2)){
 80055e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80055e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80055e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80055f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80055f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80055fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005600:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005604:	eeb0 0b47 	vmov.f64	d0, d7
 8005608:	f00e f8ee 	bl	80137e8 <pow>
 800560c:	eeb0 7b40 	vmov.f64	d7, d0
 8005610:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005618:	d523      	bpl.n	8005662 <update_ScurveTraj+0x22a>
    //printf("amax is NOT reached\n");

    Tj1=sqrt(fabs(vmax-vi)/jmax);
 800561a:	ed97 7a03 	vldr	s14, [r7, #12]
 800561e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005626:	eef0 7ae7 	vabs.f32	s15, s15
 800562a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800562e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005636:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800563a:	eeb0 0b45 	vmov.f64	d0, d5
 800563e:	f00e fb53 	bl	8013ce8 <sqrt>
 8005642:	eeb0 7b40 	vmov.f64	d7, d0
 8005646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800564a:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <update_ScurveTraj+0x2fc>)
 800564c:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1*2;
 8005650:	4b38      	ldr	r3, [pc, #224]	; (8005734 <update_ScurveTraj+0x2fc>)
 8005652:	edd3 7a00 	vldr	s15, [r3]
 8005656:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <update_ScurveTraj+0x300>)
 800565c:	edc3 7a00 	vstr	s15, [r3]
 8005660:	e01a      	b.n	8005698 <update_ScurveTraj+0x260>
}
else{
    //printf("amax is reached\n");
    Tj1=amax/jmax;
 8005662:	edd7 6a02 	vldr	s13, [r7, #8]
 8005666:	ed97 7a01 	vldr	s14, [r7, #4]
 800566a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <update_ScurveTraj+0x2fc>)
 8005670:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1+(vmax-vi)/amax;
 8005674:	ed97 7a03 	vldr	s14, [r7, #12]
 8005678:	edd7 7a05 	vldr	s15, [r7, #20]
 800567c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005680:	edd7 7a02 	vldr	s15, [r7, #8]
 8005684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <update_ScurveTraj+0x2fc>)
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005692:	4b29      	ldr	r3, [pc, #164]	; (8005738 <update_ScurveTraj+0x300>)
 8005694:	edc3 7a00 	vstr	s15, [r3]
}

//Phase 3: Desacceleration


if ((vmax-vf)*jmax < pow(amax,2)){
 8005698:	ed97 7a03 	vldr	s14, [r7, #12]
 800569c:	edd7 7a04 	vldr	s15, [r7, #16]
 80056a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80056a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ac:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80056b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80056b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056bc:	eeb0 0b47 	vmov.f64	d0, d7
 80056c0:	f00e f892 	bl	80137e8 <pow>
 80056c4:	eeb0 7b40 	vmov.f64	d7, d0
 80056c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80056cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d0:	d538      	bpl.n	8005744 <update_ScurveTraj+0x30c>
    //printf("amin is NOT reached\n");

    Tj2=sqrt(fabs(vmax-vf)/jmax);
 80056d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80056d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80056da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056de:	eef0 7ae7 	vabs.f32	s15, s15
 80056e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80056e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056ee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056f2:	eeb0 0b45 	vmov.f64	d0, d5
 80056f6:	f00e faf7 	bl	8013ce8 <sqrt>
 80056fa:	eeb0 7b40 	vmov.f64	d7, d0
 80056fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005702:	4b0e      	ldr	r3, [pc, #56]	; (800573c <update_ScurveTraj+0x304>)
 8005704:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2*2;
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <update_ScurveTraj+0x304>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <update_ScurveTraj+0x308>)
 8005714:	edc3 7a00 	vstr	s15, [r3]
 8005718:	e02f      	b.n	800577a <update_ScurveTraj+0x342>
 800571a:	bf00      	nop
 800571c:	24000724 	.word	0x24000724
 8005720:	24000734 	.word	0x24000734
 8005724:	24000728 	.word	0x24000728
 8005728:	24000b58 	.word	0x24000b58
 800572c:	24000b5c 	.word	0x24000b5c
 8005730:	24000b28 	.word	0x24000b28
 8005734:	24000b48 	.word	0x24000b48
 8005738:	24000b3c 	.word	0x24000b3c
 800573c:	24000b4c 	.word	0x24000b4c
 8005740:	24000b40 	.word	0x24000b40
}
else{
    //printf("amin is reached\n");
    Tj2=amax/jmax;
 8005744:	edd7 6a02 	vldr	s13, [r7, #8]
 8005748:	ed97 7a01 	vldr	s14, [r7, #4]
 800574c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005750:	4ba9      	ldr	r3, [pc, #676]	; (80059f8 <update_ScurveTraj+0x5c0>)
 8005752:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2+(vmax-vf)/amax;
 8005756:	ed97 7a03 	vldr	s14, [r7, #12]
 800575a:	edd7 7a04 	vldr	s15, [r7, #16]
 800575e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005762:	edd7 7a02 	vldr	s15, [r7, #8]
 8005766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576a:	4ba3      	ldr	r3, [pc, #652]	; (80059f8 <update_ScurveTraj+0x5c0>)
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005774:	4ba1      	ldr	r3, [pc, #644]	; (80059fc <update_ScurveTraj+0x5c4>)
 8005776:	edc3 7a00 	vstr	s15, [r3]
}


Tv = (qf-qi)/vmax - Ta/2*(1+vi/vmax)-Td/2*(1+vf/vmax);
 800577a:	4ba1      	ldr	r3, [pc, #644]	; (8005a00 <update_ScurveTraj+0x5c8>)
 800577c:	ed93 7a00 	vldr	s14, [r3]
 8005780:	4ba0      	ldr	r3, [pc, #640]	; (8005a04 <update_ScurveTraj+0x5cc>)
 8005782:	edd3 7a00 	vldr	s15, [r3]
 8005786:	ee77 6a67 	vsub.f32	s13, s14, s15
 800578a:	edd7 7a03 	vldr	s15, [r7, #12]
 800578e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005792:	4b9d      	ldr	r3, [pc, #628]	; (8005a08 <update_ScurveTraj+0x5d0>)
 8005794:	edd3 7a00 	vldr	s15, [r3]
 8005798:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800579c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80057a0:	edd7 5a05 	vldr	s11, [r7, #20]
 80057a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80057ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057bc:	4b8f      	ldr	r3, [pc, #572]	; (80059fc <update_ScurveTraj+0x5c4>)
 80057be:	edd3 7a00 	vldr	s15, [r3]
 80057c2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80057c6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80057ca:	edd7 5a04 	vldr	s11, [r7, #16]
 80057ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80057d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e6:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <update_ScurveTraj+0x5d4>)
 80057e8:	edc3 7a00 	vstr	s15, [r3]

if (Tv>0){
 80057ec:	4b87      	ldr	r3, [pc, #540]	; (8005a0c <update_ScurveTraj+0x5d4>)
 80057ee:	edd3 7a00 	vldr	s15, [r3]
 80057f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	f300 8347 	bgt.w	8005e8c <update_ScurveTraj+0xa54>
    //printf("the max velocity is reached\n");
}
else{
    //printf("CASE 2\n");
    //printf("In this case vmax is NOT reached, so Tv=0\n");
    Tj1=amax/jmax;
 80057fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8005802:	ed97 7a01 	vldr	s14, [r7, #4]
 8005806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580a:	4b81      	ldr	r3, [pc, #516]	; (8005a10 <update_ScurveTraj+0x5d8>)
 800580c:	edc3 7a00 	vstr	s15, [r3]
    Tj2=Tj1;
 8005810:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <update_ScurveTraj+0x5d8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a78      	ldr	r2, [pc, #480]	; (80059f8 <update_ScurveTraj+0x5c0>)
 8005816:	6013      	str	r3, [r2, #0]
    Tj=Tj1;
 8005818:	4b7d      	ldr	r3, [pc, #500]	; (8005a10 <update_ScurveTraj+0x5d8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a7d      	ldr	r2, [pc, #500]	; (8005a14 <update_ScurveTraj+0x5dc>)
 800581e:	6013      	str	r3, [r2, #0]
    delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005820:	edd7 7a02 	vldr	s15, [r7, #8]
 8005824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005828:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800582c:	eeb0 0b47 	vmov.f64	d0, d7
 8005830:	f00d ffda 	bl	80137e8 <pow>
 8005834:	eeb0 9b40 	vmov.f64	d9, d0
 8005838:	edd7 7a01 	vldr	s15, [r7, #4]
 800583c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005840:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005844:	eeb0 0b47 	vmov.f64	d0, d7
 8005848:	f00d ffce 	bl	80137e8 <pow>
 800584c:	eeb0 7b40 	vmov.f64	d7, d0
 8005850:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005854:	edd7 7a05 	vldr	s15, [r7, #20]
 8005858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800585c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005860:	eeb0 0b47 	vmov.f64	d0, d7
 8005864:	f00d ffc0 	bl	80137e8 <pow>
 8005868:	eeb0 9b40 	vmov.f64	d9, d0
 800586c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005874:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005878:	eeb0 0b47 	vmov.f64	d0, d7
 800587c:	f00d ffb4 	bl	80137e8 <pow>
 8005880:	eeb0 7b40 	vmov.f64	d7, d0
 8005884:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005888:	ee37 7b07 	vadd.f64	d7, d7, d7
 800588c:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005890:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <update_ScurveTraj+0x5c8>)
 8005892:	ed93 7a00 	vldr	s14, [r3]
 8005896:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <update_ScurveTraj+0x5cc>)
 8005898:	edd3 7a00 	vldr	s15, [r3]
 800589c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80058a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058a8:	ed97 5a02 	vldr	s10, [r7, #8]
 80058ac:	edd7 5a01 	vldr	s11, [r7, #4]
 80058b0:	eec5 7a25 	vdiv.f32	s15, s10, s11
 80058b4:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80058b8:	ed97 5a05 	vldr	s10, [r7, #20]
 80058bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80058c0:	ee75 7a27 	vadd.f32	s15, s10, s15
 80058c4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80058d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058e0:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <update_ScurveTraj+0x5e0>)
 80058e2:	edc3 7a00 	vstr	s15, [r3]
    Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80058e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80058ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058f2:	eeb0 0b47 	vmov.f64	d0, d7
 80058f6:	f00d ff77 	bl	80137e8 <pow>
 80058fa:	eeb0 5b40 	vmov.f64	d5, d0
 80058fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005906:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800590a:	edd7 7a05 	vldr	s15, [r7, #20]
 800590e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005916:	ee36 8b47 	vsub.f64	d8, d6, d7
 800591a:	4b3f      	ldr	r3, [pc, #252]	; (8005a18 <update_ScurveTraj+0x5e0>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005924:	eeb0 0b47 	vmov.f64	d0, d7
 8005928:	f00e f9de 	bl	8013ce8 <sqrt>
 800592c:	eeb0 7b40 	vmov.f64	d7, d0
 8005930:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005934:	edd7 7a02 	vldr	s15, [r7, #8]
 8005938:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800593c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005940:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005944:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <update_ScurveTraj+0x5d0>)
 800594a:	edc3 7a00 	vstr	s15, [r3]
    Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 800594e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005956:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800595a:	eeb0 0b47 	vmov.f64	d0, d7
 800595e:	f00d ff43 	bl	80137e8 <pow>
 8005962:	eeb0 5b40 	vmov.f64	d5, d0
 8005966:	edd7 7a01 	vldr	s15, [r7, #4]
 800596a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800596e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005972:	edd7 7a04 	vldr	s15, [r7, #16]
 8005976:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800597a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800597e:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <update_ScurveTraj+0x5e0>)
 8005984:	edd3 7a00 	vldr	s15, [r3]
 8005988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800598c:	eeb0 0b47 	vmov.f64	d0, d7
 8005990:	f00e f9aa 	bl	8013ce8 <sqrt>
 8005994:	eeb0 7b40 	vmov.f64	d7, d0
 8005998:	ee38 5b07 	vadd.f64	d5, d8, d7
 800599c:	edd7 7a02 	vldr	s15, [r7, #8]
 80059a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <update_ScurveTraj+0x5c4>)
 80059b2:	edc3 7a00 	vstr	s15, [r3]
    Tv=0;
 80059b6:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <update_ScurveTraj+0x5d4>)
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]


    if (Ta<2*Tj || Td<2*Tj){
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <update_ScurveTraj+0x5dc>)
 80059c0:	edd3 7a00 	vldr	s15, [r3]
 80059c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <update_ScurveTraj+0x5d0>)
 80059ca:	edd3 7a00 	vldr	s15, [r3]
 80059ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d6:	f300 822c 	bgt.w	8005e32 <update_ScurveTraj+0x9fa>
 80059da:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <update_ScurveTraj+0x5dc>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <update_ScurveTraj+0x5c4>)
 80059e6:	edd3 7a00 	vldr	s15, [r3]
 80059ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	f300 821e 	bgt.w	8005e32 <update_ScurveTraj+0x9fa>
        }
    }

}

}
 80059f6:	e249      	b.n	8005e8c <update_ScurveTraj+0xa54>
 80059f8:	24000b4c 	.word	0x24000b4c
 80059fc:	24000b40 	.word	0x24000b40
 8005a00:	24000b5c 	.word	0x24000b5c
 8005a04:	24000b58 	.word	0x24000b58
 8005a08:	24000b3c 	.word	0x24000b3c
 8005a0c:	24000b44 	.word	0x24000b44
 8005a10:	24000b48 	.word	0x24000b48
 8005a14:	24000b50 	.word	0x24000b50
 8005a18:	24000b54 	.word	0x24000b54
            amax=amax*0.99;
 8005a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a24:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8005d08 <update_ScurveTraj+0x8d0>
 8005a28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005a30:	edc7 7a02 	vstr	s15, [r7, #8]
            Tj=amax/jmax;
 8005a34:	edd7 6a02 	vldr	s13, [r7, #8]
 8005a38:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a40:	4bb3      	ldr	r3, [pc, #716]	; (8005d10 <update_ScurveTraj+0x8d8>)
 8005a42:	edc3 7a00 	vstr	s15, [r3]
            delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a4e:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005a52:	eeb0 0b47 	vmov.f64	d0, d7
 8005a56:	f00d fec7 	bl	80137e8 <pow>
 8005a5a:	eeb0 9b40 	vmov.f64	d9, d0
 8005a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8005a6e:	f00d febb 	bl	80137e8 <pow>
 8005a72:	eeb0 7b40 	vmov.f64	d7, d0
 8005a76:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a86:	eeb0 0b47 	vmov.f64	d0, d7
 8005a8a:	f00d fead 	bl	80137e8 <pow>
 8005a8e:	eeb0 9b40 	vmov.f64	d9, d0
 8005a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a9e:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa2:	f00d fea1 	bl	80137e8 <pow>
 8005aa6:	eeb0 7b40 	vmov.f64	d7, d0
 8005aaa:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005aae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ab2:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005ab6:	4b97      	ldr	r3, [pc, #604]	; (8005d14 <update_ScurveTraj+0x8dc>)
 8005ab8:	ed93 7a00 	vldr	s14, [r3]
 8005abc:	4b96      	ldr	r3, [pc, #600]	; (8005d18 <update_ScurveTraj+0x8e0>)
 8005abe:	edd3 7a00 	vldr	s15, [r3]
 8005ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005aca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ace:	ed97 5a02 	vldr	s10, [r7, #8]
 8005ad2:	edd7 5a01 	vldr	s11, [r7, #4]
 8005ad6:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8005ada:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005ade:	ed97 5a05 	vldr	s10, [r7, #20]
 8005ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ae6:	ee75 7a27 	vadd.f32	s15, s10, s15
 8005aea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005aee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005af2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005afe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b06:	4b85      	ldr	r3, [pc, #532]	; (8005d1c <update_ScurveTraj+0x8e4>)
 8005b08:	edc3 7a00 	vstr	s15, [r3]
            Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b14:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b18:	eeb0 0b47 	vmov.f64	d0, d7
 8005b1c:	f00d fe64 	bl	80137e8 <pow>
 8005b20:	eeb0 5b40 	vmov.f64	d5, d0
 8005b24:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b2c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b3c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005b40:	4b76      	ldr	r3, [pc, #472]	; (8005d1c <update_ScurveTraj+0x8e4>)
 8005b42:	edd3 7a00 	vldr	s15, [r3]
 8005b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b4a:	eeb0 0b47 	vmov.f64	d0, d7
 8005b4e:	f00e f8cb 	bl	8013ce8 <sqrt>
 8005b52:	eeb0 7b40 	vmov.f64	d7, d0
 8005b56:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005b5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b62:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005b66:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b6e:	4b6c      	ldr	r3, [pc, #432]	; (8005d20 <update_ScurveTraj+0x8e8>)
 8005b70:	edc3 7a00 	vstr	s15, [r3]
            Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b80:	eeb0 0b47 	vmov.f64	d0, d7
 8005b84:	f00d fe30 	bl	80137e8 <pow>
 8005b88:	eeb0 5b40 	vmov.f64	d5, d0
 8005b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b94:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ba4:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005ba8:	4b5c      	ldr	r3, [pc, #368]	; (8005d1c <update_ScurveTraj+0x8e4>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bb2:	eeb0 0b47 	vmov.f64	d0, d7
 8005bb6:	f00e f897 	bl	8013ce8 <sqrt>
 8005bba:	eeb0 7b40 	vmov.f64	d7, d0
 8005bbe:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005bce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005bd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005bd6:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <update_ScurveTraj+0x8ec>)
 8005bd8:	edc3 7a00 	vstr	s15, [r3]
            if (Ta<0){
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <update_ScurveTraj+0x8e8>)
 8005bde:	edd3 7a00 	vldr	s15, [r3]
 8005be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	f140 8081 	bpl.w	8005cf0 <update_ScurveTraj+0x8b8>
                Ta=0;
 8005bee:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <update_ScurveTraj+0x8e8>)
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
                Tj1=0;
 8005bf6:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <update_ScurveTraj+0x8f0>)
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
                Td=2*((qf-qi)/(vf+vi));
 8005bfe:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <update_ScurveTraj+0x8dc>)
 8005c00:	ed93 7a00 	vldr	s14, [r3]
 8005c04:	4b44      	ldr	r3, [pc, #272]	; (8005d18 <update_ScurveTraj+0x8e0>)
 8005c06:	edd3 7a00 	vldr	s15, [r3]
 8005c0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c22:	4b40      	ldr	r3, [pc, #256]	; (8005d24 <update_ScurveTraj+0x8ec>)
 8005c24:	edc3 7a00 	vstr	s15, [r3]
                Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005c28:	4b3a      	ldr	r3, [pc, #232]	; (8005d14 <update_ScurveTraj+0x8dc>)
 8005c2a:	ed93 7a00 	vldr	s14, [r3]
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <update_ScurveTraj+0x8e0>)
 8005c30:	edd3 7a00 	vldr	s15, [r3]
 8005c34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c38:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c48:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c50:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <update_ScurveTraj+0x8dc>)
 8005c56:	ed93 7a00 	vldr	s14, [r3]
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <update_ScurveTraj+0x8e0>)
 8005c5c:	edd3 7a00 	vldr	s15, [r3]
 8005c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c68:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8005c70:	f00d fdba 	bl	80137e8 <pow>
 8005c74:	eeb0 7b40 	vmov.f64	d7, d0
 8005c78:	ee2a ab07 	vmul.f64	d10, d10, d7
 8005c7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c8c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c90:	eeb0 0b47 	vmov.f64	d0, d7
 8005c94:	f00d fda8 	bl	80137e8 <pow>
 8005c98:	eeb0 6b40 	vmov.f64	d6, d0
 8005c9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005cb0:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8005cb4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cbc:	f00e f814 	bl	8013ce8 <sqrt>
 8005cc0:	eeb0 7b40 	vmov.f64	d7, d0
 8005cc4:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005cc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cdc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005ce0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ce4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <update_ScurveTraj+0x8f4>)
 8005cea:	edc3 7a00 	vstr	s15, [r3]
                break;
 8005cee:	e0cd      	b.n	8005e8c <update_ScurveTraj+0xa54>
            if (Td<0){
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <update_ScurveTraj+0x8ec>)
 8005cf2:	edd3 7a00 	vldr	s15, [r3]
 8005cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	d417      	bmi.n	8005d30 <update_ScurveTraj+0x8f8>
 8005d00:	e097      	b.n	8005e32 <update_ScurveTraj+0x9fa>
 8005d02:	bf00      	nop
 8005d04:	f3af 8000 	nop.w
 8005d08:	7ae147ae 	.word	0x7ae147ae
 8005d0c:	3fefae14 	.word	0x3fefae14
 8005d10:	24000b50 	.word	0x24000b50
 8005d14:	24000b5c 	.word	0x24000b5c
 8005d18:	24000b58 	.word	0x24000b58
 8005d1c:	24000b54 	.word	0x24000b54
 8005d20:	24000b3c 	.word	0x24000b3c
 8005d24:	24000b40 	.word	0x24000b40
 8005d28:	24000b48 	.word	0x24000b48
 8005d2c:	24000b4c 	.word	0x24000b4c
                Td=0;
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <update_ScurveTraj+0xa60>)
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
                Ta=2*((qf-qi)/(vf+vi));
 8005d38:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <update_ScurveTraj+0xa64>)
 8005d3a:	ed93 7a00 	vldr	s14, [r3]
 8005d3e:	4b58      	ldr	r3, [pc, #352]	; (8005ea0 <update_ScurveTraj+0xa68>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005d48:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d5c:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <update_ScurveTraj+0xa6c>)
 8005d5e:	edc3 7a00 	vstr	s15, [r3]
                Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005d62:	4b4e      	ldr	r3, [pc, #312]	; (8005e9c <update_ScurveTraj+0xa64>)
 8005d64:	ed93 7a00 	vldr	s14, [r3]
 8005d68:	4b4d      	ldr	r3, [pc, #308]	; (8005ea0 <update_ScurveTraj+0xa68>)
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d82:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d8a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8005d8e:	4b43      	ldr	r3, [pc, #268]	; (8005e9c <update_ScurveTraj+0xa64>)
 8005d90:	ed93 7a00 	vldr	s14, [r3]
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <update_ScurveTraj+0xa68>)
 8005d96:	edd3 7a00 	vldr	s15, [r3]
 8005d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005da2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005da6:	eeb0 0b47 	vmov.f64	d0, d7
 8005daa:	f00d fd1d 	bl	80137e8 <pow>
 8005dae:	eeb0 7b40 	vmov.f64	d7, d0
 8005db2:	ee2a ab07 	vmul.f64	d10, d10, d7
 8005db6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8005dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dc6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005dca:	eeb0 0b47 	vmov.f64	d0, d7
 8005dce:	f00d fd0b 	bl	80137e8 <pow>
 8005dd2:	eeb0 6b40 	vmov.f64	d6, d0
 8005dd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8005dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005de6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005dea:	ee3a 7b47 	vsub.f64	d7, d10, d7
 8005dee:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005df2:	eeb0 0b47 	vmov.f64	d0, d7
 8005df6:	f00d ff77 	bl	8013ce8 <sqrt>
 8005dfa:	eeb0 7b40 	vmov.f64	d7, d0
 8005dfe:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005e02:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e16:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005e1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005e1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005e22:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <update_ScurveTraj+0xa70>)
 8005e24:	edc3 7a00 	vstr	s15, [r3]
                Tj2=0;
 8005e28:	4b20      	ldr	r3, [pc, #128]	; (8005eac <update_ScurveTraj+0xa74>)
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
                break;
 8005e30:	e02c      	b.n	8005e8c <update_ScurveTraj+0xa54>
        while (!(Ta>2*Tj && Td>2*Tj)){
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <update_ScurveTraj+0xa78>)
 8005e34:	edd3 7a00 	vldr	s15, [r3]
 8005e38:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <update_ScurveTraj+0xa6c>)
 8005e3e:	edd3 7a00 	vldr	s15, [r3]
 8005e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4a:	bf4c      	ite	mi
 8005e4c:	2301      	movmi	r3, #1
 8005e4e:	2300      	movpl	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f083 0301 	eor.w	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f47f addf 	bne.w	8005a1c <update_ScurveTraj+0x5e4>
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <update_ScurveTraj+0xa78>)
 8005e60:	edd3 7a00 	vldr	s15, [r3]
 8005e64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <update_ScurveTraj+0xa60>)
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	bf4c      	ite	mi
 8005e78:	2301      	movmi	r3, #1
 8005e7a:	2300      	movpl	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f47f adc9 	bne.w	8005a1c <update_ScurveTraj+0x5e4>
}
 8005e8a:	e7ff      	b.n	8005e8c <update_ScurveTraj+0xa54>
 8005e8c:	bf00      	nop
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	ecbd 8b06 	vpop	{d8-d10}
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	24000b40 	.word	0x24000b40
 8005e9c:	24000b5c 	.word	0x24000b5c
 8005ea0:	24000b58 	.word	0x24000b58
 8005ea4:	24000b3c 	.word	0x24000b3c
 8005ea8:	24000b48 	.word	0x24000b48
 8005eac:	24000b4c 	.word	0x24000b4c
 8005eb0:	24000b50 	.word	0x24000b50
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <setProfilTimer>:


void setProfilTimer(void) {	// velAng en rpm
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		_rpm1 = motor1.omega * RADs_TO_RPM;
 8005ebc:	4b7a      	ldr	r3, [pc, #488]	; (80060a8 <setProfilTimer+0x1f0>)
 8005ebe:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ec2:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8006088 <setProfilTimer+0x1d0>
 8005ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eca:	4b78      	ldr	r3, [pc, #480]	; (80060ac <setProfilTimer+0x1f4>)
 8005ecc:	ed83 7b00 	vstr	d7, [r3]
		_rpm2 = motor2.omega * RADs_TO_RPM;
 8005ed0:	4b77      	ldr	r3, [pc, #476]	; (80060b0 <setProfilTimer+0x1f8>)
 8005ed2:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ed6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8006088 <setProfilTimer+0x1d0>
 8005eda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ede:	4b75      	ldr	r3, [pc, #468]	; (80060b4 <setProfilTimer+0x1fc>)
 8005ee0:	ed83 7b00 	vstr	d7, [r3]
		_rpm3 = motor3.omega * RADs_TO_RPM;
 8005ee4:	4b74      	ldr	r3, [pc, #464]	; (80060b8 <setProfilTimer+0x200>)
 8005ee6:	ed93 7b04 	vldr	d7, [r3, #16]
 8005eea:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006088 <setProfilTimer+0x1d0>
 8005eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ef2:	4b72      	ldr	r3, [pc, #456]	; (80060bc <setProfilTimer+0x204>)
 8005ef4:	ed83 7b00 	vstr	d7, [r3]
		if(rpm3<=0.1){
			rpm3=0.1;
		}
		*/

		rpm1 = 2.0 ;   //HARDCODE PARA HACER PRUEBAS A BAJA VELOCIDAD
 8005ef8:	4971      	ldr	r1, [pc, #452]	; (80060c0 <setProfilTimer+0x208>)
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f02:	e9c1 2300 	strd	r2, r3, [r1]
		rpm2 = 2.0 ;
 8005f06:	496f      	ldr	r1, [pc, #444]	; (80060c4 <setProfilTimer+0x20c>)
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f10:	e9c1 2300 	strd	r2, r3, [r1]
		rpm3 = 2.0 ;
 8005f14:	496c      	ldr	r1, [pc, #432]	; (80060c8 <setProfilTimer+0x210>)
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f1e:	e9c1 2300 	strd	r2, r3, [r1]


		_peri1= COUNTERPERIOD(rpm1);
 8005f22:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <setProfilTimer+0x214>)
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f2e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f36:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8006090 <setProfilTimer+0x1d8>
 8005f3a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f3e:	4b60      	ldr	r3, [pc, #384]	; (80060c0 <setProfilTimer+0x208>)
 8005f40:	ed93 7b00 	vldr	d7, [r3]
 8005f44:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8006098 <setProfilTimer+0x1e0>
 8005f48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f4c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 80060a0 <setProfilTimer+0x1e8>
 8005f50:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f64:	ee17 2a90 	vmov	r2, s15
 8005f68:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <setProfilTimer+0x218>)
 8005f6a:	601a      	str	r2, [r3, #0]
		_peri1= COUNTERPERIOD(rpm2);
 8005f6c:	4b57      	ldr	r3, [pc, #348]	; (80060cc <setProfilTimer+0x214>)
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f80:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8006090 <setProfilTimer+0x1d8>
 8005f84:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f88:	4b4e      	ldr	r3, [pc, #312]	; (80060c4 <setProfilTimer+0x20c>)
 8005f8a:	ed93 7b00 	vldr	d7, [r3]
 8005f8e:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8006098 <setProfilTimer+0x1e0>
 8005f92:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f96:	ed9f 4b42 	vldr	d4, [pc, #264]	; 80060a0 <setProfilTimer+0x1e8>
 8005f9a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005fa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fa6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005faa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005fae:	ee17 2a90 	vmov	r2, s15
 8005fb2:	4b47      	ldr	r3, [pc, #284]	; (80060d0 <setProfilTimer+0x218>)
 8005fb4:	601a      	str	r2, [r3, #0]
		_peri1= COUNTERPERIOD(rpm3);
 8005fb6:	4b45      	ldr	r3, [pc, #276]	; (80060cc <setProfilTimer+0x214>)
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005fc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005fca:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8006090 <setProfilTimer+0x1d8>
 8005fce:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <setProfilTimer+0x210>)
 8005fd4:	ed93 7b00 	vldr	d7, [r3]
 8005fd8:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8006098 <setProfilTimer+0x1e0>
 8005fdc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005fe0:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80060a0 <setProfilTimer+0x1e8>
 8005fe4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005fe8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005fec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ff0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ff4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ff8:	ee17 2a90 	vmov	r2, s15
 8005ffc:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <setProfilTimer+0x218>)
 8005ffe:	601a      	str	r2, [r3, #0]


		TIM12->ARR = _peri1;
 8006000:	4a32      	ldr	r2, [pc, #200]	; (80060cc <setProfilTimer+0x214>)
 8006002:	4b33      	ldr	r3, [pc, #204]	; (80060d0 <setProfilTimer+0x218>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM13->ARR = _peri2;
 8006008:	4a32      	ldr	r2, [pc, #200]	; (80060d4 <setProfilTimer+0x21c>)
 800600a:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <setProfilTimer+0x220>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM14->ARR = _peri3;
 8006010:	4a32      	ldr	r2, [pc, #200]	; (80060dc <setProfilTimer+0x224>)
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <setProfilTimer+0x228>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	62d3      	str	r3, [r2, #44]	; 0x2c



		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006018:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <setProfilTimer+0x214>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006024:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006028:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800602c:	4b27      	ldr	r3, [pc, #156]	; (80060cc <setProfilTimer+0x214>)
 800602e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006032:	ee17 2a90 	vmov	r2, s15
 8006036:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006038:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <setProfilTimer+0x21c>)
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006044:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <setProfilTimer+0x21c>)
 800604e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006052:	ee17 2a90 	vmov	r2, s15
 8006056:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <setProfilTimer+0x224>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006064:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <setProfilTimer+0x224>)
 800606e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006072:	ee17 2a90 	vmov	r2, s15
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
			}
			*/


}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	f3af 8000 	nop.w
 8006088:	66ed2a99 	.word	0x66ed2a99
 800608c:	4023193d 	.word	0x4023193d
 8006090:	00000000 	.word	0x00000000
 8006094:	418e8480 	.word	0x418e8480
 8006098:	00000000 	.word	0x00000000
 800609c:	40bf4000 	.word	0x40bf4000
 80060a0:	00000000 	.word	0x00000000
 80060a4:	404e0000 	.word	0x404e0000
 80060a8:	24000630 	.word	0x24000630
 80060ac:	24000b60 	.word	0x24000b60
 80060b0:	24000668 	.word	0x24000668
 80060b4:	24000b68 	.word	0x24000b68
 80060b8:	240006a0 	.word	0x240006a0
 80060bc:	24000b70 	.word	0x24000b70
 80060c0:	240006d8 	.word	0x240006d8
 80060c4:	240006e0 	.word	0x240006e0
 80060c8:	240006e8 	.word	0x240006e8
 80060cc:	40001800 	.word	0x40001800
 80060d0:	24000b78 	.word	0x24000b78
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	24000b7c 	.word	0x24000b7c
 80060dc:	40002000 	.word	0x40002000
 80060e0:	24000b80 	.word	0x24000b80

080060e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <MX_USART1_UART_Init+0x90>)
 80060ea:	4a23      	ldr	r2, [pc, #140]	; (8006178 <MX_USART1_UART_Init+0x94>)
 80060ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80060ee:	4b21      	ldr	r3, [pc, #132]	; (8006174 <MX_USART1_UART_Init+0x90>)
 80060f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80060f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <MX_USART1_UART_Init+0x90>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060fc:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <MX_USART1_UART_Init+0x90>)
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006102:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006104:	2200      	movs	r2, #0
 8006106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006108:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <MX_USART1_UART_Init+0x90>)
 800610a:	220c      	movs	r2, #12
 800610c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006110:	2200      	movs	r2, #0
 8006112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006114:	4b17      	ldr	r3, [pc, #92]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006116:	2200      	movs	r2, #0
 8006118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <MX_USART1_UART_Init+0x90>)
 800611c:	2200      	movs	r2, #0
 800611e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006122:	2200      	movs	r2, #0
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006128:	2200      	movs	r2, #0
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800612c:	4811      	ldr	r0, [pc, #68]	; (8006174 <MX_USART1_UART_Init+0x90>)
 800612e:	f008 f933 	bl	800e398 <HAL_UART_Init>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006138:	f7fd fbc8 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800613c:	2100      	movs	r1, #0
 800613e:	480d      	ldr	r0, [pc, #52]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006140:	f00a fbbd 	bl	80108be <HAL_UARTEx_SetTxFifoThreshold>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800614a:	f7fd fbbf 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800614e:	2100      	movs	r1, #0
 8006150:	4808      	ldr	r0, [pc, #32]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006152:	f00a fbf2 	bl	801093a <HAL_UARTEx_SetRxFifoThreshold>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800615c:	f7fd fbb6 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006160:	4804      	ldr	r0, [pc, #16]	; (8006174 <MX_USART1_UART_Init+0x90>)
 8006162:	f00a fb73 	bl	801084c <HAL_UARTEx_DisableFifoMode>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800616c:	f7fd fbae 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006170:	bf00      	nop
 8006172:	bd80      	pop	{r7, pc}
 8006174:	24000b84 	.word	0x24000b84
 8006178:	40011000 	.word	0x40011000

0800617c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006180:	4b22      	ldr	r3, [pc, #136]	; (800620c <MX_USART2_UART_Init+0x90>)
 8006182:	4a23      	ldr	r2, [pc, #140]	; (8006210 <MX_USART2_UART_Init+0x94>)
 8006184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <MX_USART2_UART_Init+0x90>)
 8006188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800618c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800618e:	4b1f      	ldr	r3, [pc, #124]	; (800620c <MX_USART2_UART_Init+0x90>)
 8006190:	2200      	movs	r2, #0
 8006192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006194:	4b1d      	ldr	r3, [pc, #116]	; (800620c <MX_USART2_UART_Init+0x90>)
 8006196:	2200      	movs	r2, #0
 8006198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <MX_USART2_UART_Init+0x90>)
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80061a0:	4b1a      	ldr	r3, [pc, #104]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061a2:	220c      	movs	r2, #12
 80061a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061a6:	4b19      	ldr	r3, [pc, #100]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061ac:	4b17      	ldr	r3, [pc, #92]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061b2:	4b16      	ldr	r3, [pc, #88]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061c4:	4811      	ldr	r0, [pc, #68]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061c6:	f008 f8e7 	bl	800e398 <HAL_UART_Init>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80061d0:	f7fd fb7c 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80061d4:	2100      	movs	r1, #0
 80061d6:	480d      	ldr	r0, [pc, #52]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061d8:	f00a fb71 	bl	80108be <HAL_UARTEx_SetTxFifoThreshold>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80061e2:	f7fd fb73 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80061e6:	2100      	movs	r1, #0
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061ea:	f00a fba6 	bl	801093a <HAL_UARTEx_SetRxFifoThreshold>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80061f4:	f7fd fb6a 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80061f8:	4804      	ldr	r0, [pc, #16]	; (800620c <MX_USART2_UART_Init+0x90>)
 80061fa:	f00a fb27 	bl	801084c <HAL_UARTEx_DisableFifoMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006204:	f7fd fb62 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006208:	bf00      	nop
 800620a:	bd80      	pop	{r7, pc}
 800620c:	24000c14 	.word	0x24000c14
 8006210:	40004400 	.word	0x40004400

08006214 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006218:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <MX_USART3_UART_Init+0x94>)
 800621c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800621e:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006224:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800622c:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 800622e:	2200      	movs	r2, #0
 8006230:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006234:	2200      	movs	r2, #0
 8006236:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 800623a:	220c      	movs	r2, #12
 800623c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800623e:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006240:	2200      	movs	r2, #0
 8006242:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006244:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 800624c:	2200      	movs	r2, #0
 800624e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006250:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006252:	2200      	movs	r2, #0
 8006254:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006258:	2200      	movs	r2, #0
 800625a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800625c:	4811      	ldr	r0, [pc, #68]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 800625e:	f008 f89b 	bl	800e398 <HAL_UART_Init>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006268:	f7fd fb30 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800626c:	2100      	movs	r1, #0
 800626e:	480d      	ldr	r0, [pc, #52]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006270:	f00a fb25 	bl	80108be <HAL_UARTEx_SetTxFifoThreshold>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800627a:	f7fd fb27 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800627e:	2100      	movs	r1, #0
 8006280:	4808      	ldr	r0, [pc, #32]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006282:	f00a fb5a 	bl	801093a <HAL_UARTEx_SetRxFifoThreshold>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800628c:	f7fd fb1e 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006290:	4804      	ldr	r0, [pc, #16]	; (80062a4 <MX_USART3_UART_Init+0x90>)
 8006292:	f00a fadb 	bl	801084c <HAL_UARTEx_DisableFifoMode>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800629c:	f7fd fb16 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80062a0:	bf00      	nop
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	24000ca4 	.word	0x24000ca4
 80062a8:	40004800 	.word	0x40004800

080062ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b0be      	sub	sp, #248	; 0xf8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c8:	22bc      	movs	r2, #188	; 0xbc
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f00a fbf9 	bl	8010ac4 <memset>
  if(uartHandle->Instance==USART1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a84      	ldr	r2, [pc, #528]	; (80064e8 <HAL_UART_MspInit+0x23c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d168      	bne.n	80063ae <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80062dc:	2301      	movs	r3, #1
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ea:	4618      	mov	r0, r3
 80062ec:	f004 fb64 	bl	800a9b8 <HAL_RCCEx_PeriphCLKConfig>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80062f6:	f7fd fae9 	bl	80038cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062fa:	4b7c      	ldr	r3, [pc, #496]	; (80064ec <HAL_UART_MspInit+0x240>)
 80062fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006300:	4a7a      	ldr	r2, [pc, #488]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006302:	f043 0310 	orr.w	r3, r3, #16
 8006306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800630a:	4b78      	ldr	r3, [pc, #480]	; (80064ec <HAL_UART_MspInit+0x240>)
 800630c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006318:	4b74      	ldr	r3, [pc, #464]	; (80064ec <HAL_UART_MspInit+0x240>)
 800631a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800631e:	4a73      	ldr	r2, [pc, #460]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006328:	4b70      	ldr	r3, [pc, #448]	; (80064ec <HAL_UART_MspInit+0x240>)
 800632a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006336:	4b6d      	ldr	r3, [pc, #436]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800633c:	4a6b      	ldr	r2, [pc, #428]	; (80064ec <HAL_UART_MspInit+0x240>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006346:	4b69      	ldr	r3, [pc, #420]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635c:	2302      	movs	r3, #2
 800635e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800636e:	2304      	movs	r3, #4
 8006370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006374:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006378:	4619      	mov	r1, r3
 800637a:	485d      	ldr	r0, [pc, #372]	; (80064f0 <HAL_UART_MspInit+0x244>)
 800637c:	f003 f92c 	bl	80095d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006388:	2302      	movs	r3, #2
 800638a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006394:	2300      	movs	r3, #0
 8006396:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800639a:	2307      	movs	r3, #7
 800639c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80063a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4853      	ldr	r0, [pc, #332]	; (80064f4 <HAL_UART_MspInit+0x248>)
 80063a8:	f003 f916 	bl	80095d8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80063ac:	e097      	b.n	80064de <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a51      	ldr	r2, [pc, #324]	; (80064f8 <HAL_UART_MspInit+0x24c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d142      	bne.n	800643e <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80063b8:	2302      	movs	r3, #2
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063c6:	4618      	mov	r0, r3
 80063c8:	f004 faf6 	bl	800a9b8 <HAL_RCCEx_PeriphCLKConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80063d2:	f7fd fa7b 	bl	80038cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80063d6:	4b45      	ldr	r3, [pc, #276]	; (80064ec <HAL_UART_MspInit+0x240>)
 80063d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063dc:	4a43      	ldr	r2, [pc, #268]	; (80064ec <HAL_UART_MspInit+0x240>)
 80063de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063e6:	4b41      	ldr	r3, [pc, #260]	; (80064ec <HAL_UART_MspInit+0x240>)
 80063e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f4:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_UART_MspInit+0x240>)
 80063f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063fa:	4a3c      	ldr	r2, [pc, #240]	; (80064ec <HAL_UART_MspInit+0x240>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006404:	4b39      	ldr	r3, [pc, #228]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006412:	230c      	movs	r3, #12
 8006414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006418:	2302      	movs	r3, #2
 800641a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800642a:	2307      	movs	r3, #7
 800642c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006430:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006434:	4619      	mov	r1, r3
 8006436:	482f      	ldr	r0, [pc, #188]	; (80064f4 <HAL_UART_MspInit+0x248>)
 8006438:	f003 f8ce 	bl	80095d8 <HAL_GPIO_Init>
}
 800643c:	e04f      	b.n	80064de <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <HAL_UART_MspInit+0x250>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d14a      	bne.n	80064de <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006448:	2302      	movs	r3, #2
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006456:	4618      	mov	r0, r3
 8006458:	f004 faae 	bl	800a9b8 <HAL_RCCEx_PeriphCLKConfig>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006462:	f7fd fa33 	bl	80038cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006466:	4b21      	ldr	r3, [pc, #132]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800646c:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <HAL_UART_MspInit+0x240>)
 800646e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006472:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006476:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800647c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_UART_MspInit+0x240>)
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006494:	4b15      	ldr	r3, [pc, #84]	; (80064ec <HAL_UART_MspInit+0x240>)
 8006496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80064a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064aa:	2302      	movs	r3, #2
 80064ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80064bc:	2307      	movs	r3, #7
 80064be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064c6:	4619      	mov	r1, r3
 80064c8:	480d      	ldr	r0, [pc, #52]	; (8006500 <HAL_UART_MspInit+0x254>)
 80064ca:	f003 f885 	bl	80095d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 80064ce:	2201      	movs	r2, #1
 80064d0:	2101      	movs	r1, #1
 80064d2:	2027      	movs	r0, #39	; 0x27
 80064d4:	f000 fa01 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80064d8:	2027      	movs	r0, #39	; 0x27
 80064da:	f000 fa18 	bl	800690e <HAL_NVIC_EnableIRQ>
}
 80064de:	bf00      	nop
 80064e0:	37f8      	adds	r7, #248	; 0xf8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40011000 	.word	0x40011000
 80064ec:	58024400 	.word	0x58024400
 80064f0:	58020400 	.word	0x58020400
 80064f4:	58020000 	.word	0x58020000
 80064f8:	40004400 	.word	0x40004400
 80064fc:	40004800 	.word	0x40004800
 8006500:	58020c00 	.word	0x58020c00

08006504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800653c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800650a:	e003      	b.n	8006514 <LoopCopyDataInit>

0800650c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800650e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006512:	3104      	adds	r1, #4

08006514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006514:	480b      	ldr	r0, [pc, #44]	; (8006544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800651a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800651c:	d3f6      	bcc.n	800650c <CopyDataInit>
  ldr  r2, =_sbss
 800651e:	4a0b      	ldr	r2, [pc, #44]	; (800654c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006520:	e002      	b.n	8006528 <LoopFillZerobss>

08006522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006524:	f842 3b04 	str.w	r3, [r2], #4

08006528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800652a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800652c:	d3f9      	bcc.n	8006522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800652e:	f7fd fc3d 	bl	8003dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006532:	f00a fa95 	bl	8010a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006536:	f7fc fd9b 	bl	8003070 <main>
  bx  lr    
 800653a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800653c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006540:	08015dc0 	.word	0x08015dc0
  ldr  r0, =_sdata
 8006544:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006548:	240002cc 	.word	0x240002cc
  ldr  r2, =_sbss
 800654c:	240002d0 	.word	0x240002d0
  ldr  r3, = _ebss
 8006550:	24000d48 	.word	0x24000d48

08006554 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006554:	e7fe      	b.n	8006554 <ADC3_IRQHandler>
	...

08006558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800655e:	2003      	movs	r0, #3
 8006560:	f000 f9b0 	bl	80068c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006564:	f004 f852 	bl	800a60c <HAL_RCC_GetSysClockFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_Init+0x68>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	4913      	ldr	r1, [pc, #76]	; (80065c4 <HAL_Init+0x6c>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <HAL_Init+0x68>)
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <HAL_Init+0x6c>)
 800658c:	5cd3      	ldrb	r3, [r2, r3]
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <HAL_Init+0x70>)
 800659a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800659c:	4a0b      	ldr	r2, [pc, #44]	; (80065cc <HAL_Init+0x74>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065a2:	2000      	movs	r0, #0
 80065a4:	f000 f814 	bl	80065d0 <HAL_InitTick>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e002      	b.n	80065b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80065b2:	f7fd fa75 	bl	8003aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	58024400 	.word	0x58024400
 80065c4:	08014088 	.word	0x08014088
 80065c8:	240000ec 	.word	0x240000ec
 80065cc:	240000e8 	.word	0x240000e8

080065d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80065d8:	4b15      	ldr	r3, [pc, #84]	; (8006630 <HAL_InitTick+0x60>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e021      	b.n	8006628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <HAL_InitTick+0x64>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_InitTick+0x60>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f9a3 	bl	8006946 <HAL_SYSTICK_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e00e      	b.n	8006628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d80a      	bhi.n	8006626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006610:	2200      	movs	r2, #0
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	f000 f95f 	bl	80068da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800661c:	4a06      	ldr	r2, [pc, #24]	; (8006638 <HAL_InitTick+0x68>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	240000f4 	.word	0x240000f4
 8006634:	240000e8 	.word	0x240000e8
 8006638:	240000f0 	.word	0x240000f0

0800663c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_IncTick+0x20>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_IncTick+0x24>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4413      	add	r3, r2
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <HAL_IncTick+0x24>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	240000f4 	.word	0x240000f4
 8006660:	24000d34 	.word	0x24000d34

08006664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return uwTick;
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <HAL_GetTick+0x14>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	24000d34 	.word	0x24000d34

0800667c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006684:	f7ff ffee 	bl	8006664 <HAL_GetTick>
 8006688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d005      	beq.n	80066a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <HAL_Delay+0x44>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066a2:	bf00      	nop
 80066a4:	f7ff ffde 	bl	8006664 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d8f7      	bhi.n	80066a4 <HAL_Delay+0x28>
  {
  }
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	240000f4 	.word	0x240000f4

080066c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <HAL_GetREVID+0x14>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	0c1b      	lsrs	r3, r3, #16
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	5c001000 	.word	0x5c001000

080066dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <__NVIC_SetPriorityGrouping+0x40>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066f8:	4013      	ands	r3, r2
 80066fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <__NVIC_SetPriorityGrouping+0x44>)
 8006706:	4313      	orrs	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800670a:	4a04      	ldr	r2, [pc, #16]	; (800671c <__NVIC_SetPriorityGrouping+0x40>)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	60d3      	str	r3, [r2, #12]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	e000ed00 	.word	0xe000ed00
 8006720:	05fa0000 	.word	0x05fa0000

08006724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <__NVIC_GetPriorityGrouping+0x18>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 0307 	and.w	r3, r3, #7
}
 8006732:	4618      	mov	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800674a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800674e:	2b00      	cmp	r3, #0
 8006750:	db0b      	blt.n	800676a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	f003 021f 	and.w	r2, r3, #31
 8006758:	4907      	ldr	r1, [pc, #28]	; (8006778 <__NVIC_EnableIRQ+0x38>)
 800675a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	2001      	movs	r0, #1
 8006762:	fa00 f202 	lsl.w	r2, r0, r2
 8006766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	e000e100 	.word	0xe000e100

0800677c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800678a:	2b00      	cmp	r3, #0
 800678c:	db12      	blt.n	80067b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	f003 021f 	and.w	r2, r3, #31
 8006794:	490a      	ldr	r1, [pc, #40]	; (80067c0 <__NVIC_DisableIRQ+0x44>)
 8006796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2001      	movs	r0, #1
 800679e:	fa00 f202 	lsl.w	r2, r0, r2
 80067a2:	3320      	adds	r3, #32
 80067a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80067a8:	f3bf 8f4f 	dsb	sy
}
 80067ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067ae:	f3bf 8f6f 	isb	sy
}
 80067b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	e000e100 	.word	0xe000e100

080067c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	6039      	str	r1, [r7, #0]
 80067ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	db0a      	blt.n	80067ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	490c      	ldr	r1, [pc, #48]	; (8006810 <__NVIC_SetPriority+0x4c>)
 80067de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067e2:	0112      	lsls	r2, r2, #4
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	440b      	add	r3, r1
 80067e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067ec:	e00a      	b.n	8006804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	4908      	ldr	r1, [pc, #32]	; (8006814 <__NVIC_SetPriority+0x50>)
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	3b04      	subs	r3, #4
 80067fc:	0112      	lsls	r2, r2, #4
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	440b      	add	r3, r1
 8006802:	761a      	strb	r2, [r3, #24]
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	e000e100 	.word	0xe000e100
 8006814:	e000ed00 	.word	0xe000ed00

08006818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f1c3 0307 	rsb	r3, r3, #7
 8006832:	2b04      	cmp	r3, #4
 8006834:	bf28      	it	cs
 8006836:	2304      	movcs	r3, #4
 8006838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3304      	adds	r3, #4
 800683e:	2b06      	cmp	r3, #6
 8006840:	d902      	bls.n	8006848 <NVIC_EncodePriority+0x30>
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3b03      	subs	r3, #3
 8006846:	e000      	b.n	800684a <NVIC_EncodePriority+0x32>
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	fa02 f303 	lsl.w	r3, r2, r3
 8006856:	43da      	mvns	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	401a      	ands	r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006860:	f04f 31ff 	mov.w	r1, #4294967295
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	43d9      	mvns	r1, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006870:	4313      	orrs	r3, r2
         );
}
 8006872:	4618      	mov	r0, r3
 8006874:	3724      	adds	r7, #36	; 0x24
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3b01      	subs	r3, #1
 800688c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006890:	d301      	bcc.n	8006896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006892:	2301      	movs	r3, #1
 8006894:	e00f      	b.n	80068b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006896:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <SysTick_Config+0x40>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3b01      	subs	r3, #1
 800689c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800689e:	210f      	movs	r1, #15
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	f7ff ff8e 	bl	80067c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <SysTick_Config+0x40>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <SysTick_Config+0x40>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010

080068c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff05 	bl	80066dc <__NVIC_SetPriorityGrouping>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af00      	add	r7, sp, #0
 80068e0:	4603      	mov	r3, r0
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068e8:	f7ff ff1c 	bl	8006724 <__NVIC_GetPriorityGrouping>
 80068ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	6978      	ldr	r0, [r7, #20]
 80068f4:	f7ff ff90 	bl	8006818 <NVIC_EncodePriority>
 80068f8:	4602      	mov	r2, r0
 80068fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff ff5f 	bl	80067c4 <__NVIC_SetPriority>
}
 8006906:	bf00      	nop
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff ff0f 	bl	8006740 <__NVIC_EnableIRQ>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ff1f 	bl	800677c <__NVIC_DisableIRQ>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff96 	bl	8006880 <SysTick_Config>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006968:	f7ff fe7c 	bl	8006664 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e316      	b.n	8006fa6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a66      	ldr	r2, [pc, #408]	; (8006b18 <HAL_DMA_Init+0x1b8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d04a      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a65      	ldr	r2, [pc, #404]	; (8006b1c <HAL_DMA_Init+0x1bc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d045      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a63      	ldr	r2, [pc, #396]	; (8006b20 <HAL_DMA_Init+0x1c0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d040      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a62      	ldr	r2, [pc, #392]	; (8006b24 <HAL_DMA_Init+0x1c4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d03b      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a60      	ldr	r2, [pc, #384]	; (8006b28 <HAL_DMA_Init+0x1c8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d036      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a5f      	ldr	r2, [pc, #380]	; (8006b2c <HAL_DMA_Init+0x1cc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d031      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5d      	ldr	r2, [pc, #372]	; (8006b30 <HAL_DMA_Init+0x1d0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02c      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5c      	ldr	r2, [pc, #368]	; (8006b34 <HAL_DMA_Init+0x1d4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d027      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5a      	ldr	r2, [pc, #360]	; (8006b38 <HAL_DMA_Init+0x1d8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d022      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a59      	ldr	r2, [pc, #356]	; (8006b3c <HAL_DMA_Init+0x1dc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d01d      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <HAL_DMA_Init+0x1e0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d018      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a56      	ldr	r2, [pc, #344]	; (8006b44 <HAL_DMA_Init+0x1e4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d013      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_DMA_Init+0x1e8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00e      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a53      	ldr	r2, [pc, #332]	; (8006b4c <HAL_DMA_Init+0x1ec>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a51      	ldr	r2, [pc, #324]	; (8006b50 <HAL_DMA_Init+0x1f0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_DMA_Init+0xb8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a50      	ldr	r2, [pc, #320]	; (8006b54 <HAL_DMA_Init+0x1f4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d101      	bne.n	8006a1c <HAL_DMA_Init+0xbc>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <HAL_DMA_Init+0xbe>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 813b 	beq.w	8006c9a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a37      	ldr	r2, [pc, #220]	; (8006b18 <HAL_DMA_Init+0x1b8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d04a      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <HAL_DMA_Init+0x1bc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d045      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <HAL_DMA_Init+0x1c0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d040      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a33      	ldr	r2, [pc, #204]	; (8006b24 <HAL_DMA_Init+0x1c4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d03b      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a31      	ldr	r2, [pc, #196]	; (8006b28 <HAL_DMA_Init+0x1c8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d036      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a30      	ldr	r2, [pc, #192]	; (8006b2c <HAL_DMA_Init+0x1cc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d031      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2e      	ldr	r2, [pc, #184]	; (8006b30 <HAL_DMA_Init+0x1d0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d02c      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <HAL_DMA_Init+0x1d4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d027      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <HAL_DMA_Init+0x1d8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <HAL_DMA_Init+0x1dc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01d      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a28      	ldr	r2, [pc, #160]	; (8006b40 <HAL_DMA_Init+0x1e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a27      	ldr	r2, [pc, #156]	; (8006b44 <HAL_DMA_Init+0x1e4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <HAL_DMA_Init+0x1e8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a24      	ldr	r2, [pc, #144]	; (8006b4c <HAL_DMA_Init+0x1ec>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <HAL_DMA_Init+0x1f0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_DMA_Init+0x174>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <HAL_DMA_Init+0x1f4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d108      	bne.n	8006ae6 <HAL_DMA_Init+0x186>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e007      	b.n	8006af6 <HAL_DMA_Init+0x196>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006af6:	e02f      	b.n	8006b58 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006af8:	f7ff fdb4 	bl	8006664 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d928      	bls.n	8006b58 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e246      	b.n	8006fa6 <HAL_DMA_Init+0x646>
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	40020028 	.word	0x40020028
 8006b20:	40020040 	.word	0x40020040
 8006b24:	40020058 	.word	0x40020058
 8006b28:	40020070 	.word	0x40020070
 8006b2c:	40020088 	.word	0x40020088
 8006b30:	400200a0 	.word	0x400200a0
 8006b34:	400200b8 	.word	0x400200b8
 8006b38:	40020410 	.word	0x40020410
 8006b3c:	40020428 	.word	0x40020428
 8006b40:	40020440 	.word	0x40020440
 8006b44:	40020458 	.word	0x40020458
 8006b48:	40020470 	.word	0x40020470
 8006b4c:	40020488 	.word	0x40020488
 8006b50:	400204a0 	.word	0x400204a0
 8006b54:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1c8      	bne.n	8006af8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4b83      	ldr	r3, [pc, #524]	; (8006d80 <HAL_DMA_Init+0x420>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b96:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d107      	bne.n	8006bbc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006bbc:	4b71      	ldr	r3, [pc, #452]	; (8006d84 <HAL_DMA_Init+0x424>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b71      	ldr	r3, [pc, #452]	; (8006d88 <HAL_DMA_Init+0x428>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc8:	d328      	bcc.n	8006c1c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b28      	cmp	r3, #40	; 0x28
 8006bd0:	d903      	bls.n	8006bda <HAL_DMA_Init+0x27a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd8:	d917      	bls.n	8006c0a <HAL_DMA_Init+0x2aa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b3e      	cmp	r3, #62	; 0x3e
 8006be0:	d903      	bls.n	8006bea <HAL_DMA_Init+0x28a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b42      	cmp	r3, #66	; 0x42
 8006be8:	d90f      	bls.n	8006c0a <HAL_DMA_Init+0x2aa>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b46      	cmp	r3, #70	; 0x46
 8006bf0:	d903      	bls.n	8006bfa <HAL_DMA_Init+0x29a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b48      	cmp	r3, #72	; 0x48
 8006bf8:	d907      	bls.n	8006c0a <HAL_DMA_Init+0x2aa>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b4e      	cmp	r3, #78	; 0x4e
 8006c00:	d905      	bls.n	8006c0e <HAL_DMA_Init+0x2ae>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b52      	cmp	r3, #82	; 0x52
 8006c08:	d801      	bhi.n	8006c0e <HAL_DMA_Init+0x2ae>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_DMA_Init+0x2b0>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d117      	bne.n	8006c76 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f002 fb33 	bl	80092c4 <DMA_CheckFifoParam>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e197      	b.n	8006fa6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f002 fa6e 	bl	8009160 <DMA_CalcBaseAndBitshift>
 8006c84:	4603      	mov	r3, r0
 8006c86:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	223f      	movs	r2, #63	; 0x3f
 8006c92:	409a      	lsls	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	e0cd      	b.n	8006e36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <HAL_DMA_Init+0x42c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <HAL_DMA_Init+0x430>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a38      	ldr	r2, [pc, #224]	; (8006d94 <HAL_DMA_Init+0x434>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a36      	ldr	r2, [pc, #216]	; (8006d98 <HAL_DMA_Init+0x438>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a35      	ldr	r2, [pc, #212]	; (8006d9c <HAL_DMA_Init+0x43c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a33      	ldr	r2, [pc, #204]	; (8006da0 <HAL_DMA_Init+0x440>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a32      	ldr	r2, [pc, #200]	; (8006da4 <HAL_DMA_Init+0x444>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_DMA_Init+0x38a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a30      	ldr	r2, [pc, #192]	; (8006da8 <HAL_DMA_Init+0x448>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_DMA_Init+0x38e>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_DMA_Init+0x390>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8097 	beq.w	8006e24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <HAL_DMA_Init+0x42c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d021      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <HAL_DMA_Init+0x430>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01c      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <HAL_DMA_Init+0x434>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d017      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <HAL_DMA_Init+0x438>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d012      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <HAL_DMA_Init+0x43c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00d      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_DMA_Init+0x440>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d008      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_DMA_Init+0x444>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <HAL_DMA_Init+0x3e4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_DMA_Init+0x448>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4b12      	ldr	r3, [pc, #72]	; (8006dac <HAL_DMA_Init+0x44c>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d020      	beq.n	8006db0 <HAL_DMA_Init+0x450>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	d102      	bne.n	8006d7c <HAL_DMA_Init+0x41c>
 8006d76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d7a:	e01a      	b.n	8006db2 <HAL_DMA_Init+0x452>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e018      	b.n	8006db2 <HAL_DMA_Init+0x452>
 8006d80:	fe10803f 	.word	0xfe10803f
 8006d84:	5c001000 	.word	0x5c001000
 8006d88:	ffff0000 	.word	0xffff0000
 8006d8c:	58025408 	.word	0x58025408
 8006d90:	5802541c 	.word	0x5802541c
 8006d94:	58025430 	.word	0x58025430
 8006d98:	58025444 	.word	0x58025444
 8006d9c:	58025458 	.word	0x58025458
 8006da0:	5802546c 	.word	0x5802546c
 8006da4:	58025480 	.word	0x58025480
 8006da8:	58025494 	.word	0x58025494
 8006dac:	fffe000f 	.word	0xfffe000f
 8006db0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68d2      	ldr	r2, [r2, #12]
 8006db6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006de0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b6e      	ldr	r3, [pc, #440]	; (8006fb0 <HAL_DMA_Init+0x650>)
 8006df8:	4413      	add	r3, r2
 8006dfa:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <HAL_DMA_Init+0x654>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	009a      	lsls	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 f9a9 	bl	8009160 <DMA_CalcBaseAndBitshift>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	409a      	lsls	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	605a      	str	r2, [r3, #4]
 8006e22:	e008      	b.n	8006e36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2240      	movs	r2, #64	; 0x40
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0b7      	b.n	8006fa6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a5f      	ldr	r2, [pc, #380]	; (8006fb8 <HAL_DMA_Init+0x658>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d072      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5d      	ldr	r2, [pc, #372]	; (8006fbc <HAL_DMA_Init+0x65c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d06d      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5c      	ldr	r2, [pc, #368]	; (8006fc0 <HAL_DMA_Init+0x660>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d068      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5a      	ldr	r2, [pc, #360]	; (8006fc4 <HAL_DMA_Init+0x664>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d063      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a59      	ldr	r2, [pc, #356]	; (8006fc8 <HAL_DMA_Init+0x668>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d05e      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a57      	ldr	r2, [pc, #348]	; (8006fcc <HAL_DMA_Init+0x66c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d059      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a56      	ldr	r2, [pc, #344]	; (8006fd0 <HAL_DMA_Init+0x670>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d054      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a54      	ldr	r2, [pc, #336]	; (8006fd4 <HAL_DMA_Init+0x674>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d04f      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a53      	ldr	r2, [pc, #332]	; (8006fd8 <HAL_DMA_Init+0x678>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d04a      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a51      	ldr	r2, [pc, #324]	; (8006fdc <HAL_DMA_Init+0x67c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d045      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a50      	ldr	r2, [pc, #320]	; (8006fe0 <HAL_DMA_Init+0x680>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d040      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a4e      	ldr	r2, [pc, #312]	; (8006fe4 <HAL_DMA_Init+0x684>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d03b      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a4d      	ldr	r2, [pc, #308]	; (8006fe8 <HAL_DMA_Init+0x688>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d036      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a4b      	ldr	r2, [pc, #300]	; (8006fec <HAL_DMA_Init+0x68c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d031      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a4a      	ldr	r2, [pc, #296]	; (8006ff0 <HAL_DMA_Init+0x690>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d02c      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a48      	ldr	r2, [pc, #288]	; (8006ff4 <HAL_DMA_Init+0x694>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d027      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a47      	ldr	r2, [pc, #284]	; (8006ff8 <HAL_DMA_Init+0x698>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d022      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a45      	ldr	r2, [pc, #276]	; (8006ffc <HAL_DMA_Init+0x69c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01d      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a44      	ldr	r2, [pc, #272]	; (8007000 <HAL_DMA_Init+0x6a0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a42      	ldr	r2, [pc, #264]	; (8007004 <HAL_DMA_Init+0x6a4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a41      	ldr	r2, [pc, #260]	; (8007008 <HAL_DMA_Init+0x6a8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3f      	ldr	r2, [pc, #252]	; (800700c <HAL_DMA_Init+0x6ac>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3e      	ldr	r2, [pc, #248]	; (8007010 <HAL_DMA_Init+0x6b0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_DMA_Init+0x5c6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <HAL_DMA_Init+0x6b4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d101      	bne.n	8006f2a <HAL_DMA_Init+0x5ca>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <HAL_DMA_Init+0x5cc>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d032      	beq.n	8006f96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f002 fa43 	bl	80093bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d102      	bne.n	8006f44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d010      	beq.n	8006f84 <HAL_DMA_Init+0x624>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d80c      	bhi.n	8006f84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fac0 	bl	80094f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	e008      	b.n	8006f96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	a7fdabf8 	.word	0xa7fdabf8
 8006fb4:	cccccccd 	.word	0xcccccccd
 8006fb8:	40020010 	.word	0x40020010
 8006fbc:	40020028 	.word	0x40020028
 8006fc0:	40020040 	.word	0x40020040
 8006fc4:	40020058 	.word	0x40020058
 8006fc8:	40020070 	.word	0x40020070
 8006fcc:	40020088 	.word	0x40020088
 8006fd0:	400200a0 	.word	0x400200a0
 8006fd4:	400200b8 	.word	0x400200b8
 8006fd8:	40020410 	.word	0x40020410
 8006fdc:	40020428 	.word	0x40020428
 8006fe0:	40020440 	.word	0x40020440
 8006fe4:	40020458 	.word	0x40020458
 8006fe8:	40020470 	.word	0x40020470
 8006fec:	40020488 	.word	0x40020488
 8006ff0:	400204a0 	.word	0x400204a0
 8006ff4:	400204b8 	.word	0x400204b8
 8006ff8:	58025408 	.word	0x58025408
 8006ffc:	5802541c 	.word	0x5802541c
 8007000:	58025430 	.word	0x58025430
 8007004:	58025444 	.word	0x58025444
 8007008:	58025458 	.word	0x58025458
 800700c:	5802546c 	.word	0x5802546c
 8007010:	58025480 	.word	0x58025480
 8007014:	58025494 	.word	0x58025494

08007018 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e226      	b.n	8007482 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Start_IT+0x2a>
 800703e:	2302      	movs	r3, #2
 8007040:	e21f      	b.n	8007482 <HAL_DMA_Start_IT+0x46a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b01      	cmp	r3, #1
 8007054:	f040 820a 	bne.w	800746c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a68      	ldr	r2, [pc, #416]	; (800720c <HAL_DMA_Start_IT+0x1f4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d04a      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a66      	ldr	r2, [pc, #408]	; (8007210 <HAL_DMA_Start_IT+0x1f8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d045      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a65      	ldr	r2, [pc, #404]	; (8007214 <HAL_DMA_Start_IT+0x1fc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d040      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a63      	ldr	r2, [pc, #396]	; (8007218 <HAL_DMA_Start_IT+0x200>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d03b      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a62      	ldr	r2, [pc, #392]	; (800721c <HAL_DMA_Start_IT+0x204>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d036      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a60      	ldr	r2, [pc, #384]	; (8007220 <HAL_DMA_Start_IT+0x208>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d031      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5f      	ldr	r2, [pc, #380]	; (8007224 <HAL_DMA_Start_IT+0x20c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d02c      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5d      	ldr	r2, [pc, #372]	; (8007228 <HAL_DMA_Start_IT+0x210>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d027      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5c      	ldr	r2, [pc, #368]	; (800722c <HAL_DMA_Start_IT+0x214>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <HAL_DMA_Start_IT+0x218>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a59      	ldr	r2, [pc, #356]	; (8007234 <HAL_DMA_Start_IT+0x21c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a57      	ldr	r2, [pc, #348]	; (8007238 <HAL_DMA_Start_IT+0x220>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a56      	ldr	r2, [pc, #344]	; (800723c <HAL_DMA_Start_IT+0x224>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a54      	ldr	r2, [pc, #336]	; (8007240 <HAL_DMA_Start_IT+0x228>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a53      	ldr	r2, [pc, #332]	; (8007244 <HAL_DMA_Start_IT+0x22c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_DMA_Start_IT+0xee>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a51      	ldr	r2, [pc, #324]	; (8007248 <HAL_DMA_Start_IT+0x230>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <HAL_DMA_Start_IT+0x100>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e007      	b.n	8007128 <HAL_DMA_Start_IT+0x110>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fe6a 	bl	8008e08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a34      	ldr	r2, [pc, #208]	; (800720c <HAL_DMA_Start_IT+0x1f4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d04a      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a33      	ldr	r2, [pc, #204]	; (8007210 <HAL_DMA_Start_IT+0x1f8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d045      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a31      	ldr	r2, [pc, #196]	; (8007214 <HAL_DMA_Start_IT+0x1fc>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d040      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a30      	ldr	r2, [pc, #192]	; (8007218 <HAL_DMA_Start_IT+0x200>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d03b      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2e      	ldr	r2, [pc, #184]	; (800721c <HAL_DMA_Start_IT+0x204>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d036      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2d      	ldr	r2, [pc, #180]	; (8007220 <HAL_DMA_Start_IT+0x208>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d031      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <HAL_DMA_Start_IT+0x20c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02c      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <HAL_DMA_Start_IT+0x210>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d027      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a28      	ldr	r2, [pc, #160]	; (800722c <HAL_DMA_Start_IT+0x214>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a27      	ldr	r2, [pc, #156]	; (8007230 <HAL_DMA_Start_IT+0x218>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d01d      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a25      	ldr	r2, [pc, #148]	; (8007234 <HAL_DMA_Start_IT+0x21c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a24      	ldr	r2, [pc, #144]	; (8007238 <HAL_DMA_Start_IT+0x220>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <HAL_DMA_Start_IT+0x224>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a21      	ldr	r2, [pc, #132]	; (8007240 <HAL_DMA_Start_IT+0x228>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <HAL_DMA_Start_IT+0x22c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_DMA_Start_IT+0x1bc>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <HAL_DMA_Start_IT+0x230>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d101      	bne.n	80071d8 <HAL_DMA_Start_IT+0x1c0>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <HAL_DMA_Start_IT+0x1c2>
 80071d8:	2300      	movs	r3, #0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d036      	beq.n	800724c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f023 021e 	bic.w	r2, r3, #30
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0216 	orr.w	r2, r2, #22
 80071f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d03e      	beq.n	8007278 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0208 	orr.w	r2, r2, #8
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	e035      	b.n	8007278 <HAL_DMA_Start_IT+0x260>
 800720c:	40020010 	.word	0x40020010
 8007210:	40020028 	.word	0x40020028
 8007214:	40020040 	.word	0x40020040
 8007218:	40020058 	.word	0x40020058
 800721c:	40020070 	.word	0x40020070
 8007220:	40020088 	.word	0x40020088
 8007224:	400200a0 	.word	0x400200a0
 8007228:	400200b8 	.word	0x400200b8
 800722c:	40020410 	.word	0x40020410
 8007230:	40020428 	.word	0x40020428
 8007234:	40020440 	.word	0x40020440
 8007238:	40020458 	.word	0x40020458
 800723c:	40020470 	.word	0x40020470
 8007240:	40020488 	.word	0x40020488
 8007244:	400204a0 	.word	0x400204a0
 8007248:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 020e 	bic.w	r2, r3, #14
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 020a 	orr.w	r2, r2, #10
 800725e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d007      	beq.n	8007278 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0204 	orr.w	r2, r2, #4
 8007276:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a83      	ldr	r2, [pc, #524]	; (800748c <HAL_DMA_Start_IT+0x474>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d072      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a82      	ldr	r2, [pc, #520]	; (8007490 <HAL_DMA_Start_IT+0x478>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d06d      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a80      	ldr	r2, [pc, #512]	; (8007494 <HAL_DMA_Start_IT+0x47c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d068      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a7f      	ldr	r2, [pc, #508]	; (8007498 <HAL_DMA_Start_IT+0x480>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d063      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a7d      	ldr	r2, [pc, #500]	; (800749c <HAL_DMA_Start_IT+0x484>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d05e      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a7c      	ldr	r2, [pc, #496]	; (80074a0 <HAL_DMA_Start_IT+0x488>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d059      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a7a      	ldr	r2, [pc, #488]	; (80074a4 <HAL_DMA_Start_IT+0x48c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d054      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a79      	ldr	r2, [pc, #484]	; (80074a8 <HAL_DMA_Start_IT+0x490>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d04f      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a77      	ldr	r2, [pc, #476]	; (80074ac <HAL_DMA_Start_IT+0x494>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d04a      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a76      	ldr	r2, [pc, #472]	; (80074b0 <HAL_DMA_Start_IT+0x498>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d045      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a74      	ldr	r2, [pc, #464]	; (80074b4 <HAL_DMA_Start_IT+0x49c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d040      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a73      	ldr	r2, [pc, #460]	; (80074b8 <HAL_DMA_Start_IT+0x4a0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d03b      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a71      	ldr	r2, [pc, #452]	; (80074bc <HAL_DMA_Start_IT+0x4a4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d036      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a70      	ldr	r2, [pc, #448]	; (80074c0 <HAL_DMA_Start_IT+0x4a8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d031      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a6e      	ldr	r2, [pc, #440]	; (80074c4 <HAL_DMA_Start_IT+0x4ac>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d02c      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a6d      	ldr	r2, [pc, #436]	; (80074c8 <HAL_DMA_Start_IT+0x4b0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d027      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a6b      	ldr	r2, [pc, #428]	; (80074cc <HAL_DMA_Start_IT+0x4b4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d022      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a6a      	ldr	r2, [pc, #424]	; (80074d0 <HAL_DMA_Start_IT+0x4b8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d01d      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a68      	ldr	r2, [pc, #416]	; (80074d4 <HAL_DMA_Start_IT+0x4bc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a67      	ldr	r2, [pc, #412]	; (80074d8 <HAL_DMA_Start_IT+0x4c0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a65      	ldr	r2, [pc, #404]	; (80074dc <HAL_DMA_Start_IT+0x4c4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a64      	ldr	r2, [pc, #400]	; (80074e0 <HAL_DMA_Start_IT+0x4c8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a62      	ldr	r2, [pc, #392]	; (80074e4 <HAL_DMA_Start_IT+0x4cc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_DMA_Start_IT+0x350>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a61      	ldr	r2, [pc, #388]	; (80074e8 <HAL_DMA_Start_IT+0x4d0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d101      	bne.n	800736c <HAL_DMA_Start_IT+0x354>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <HAL_DMA_Start_IT+0x356>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01a      	beq.n	80073a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a37      	ldr	r2, [pc, #220]	; (800748c <HAL_DMA_Start_IT+0x474>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d04a      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a36      	ldr	r2, [pc, #216]	; (8007490 <HAL_DMA_Start_IT+0x478>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d045      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a34      	ldr	r2, [pc, #208]	; (8007494 <HAL_DMA_Start_IT+0x47c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d040      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a33      	ldr	r2, [pc, #204]	; (8007498 <HAL_DMA_Start_IT+0x480>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d03b      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a31      	ldr	r2, [pc, #196]	; (800749c <HAL_DMA_Start_IT+0x484>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d036      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a30      	ldr	r2, [pc, #192]	; (80074a0 <HAL_DMA_Start_IT+0x488>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d031      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2e      	ldr	r2, [pc, #184]	; (80074a4 <HAL_DMA_Start_IT+0x48c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d02c      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2d      	ldr	r2, [pc, #180]	; (80074a8 <HAL_DMA_Start_IT+0x490>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d027      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2b      	ldr	r2, [pc, #172]	; (80074ac <HAL_DMA_Start_IT+0x494>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <HAL_DMA_Start_IT+0x498>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d01d      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <HAL_DMA_Start_IT+0x49c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a27      	ldr	r2, [pc, #156]	; (80074b8 <HAL_DMA_Start_IT+0x4a0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_DMA_Start_IT+0x4a4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a24      	ldr	r2, [pc, #144]	; (80074c0 <HAL_DMA_Start_IT+0x4a8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_DMA_Start_IT+0x4ac>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_DMA_Start_IT+0x430>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <HAL_DMA_Start_IT+0x4b0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d108      	bne.n	800745a <HAL_DMA_Start_IT+0x442>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e012      	b.n	8007480 <HAL_DMA_Start_IT+0x468>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e009      	b.n	8007480 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007472:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	40020010 	.word	0x40020010
 8007490:	40020028 	.word	0x40020028
 8007494:	40020040 	.word	0x40020040
 8007498:	40020058 	.word	0x40020058
 800749c:	40020070 	.word	0x40020070
 80074a0:	40020088 	.word	0x40020088
 80074a4:	400200a0 	.word	0x400200a0
 80074a8:	400200b8 	.word	0x400200b8
 80074ac:	40020410 	.word	0x40020410
 80074b0:	40020428 	.word	0x40020428
 80074b4:	40020440 	.word	0x40020440
 80074b8:	40020458 	.word	0x40020458
 80074bc:	40020470 	.word	0x40020470
 80074c0:	40020488 	.word	0x40020488
 80074c4:	400204a0 	.word	0x400204a0
 80074c8:	400204b8 	.word	0x400204b8
 80074cc:	58025408 	.word	0x58025408
 80074d0:	5802541c 	.word	0x5802541c
 80074d4:	58025430 	.word	0x58025430
 80074d8:	58025444 	.word	0x58025444
 80074dc:	58025458 	.word	0x58025458
 80074e0:	5802546c 	.word	0x5802546c
 80074e4:	58025480 	.word	0x58025480
 80074e8:	58025494 	.word	0x58025494

080074ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80074f4:	f7ff f8b6 	bl	8006664 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e2dc      	b.n	8007abe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d008      	beq.n	8007522 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2280      	movs	r2, #128	; 0x80
 8007514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e2cd      	b.n	8007abe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a76      	ldr	r2, [pc, #472]	; (8007700 <HAL_DMA_Abort+0x214>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a74      	ldr	r2, [pc, #464]	; (8007704 <HAL_DMA_Abort+0x218>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a73      	ldr	r2, [pc, #460]	; (8007708 <HAL_DMA_Abort+0x21c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d040      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a71      	ldr	r2, [pc, #452]	; (800770c <HAL_DMA_Abort+0x220>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d03b      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a70      	ldr	r2, [pc, #448]	; (8007710 <HAL_DMA_Abort+0x224>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d036      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a6e      	ldr	r2, [pc, #440]	; (8007714 <HAL_DMA_Abort+0x228>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a6d      	ldr	r2, [pc, #436]	; (8007718 <HAL_DMA_Abort+0x22c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d02c      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6b      	ldr	r2, [pc, #428]	; (800771c <HAL_DMA_Abort+0x230>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d027      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a6a      	ldr	r2, [pc, #424]	; (8007720 <HAL_DMA_Abort+0x234>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a68      	ldr	r2, [pc, #416]	; (8007724 <HAL_DMA_Abort+0x238>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a67      	ldr	r2, [pc, #412]	; (8007728 <HAL_DMA_Abort+0x23c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d018      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a65      	ldr	r2, [pc, #404]	; (800772c <HAL_DMA_Abort+0x240>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a64      	ldr	r2, [pc, #400]	; (8007730 <HAL_DMA_Abort+0x244>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a62      	ldr	r2, [pc, #392]	; (8007734 <HAL_DMA_Abort+0x248>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a61      	ldr	r2, [pc, #388]	; (8007738 <HAL_DMA_Abort+0x24c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_DMA_Abort+0xd6>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a5f      	ldr	r2, [pc, #380]	; (800773c <HAL_DMA_Abort+0x250>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d101      	bne.n	80075c6 <HAL_DMA_Abort+0xda>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <HAL_DMA_Abort+0xdc>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d013      	beq.n	80075f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 021e 	bic.w	r2, r2, #30
 80075da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e00a      	b.n	800760a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 020e 	bic.w	r2, r2, #14
 8007602:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3c      	ldr	r2, [pc, #240]	; (8007700 <HAL_DMA_Abort+0x214>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d072      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3a      	ldr	r2, [pc, #232]	; (8007704 <HAL_DMA_Abort+0x218>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d06d      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a39      	ldr	r2, [pc, #228]	; (8007708 <HAL_DMA_Abort+0x21c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d068      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a37      	ldr	r2, [pc, #220]	; (800770c <HAL_DMA_Abort+0x220>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d063      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a36      	ldr	r2, [pc, #216]	; (8007710 <HAL_DMA_Abort+0x224>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d05e      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a34      	ldr	r2, [pc, #208]	; (8007714 <HAL_DMA_Abort+0x228>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d059      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a33      	ldr	r2, [pc, #204]	; (8007718 <HAL_DMA_Abort+0x22c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d054      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a31      	ldr	r2, [pc, #196]	; (800771c <HAL_DMA_Abort+0x230>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d04f      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a30      	ldr	r2, [pc, #192]	; (8007720 <HAL_DMA_Abort+0x234>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d04a      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2e      	ldr	r2, [pc, #184]	; (8007724 <HAL_DMA_Abort+0x238>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d045      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <HAL_DMA_Abort+0x23c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d040      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2b      	ldr	r2, [pc, #172]	; (800772c <HAL_DMA_Abort+0x240>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d03b      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <HAL_DMA_Abort+0x244>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d036      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a28      	ldr	r2, [pc, #160]	; (8007734 <HAL_DMA_Abort+0x248>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d031      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a27      	ldr	r2, [pc, #156]	; (8007738 <HAL_DMA_Abort+0x24c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d02c      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a25      	ldr	r2, [pc, #148]	; (800773c <HAL_DMA_Abort+0x250>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d027      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a24      	ldr	r2, [pc, #144]	; (8007740 <HAL_DMA_Abort+0x254>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d022      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a22      	ldr	r2, [pc, #136]	; (8007744 <HAL_DMA_Abort+0x258>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01d      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a21      	ldr	r2, [pc, #132]	; (8007748 <HAL_DMA_Abort+0x25c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d018      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1f      	ldr	r2, [pc, #124]	; (800774c <HAL_DMA_Abort+0x260>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1e      	ldr	r2, [pc, #120]	; (8007750 <HAL_DMA_Abort+0x264>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <HAL_DMA_Abort+0x268>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <HAL_DMA_Abort+0x26c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_DMA_Abort+0x20e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a19      	ldr	r2, [pc, #100]	; (800775c <HAL_DMA_Abort+0x270>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d132      	bne.n	8007760 <HAL_DMA_Abort+0x274>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e031      	b.n	8007762 <HAL_DMA_Abort+0x276>
 80076fe:	bf00      	nop
 8007700:	40020010 	.word	0x40020010
 8007704:	40020028 	.word	0x40020028
 8007708:	40020040 	.word	0x40020040
 800770c:	40020058 	.word	0x40020058
 8007710:	40020070 	.word	0x40020070
 8007714:	40020088 	.word	0x40020088
 8007718:	400200a0 	.word	0x400200a0
 800771c:	400200b8 	.word	0x400200b8
 8007720:	40020410 	.word	0x40020410
 8007724:	40020428 	.word	0x40020428
 8007728:	40020440 	.word	0x40020440
 800772c:	40020458 	.word	0x40020458
 8007730:	40020470 	.word	0x40020470
 8007734:	40020488 	.word	0x40020488
 8007738:	400204a0 	.word	0x400204a0
 800773c:	400204b8 	.word	0x400204b8
 8007740:	58025408 	.word	0x58025408
 8007744:	5802541c 	.word	0x5802541c
 8007748:	58025430 	.word	0x58025430
 800774c:	58025444 	.word	0x58025444
 8007750:	58025458 	.word	0x58025458
 8007754:	5802546c 	.word	0x5802546c
 8007758:	58025480 	.word	0x58025480
 800775c:	58025494 	.word	0x58025494
 8007760:	2300      	movs	r3, #0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007774:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a6d      	ldr	r2, [pc, #436]	; (8007930 <HAL_DMA_Abort+0x444>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d04a      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6b      	ldr	r2, [pc, #428]	; (8007934 <HAL_DMA_Abort+0x448>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d045      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6a      	ldr	r2, [pc, #424]	; (8007938 <HAL_DMA_Abort+0x44c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d040      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a68      	ldr	r2, [pc, #416]	; (800793c <HAL_DMA_Abort+0x450>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d03b      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a67      	ldr	r2, [pc, #412]	; (8007940 <HAL_DMA_Abort+0x454>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d036      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a65      	ldr	r2, [pc, #404]	; (8007944 <HAL_DMA_Abort+0x458>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d031      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a64      	ldr	r2, [pc, #400]	; (8007948 <HAL_DMA_Abort+0x45c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d02c      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a62      	ldr	r2, [pc, #392]	; (800794c <HAL_DMA_Abort+0x460>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d027      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a61      	ldr	r2, [pc, #388]	; (8007950 <HAL_DMA_Abort+0x464>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d022      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a5f      	ldr	r2, [pc, #380]	; (8007954 <HAL_DMA_Abort+0x468>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01d      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a5e      	ldr	r2, [pc, #376]	; (8007958 <HAL_DMA_Abort+0x46c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d018      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5c      	ldr	r2, [pc, #368]	; (800795c <HAL_DMA_Abort+0x470>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5b      	ldr	r2, [pc, #364]	; (8007960 <HAL_DMA_Abort+0x474>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00e      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a59      	ldr	r2, [pc, #356]	; (8007964 <HAL_DMA_Abort+0x478>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d009      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a58      	ldr	r2, [pc, #352]	; (8007968 <HAL_DMA_Abort+0x47c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <HAL_DMA_Abort+0x32a>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a56      	ldr	r2, [pc, #344]	; (800796c <HAL_DMA_Abort+0x480>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d108      	bne.n	8007828 <HAL_DMA_Abort+0x33c>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e007      	b.n	8007838 <HAL_DMA_Abort+0x34c>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007838:	e013      	b.n	8007862 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800783a:	f7fe ff13 	bl	8006664 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b05      	cmp	r3, #5
 8007846:	d90c      	bls.n	8007862 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2203      	movs	r2, #3
 8007852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e12d      	b.n	8007abe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <HAL_DMA_Abort+0x444>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d04a      	beq.n	800790e <HAL_DMA_Abort+0x422>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <HAL_DMA_Abort+0x448>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d045      	beq.n	800790e <HAL_DMA_Abort+0x422>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	; (8007938 <HAL_DMA_Abort+0x44c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d040      	beq.n	800790e <HAL_DMA_Abort+0x422>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_DMA_Abort+0x450>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d03b      	beq.n	800790e <HAL_DMA_Abort+0x422>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	; (8007940 <HAL_DMA_Abort+0x454>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d036      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	; (8007944 <HAL_DMA_Abort+0x458>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d031      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <HAL_DMA_Abort+0x45c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d02c      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a24      	ldr	r2, [pc, #144]	; (800794c <HAL_DMA_Abort+0x460>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d027      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a23      	ldr	r2, [pc, #140]	; (8007950 <HAL_DMA_Abort+0x464>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d022      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a21      	ldr	r2, [pc, #132]	; (8007954 <HAL_DMA_Abort+0x468>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01d      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a20      	ldr	r2, [pc, #128]	; (8007958 <HAL_DMA_Abort+0x46c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1e      	ldr	r2, [pc, #120]	; (800795c <HAL_DMA_Abort+0x470>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <HAL_DMA_Abort+0x474>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <HAL_DMA_Abort+0x478>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_DMA_Abort+0x422>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <HAL_DMA_Abort+0x47c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_DMA_Abort+0x422>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <HAL_DMA_Abort+0x480>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <HAL_DMA_Abort+0x426>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <HAL_DMA_Abort+0x428>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d02b      	beq.n	8007970 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	223f      	movs	r2, #63	; 0x3f
 8007928:	409a      	lsls	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	609a      	str	r2, [r3, #8]
 800792e:	e02a      	b.n	8007986 <HAL_DMA_Abort+0x49a>
 8007930:	40020010 	.word	0x40020010
 8007934:	40020028 	.word	0x40020028
 8007938:	40020040 	.word	0x40020040
 800793c:	40020058 	.word	0x40020058
 8007940:	40020070 	.word	0x40020070
 8007944:	40020088 	.word	0x40020088
 8007948:	400200a0 	.word	0x400200a0
 800794c:	400200b8 	.word	0x400200b8
 8007950:	40020410 	.word	0x40020410
 8007954:	40020428 	.word	0x40020428
 8007958:	40020440 	.word	0x40020440
 800795c:	40020458 	.word	0x40020458
 8007960:	40020470 	.word	0x40020470
 8007964:	40020488 	.word	0x40020488
 8007968:	400204a0 	.word	0x400204a0
 800796c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	2201      	movs	r2, #1
 8007980:	409a      	lsls	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a4f      	ldr	r2, [pc, #316]	; (8007ac8 <HAL_DMA_Abort+0x5dc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d072      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a4d      	ldr	r2, [pc, #308]	; (8007acc <HAL_DMA_Abort+0x5e0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d06d      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a4c      	ldr	r2, [pc, #304]	; (8007ad0 <HAL_DMA_Abort+0x5e4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d068      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a4a      	ldr	r2, [pc, #296]	; (8007ad4 <HAL_DMA_Abort+0x5e8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d063      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a49      	ldr	r2, [pc, #292]	; (8007ad8 <HAL_DMA_Abort+0x5ec>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d05e      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a47      	ldr	r2, [pc, #284]	; (8007adc <HAL_DMA_Abort+0x5f0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d059      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a46      	ldr	r2, [pc, #280]	; (8007ae0 <HAL_DMA_Abort+0x5f4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d054      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a44      	ldr	r2, [pc, #272]	; (8007ae4 <HAL_DMA_Abort+0x5f8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d04f      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a43      	ldr	r2, [pc, #268]	; (8007ae8 <HAL_DMA_Abort+0x5fc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d04a      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a41      	ldr	r2, [pc, #260]	; (8007aec <HAL_DMA_Abort+0x600>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d045      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a40      	ldr	r2, [pc, #256]	; (8007af0 <HAL_DMA_Abort+0x604>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d040      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a3e      	ldr	r2, [pc, #248]	; (8007af4 <HAL_DMA_Abort+0x608>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a3d      	ldr	r2, [pc, #244]	; (8007af8 <HAL_DMA_Abort+0x60c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d036      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a3b      	ldr	r2, [pc, #236]	; (8007afc <HAL_DMA_Abort+0x610>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d031      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a3a      	ldr	r2, [pc, #232]	; (8007b00 <HAL_DMA_Abort+0x614>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d02c      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a38      	ldr	r2, [pc, #224]	; (8007b04 <HAL_DMA_Abort+0x618>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a37      	ldr	r2, [pc, #220]	; (8007b08 <HAL_DMA_Abort+0x61c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a35      	ldr	r2, [pc, #212]	; (8007b0c <HAL_DMA_Abort+0x620>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a34      	ldr	r2, [pc, #208]	; (8007b10 <HAL_DMA_Abort+0x624>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a32      	ldr	r2, [pc, #200]	; (8007b14 <HAL_DMA_Abort+0x628>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a31      	ldr	r2, [pc, #196]	; (8007b18 <HAL_DMA_Abort+0x62c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2f      	ldr	r2, [pc, #188]	; (8007b1c <HAL_DMA_Abort+0x630>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2e      	ldr	r2, [pc, #184]	; (8007b20 <HAL_DMA_Abort+0x634>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_DMA_Abort+0x58a>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <HAL_DMA_Abort+0x638>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d101      	bne.n	8007a7a <HAL_DMA_Abort+0x58e>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <HAL_DMA_Abort+0x590>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d015      	beq.n	8007aac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00c      	beq.n	8007aac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007aaa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40020010 	.word	0x40020010
 8007acc:	40020028 	.word	0x40020028
 8007ad0:	40020040 	.word	0x40020040
 8007ad4:	40020058 	.word	0x40020058
 8007ad8:	40020070 	.word	0x40020070
 8007adc:	40020088 	.word	0x40020088
 8007ae0:	400200a0 	.word	0x400200a0
 8007ae4:	400200b8 	.word	0x400200b8
 8007ae8:	40020410 	.word	0x40020410
 8007aec:	40020428 	.word	0x40020428
 8007af0:	40020440 	.word	0x40020440
 8007af4:	40020458 	.word	0x40020458
 8007af8:	40020470 	.word	0x40020470
 8007afc:	40020488 	.word	0x40020488
 8007b00:	400204a0 	.word	0x400204a0
 8007b04:	400204b8 	.word	0x400204b8
 8007b08:	58025408 	.word	0x58025408
 8007b0c:	5802541c 	.word	0x5802541c
 8007b10:	58025430 	.word	0x58025430
 8007b14:	58025444 	.word	0x58025444
 8007b18:	58025458 	.word	0x58025458
 8007b1c:	5802546c 	.word	0x5802546c
 8007b20:	58025480 	.word	0x58025480
 8007b24:	58025494 	.word	0x58025494

08007b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e237      	b.n	8007faa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e22c      	b.n	8007faa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a5c      	ldr	r2, [pc, #368]	; (8007cc8 <HAL_DMA_Abort_IT+0x1a0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d04a      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a5b      	ldr	r2, [pc, #364]	; (8007ccc <HAL_DMA_Abort_IT+0x1a4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d045      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a59      	ldr	r2, [pc, #356]	; (8007cd0 <HAL_DMA_Abort_IT+0x1a8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d040      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a58      	ldr	r2, [pc, #352]	; (8007cd4 <HAL_DMA_Abort_IT+0x1ac>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d03b      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a56      	ldr	r2, [pc, #344]	; (8007cd8 <HAL_DMA_Abort_IT+0x1b0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d036      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a55      	ldr	r2, [pc, #340]	; (8007cdc <HAL_DMA_Abort_IT+0x1b4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d031      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a53      	ldr	r2, [pc, #332]	; (8007ce0 <HAL_DMA_Abort_IT+0x1b8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02c      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a52      	ldr	r2, [pc, #328]	; (8007ce4 <HAL_DMA_Abort_IT+0x1bc>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d027      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a50      	ldr	r2, [pc, #320]	; (8007ce8 <HAL_DMA_Abort_IT+0x1c0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a4f      	ldr	r2, [pc, #316]	; (8007cec <HAL_DMA_Abort_IT+0x1c4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a4d      	ldr	r2, [pc, #308]	; (8007cf0 <HAL_DMA_Abort_IT+0x1c8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a4c      	ldr	r2, [pc, #304]	; (8007cf4 <HAL_DMA_Abort_IT+0x1cc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a4a      	ldr	r2, [pc, #296]	; (8007cf8 <HAL_DMA_Abort_IT+0x1d0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a49      	ldr	r2, [pc, #292]	; (8007cfc <HAL_DMA_Abort_IT+0x1d4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a47      	ldr	r2, [pc, #284]	; (8007d00 <HAL_DMA_Abort_IT+0x1d8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_DMA_Abort_IT+0xc8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a46      	ldr	r2, [pc, #280]	; (8007d04 <HAL_DMA_Abort_IT+0x1dc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d101      	bne.n	8007bf4 <HAL_DMA_Abort_IT+0xcc>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <HAL_DMA_Abort_IT+0xce>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8086 	beq.w	8007d08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2204      	movs	r2, #4
 8007c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2f      	ldr	r2, [pc, #188]	; (8007cc8 <HAL_DMA_Abort_IT+0x1a0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d04a      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2e      	ldr	r2, [pc, #184]	; (8007ccc <HAL_DMA_Abort_IT+0x1a4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d045      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2c      	ldr	r2, [pc, #176]	; (8007cd0 <HAL_DMA_Abort_IT+0x1a8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d040      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a2b      	ldr	r2, [pc, #172]	; (8007cd4 <HAL_DMA_Abort_IT+0x1ac>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d03b      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a29      	ldr	r2, [pc, #164]	; (8007cd8 <HAL_DMA_Abort_IT+0x1b0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d036      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	; (8007cdc <HAL_DMA_Abort_IT+0x1b4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d031      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <HAL_DMA_Abort_IT+0x1b8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d02c      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <HAL_DMA_Abort_IT+0x1bc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d027      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a23      	ldr	r2, [pc, #140]	; (8007ce8 <HAL_DMA_Abort_IT+0x1c0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a22      	ldr	r2, [pc, #136]	; (8007cec <HAL_DMA_Abort_IT+0x1c4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d01d      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <HAL_DMA_Abort_IT+0x1c8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <HAL_DMA_Abort_IT+0x1cc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <HAL_DMA_Abort_IT+0x1d0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <HAL_DMA_Abort_IT+0x1d4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	; (8007d00 <HAL_DMA_Abort_IT+0x1d8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0x17c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a19      	ldr	r2, [pc, #100]	; (8007d04 <HAL_DMA_Abort_IT+0x1dc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <HAL_DMA_Abort_IT+0x18e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e178      	b.n	8007fa8 <HAL_DMA_Abort_IT+0x480>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e16f      	b.n	8007fa8 <HAL_DMA_Abort_IT+0x480>
 8007cc8:	40020010 	.word	0x40020010
 8007ccc:	40020028 	.word	0x40020028
 8007cd0:	40020040 	.word	0x40020040
 8007cd4:	40020058 	.word	0x40020058
 8007cd8:	40020070 	.word	0x40020070
 8007cdc:	40020088 	.word	0x40020088
 8007ce0:	400200a0 	.word	0x400200a0
 8007ce4:	400200b8 	.word	0x400200b8
 8007ce8:	40020410 	.word	0x40020410
 8007cec:	40020428 	.word	0x40020428
 8007cf0:	40020440 	.word	0x40020440
 8007cf4:	40020458 	.word	0x40020458
 8007cf8:	40020470 	.word	0x40020470
 8007cfc:	40020488 	.word	0x40020488
 8007d00:	400204a0 	.word	0x400204a0
 8007d04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 020e 	bic.w	r2, r2, #14
 8007d16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a6c      	ldr	r2, [pc, #432]	; (8007ed0 <HAL_DMA_Abort_IT+0x3a8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04a      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a6b      	ldr	r2, [pc, #428]	; (8007ed4 <HAL_DMA_Abort_IT+0x3ac>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d045      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a69      	ldr	r2, [pc, #420]	; (8007ed8 <HAL_DMA_Abort_IT+0x3b0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d040      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a68      	ldr	r2, [pc, #416]	; (8007edc <HAL_DMA_Abort_IT+0x3b4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d03b      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a66      	ldr	r2, [pc, #408]	; (8007ee0 <HAL_DMA_Abort_IT+0x3b8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d036      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a65      	ldr	r2, [pc, #404]	; (8007ee4 <HAL_DMA_Abort_IT+0x3bc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d031      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a63      	ldr	r2, [pc, #396]	; (8007ee8 <HAL_DMA_Abort_IT+0x3c0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d02c      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a62      	ldr	r2, [pc, #392]	; (8007eec <HAL_DMA_Abort_IT+0x3c4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d027      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a60      	ldr	r2, [pc, #384]	; (8007ef0 <HAL_DMA_Abort_IT+0x3c8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d022      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a5f      	ldr	r2, [pc, #380]	; (8007ef4 <HAL_DMA_Abort_IT+0x3cc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d01d      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a5d      	ldr	r2, [pc, #372]	; (8007ef8 <HAL_DMA_Abort_IT+0x3d0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d018      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a5c      	ldr	r2, [pc, #368]	; (8007efc <HAL_DMA_Abort_IT+0x3d4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a5a      	ldr	r2, [pc, #360]	; (8007f00 <HAL_DMA_Abort_IT+0x3d8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a59      	ldr	r2, [pc, #356]	; (8007f04 <HAL_DMA_Abort_IT+0x3dc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a57      	ldr	r2, [pc, #348]	; (8007f08 <HAL_DMA_Abort_IT+0x3e0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_DMA_Abort_IT+0x290>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a56      	ldr	r2, [pc, #344]	; (8007f0c <HAL_DMA_Abort_IT+0x3e4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d108      	bne.n	8007dca <HAL_DMA_Abort_IT+0x2a2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e007      	b.n	8007dda <HAL_DMA_Abort_IT+0x2b2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a3c      	ldr	r2, [pc, #240]	; (8007ed0 <HAL_DMA_Abort_IT+0x3a8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d072      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a3a      	ldr	r2, [pc, #232]	; (8007ed4 <HAL_DMA_Abort_IT+0x3ac>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d06d      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a39      	ldr	r2, [pc, #228]	; (8007ed8 <HAL_DMA_Abort_IT+0x3b0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d068      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a37      	ldr	r2, [pc, #220]	; (8007edc <HAL_DMA_Abort_IT+0x3b4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d063      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a36      	ldr	r2, [pc, #216]	; (8007ee0 <HAL_DMA_Abort_IT+0x3b8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d05e      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a34      	ldr	r2, [pc, #208]	; (8007ee4 <HAL_DMA_Abort_IT+0x3bc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d059      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <HAL_DMA_Abort_IT+0x3c0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d054      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a31      	ldr	r2, [pc, #196]	; (8007eec <HAL_DMA_Abort_IT+0x3c4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d04f      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a30      	ldr	r2, [pc, #192]	; (8007ef0 <HAL_DMA_Abort_IT+0x3c8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d04a      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2e      	ldr	r2, [pc, #184]	; (8007ef4 <HAL_DMA_Abort_IT+0x3cc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d045      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2d      	ldr	r2, [pc, #180]	; (8007ef8 <HAL_DMA_Abort_IT+0x3d0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d040      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2b      	ldr	r2, [pc, #172]	; (8007efc <HAL_DMA_Abort_IT+0x3d4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d03b      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <HAL_DMA_Abort_IT+0x3d8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d036      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <HAL_DMA_Abort_IT+0x3dc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d031      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a27      	ldr	r2, [pc, #156]	; (8007f08 <HAL_DMA_Abort_IT+0x3e0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d02c      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a25      	ldr	r2, [pc, #148]	; (8007f0c <HAL_DMA_Abort_IT+0x3e4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d027      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a24      	ldr	r2, [pc, #144]	; (8007f10 <HAL_DMA_Abort_IT+0x3e8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d022      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <HAL_DMA_Abort_IT+0x3ec>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01d      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <HAL_DMA_Abort_IT+0x3f0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1f      	ldr	r2, [pc, #124]	; (8007f1c <HAL_DMA_Abort_IT+0x3f4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1e      	ldr	r2, [pc, #120]	; (8007f20 <HAL_DMA_Abort_IT+0x3f8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	; (8007f24 <HAL_DMA_Abort_IT+0x3fc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <HAL_DMA_Abort_IT+0x400>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_DMA_Abort_IT+0x3a2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a19      	ldr	r2, [pc, #100]	; (8007f2c <HAL_DMA_Abort_IT+0x404>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d132      	bne.n	8007f30 <HAL_DMA_Abort_IT+0x408>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e031      	b.n	8007f32 <HAL_DMA_Abort_IT+0x40a>
 8007ece:	bf00      	nop
 8007ed0:	40020010 	.word	0x40020010
 8007ed4:	40020028 	.word	0x40020028
 8007ed8:	40020040 	.word	0x40020040
 8007edc:	40020058 	.word	0x40020058
 8007ee0:	40020070 	.word	0x40020070
 8007ee4:	40020088 	.word	0x40020088
 8007ee8:	400200a0 	.word	0x400200a0
 8007eec:	400200b8 	.word	0x400200b8
 8007ef0:	40020410 	.word	0x40020410
 8007ef4:	40020428 	.word	0x40020428
 8007ef8:	40020440 	.word	0x40020440
 8007efc:	40020458 	.word	0x40020458
 8007f00:	40020470 	.word	0x40020470
 8007f04:	40020488 	.word	0x40020488
 8007f08:	400204a0 	.word	0x400204a0
 8007f0c:	400204b8 	.word	0x400204b8
 8007f10:	58025408 	.word	0x58025408
 8007f14:	5802541c 	.word	0x5802541c
 8007f18:	58025430 	.word	0x58025430
 8007f1c:	58025444 	.word	0x58025444
 8007f20:	58025458 	.word	0x58025458
 8007f24:	5802546c 	.word	0x5802546c
 8007f28:	58025480 	.word	0x58025480
 8007f2c:	58025494 	.word	0x58025494
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d028      	beq.n	8007f88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f50:	f003 031f 	and.w	r3, r3, #31
 8007f54:	2201      	movs	r2, #1
 8007f56:	409a      	lsls	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fc0:	4b67      	ldr	r3, [pc, #412]	; (8008160 <HAL_DMA_IRQHandler+0x1ac>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a67      	ldr	r2, [pc, #412]	; (8008164 <HAL_DMA_IRQHandler+0x1b0>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	0a9b      	lsrs	r3, r3, #10
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a5f      	ldr	r2, [pc, #380]	; (8008168 <HAL_DMA_IRQHandler+0x1b4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d04a      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a5d      	ldr	r2, [pc, #372]	; (800816c <HAL_DMA_IRQHandler+0x1b8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d045      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a5c      	ldr	r2, [pc, #368]	; (8008170 <HAL_DMA_IRQHandler+0x1bc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d040      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a5a      	ldr	r2, [pc, #360]	; (8008174 <HAL_DMA_IRQHandler+0x1c0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d03b      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a59      	ldr	r2, [pc, #356]	; (8008178 <HAL_DMA_IRQHandler+0x1c4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d036      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a57      	ldr	r2, [pc, #348]	; (800817c <HAL_DMA_IRQHandler+0x1c8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d031      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a56      	ldr	r2, [pc, #344]	; (8008180 <HAL_DMA_IRQHandler+0x1cc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d02c      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a54      	ldr	r2, [pc, #336]	; (8008184 <HAL_DMA_IRQHandler+0x1d0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d027      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a53      	ldr	r2, [pc, #332]	; (8008188 <HAL_DMA_IRQHandler+0x1d4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d022      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a51      	ldr	r2, [pc, #324]	; (800818c <HAL_DMA_IRQHandler+0x1d8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01d      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a50      	ldr	r2, [pc, #320]	; (8008190 <HAL_DMA_IRQHandler+0x1dc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d018      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a4e      	ldr	r2, [pc, #312]	; (8008194 <HAL_DMA_IRQHandler+0x1e0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a4d      	ldr	r2, [pc, #308]	; (8008198 <HAL_DMA_IRQHandler+0x1e4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00e      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a4b      	ldr	r2, [pc, #300]	; (800819c <HAL_DMA_IRQHandler+0x1e8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d009      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a4a      	ldr	r2, [pc, #296]	; (80081a0 <HAL_DMA_IRQHandler+0x1ec>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d004      	beq.n	8008086 <HAL_DMA_IRQHandler+0xd2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a48      	ldr	r2, [pc, #288]	; (80081a4 <HAL_DMA_IRQHandler+0x1f0>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d101      	bne.n	800808a <HAL_DMA_IRQHandler+0xd6>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <HAL_DMA_IRQHandler+0xd8>
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 842b 	beq.w	80088e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2208      	movs	r2, #8
 800809c:	409a      	lsls	r2, r3
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80a2 	beq.w	80081ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2e      	ldr	r2, [pc, #184]	; (8008168 <HAL_DMA_IRQHandler+0x1b4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d04a      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a2d      	ldr	r2, [pc, #180]	; (800816c <HAL_DMA_IRQHandler+0x1b8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d045      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a2b      	ldr	r2, [pc, #172]	; (8008170 <HAL_DMA_IRQHandler+0x1bc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d040      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a2a      	ldr	r2, [pc, #168]	; (8008174 <HAL_DMA_IRQHandler+0x1c0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d03b      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a28      	ldr	r2, [pc, #160]	; (8008178 <HAL_DMA_IRQHandler+0x1c4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d036      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a27      	ldr	r2, [pc, #156]	; (800817c <HAL_DMA_IRQHandler+0x1c8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d031      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a25      	ldr	r2, [pc, #148]	; (8008180 <HAL_DMA_IRQHandler+0x1cc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d02c      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a24      	ldr	r2, [pc, #144]	; (8008184 <HAL_DMA_IRQHandler+0x1d0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d027      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a22      	ldr	r2, [pc, #136]	; (8008188 <HAL_DMA_IRQHandler+0x1d4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d022      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <HAL_DMA_IRQHandler+0x1d8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d01d      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1f      	ldr	r2, [pc, #124]	; (8008190 <HAL_DMA_IRQHandler+0x1dc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d018      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1e      	ldr	r2, [pc, #120]	; (8008194 <HAL_DMA_IRQHandler+0x1e0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d013      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <HAL_DMA_IRQHandler+0x1e4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1b      	ldr	r2, [pc, #108]	; (800819c <HAL_DMA_IRQHandler+0x1e8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d009      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <HAL_DMA_IRQHandler+0x1ec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <HAL_DMA_IRQHandler+0x194>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <HAL_DMA_IRQHandler+0x1f0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d12f      	bne.n	80081a8 <HAL_DMA_IRQHandler+0x1f4>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf14      	ite	ne
 8008156:	2301      	movne	r3, #1
 8008158:	2300      	moveq	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	e02e      	b.n	80081bc <HAL_DMA_IRQHandler+0x208>
 800815e:	bf00      	nop
 8008160:	240000e8 	.word	0x240000e8
 8008164:	1b4e81b5 	.word	0x1b4e81b5
 8008168:	40020010 	.word	0x40020010
 800816c:	40020028 	.word	0x40020028
 8008170:	40020040 	.word	0x40020040
 8008174:	40020058 	.word	0x40020058
 8008178:	40020070 	.word	0x40020070
 800817c:	40020088 	.word	0x40020088
 8008180:	400200a0 	.word	0x400200a0
 8008184:	400200b8 	.word	0x400200b8
 8008188:	40020410 	.word	0x40020410
 800818c:	40020428 	.word	0x40020428
 8008190:	40020440 	.word	0x40020440
 8008194:	40020458 	.word	0x40020458
 8008198:	40020470 	.word	0x40020470
 800819c:	40020488 	.word	0x40020488
 80081a0:	400204a0 	.word	0x400204a0
 80081a4:	400204b8 	.word	0x400204b8
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d015      	beq.n	80081ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0204 	bic.w	r2, r2, #4
 80081ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	2208      	movs	r2, #8
 80081da:	409a      	lsls	r2, r3
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e4:	f043 0201 	orr.w	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f0:	f003 031f 	and.w	r3, r3, #31
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	fa22 f303 	lsr.w	r3, r2, r3
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d06e      	beq.n	80082e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a69      	ldr	r2, [pc, #420]	; (80083ac <HAL_DMA_IRQHandler+0x3f8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d04a      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a67      	ldr	r2, [pc, #412]	; (80083b0 <HAL_DMA_IRQHandler+0x3fc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d045      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a66      	ldr	r2, [pc, #408]	; (80083b4 <HAL_DMA_IRQHandler+0x400>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d040      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a64      	ldr	r2, [pc, #400]	; (80083b8 <HAL_DMA_IRQHandler+0x404>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d03b      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a63      	ldr	r2, [pc, #396]	; (80083bc <HAL_DMA_IRQHandler+0x408>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d036      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a61      	ldr	r2, [pc, #388]	; (80083c0 <HAL_DMA_IRQHandler+0x40c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d031      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a60      	ldr	r2, [pc, #384]	; (80083c4 <HAL_DMA_IRQHandler+0x410>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d02c      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a5e      	ldr	r2, [pc, #376]	; (80083c8 <HAL_DMA_IRQHandler+0x414>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d027      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a5d      	ldr	r2, [pc, #372]	; (80083cc <HAL_DMA_IRQHandler+0x418>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d022      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a5b      	ldr	r2, [pc, #364]	; (80083d0 <HAL_DMA_IRQHandler+0x41c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01d      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a5a      	ldr	r2, [pc, #360]	; (80083d4 <HAL_DMA_IRQHandler+0x420>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d018      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a58      	ldr	r2, [pc, #352]	; (80083d8 <HAL_DMA_IRQHandler+0x424>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a57      	ldr	r2, [pc, #348]	; (80083dc <HAL_DMA_IRQHandler+0x428>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00e      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a55      	ldr	r2, [pc, #340]	; (80083e0 <HAL_DMA_IRQHandler+0x42c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d009      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a54      	ldr	r2, [pc, #336]	; (80083e4 <HAL_DMA_IRQHandler+0x430>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d004      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x2ee>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a52      	ldr	r2, [pc, #328]	; (80083e8 <HAL_DMA_IRQHandler+0x434>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d10a      	bne.n	80082b8 <HAL_DMA_IRQHandler+0x304>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf14      	ite	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	2300      	moveq	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	e003      	b.n	80082c0 <HAL_DMA_IRQHandler+0x30c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00d      	beq.n	80082e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	2201      	movs	r2, #1
 80082ce:	409a      	lsls	r2, r3
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d8:	f043 0202 	orr.w	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	2204      	movs	r2, #4
 80082ea:	409a      	lsls	r2, r3
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 808f 	beq.w	8008414 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <HAL_DMA_IRQHandler+0x3f8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d04a      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <HAL_DMA_IRQHandler+0x3fc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d045      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a29      	ldr	r2, [pc, #164]	; (80083b4 <HAL_DMA_IRQHandler+0x400>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d040      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a27      	ldr	r2, [pc, #156]	; (80083b8 <HAL_DMA_IRQHandler+0x404>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d03b      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a26      	ldr	r2, [pc, #152]	; (80083bc <HAL_DMA_IRQHandler+0x408>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d036      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <HAL_DMA_IRQHandler+0x40c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d031      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a23      	ldr	r2, [pc, #140]	; (80083c4 <HAL_DMA_IRQHandler+0x410>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d02c      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a21      	ldr	r2, [pc, #132]	; (80083c8 <HAL_DMA_IRQHandler+0x414>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d027      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a20      	ldr	r2, [pc, #128]	; (80083cc <HAL_DMA_IRQHandler+0x418>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d022      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <HAL_DMA_IRQHandler+0x41c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d01d      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_DMA_IRQHandler+0x420>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d018      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1b      	ldr	r2, [pc, #108]	; (80083d8 <HAL_DMA_IRQHandler+0x424>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1a      	ldr	r2, [pc, #104]	; (80083dc <HAL_DMA_IRQHandler+0x428>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00e      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a18      	ldr	r2, [pc, #96]	; (80083e0 <HAL_DMA_IRQHandler+0x42c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d009      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a17      	ldr	r2, [pc, #92]	; (80083e4 <HAL_DMA_IRQHandler+0x430>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_DMA_IRQHandler+0x3e2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <HAL_DMA_IRQHandler+0x434>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d12a      	bne.n	80083ec <HAL_DMA_IRQHandler+0x438>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	e023      	b.n	80083f4 <HAL_DMA_IRQHandler+0x440>
 80083ac:	40020010 	.word	0x40020010
 80083b0:	40020028 	.word	0x40020028
 80083b4:	40020040 	.word	0x40020040
 80083b8:	40020058 	.word	0x40020058
 80083bc:	40020070 	.word	0x40020070
 80083c0:	40020088 	.word	0x40020088
 80083c4:	400200a0 	.word	0x400200a0
 80083c8:	400200b8 	.word	0x400200b8
 80083cc:	40020410 	.word	0x40020410
 80083d0:	40020428 	.word	0x40020428
 80083d4:	40020440 	.word	0x40020440
 80083d8:	40020458 	.word	0x40020458
 80083dc:	40020470 	.word	0x40020470
 80083e0:	40020488 	.word	0x40020488
 80083e4:	400204a0 	.word	0x400204a0
 80083e8:	400204b8 	.word	0x400204b8
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00d      	beq.n	8008414 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	2204      	movs	r2, #4
 8008402:	409a      	lsls	r2, r3
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840c:	f043 0204 	orr.w	r2, r3, #4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2210      	movs	r2, #16
 800841e:	409a      	lsls	r2, r3
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80a6 	beq.w	8008576 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a85      	ldr	r2, [pc, #532]	; (8008644 <HAL_DMA_IRQHandler+0x690>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d04a      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a83      	ldr	r2, [pc, #524]	; (8008648 <HAL_DMA_IRQHandler+0x694>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d045      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a82      	ldr	r2, [pc, #520]	; (800864c <HAL_DMA_IRQHandler+0x698>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d040      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a80      	ldr	r2, [pc, #512]	; (8008650 <HAL_DMA_IRQHandler+0x69c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d03b      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7f      	ldr	r2, [pc, #508]	; (8008654 <HAL_DMA_IRQHandler+0x6a0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d036      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a7d      	ldr	r2, [pc, #500]	; (8008658 <HAL_DMA_IRQHandler+0x6a4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d031      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a7c      	ldr	r2, [pc, #496]	; (800865c <HAL_DMA_IRQHandler+0x6a8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d02c      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a7a      	ldr	r2, [pc, #488]	; (8008660 <HAL_DMA_IRQHandler+0x6ac>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d027      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a79      	ldr	r2, [pc, #484]	; (8008664 <HAL_DMA_IRQHandler+0x6b0>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d022      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a77      	ldr	r2, [pc, #476]	; (8008668 <HAL_DMA_IRQHandler+0x6b4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d01d      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a76      	ldr	r2, [pc, #472]	; (800866c <HAL_DMA_IRQHandler+0x6b8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d018      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a74      	ldr	r2, [pc, #464]	; (8008670 <HAL_DMA_IRQHandler+0x6bc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d013      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a73      	ldr	r2, [pc, #460]	; (8008674 <HAL_DMA_IRQHandler+0x6c0>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00e      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a71      	ldr	r2, [pc, #452]	; (8008678 <HAL_DMA_IRQHandler+0x6c4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d009      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a70      	ldr	r2, [pc, #448]	; (800867c <HAL_DMA_IRQHandler+0x6c8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_DMA_IRQHandler+0x516>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a6e      	ldr	r2, [pc, #440]	; (8008680 <HAL_DMA_IRQHandler+0x6cc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d10a      	bne.n	80084e0 <HAL_DMA_IRQHandler+0x52c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bf14      	ite	ne
 80084d8:	2301      	movne	r3, #1
 80084da:	2300      	moveq	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	e009      	b.n	80084f4 <HAL_DMA_IRQHandler+0x540>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bf14      	ite	ne
 80084ee:	2301      	movne	r3, #1
 80084f0:	2300      	moveq	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d03e      	beq.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	2210      	movs	r2, #16
 8008502:	409a      	lsls	r2, r3
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d018      	beq.n	8008548 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d108      	bne.n	8008536 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d024      	beq.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
 8008534:	e01f      	b.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01b      	beq.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	e016      	b.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0208 	bic.w	r2, r2, #8
 8008564:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	2220      	movs	r2, #32
 8008580:	409a      	lsls	r2, r3
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	4013      	ands	r3, r2
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8110 	beq.w	80087ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2c      	ldr	r2, [pc, #176]	; (8008644 <HAL_DMA_IRQHandler+0x690>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04a      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a2b      	ldr	r2, [pc, #172]	; (8008648 <HAL_DMA_IRQHandler+0x694>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d045      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a29      	ldr	r2, [pc, #164]	; (800864c <HAL_DMA_IRQHandler+0x698>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d040      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a28      	ldr	r2, [pc, #160]	; (8008650 <HAL_DMA_IRQHandler+0x69c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d03b      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a26      	ldr	r2, [pc, #152]	; (8008654 <HAL_DMA_IRQHandler+0x6a0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d036      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a25      	ldr	r2, [pc, #148]	; (8008658 <HAL_DMA_IRQHandler+0x6a4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d031      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a23      	ldr	r2, [pc, #140]	; (800865c <HAL_DMA_IRQHandler+0x6a8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d02c      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a22      	ldr	r2, [pc, #136]	; (8008660 <HAL_DMA_IRQHandler+0x6ac>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d027      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a20      	ldr	r2, [pc, #128]	; (8008664 <HAL_DMA_IRQHandler+0x6b0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <HAL_DMA_IRQHandler+0x6b4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1d      	ldr	r2, [pc, #116]	; (800866c <HAL_DMA_IRQHandler+0x6b8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1c      	ldr	r2, [pc, #112]	; (8008670 <HAL_DMA_IRQHandler+0x6bc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1a      	ldr	r2, [pc, #104]	; (8008674 <HAL_DMA_IRQHandler+0x6c0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a19      	ldr	r2, [pc, #100]	; (8008678 <HAL_DMA_IRQHandler+0x6c4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a17      	ldr	r2, [pc, #92]	; (800867c <HAL_DMA_IRQHandler+0x6c8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_DMA_IRQHandler+0x678>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a16      	ldr	r2, [pc, #88]	; (8008680 <HAL_DMA_IRQHandler+0x6cc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d12b      	bne.n	8008684 <HAL_DMA_IRQHandler+0x6d0>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0310 	and.w	r3, r3, #16
 8008636:	2b00      	cmp	r3, #0
 8008638:	bf14      	ite	ne
 800863a:	2301      	movne	r3, #1
 800863c:	2300      	moveq	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	e02a      	b.n	8008698 <HAL_DMA_IRQHandler+0x6e4>
 8008642:	bf00      	nop
 8008644:	40020010 	.word	0x40020010
 8008648:	40020028 	.word	0x40020028
 800864c:	40020040 	.word	0x40020040
 8008650:	40020058 	.word	0x40020058
 8008654:	40020070 	.word	0x40020070
 8008658:	40020088 	.word	0x40020088
 800865c:	400200a0 	.word	0x400200a0
 8008660:	400200b8 	.word	0x400200b8
 8008664:	40020410 	.word	0x40020410
 8008668:	40020428 	.word	0x40020428
 800866c:	40020440 	.word	0x40020440
 8008670:	40020458 	.word	0x40020458
 8008674:	40020470 	.word	0x40020470
 8008678:	40020488 	.word	0x40020488
 800867c:	400204a0 	.word	0x400204a0
 8008680:	400204b8 	.word	0x400204b8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	bf14      	ite	ne
 8008692:	2301      	movne	r3, #1
 8008694:	2300      	moveq	r3, #0
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8087 	beq.w	80087ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	2220      	movs	r2, #32
 80086a8:	409a      	lsls	r2, r3
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d139      	bne.n	800872e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0216 	bic.w	r2, r2, #22
 80086c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695a      	ldr	r2, [r3, #20]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <HAL_DMA_IRQHandler+0x736>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0208 	bic.w	r2, r2, #8
 80086f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	223f      	movs	r2, #63	; 0x3f
 8008704:	409a      	lsls	r2, r3
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 834a 	beq.w	8008db8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	4798      	blx	r3
          }
          return;
 800872c:	e344      	b.n	8008db8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d018      	beq.n	800876e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d108      	bne.n	800875c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	2b00      	cmp	r3, #0
 8008750:	d02c      	beq.n	80087ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
 800875a:	e027      	b.n	80087ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d023      	beq.n	80087ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	4798      	blx	r3
 800876c:	e01e      	b.n	80087ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10f      	bne.n	800879c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0210 	bic.w	r2, r2, #16
 800878a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8306 	beq.w	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8088 	beq.w	80088d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a7a      	ldr	r2, [pc, #488]	; (80089bc <HAL_DMA_IRQHandler+0xa08>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d04a      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a79      	ldr	r2, [pc, #484]	; (80089c0 <HAL_DMA_IRQHandler+0xa0c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d045      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a77      	ldr	r2, [pc, #476]	; (80089c4 <HAL_DMA_IRQHandler+0xa10>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d040      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a76      	ldr	r2, [pc, #472]	; (80089c8 <HAL_DMA_IRQHandler+0xa14>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d03b      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a74      	ldr	r2, [pc, #464]	; (80089cc <HAL_DMA_IRQHandler+0xa18>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d036      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a73      	ldr	r2, [pc, #460]	; (80089d0 <HAL_DMA_IRQHandler+0xa1c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d031      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a71      	ldr	r2, [pc, #452]	; (80089d4 <HAL_DMA_IRQHandler+0xa20>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d02c      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a70      	ldr	r2, [pc, #448]	; (80089d8 <HAL_DMA_IRQHandler+0xa24>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d027      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a6e      	ldr	r2, [pc, #440]	; (80089dc <HAL_DMA_IRQHandler+0xa28>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d022      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a6d      	ldr	r2, [pc, #436]	; (80089e0 <HAL_DMA_IRQHandler+0xa2c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d01d      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a6b      	ldr	r2, [pc, #428]	; (80089e4 <HAL_DMA_IRQHandler+0xa30>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d018      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a6a      	ldr	r2, [pc, #424]	; (80089e8 <HAL_DMA_IRQHandler+0xa34>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d013      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a68      	ldr	r2, [pc, #416]	; (80089ec <HAL_DMA_IRQHandler+0xa38>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00e      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a67      	ldr	r2, [pc, #412]	; (80089f0 <HAL_DMA_IRQHandler+0xa3c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d009      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a65      	ldr	r2, [pc, #404]	; (80089f4 <HAL_DMA_IRQHandler+0xa40>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d004      	beq.n	800886c <HAL_DMA_IRQHandler+0x8b8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a64      	ldr	r2, [pc, #400]	; (80089f8 <HAL_DMA_IRQHandler+0xa44>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d108      	bne.n	800887e <HAL_DMA_IRQHandler+0x8ca>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0201 	bic.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e007      	b.n	800888e <HAL_DMA_IRQHandler+0x8da>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008896:	429a      	cmp	r2, r3
 8008898:	d307      	bcc.n	80088aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f2      	bne.n	800888e <HAL_DMA_IRQHandler+0x8da>
 80088a8:	e000      	b.n	80088ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80088aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d004      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2203      	movs	r2, #3
 80088be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80088c2:	e003      	b.n	80088cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8272 	beq.w	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
 80088e6:	e26c      	b.n	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a43      	ldr	r2, [pc, #268]	; (80089fc <HAL_DMA_IRQHandler+0xa48>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d022      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a42      	ldr	r2, [pc, #264]	; (8008a00 <HAL_DMA_IRQHandler+0xa4c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d01d      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a40      	ldr	r2, [pc, #256]	; (8008a04 <HAL_DMA_IRQHandler+0xa50>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d018      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <HAL_DMA_IRQHandler+0xa54>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d013      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a3d      	ldr	r2, [pc, #244]	; (8008a0c <HAL_DMA_IRQHandler+0xa58>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00e      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a3c      	ldr	r2, [pc, #240]	; (8008a10 <HAL_DMA_IRQHandler+0xa5c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d009      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a3a      	ldr	r2, [pc, #232]	; (8008a14 <HAL_DMA_IRQHandler+0xa60>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d004      	beq.n	8008938 <HAL_DMA_IRQHandler+0x984>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a39      	ldr	r2, [pc, #228]	; (8008a18 <HAL_DMA_IRQHandler+0xa64>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d101      	bne.n	800893c <HAL_DMA_IRQHandler+0x988>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <HAL_DMA_IRQHandler+0x98a>
 800893c:	2300      	movs	r3, #0
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 823f 	beq.w	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	2204      	movs	r2, #4
 8008956:	409a      	lsls	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80cd 	beq.w	8008afc <HAL_DMA_IRQHandler+0xb48>
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80c7 	beq.w	8008afc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008972:	f003 031f 	and.w	r3, r3, #31
 8008976:	2204      	movs	r2, #4
 8008978:	409a      	lsls	r2, r3
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d049      	beq.n	8008a1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8210 	beq.w	8008dbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089a4:	e20a      	b.n	8008dbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8206 	beq.w	8008dbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089b8:	e200      	b.n	8008dbc <HAL_DMA_IRQHandler+0xe08>
 80089ba:	bf00      	nop
 80089bc:	40020010 	.word	0x40020010
 80089c0:	40020028 	.word	0x40020028
 80089c4:	40020040 	.word	0x40020040
 80089c8:	40020058 	.word	0x40020058
 80089cc:	40020070 	.word	0x40020070
 80089d0:	40020088 	.word	0x40020088
 80089d4:	400200a0 	.word	0x400200a0
 80089d8:	400200b8 	.word	0x400200b8
 80089dc:	40020410 	.word	0x40020410
 80089e0:	40020428 	.word	0x40020428
 80089e4:	40020440 	.word	0x40020440
 80089e8:	40020458 	.word	0x40020458
 80089ec:	40020470 	.word	0x40020470
 80089f0:	40020488 	.word	0x40020488
 80089f4:	400204a0 	.word	0x400204a0
 80089f8:	400204b8 	.word	0x400204b8
 80089fc:	58025408 	.word	0x58025408
 8008a00:	5802541c 	.word	0x5802541c
 8008a04:	58025430 	.word	0x58025430
 8008a08:	58025444 	.word	0x58025444
 8008a0c:	58025458 	.word	0x58025458
 8008a10:	5802546c 	.word	0x5802546c
 8008a14:	58025480 	.word	0x58025480
 8008a18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d160      	bne.n	8008ae8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a7f      	ldr	r2, [pc, #508]	; (8008c28 <HAL_DMA_IRQHandler+0xc74>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d04a      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a7d      	ldr	r2, [pc, #500]	; (8008c2c <HAL_DMA_IRQHandler+0xc78>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d045      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a7c      	ldr	r2, [pc, #496]	; (8008c30 <HAL_DMA_IRQHandler+0xc7c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d040      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a7a      	ldr	r2, [pc, #488]	; (8008c34 <HAL_DMA_IRQHandler+0xc80>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d03b      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a79      	ldr	r2, [pc, #484]	; (8008c38 <HAL_DMA_IRQHandler+0xc84>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d036      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a77      	ldr	r2, [pc, #476]	; (8008c3c <HAL_DMA_IRQHandler+0xc88>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d031      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a76      	ldr	r2, [pc, #472]	; (8008c40 <HAL_DMA_IRQHandler+0xc8c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d02c      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a74      	ldr	r2, [pc, #464]	; (8008c44 <HAL_DMA_IRQHandler+0xc90>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d027      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a73      	ldr	r2, [pc, #460]	; (8008c48 <HAL_DMA_IRQHandler+0xc94>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d022      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a71      	ldr	r2, [pc, #452]	; (8008c4c <HAL_DMA_IRQHandler+0xc98>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01d      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a70      	ldr	r2, [pc, #448]	; (8008c50 <HAL_DMA_IRQHandler+0xc9c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a6e      	ldr	r2, [pc, #440]	; (8008c54 <HAL_DMA_IRQHandler+0xca0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a6d      	ldr	r2, [pc, #436]	; (8008c58 <HAL_DMA_IRQHandler+0xca4>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a6b      	ldr	r2, [pc, #428]	; (8008c5c <HAL_DMA_IRQHandler+0xca8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a6a      	ldr	r2, [pc, #424]	; (8008c60 <HAL_DMA_IRQHandler+0xcac>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xb12>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a68      	ldr	r2, [pc, #416]	; (8008c64 <HAL_DMA_IRQHandler+0xcb0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d108      	bne.n	8008ad8 <HAL_DMA_IRQHandler+0xb24>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0208 	bic.w	r2, r2, #8
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e007      	b.n	8008ae8 <HAL_DMA_IRQHandler+0xb34>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0204 	bic.w	r2, r2, #4
 8008ae6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8165 	beq.w	8008dbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008afa:	e15f      	b.n	8008dbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	2202      	movs	r2, #2
 8008b06:	409a      	lsls	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80c5 	beq.w	8008c9c <HAL_DMA_IRQHandler+0xce8>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80bf 	beq.w	8008c9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	f003 031f 	and.w	r3, r3, #31
 8008b26:	2202      	movs	r2, #2
 8008b28:	409a      	lsls	r2, r3
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d018      	beq.n	8008b6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 813a 	beq.w	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b54:	e134      	b.n	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8130 	beq.w	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b68:	e12a      	b.n	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f040 8089 	bne.w	8008c88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a2b      	ldr	r2, [pc, #172]	; (8008c28 <HAL_DMA_IRQHandler+0xc74>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d04a      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a29      	ldr	r2, [pc, #164]	; (8008c2c <HAL_DMA_IRQHandler+0xc78>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d045      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a28      	ldr	r2, [pc, #160]	; (8008c30 <HAL_DMA_IRQHandler+0xc7c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d040      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a26      	ldr	r2, [pc, #152]	; (8008c34 <HAL_DMA_IRQHandler+0xc80>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <HAL_DMA_IRQHandler+0xc84>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d036      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a23      	ldr	r2, [pc, #140]	; (8008c3c <HAL_DMA_IRQHandler+0xc88>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d031      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a22      	ldr	r2, [pc, #136]	; (8008c40 <HAL_DMA_IRQHandler+0xc8c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d02c      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a20      	ldr	r2, [pc, #128]	; (8008c44 <HAL_DMA_IRQHandler+0xc90>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d027      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1f      	ldr	r2, [pc, #124]	; (8008c48 <HAL_DMA_IRQHandler+0xc94>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d022      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <HAL_DMA_IRQHandler+0xc98>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01d      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <HAL_DMA_IRQHandler+0xc9c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d018      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <HAL_DMA_IRQHandler+0xca0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d013      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a19      	ldr	r2, [pc, #100]	; (8008c58 <HAL_DMA_IRQHandler+0xca4>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00e      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <HAL_DMA_IRQHandler+0xca8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d009      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a16      	ldr	r2, [pc, #88]	; (8008c60 <HAL_DMA_IRQHandler+0xcac>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <HAL_DMA_IRQHandler+0xc62>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a14      	ldr	r2, [pc, #80]	; (8008c64 <HAL_DMA_IRQHandler+0xcb0>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d128      	bne.n	8008c68 <HAL_DMA_IRQHandler+0xcb4>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0214 	bic.w	r2, r2, #20
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	e027      	b.n	8008c78 <HAL_DMA_IRQHandler+0xcc4>
 8008c28:	40020010 	.word	0x40020010
 8008c2c:	40020028 	.word	0x40020028
 8008c30:	40020040 	.word	0x40020040
 8008c34:	40020058 	.word	0x40020058
 8008c38:	40020070 	.word	0x40020070
 8008c3c:	40020088 	.word	0x40020088
 8008c40:	400200a0 	.word	0x400200a0
 8008c44:	400200b8 	.word	0x400200b8
 8008c48:	40020410 	.word	0x40020410
 8008c4c:	40020428 	.word	0x40020428
 8008c50:	40020440 	.word	0x40020440
 8008c54:	40020458 	.word	0x40020458
 8008c58:	40020470 	.word	0x40020470
 8008c5c:	40020488 	.word	0x40020488
 8008c60:	400204a0 	.word	0x400204a0
 8008c64:	400204b8 	.word	0x400204b8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 020a 	bic.w	r2, r2, #10
 8008c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8097 	beq.w	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c9a:	e091      	b.n	8008dc0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	409a      	lsls	r2, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 8088 	beq.w	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 8082 	beq.w	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a41      	ldr	r2, [pc, #260]	; (8008dc8 <HAL_DMA_IRQHandler+0xe14>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d04a      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a3f      	ldr	r2, [pc, #252]	; (8008dcc <HAL_DMA_IRQHandler+0xe18>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d045      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a3e      	ldr	r2, [pc, #248]	; (8008dd0 <HAL_DMA_IRQHandler+0xe1c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d040      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a3c      	ldr	r2, [pc, #240]	; (8008dd4 <HAL_DMA_IRQHandler+0xe20>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d03b      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a3b      	ldr	r2, [pc, #236]	; (8008dd8 <HAL_DMA_IRQHandler+0xe24>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d036      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a39      	ldr	r2, [pc, #228]	; (8008ddc <HAL_DMA_IRQHandler+0xe28>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d031      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a38      	ldr	r2, [pc, #224]	; (8008de0 <HAL_DMA_IRQHandler+0xe2c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d02c      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a36      	ldr	r2, [pc, #216]	; (8008de4 <HAL_DMA_IRQHandler+0xe30>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d027      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a35      	ldr	r2, [pc, #212]	; (8008de8 <HAL_DMA_IRQHandler+0xe34>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d022      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a33      	ldr	r2, [pc, #204]	; (8008dec <HAL_DMA_IRQHandler+0xe38>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01d      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a32      	ldr	r2, [pc, #200]	; (8008df0 <HAL_DMA_IRQHandler+0xe3c>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d018      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a30      	ldr	r2, [pc, #192]	; (8008df4 <HAL_DMA_IRQHandler+0xe40>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a2f      	ldr	r2, [pc, #188]	; (8008df8 <HAL_DMA_IRQHandler+0xe44>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a2d      	ldr	r2, [pc, #180]	; (8008dfc <HAL_DMA_IRQHandler+0xe48>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2c      	ldr	r2, [pc, #176]	; (8008e00 <HAL_DMA_IRQHandler+0xe4c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_DMA_IRQHandler+0xdaa>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <HAL_DMA_IRQHandler+0xe50>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d108      	bne.n	8008d70 <HAL_DMA_IRQHandler+0xdbc>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 021c 	bic.w	r2, r2, #28
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	e007      	b.n	8008d80 <HAL_DMA_IRQHandler+0xdcc>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 020e 	bic.w	r2, r2, #14
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d84:	f003 031f 	and.w	r3, r3, #31
 8008d88:	2201      	movs	r2, #1
 8008d8a:	409a      	lsls	r2, r3
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
 8008db6:	e004      	b.n	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008db8:	bf00      	nop
 8008dba:	e002      	b.n	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008dc2:	3728      	adds	r7, #40	; 0x28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40020010 	.word	0x40020010
 8008dcc:	40020028 	.word	0x40020028
 8008dd0:	40020040 	.word	0x40020040
 8008dd4:	40020058 	.word	0x40020058
 8008dd8:	40020070 	.word	0x40020070
 8008ddc:	40020088 	.word	0x40020088
 8008de0:	400200a0 	.word	0x400200a0
 8008de4:	400200b8 	.word	0x400200b8
 8008de8:	40020410 	.word	0x40020410
 8008dec:	40020428 	.word	0x40020428
 8008df0:	40020440 	.word	0x40020440
 8008df4:	40020458 	.word	0x40020458
 8008df8:	40020470 	.word	0x40020470
 8008dfc:	40020488 	.word	0x40020488
 8008e00:	400204a0 	.word	0x400204a0
 8008e04:	400204b8 	.word	0x400204b8

08008e08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a7f      	ldr	r2, [pc, #508]	; (8009024 <DMA_SetConfig+0x21c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d072      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a7d      	ldr	r2, [pc, #500]	; (8009028 <DMA_SetConfig+0x220>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d06d      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a7c      	ldr	r2, [pc, #496]	; (800902c <DMA_SetConfig+0x224>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d068      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a7a      	ldr	r2, [pc, #488]	; (8009030 <DMA_SetConfig+0x228>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d063      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a79      	ldr	r2, [pc, #484]	; (8009034 <DMA_SetConfig+0x22c>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d05e      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a77      	ldr	r2, [pc, #476]	; (8009038 <DMA_SetConfig+0x230>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d059      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a76      	ldr	r2, [pc, #472]	; (800903c <DMA_SetConfig+0x234>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d054      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a74      	ldr	r2, [pc, #464]	; (8009040 <DMA_SetConfig+0x238>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d04f      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a73      	ldr	r2, [pc, #460]	; (8009044 <DMA_SetConfig+0x23c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d04a      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a71      	ldr	r2, [pc, #452]	; (8009048 <DMA_SetConfig+0x240>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d045      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a70      	ldr	r2, [pc, #448]	; (800904c <DMA_SetConfig+0x244>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d040      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a6e      	ldr	r2, [pc, #440]	; (8009050 <DMA_SetConfig+0x248>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d03b      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a6d      	ldr	r2, [pc, #436]	; (8009054 <DMA_SetConfig+0x24c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d036      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a6b      	ldr	r2, [pc, #428]	; (8009058 <DMA_SetConfig+0x250>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d031      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a6a      	ldr	r2, [pc, #424]	; (800905c <DMA_SetConfig+0x254>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d02c      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a68      	ldr	r2, [pc, #416]	; (8009060 <DMA_SetConfig+0x258>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d027      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a67      	ldr	r2, [pc, #412]	; (8009064 <DMA_SetConfig+0x25c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d022      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a65      	ldr	r2, [pc, #404]	; (8009068 <DMA_SetConfig+0x260>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d01d      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a64      	ldr	r2, [pc, #400]	; (800906c <DMA_SetConfig+0x264>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d018      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a62      	ldr	r2, [pc, #392]	; (8009070 <DMA_SetConfig+0x268>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d013      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a61      	ldr	r2, [pc, #388]	; (8009074 <DMA_SetConfig+0x26c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00e      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a5f      	ldr	r2, [pc, #380]	; (8009078 <DMA_SetConfig+0x270>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d009      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a5e      	ldr	r2, [pc, #376]	; (800907c <DMA_SetConfig+0x274>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d004      	beq.n	8008f12 <DMA_SetConfig+0x10a>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a5c      	ldr	r2, [pc, #368]	; (8009080 <DMA_SetConfig+0x278>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d101      	bne.n	8008f16 <DMA_SetConfig+0x10e>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e000      	b.n	8008f18 <DMA_SetConfig+0x110>
 8008f16:	2300      	movs	r3, #0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00d      	beq.n	8008f38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008f36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a39      	ldr	r2, [pc, #228]	; (8009024 <DMA_SetConfig+0x21c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d04a      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a38      	ldr	r2, [pc, #224]	; (8009028 <DMA_SetConfig+0x220>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d045      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a36      	ldr	r2, [pc, #216]	; (800902c <DMA_SetConfig+0x224>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d040      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a35      	ldr	r2, [pc, #212]	; (8009030 <DMA_SetConfig+0x228>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d03b      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a33      	ldr	r2, [pc, #204]	; (8009034 <DMA_SetConfig+0x22c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d036      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a32      	ldr	r2, [pc, #200]	; (8009038 <DMA_SetConfig+0x230>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d031      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a30      	ldr	r2, [pc, #192]	; (800903c <DMA_SetConfig+0x234>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d02c      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2f      	ldr	r2, [pc, #188]	; (8009040 <DMA_SetConfig+0x238>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d027      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	; (8009044 <DMA_SetConfig+0x23c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d022      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a2c      	ldr	r2, [pc, #176]	; (8009048 <DMA_SetConfig+0x240>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d01d      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a2a      	ldr	r2, [pc, #168]	; (800904c <DMA_SetConfig+0x244>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d018      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a29      	ldr	r2, [pc, #164]	; (8009050 <DMA_SetConfig+0x248>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d013      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a27      	ldr	r2, [pc, #156]	; (8009054 <DMA_SetConfig+0x24c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00e      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <DMA_SetConfig+0x250>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d009      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a24      	ldr	r2, [pc, #144]	; (800905c <DMA_SetConfig+0x254>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <DMA_SetConfig+0x1d0>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a23      	ldr	r2, [pc, #140]	; (8009060 <DMA_SetConfig+0x258>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d101      	bne.n	8008fdc <DMA_SetConfig+0x1d4>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <DMA_SetConfig+0x1d6>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d059      	beq.n	8009096 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	223f      	movs	r2, #63	; 0x3f
 8008fec:	409a      	lsls	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009000:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d138      	bne.n	8009084 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009022:	e086      	b.n	8009132 <DMA_SetConfig+0x32a>
 8009024:	40020010 	.word	0x40020010
 8009028:	40020028 	.word	0x40020028
 800902c:	40020040 	.word	0x40020040
 8009030:	40020058 	.word	0x40020058
 8009034:	40020070 	.word	0x40020070
 8009038:	40020088 	.word	0x40020088
 800903c:	400200a0 	.word	0x400200a0
 8009040:	400200b8 	.word	0x400200b8
 8009044:	40020410 	.word	0x40020410
 8009048:	40020428 	.word	0x40020428
 800904c:	40020440 	.word	0x40020440
 8009050:	40020458 	.word	0x40020458
 8009054:	40020470 	.word	0x40020470
 8009058:	40020488 	.word	0x40020488
 800905c:	400204a0 	.word	0x400204a0
 8009060:	400204b8 	.word	0x400204b8
 8009064:	58025408 	.word	0x58025408
 8009068:	5802541c 	.word	0x5802541c
 800906c:	58025430 	.word	0x58025430
 8009070:	58025444 	.word	0x58025444
 8009074:	58025458 	.word	0x58025458
 8009078:	5802546c 	.word	0x5802546c
 800907c:	58025480 	.word	0x58025480
 8009080:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
}
 8009094:	e04d      	b.n	8009132 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a29      	ldr	r2, [pc, #164]	; (8009140 <DMA_SetConfig+0x338>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d022      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a27      	ldr	r2, [pc, #156]	; (8009144 <DMA_SetConfig+0x33c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01d      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a26      	ldr	r2, [pc, #152]	; (8009148 <DMA_SetConfig+0x340>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d018      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a24      	ldr	r2, [pc, #144]	; (800914c <DMA_SetConfig+0x344>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d013      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a23      	ldr	r2, [pc, #140]	; (8009150 <DMA_SetConfig+0x348>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00e      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a21      	ldr	r2, [pc, #132]	; (8009154 <DMA_SetConfig+0x34c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d009      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a20      	ldr	r2, [pc, #128]	; (8009158 <DMA_SetConfig+0x350>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d004      	beq.n	80090e6 <DMA_SetConfig+0x2de>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1e      	ldr	r2, [pc, #120]	; (800915c <DMA_SetConfig+0x354>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d101      	bne.n	80090ea <DMA_SetConfig+0x2e2>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <DMA_SetConfig+0x2e4>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d020      	beq.n	8009132 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f4:	f003 031f 	and.w	r3, r3, #31
 80090f8:	2201      	movs	r2, #1
 80090fa:	409a      	lsls	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d108      	bne.n	8009122 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	60da      	str	r2, [r3, #12]
}
 8009120:	e007      	b.n	8009132 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	60da      	str	r2, [r3, #12]
}
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	58025408 	.word	0x58025408
 8009144:	5802541c 	.word	0x5802541c
 8009148:	58025430 	.word	0x58025430
 800914c:	58025444 	.word	0x58025444
 8009150:	58025458 	.word	0x58025458
 8009154:	5802546c 	.word	0x5802546c
 8009158:	58025480 	.word	0x58025480
 800915c:	58025494 	.word	0x58025494

08009160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a42      	ldr	r2, [pc, #264]	; (8009278 <DMA_CalcBaseAndBitshift+0x118>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d04a      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a41      	ldr	r2, [pc, #260]	; (800927c <DMA_CalcBaseAndBitshift+0x11c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d045      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a3f      	ldr	r2, [pc, #252]	; (8009280 <DMA_CalcBaseAndBitshift+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d040      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a3e      	ldr	r2, [pc, #248]	; (8009284 <DMA_CalcBaseAndBitshift+0x124>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d03b      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a3c      	ldr	r2, [pc, #240]	; (8009288 <DMA_CalcBaseAndBitshift+0x128>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d036      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a3b      	ldr	r2, [pc, #236]	; (800928c <DMA_CalcBaseAndBitshift+0x12c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d031      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a39      	ldr	r2, [pc, #228]	; (8009290 <DMA_CalcBaseAndBitshift+0x130>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d02c      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a38      	ldr	r2, [pc, #224]	; (8009294 <DMA_CalcBaseAndBitshift+0x134>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d027      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a36      	ldr	r2, [pc, #216]	; (8009298 <DMA_CalcBaseAndBitshift+0x138>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d022      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a35      	ldr	r2, [pc, #212]	; (800929c <DMA_CalcBaseAndBitshift+0x13c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d01d      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a33      	ldr	r2, [pc, #204]	; (80092a0 <DMA_CalcBaseAndBitshift+0x140>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d018      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a32      	ldr	r2, [pc, #200]	; (80092a4 <DMA_CalcBaseAndBitshift+0x144>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d013      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a30      	ldr	r2, [pc, #192]	; (80092a8 <DMA_CalcBaseAndBitshift+0x148>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00e      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a2f      	ldr	r2, [pc, #188]	; (80092ac <DMA_CalcBaseAndBitshift+0x14c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d009      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <DMA_CalcBaseAndBitshift+0x150>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d004      	beq.n	8009208 <DMA_CalcBaseAndBitshift+0xa8>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <DMA_CalcBaseAndBitshift+0x154>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d101      	bne.n	800920c <DMA_CalcBaseAndBitshift+0xac>
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <DMA_CalcBaseAndBitshift+0xae>
 800920c:	2300      	movs	r3, #0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d024      	beq.n	800925c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	3b10      	subs	r3, #16
 800921a:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <DMA_CalcBaseAndBitshift+0x158>)
 800921c:	fba2 2303 	umull	r2, r3, r2, r3
 8009220:	091b      	lsrs	r3, r3, #4
 8009222:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	4a24      	ldr	r2, [pc, #144]	; (80092bc <DMA_CalcBaseAndBitshift+0x15c>)
 800922c:	5cd3      	ldrb	r3, [r2, r3]
 800922e:	461a      	mov	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d908      	bls.n	800924c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	4b1f      	ldr	r3, [pc, #124]	; (80092c0 <DMA_CalcBaseAndBitshift+0x160>)
 8009242:	4013      	ands	r3, r2
 8009244:	1d1a      	adds	r2, r3, #4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	659a      	str	r2, [r3, #88]	; 0x58
 800924a:	e00d      	b.n	8009268 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <DMA_CalcBaseAndBitshift+0x160>)
 8009254:	4013      	ands	r3, r2
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6593      	str	r3, [r2, #88]	; 0x58
 800925a:	e005      	b.n	8009268 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40020010 	.word	0x40020010
 800927c:	40020028 	.word	0x40020028
 8009280:	40020040 	.word	0x40020040
 8009284:	40020058 	.word	0x40020058
 8009288:	40020070 	.word	0x40020070
 800928c:	40020088 	.word	0x40020088
 8009290:	400200a0 	.word	0x400200a0
 8009294:	400200b8 	.word	0x400200b8
 8009298:	40020410 	.word	0x40020410
 800929c:	40020428 	.word	0x40020428
 80092a0:	40020440 	.word	0x40020440
 80092a4:	40020458 	.word	0x40020458
 80092a8:	40020470 	.word	0x40020470
 80092ac:	40020488 	.word	0x40020488
 80092b0:	400204a0 	.word	0x400204a0
 80092b4:	400204b8 	.word	0x400204b8
 80092b8:	aaaaaaab 	.word	0xaaaaaaab
 80092bc:	08014098 	.word	0x08014098
 80092c0:	fffffc00 	.word	0xfffffc00

080092c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d120      	bne.n	800931a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d858      	bhi.n	8009392 <DMA_CheckFifoParam+0xce>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <DMA_CheckFifoParam+0x24>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	0800930b 	.word	0x0800930b
 80092f0:	080092f9 	.word	0x080092f9
 80092f4:	08009393 	.word	0x08009393
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d048      	beq.n	8009396 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009308:	e045      	b.n	8009396 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009312:	d142      	bne.n	800939a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009318:	e03f      	b.n	800939a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009322:	d123      	bne.n	800936c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009328:	2b03      	cmp	r3, #3
 800932a:	d838      	bhi.n	800939e <DMA_CheckFifoParam+0xda>
 800932c:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <DMA_CheckFifoParam+0x70>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	08009345 	.word	0x08009345
 8009338:	0800934b 	.word	0x0800934b
 800933c:	08009345 	.word	0x08009345
 8009340:	0800935d 	.word	0x0800935d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
        break;
 8009348:	e030      	b.n	80093ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d025      	beq.n	80093a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800935a:	e022      	b.n	80093a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009364:	d11f      	bne.n	80093a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800936a:	e01c      	b.n	80093a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	2b02      	cmp	r3, #2
 8009372:	d902      	bls.n	800937a <DMA_CheckFifoParam+0xb6>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d003      	beq.n	8009380 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009378:	e018      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	73fb      	strb	r3, [r7, #15]
        break;
 800937e:	e015      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00e      	beq.n	80093aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	e00b      	b.n	80093aa <DMA_CheckFifoParam+0xe6>
        break;
 8009392:	bf00      	nop
 8009394:	e00a      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        break;
 8009396:	bf00      	nop
 8009398:	e008      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        break;
 800939a:	bf00      	nop
 800939c:	e006      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        break;
 800939e:	bf00      	nop
 80093a0:	e004      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        break;
 80093a2:	bf00      	nop
 80093a4:	e002      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
        break;
 80093a6:	bf00      	nop
 80093a8:	e000      	b.n	80093ac <DMA_CheckFifoParam+0xe8>
    break;
 80093aa:	bf00      	nop
    }
  }

  return status;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop

080093bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a38      	ldr	r2, [pc, #224]	; (80094b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d022      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a36      	ldr	r2, [pc, #216]	; (80094b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d01d      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a35      	ldr	r2, [pc, #212]	; (80094b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d018      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a33      	ldr	r2, [pc, #204]	; (80094bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d013      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a32      	ldr	r2, [pc, #200]	; (80094c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00e      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a30      	ldr	r2, [pc, #192]	; (80094c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d009      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a2f      	ldr	r2, [pc, #188]	; (80094c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d004      	beq.n	800941a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a2d      	ldr	r2, [pc, #180]	; (80094cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d101      	bne.n	800941e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d01a      	beq.n	800945a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	3b08      	subs	r3, #8
 800942c:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	091b      	lsrs	r3, r3, #4
 8009434:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4b26      	ldr	r3, [pc, #152]	; (80094d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	461a      	mov	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009448:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f003 031f 	and.w	r3, r3, #31
 8009450:	2201      	movs	r2, #1
 8009452:	409a      	lsls	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009458:	e024      	b.n	80094a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	3b10      	subs	r3, #16
 8009462:	4a1e      	ldr	r2, [pc, #120]	; (80094dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	091b      	lsrs	r3, r3, #4
 800946a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4a1c      	ldr	r2, [pc, #112]	; (80094e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d806      	bhi.n	8009482 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	4a1b      	ldr	r2, [pc, #108]	; (80094e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d902      	bls.n	8009482 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3308      	adds	r3, #8
 8009480:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4b18      	ldr	r3, [pc, #96]	; (80094e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a16      	ldr	r2, [pc, #88]	; (80094ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009494:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f003 031f 	and.w	r3, r3, #31
 800949c:	2201      	movs	r2, #1
 800949e:	409a      	lsls	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	58025408 	.word	0x58025408
 80094b4:	5802541c 	.word	0x5802541c
 80094b8:	58025430 	.word	0x58025430
 80094bc:	58025444 	.word	0x58025444
 80094c0:	58025458 	.word	0x58025458
 80094c4:	5802546c 	.word	0x5802546c
 80094c8:	58025480 	.word	0x58025480
 80094cc:	58025494 	.word	0x58025494
 80094d0:	cccccccd 	.word	0xcccccccd
 80094d4:	16009600 	.word	0x16009600
 80094d8:	58025880 	.word	0x58025880
 80094dc:	aaaaaaab 	.word	0xaaaaaaab
 80094e0:	400204b8 	.word	0x400204b8
 80094e4:	4002040f 	.word	0x4002040f
 80094e8:	10008200 	.word	0x10008200
 80094ec:	40020880 	.word	0x40020880

080094f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d04a      	beq.n	800959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b08      	cmp	r3, #8
 800950a:	d847      	bhi.n	800959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a25      	ldr	r2, [pc, #148]	; (80095a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d022      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a24      	ldr	r2, [pc, #144]	; (80095ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d01d      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d018      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a21      	ldr	r2, [pc, #132]	; (80095b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d013      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00e      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d009      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1c      	ldr	r2, [pc, #112]	; (80095c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d004      	beq.n	800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1b      	ldr	r2, [pc, #108]	; (80095c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d101      	bne.n	8009560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800955c:	2301      	movs	r3, #1
 800955e:	e000      	b.n	8009562 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009560:	2300      	movs	r3, #0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a15      	ldr	r2, [pc, #84]	; (80095cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009578:	671a      	str	r2, [r3, #112]	; 0x70
 800957a:	e009      	b.n	8009590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	461a      	mov	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a11      	ldr	r2, [pc, #68]	; (80095d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800958e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3b01      	subs	r3, #1
 8009594:	2201      	movs	r2, #1
 8009596:	409a      	lsls	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800959c:	bf00      	nop
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	58025408 	.word	0x58025408
 80095ac:	5802541c 	.word	0x5802541c
 80095b0:	58025430 	.word	0x58025430
 80095b4:	58025444 	.word	0x58025444
 80095b8:	58025458 	.word	0x58025458
 80095bc:	5802546c 	.word	0x5802546c
 80095c0:	58025480 	.word	0x58025480
 80095c4:	58025494 	.word	0x58025494
 80095c8:	1600963f 	.word	0x1600963f
 80095cc:	58025940 	.word	0x58025940
 80095d0:	1000823f 	.word	0x1000823f
 80095d4:	40020940 	.word	0x40020940

080095d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	; 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80095e6:	4b89      	ldr	r3, [pc, #548]	; (800980c <HAL_GPIO_Init+0x234>)
 80095e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095ea:	e194      	b.n	8009916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	2101      	movs	r1, #1
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	4013      	ands	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8186 	beq.w	8009910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	2b01      	cmp	r3, #1
 800960e:	d005      	beq.n	800961c <HAL_GPIO_Init+0x44>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d130      	bne.n	800967e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	2203      	movs	r2, #3
 8009628:	fa02 f303 	lsl.w	r3, r2, r3
 800962c:	43db      	mvns	r3, r3
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	4013      	ands	r3, r2
 8009632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	4313      	orrs	r3, r2
 8009644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009652:	2201      	movs	r2, #1
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43db      	mvns	r3, r3
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	4013      	ands	r3, r2
 8009660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	091b      	lsrs	r3, r3, #4
 8009668:	f003 0201 	and.w	r2, r3, #1
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	4313      	orrs	r3, r2
 8009676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	2b03      	cmp	r3, #3
 8009688:	d017      	beq.n	80096ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	2203      	movs	r2, #3
 8009696:	fa02 f303 	lsl.w	r3, r2, r3
 800969a:	43db      	mvns	r3, r3
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	4013      	ands	r3, r2
 80096a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d123      	bne.n	800970e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	08da      	lsrs	r2, r3, #3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3208      	adds	r2, #8
 80096ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	220f      	movs	r2, #15
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	43db      	mvns	r3, r3
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	4013      	ands	r3, r2
 80096e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	08da      	lsrs	r2, r3, #3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3208      	adds	r2, #8
 8009708:	69b9      	ldr	r1, [r7, #24]
 800970a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	2203      	movs	r2, #3
 800971a:	fa02 f303 	lsl.w	r3, r2, r3
 800971e:	43db      	mvns	r3, r3
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	4013      	ands	r3, r2
 8009724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f003 0203 	and.w	r2, r3, #3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	4313      	orrs	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 80e0 	beq.w	8009910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009750:	4b2f      	ldr	r3, [pc, #188]	; (8009810 <HAL_GPIO_Init+0x238>)
 8009752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009756:	4a2e      	ldr	r2, [pc, #184]	; (8009810 <HAL_GPIO_Init+0x238>)
 8009758:	f043 0302 	orr.w	r3, r3, #2
 800975c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009760:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <HAL_GPIO_Init+0x238>)
 8009762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800976e:	4a29      	ldr	r2, [pc, #164]	; (8009814 <HAL_GPIO_Init+0x23c>)
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	089b      	lsrs	r3, r3, #2
 8009774:	3302      	adds	r3, #2
 8009776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	220f      	movs	r2, #15
 8009786:	fa02 f303 	lsl.w	r3, r2, r3
 800978a:	43db      	mvns	r3, r3
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4013      	ands	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a20      	ldr	r2, [pc, #128]	; (8009818 <HAL_GPIO_Init+0x240>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d052      	beq.n	8009840 <HAL_GPIO_Init+0x268>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a1f      	ldr	r2, [pc, #124]	; (800981c <HAL_GPIO_Init+0x244>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d031      	beq.n	8009806 <HAL_GPIO_Init+0x22e>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_GPIO_Init+0x248>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d02b      	beq.n	8009802 <HAL_GPIO_Init+0x22a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <HAL_GPIO_Init+0x24c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d025      	beq.n	80097fe <HAL_GPIO_Init+0x226>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a1c      	ldr	r2, [pc, #112]	; (8009828 <HAL_GPIO_Init+0x250>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d01f      	beq.n	80097fa <HAL_GPIO_Init+0x222>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <HAL_GPIO_Init+0x254>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d019      	beq.n	80097f6 <HAL_GPIO_Init+0x21e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a1a      	ldr	r2, [pc, #104]	; (8009830 <HAL_GPIO_Init+0x258>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d013      	beq.n	80097f2 <HAL_GPIO_Init+0x21a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a19      	ldr	r2, [pc, #100]	; (8009834 <HAL_GPIO_Init+0x25c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00d      	beq.n	80097ee <HAL_GPIO_Init+0x216>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a18      	ldr	r2, [pc, #96]	; (8009838 <HAL_GPIO_Init+0x260>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d007      	beq.n	80097ea <HAL_GPIO_Init+0x212>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a17      	ldr	r2, [pc, #92]	; (800983c <HAL_GPIO_Init+0x264>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d101      	bne.n	80097e6 <HAL_GPIO_Init+0x20e>
 80097e2:	2309      	movs	r3, #9
 80097e4:	e02d      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097e6:	230a      	movs	r3, #10
 80097e8:	e02b      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097ea:	2308      	movs	r3, #8
 80097ec:	e029      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097ee:	2307      	movs	r3, #7
 80097f0:	e027      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097f2:	2306      	movs	r3, #6
 80097f4:	e025      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097f6:	2305      	movs	r3, #5
 80097f8:	e023      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097fa:	2304      	movs	r3, #4
 80097fc:	e021      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 80097fe:	2303      	movs	r3, #3
 8009800:	e01f      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 8009802:	2302      	movs	r3, #2
 8009804:	e01d      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 8009806:	2301      	movs	r3, #1
 8009808:	e01b      	b.n	8009842 <HAL_GPIO_Init+0x26a>
 800980a:	bf00      	nop
 800980c:	58000080 	.word	0x58000080
 8009810:	58024400 	.word	0x58024400
 8009814:	58000400 	.word	0x58000400
 8009818:	58020000 	.word	0x58020000
 800981c:	58020400 	.word	0x58020400
 8009820:	58020800 	.word	0x58020800
 8009824:	58020c00 	.word	0x58020c00
 8009828:	58021000 	.word	0x58021000
 800982c:	58021400 	.word	0x58021400
 8009830:	58021800 	.word	0x58021800
 8009834:	58021c00 	.word	0x58021c00
 8009838:	58022000 	.word	0x58022000
 800983c:	58022400 	.word	0x58022400
 8009840:	2300      	movs	r3, #0
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	f002 0203 	and.w	r2, r2, #3
 8009848:	0092      	lsls	r2, r2, #2
 800984a:	4093      	lsls	r3, r2
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	4313      	orrs	r3, r2
 8009850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009852:	4938      	ldr	r1, [pc, #224]	; (8009934 <HAL_GPIO_Init+0x35c>)
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	089b      	lsrs	r3, r3, #2
 8009858:	3302      	adds	r3, #2
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	43db      	mvns	r3, r3
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	4013      	ands	r3, r2
 8009870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800988e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	43db      	mvns	r3, r3
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	4013      	ands	r3, r2
 800989e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80098b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	43db      	mvns	r3, r3
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	4013      	ands	r3, r2
 80098ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	43db      	mvns	r3, r3
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	4013      	ands	r3, r2
 80098f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	3301      	adds	r3, #1
 8009914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	f47f ae63 	bne.w	80095ec <HAL_GPIO_Init+0x14>
  }
}
 8009926:	bf00      	nop
 8009928:	bf00      	nop
 800992a:	3724      	adds	r7, #36	; 0x24
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	58000400 	.word	0x58000400

08009938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	887b      	ldrh	r3, [r7, #2]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
 8009954:	e001      	b.n	800995a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	807b      	strh	r3, [r7, #2]
 8009974:	4613      	mov	r3, r2
 8009976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009978:	787b      	ldrb	r3, [r7, #1]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800997e:	887a      	ldrh	r2, [r7, #2]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009984:	e003      	b.n	800998e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	041a      	lsls	r2, r3, #16
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	619a      	str	r2, [r3, #24]
}
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	4603      	mov	r3, r0
 80099a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80099a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80099ac:	88fb      	ldrh	r3, [r7, #6]
 80099ae:	4013      	ands	r3, r2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d008      	beq.n	80099c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f9 fd7b 	bl	80034bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <HAL_PWREx_ConfigSupply+0x70>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d00a      	beq.n	80099fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80099e4:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <HAL_PWREx_ConfigSupply+0x70>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d001      	beq.n	80099f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e01f      	b.n	8009a36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	e01d      	b.n	8009a36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099fa:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_PWREx_ConfigSupply+0x70>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f023 0207 	bic.w	r2, r3, #7
 8009a02:	490f      	ldr	r1, [pc, #60]	; (8009a40 <HAL_PWREx_ConfigSupply+0x70>)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a0a:	f7fc fe2b 	bl	8006664 <HAL_GetTick>
 8009a0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a10:	e009      	b.n	8009a26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a12:	f7fc fe27 	bl	8006664 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a20:	d901      	bls.n	8009a26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e007      	b.n	8009a36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a26:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <HAL_PWREx_ConfigSupply+0x70>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a32:	d1ee      	bne.n	8009a12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	58024800 	.word	0x58024800

08009a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08c      	sub	sp, #48	; 0x30
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f000 bc1d 	b.w	800a292 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 8087 	beq.w	8009b74 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a66:	4b99      	ldr	r3, [pc, #612]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a70:	4b96      	ldr	r3, [pc, #600]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d007      	beq.n	8009a8c <HAL_RCC_OscConfig+0x48>
 8009a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7e:	2b18      	cmp	r3, #24
 8009a80:	d110      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x60>
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d10b      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a8c:	4b8f      	ldr	r3, [pc, #572]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d06c      	beq.n	8009b72 <HAL_RCC_OscConfig+0x12e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d168      	bne.n	8009b72 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e3f6      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aac:	d106      	bne.n	8009abc <HAL_RCC_OscConfig+0x78>
 8009aae:	4b87      	ldr	r3, [pc, #540]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a86      	ldr	r2, [pc, #536]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	e02e      	b.n	8009b1a <HAL_RCC_OscConfig+0xd6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10c      	bne.n	8009ade <HAL_RCC_OscConfig+0x9a>
 8009ac4:	4b81      	ldr	r3, [pc, #516]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a80      	ldr	r2, [pc, #512]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	4b7e      	ldr	r3, [pc, #504]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a7d      	ldr	r2, [pc, #500]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	e01d      	b.n	8009b1a <HAL_RCC_OscConfig+0xd6>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ae6:	d10c      	bne.n	8009b02 <HAL_RCC_OscConfig+0xbe>
 8009ae8:	4b78      	ldr	r3, [pc, #480]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a77      	ldr	r2, [pc, #476]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	4b75      	ldr	r3, [pc, #468]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a74      	ldr	r2, [pc, #464]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	e00b      	b.n	8009b1a <HAL_RCC_OscConfig+0xd6>
 8009b02:	4b72      	ldr	r3, [pc, #456]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a71      	ldr	r2, [pc, #452]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	4b6f      	ldr	r3, [pc, #444]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a6e      	ldr	r2, [pc, #440]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d013      	beq.n	8009b4a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b22:	f7fc fd9f 	bl	8006664 <HAL_GetTick>
 8009b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b2a:	f7fc fd9b 	bl	8006664 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b64      	cmp	r3, #100	; 0x64
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e3aa      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b3c:	4b63      	ldr	r3, [pc, #396]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0xe6>
 8009b48:	e014      	b.n	8009b74 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4a:	f7fc fd8b 	bl	8006664 <HAL_GetTick>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b50:	e008      	b.n	8009b64 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b52:	f7fc fd87 	bl	8006664 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	2b64      	cmp	r3, #100	; 0x64
 8009b5e:	d901      	bls.n	8009b64 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e396      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b64:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f0      	bne.n	8009b52 <HAL_RCC_OscConfig+0x10e>
 8009b70:	e000      	b.n	8009b74 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 80cb 	beq.w	8009d18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b82:	4b52      	ldr	r3, [pc, #328]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b8a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b8c:	4b4f      	ldr	r3, [pc, #316]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d007      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x164>
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2b18      	cmp	r3, #24
 8009b9c:	d156      	bne.n	8009c4c <HAL_RCC_OscConfig+0x208>
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d151      	bne.n	8009c4c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ba8:	4b48      	ldr	r3, [pc, #288]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x17c>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e368      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bc0:	4b42      	ldr	r3, [pc, #264]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f023 0219 	bic.w	r2, r3, #25
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	493f      	ldr	r1, [pc, #252]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009bd2:	f7fc fd47 	bl	8006664 <HAL_GetTick>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bda:	f7fc fd43 	bl	8006664 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e352      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bec:	4b37      	ldr	r3, [pc, #220]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0f0      	beq.n	8009bda <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf8:	f7fc fd64 	bl	80066c4 <HAL_GetREVID>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d817      	bhi.n	8009c36 <HAL_RCC_OscConfig+0x1f2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	2b40      	cmp	r3, #64	; 0x40
 8009c0c:	d108      	bne.n	8009c20 <HAL_RCC_OscConfig+0x1dc>
 8009c0e:	4b2f      	ldr	r3, [pc, #188]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c16:	4a2d      	ldr	r2, [pc, #180]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c1e:	e07b      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	031b      	lsls	r3, r3, #12
 8009c2e:	4927      	ldr	r1, [pc, #156]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c34:	e070      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c36:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	061b      	lsls	r3, r3, #24
 8009c44:	4921      	ldr	r1, [pc, #132]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c4a:	e065      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d048      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f023 0219 	bic.w	r2, r3, #25
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	491a      	ldr	r1, [pc, #104]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c66:	f7fc fcfd 	bl	8006664 <HAL_GetTick>
 8009c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c6e:	f7fc fcf9 	bl	8006664 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e308      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c80:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f0      	beq.n	8009c6e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c8c:	f7fc fd1a 	bl	80066c4 <HAL_GetREVID>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d81a      	bhi.n	8009cd0 <HAL_RCC_OscConfig+0x28c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d108      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x270>
 8009ca2:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009caa:	4a08      	ldr	r2, [pc, #32]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cb0:	6053      	str	r3, [r2, #4]
 8009cb2:	e031      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	031b      	lsls	r3, r3, #12
 8009cc2:	4902      	ldr	r1, [pc, #8]	; (8009ccc <HAL_RCC_OscConfig+0x288>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	604b      	str	r3, [r1, #4]
 8009cc8:	e026      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	4b9a      	ldr	r3, [pc, #616]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	061b      	lsls	r3, r3, #24
 8009cde:	4997      	ldr	r1, [pc, #604]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	604b      	str	r3, [r1, #4]
 8009ce4:	e018      	b.n	8009d18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ce6:	4b95      	ldr	r3, [pc, #596]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a94      	ldr	r2, [pc, #592]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf2:	f7fc fcb7 	bl	8006664 <HAL_GetTick>
 8009cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cf8:	e008      	b.n	8009d0c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cfa:	f7fc fcb3 	bl	8006664 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d901      	bls.n	8009d0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e2c2      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d0c:	4b8b      	ldr	r3, [pc, #556]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f0      	bne.n	8009cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0310 	and.w	r3, r3, #16
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80a9 	beq.w	8009e78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d26:	4b85      	ldr	r3, [pc, #532]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d30:	4b82      	ldr	r3, [pc, #520]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d007      	beq.n	8009d4c <HAL_RCC_OscConfig+0x308>
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2b18      	cmp	r3, #24
 8009d40:	d13a      	bne.n	8009db8 <HAL_RCC_OscConfig+0x374>
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f003 0303 	and.w	r3, r3, #3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d135      	bne.n	8009db8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d4c:	4b7b      	ldr	r3, [pc, #492]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <HAL_RCC_OscConfig+0x320>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	2b80      	cmp	r3, #128	; 0x80
 8009d5e:	d001      	beq.n	8009d64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e296      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d64:	f7fc fcae 	bl	80066c4 <HAL_GetREVID>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d817      	bhi.n	8009da2 <HAL_RCC_OscConfig+0x35e>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d108      	bne.n	8009d8c <HAL_RCC_OscConfig+0x348>
 8009d7a:	4b70      	ldr	r3, [pc, #448]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d82:	4a6e      	ldr	r2, [pc, #440]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d8a:	e075      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d8c:	4b6b      	ldr	r3, [pc, #428]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	069b      	lsls	r3, r3, #26
 8009d9a:	4968      	ldr	r1, [pc, #416]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009da0:	e06a      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009da2:	4b66      	ldr	r3, [pc, #408]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	061b      	lsls	r3, r3, #24
 8009db0:	4962      	ldr	r1, [pc, #392]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009db6:	e05f      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d042      	beq.n	8009e46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009dc0:	4b5e      	ldr	r3, [pc, #376]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a5d      	ldr	r2, [pc, #372]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dcc:	f7fc fc4a 	bl	8006664 <HAL_GetTick>
 8009dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dd2:	e008      	b.n	8009de6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009dd4:	f7fc fc46 	bl	8006664 <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d901      	bls.n	8009de6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e255      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009de6:	4b55      	ldr	r3, [pc, #340]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0f0      	beq.n	8009dd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009df2:	f7fc fc67 	bl	80066c4 <HAL_GetREVID>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d817      	bhi.n	8009e30 <HAL_RCC_OscConfig+0x3ec>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d108      	bne.n	8009e1a <HAL_RCC_OscConfig+0x3d6>
 8009e08:	4b4c      	ldr	r3, [pc, #304]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e10:	4a4a      	ldr	r2, [pc, #296]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e16:	6053      	str	r3, [r2, #4]
 8009e18:	e02e      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
 8009e1a:	4b48      	ldr	r3, [pc, #288]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	069b      	lsls	r3, r3, #26
 8009e28:	4944      	ldr	r1, [pc, #272]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	604b      	str	r3, [r1, #4]
 8009e2e:	e023      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
 8009e30:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	061b      	lsls	r3, r3, #24
 8009e3e:	493f      	ldr	r1, [pc, #252]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60cb      	str	r3, [r1, #12]
 8009e44:	e018      	b.n	8009e78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e46:	4b3d      	ldr	r3, [pc, #244]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a3c      	ldr	r2, [pc, #240]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e52:	f7fc fc07 	bl	8006664 <HAL_GetTick>
 8009e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e58:	e008      	b.n	8009e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e5a:	f7fc fc03 	bl	8006664 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d901      	bls.n	8009e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e212      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e6c:	4b33      	ldr	r3, [pc, #204]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f0      	bne.n	8009e5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d036      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d019      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e8c:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e90:	4a2a      	ldr	r2, [pc, #168]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e98:	f7fc fbe4 	bl	8006664 <HAL_GetTick>
 8009e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ea0:	f7fc fbe0 	bl	8006664 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e1ef      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eb2:	4b22      	ldr	r3, [pc, #136]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x45c>
 8009ebe:	e018      	b.n	8009ef2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ec0:	4b1e      	ldr	r3, [pc, #120]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec4:	4a1d      	ldr	r2, [pc, #116]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ecc:	f7fc fbca 	bl	8006664 <HAL_GetTick>
 8009ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ed4:	f7fc fbc6 	bl	8006664 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e1d5      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ee6:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d039      	beq.n	8009f72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01c      	beq.n	8009f40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f06:	4b0d      	ldr	r3, [pc, #52]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a0c      	ldr	r2, [pc, #48]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f12:	f7fc fba7 	bl	8006664 <HAL_GetTick>
 8009f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f18:	e008      	b.n	8009f2c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f1a:	f7fc fba3 	bl	8006664 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d901      	bls.n	8009f2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e1b2      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f2c:	4b03      	ldr	r3, [pc, #12]	; (8009f3c <HAL_RCC_OscConfig+0x4f8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0f0      	beq.n	8009f1a <HAL_RCC_OscConfig+0x4d6>
 8009f38:	e01b      	b.n	8009f72 <HAL_RCC_OscConfig+0x52e>
 8009f3a:	bf00      	nop
 8009f3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f40:	4b9b      	ldr	r3, [pc, #620]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a9a      	ldr	r2, [pc, #616]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f4c:	f7fc fb8a 	bl	8006664 <HAL_GetTick>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f54:	f7fc fb86 	bl	8006664 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e195      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f66:	4b92      	ldr	r3, [pc, #584]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 8081 	beq.w	800a082 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f80:	4b8c      	ldr	r3, [pc, #560]	; (800a1b4 <HAL_RCC_OscConfig+0x770>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a8b      	ldr	r2, [pc, #556]	; (800a1b4 <HAL_RCC_OscConfig+0x770>)
 8009f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f8c:	f7fc fb6a 	bl	8006664 <HAL_GetTick>
 8009f90:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f92:	e008      	b.n	8009fa6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f94:	f7fc fb66 	bl	8006664 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	2b64      	cmp	r3, #100	; 0x64
 8009fa0:	d901      	bls.n	8009fa6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e175      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fa6:	4b83      	ldr	r3, [pc, #524]	; (800a1b4 <HAL_RCC_OscConfig+0x770>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0f0      	beq.n	8009f94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x584>
 8009fba:	4b7d      	ldr	r3, [pc, #500]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	4a7c      	ldr	r2, [pc, #496]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fc0:	f043 0301 	orr.w	r3, r3, #1
 8009fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc6:	e02d      	b.n	800a024 <HAL_RCC_OscConfig+0x5e0>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10c      	bne.n	8009fea <HAL_RCC_OscConfig+0x5a6>
 8009fd0:	4b77      	ldr	r3, [pc, #476]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd4:	4a76      	ldr	r2, [pc, #472]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	6713      	str	r3, [r2, #112]	; 0x70
 8009fdc:	4b74      	ldr	r3, [pc, #464]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe0:	4a73      	ldr	r2, [pc, #460]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009fe2:	f023 0304 	bic.w	r3, r3, #4
 8009fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe8:	e01c      	b.n	800a024 <HAL_RCC_OscConfig+0x5e0>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	d10c      	bne.n	800a00c <HAL_RCC_OscConfig+0x5c8>
 8009ff2:	4b6f      	ldr	r3, [pc, #444]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	4a6e      	ldr	r2, [pc, #440]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 8009ff8:	f043 0304 	orr.w	r3, r3, #4
 8009ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8009ffe:	4b6c      	ldr	r3, [pc, #432]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	4a6b      	ldr	r2, [pc, #428]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	6713      	str	r3, [r2, #112]	; 0x70
 800a00a:	e00b      	b.n	800a024 <HAL_RCC_OscConfig+0x5e0>
 800a00c:	4b68      	ldr	r3, [pc, #416]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a010:	4a67      	ldr	r2, [pc, #412]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a012:	f023 0301 	bic.w	r3, r3, #1
 800a016:	6713      	str	r3, [r2, #112]	; 0x70
 800a018:	4b65      	ldr	r3, [pc, #404]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01c:	4a64      	ldr	r2, [pc, #400]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a01e:	f023 0304 	bic.w	r3, r3, #4
 800a022:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d015      	beq.n	800a058 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02c:	f7fc fb1a 	bl	8006664 <HAL_GetTick>
 800a030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a032:	e00a      	b.n	800a04a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a034:	f7fc fb16 	bl	8006664 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a042:	4293      	cmp	r3, r2
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e123      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a04a:	4b59      	ldr	r3, [pc, #356]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0ee      	beq.n	800a034 <HAL_RCC_OscConfig+0x5f0>
 800a056:	e014      	b.n	800a082 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a058:	f7fc fb04 	bl	8006664 <HAL_GetTick>
 800a05c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a05e:	e00a      	b.n	800a076 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a060:	f7fc fb00 	bl	8006664 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a06e:	4293      	cmp	r3, r2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e10d      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a076:	4b4e      	ldr	r3, [pc, #312]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1ee      	bne.n	800a060 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 8102 	beq.w	800a290 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a08c:	4b48      	ldr	r3, [pc, #288]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a094:	2b18      	cmp	r3, #24
 800a096:	f000 80bd 	beq.w	800a214 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	f040 809e 	bne.w	800a1e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0a4:	4b42      	ldr	r3, [pc, #264]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a41      	ldr	r2, [pc, #260]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a0aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b0:	f7fc fad8 	bl	8006664 <HAL_GetTick>
 800a0b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0b6:	e008      	b.n	800a0ca <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0b8:	f7fc fad4 	bl	8006664 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d901      	bls.n	800a0ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e0e3      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0ca:	4b39      	ldr	r3, [pc, #228]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1f0      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0d6:	4b36      	ldr	r3, [pc, #216]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a0d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0da:	4b37      	ldr	r3, [pc, #220]	; (800a1b8 <HAL_RCC_OscConfig+0x774>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0e6:	0112      	lsls	r2, r2, #4
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	4931      	ldr	r1, [pc, #196]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	628b      	str	r3, [r1, #40]	; 0x28
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fe:	3b01      	subs	r3, #1
 800a100:	025b      	lsls	r3, r3, #9
 800a102:	b29b      	uxth	r3, r3
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	3b01      	subs	r3, #1
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a118:	3b01      	subs	r3, #1
 800a11a:	061b      	lsls	r3, r3, #24
 800a11c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a120:	4923      	ldr	r1, [pc, #140]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a122:	4313      	orrs	r3, r2
 800a124:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a126:	4b22      	ldr	r3, [pc, #136]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	4a21      	ldr	r2, [pc, #132]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a132:	4b1f      	ldr	r3, [pc, #124]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a136:	4b21      	ldr	r3, [pc, #132]	; (800a1bc <HAL_RCC_OscConfig+0x778>)
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a13e:	00d2      	lsls	r2, r2, #3
 800a140:	491b      	ldr	r1, [pc, #108]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	f023 020c 	bic.w	r2, r3, #12
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	4917      	ldr	r1, [pc, #92]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a154:	4313      	orrs	r3, r2
 800a156:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a158:	4b15      	ldr	r3, [pc, #84]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	f023 0202 	bic.w	r2, r3, #2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a164:	4912      	ldr	r1, [pc, #72]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a166:	4313      	orrs	r3, r2
 800a168:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a16a:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4a10      	ldr	r2, [pc, #64]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a176:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a0d      	ldr	r2, [pc, #52]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a17c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a182:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a186:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a18c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a18e:	4b08      	ldr	r3, [pc, #32]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a07      	ldr	r2, [pc, #28]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a04      	ldr	r2, [pc, #16]	; (800a1b0 <HAL_RCC_OscConfig+0x76c>)
 800a1a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a6:	f7fc fa5d 	bl	8006664 <HAL_GetTick>
 800a1aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1ac:	e011      	b.n	800a1d2 <HAL_RCC_OscConfig+0x78e>
 800a1ae:	bf00      	nop
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	58024800 	.word	0x58024800
 800a1b8:	fffffc0c 	.word	0xfffffc0c
 800a1bc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1c0:	f7fc fa50 	bl	8006664 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e05f      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1d2:	4b32      	ldr	r3, [pc, #200]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f0      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x77c>
 800a1de:	e057      	b.n	800a290 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1e0:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a2d      	ldr	r2, [pc, #180]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a1e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ec:	f7fc fa3a 	bl	8006664 <HAL_GetTick>
 800a1f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1f4:	f7fc fa36 	bl	8006664 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e045      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a206:	4b25      	ldr	r3, [pc, #148]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f0      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x7b0>
 800a212:	e03d      	b.n	800a290 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a214:	4b21      	ldr	r3, [pc, #132]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a21a:	4b20      	ldr	r3, [pc, #128]	; (800a29c <HAL_RCC_OscConfig+0x858>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	2b01      	cmp	r3, #1
 800a226:	d031      	beq.n	800a28c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f003 0203 	and.w	r2, r3, #3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a232:	429a      	cmp	r2, r3
 800a234:	d12a      	bne.n	800a28c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	091b      	lsrs	r3, r3, #4
 800a23a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a242:	429a      	cmp	r2, r3
 800a244:	d122      	bne.n	800a28c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a252:	429a      	cmp	r2, r3
 800a254:	d11a      	bne.n	800a28c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	0a5b      	lsrs	r3, r3, #9
 800a25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a264:	429a      	cmp	r2, r3
 800a266:	d111      	bne.n	800a28c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d108      	bne.n	800a28c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	0e1b      	lsrs	r3, r3, #24
 800a27e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a288:	429a      	cmp	r2, r3
 800a28a:	d001      	beq.n	800a290 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3730      	adds	r7, #48	; 0x30
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400

0800a2a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e19c      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2b4:	4b8a      	ldr	r3, [pc, #552]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d910      	bls.n	800a2e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c2:	4b87      	ldr	r3, [pc, #540]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f023 020f 	bic.w	r2, r3, #15
 800a2ca:	4985      	ldr	r1, [pc, #532]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d2:	4b83      	ldr	r3, [pc, #524]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d001      	beq.n	800a2e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e184      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d010      	beq.n	800a312 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691a      	ldr	r2, [r3, #16]
 800a2f4:	4b7b      	ldr	r3, [pc, #492]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d908      	bls.n	800a312 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a300:	4b78      	ldr	r3, [pc, #480]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	4975      	ldr	r1, [pc, #468]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0308 	and.w	r3, r3, #8
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d010      	beq.n	800a340 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695a      	ldr	r2, [r3, #20]
 800a322:	4b70      	ldr	r3, [pc, #448]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d908      	bls.n	800a340 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a32e:	4b6d      	ldr	r3, [pc, #436]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	496a      	ldr	r1, [pc, #424]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d010      	beq.n	800a36e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699a      	ldr	r2, [r3, #24]
 800a350:	4b64      	ldr	r3, [pc, #400]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a358:	429a      	cmp	r2, r3
 800a35a:	d908      	bls.n	800a36e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a35c:	4b61      	ldr	r3, [pc, #388]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	495e      	ldr	r1, [pc, #376]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d010      	beq.n	800a39c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69da      	ldr	r2, [r3, #28]
 800a37e:	4b59      	ldr	r3, [pc, #356]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a386:	429a      	cmp	r2, r3
 800a388:	d908      	bls.n	800a39c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a38a:	4b56      	ldr	r3, [pc, #344]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	4953      	ldr	r1, [pc, #332]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d010      	beq.n	800a3ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68da      	ldr	r2, [r3, #12]
 800a3ac:	4b4d      	ldr	r3, [pc, #308]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f003 030f 	and.w	r3, r3, #15
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d908      	bls.n	800a3ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3b8:	4b4a      	ldr	r3, [pc, #296]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	f023 020f 	bic.w	r2, r3, #15
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	4947      	ldr	r1, [pc, #284]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d055      	beq.n	800a482 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a3d6:	4b43      	ldr	r3, [pc, #268]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	4940      	ldr	r1, [pc, #256]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d107      	bne.n	800a400 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3f0:	4b3c      	ldr	r3, [pc, #240]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d121      	bne.n	800a440 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e0f6      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b03      	cmp	r3, #3
 800a406:	d107      	bne.n	800a418 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a408:	4b36      	ldr	r3, [pc, #216]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d115      	bne.n	800a440 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e0ea      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d107      	bne.n	800a430 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a420:	4b30      	ldr	r3, [pc, #192]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d109      	bne.n	800a440 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0de      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a430:	4b2c      	ldr	r3, [pc, #176]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e0d6      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f023 0207 	bic.w	r2, r3, #7
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	4925      	ldr	r1, [pc, #148]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a452:	f7fc f907 	bl	8006664 <HAL_GetTick>
 800a456:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a458:	e00a      	b.n	800a470 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a45a:	f7fc f903 	bl	8006664 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	f241 3288 	movw	r2, #5000	; 0x1388
 800a468:	4293      	cmp	r3, r2
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e0be      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a470:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	429a      	cmp	r2, r3
 800a480:	d1eb      	bne.n	800a45a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d010      	beq.n	800a4b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d208      	bcs.n	800a4b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a49e:	4b11      	ldr	r3, [pc, #68]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f023 020f 	bic.w	r2, r3, #15
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	490e      	ldr	r1, [pc, #56]	; (800a4e4 <HAL_RCC_ClockConfig+0x244>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d214      	bcs.n	800a4e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4be:	4b08      	ldr	r3, [pc, #32]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f023 020f 	bic.w	r2, r3, #15
 800a4c6:	4906      	ldr	r1, [pc, #24]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ce:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <HAL_RCC_ClockConfig+0x240>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 030f 	and.w	r3, r3, #15
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d005      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e086      	b.n	800a5ee <HAL_RCC_ClockConfig+0x34e>
 800a4e0:	52002000 	.word	0x52002000
 800a4e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d010      	beq.n	800a516 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	4b3f      	ldr	r3, [pc, #252]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a500:	429a      	cmp	r2, r3
 800a502:	d208      	bcs.n	800a516 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a504:	4b3c      	ldr	r3, [pc, #240]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	4939      	ldr	r1, [pc, #228]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a512:	4313      	orrs	r3, r2
 800a514:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d010      	beq.n	800a544 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695a      	ldr	r2, [r3, #20]
 800a526:	4b34      	ldr	r3, [pc, #208]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a52e:	429a      	cmp	r2, r3
 800a530:	d208      	bcs.n	800a544 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a532:	4b31      	ldr	r3, [pc, #196]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	492e      	ldr	r1, [pc, #184]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a540:	4313      	orrs	r3, r2
 800a542:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0310 	and.w	r3, r3, #16
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d010      	beq.n	800a572 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699a      	ldr	r2, [r3, #24]
 800a554:	4b28      	ldr	r3, [pc, #160]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d208      	bcs.n	800a572 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a560:	4b25      	ldr	r3, [pc, #148]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	4922      	ldr	r1, [pc, #136]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d010      	beq.n	800a5a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d208      	bcs.n	800a5a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a58e:	4b1a      	ldr	r3, [pc, #104]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	4917      	ldr	r1, [pc, #92]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5a0:	f000 f834 	bl	800a60c <HAL_RCC_GetSysClockFreq>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	0a1b      	lsrs	r3, r3, #8
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	4912      	ldr	r1, [pc, #72]	; (800a5fc <HAL_RCC_ClockConfig+0x35c>)
 800a5b2:	5ccb      	ldrb	r3, [r1, r3]
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5be:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <HAL_RCC_ClockConfig+0x358>)
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <HAL_RCC_ClockConfig+0x35c>)
 800a5c8:	5cd3      	ldrb	r3, [r2, r3]
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d4:	4a0a      	ldr	r2, [pc, #40]	; (800a600 <HAL_RCC_ClockConfig+0x360>)
 800a5d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5d8:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <HAL_RCC_ClockConfig+0x364>)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <HAL_RCC_ClockConfig+0x368>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fb fff4 	bl	80065d0 <HAL_InitTick>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	08014088 	.word	0x08014088
 800a600:	240000ec 	.word	0x240000ec
 800a604:	240000e8 	.word	0x240000e8
 800a608:	240000f0 	.word	0x240000f0

0800a60c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b089      	sub	sp, #36	; 0x24
 800a610:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a612:	4bb3      	ldr	r3, [pc, #716]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a61a:	2b18      	cmp	r3, #24
 800a61c:	f200 8155 	bhi.w	800a8ca <HAL_RCC_GetSysClockFreq+0x2be>
 800a620:	a201      	add	r2, pc, #4	; (adr r2, 800a628 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a626:	bf00      	nop
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a8cb 	.word	0x0800a8cb
 800a630:	0800a8cb 	.word	0x0800a8cb
 800a634:	0800a8cb 	.word	0x0800a8cb
 800a638:	0800a8cb 	.word	0x0800a8cb
 800a63c:	0800a8cb 	.word	0x0800a8cb
 800a640:	0800a8cb 	.word	0x0800a8cb
 800a644:	0800a8cb 	.word	0x0800a8cb
 800a648:	0800a6b3 	.word	0x0800a6b3
 800a64c:	0800a8cb 	.word	0x0800a8cb
 800a650:	0800a8cb 	.word	0x0800a8cb
 800a654:	0800a8cb 	.word	0x0800a8cb
 800a658:	0800a8cb 	.word	0x0800a8cb
 800a65c:	0800a8cb 	.word	0x0800a8cb
 800a660:	0800a8cb 	.word	0x0800a8cb
 800a664:	0800a8cb 	.word	0x0800a8cb
 800a668:	0800a6b9 	.word	0x0800a6b9
 800a66c:	0800a8cb 	.word	0x0800a8cb
 800a670:	0800a8cb 	.word	0x0800a8cb
 800a674:	0800a8cb 	.word	0x0800a8cb
 800a678:	0800a8cb 	.word	0x0800a8cb
 800a67c:	0800a8cb 	.word	0x0800a8cb
 800a680:	0800a8cb 	.word	0x0800a8cb
 800a684:	0800a8cb 	.word	0x0800a8cb
 800a688:	0800a6bf 	.word	0x0800a6bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a68c:	4b94      	ldr	r3, [pc, #592]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d009      	beq.n	800a6ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a698:	4b91      	ldr	r3, [pc, #580]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	08db      	lsrs	r3, r3, #3
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	4a90      	ldr	r2, [pc, #576]	; (800a8e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a6aa:	e111      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a6ac:	4b8d      	ldr	r3, [pc, #564]	; (800a8e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6ae:	61bb      	str	r3, [r7, #24]
    break;
 800a6b0:	e10e      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a6b2:	4b8d      	ldr	r3, [pc, #564]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6b4:	61bb      	str	r3, [r7, #24]
    break;
 800a6b6:	e10b      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a6b8:	4b8c      	ldr	r3, [pc, #560]	; (800a8ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a6ba:	61bb      	str	r3, [r7, #24]
    break;
 800a6bc:	e108      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6be:	4b88      	ldr	r3, [pc, #544]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a6c8:	4b85      	ldr	r3, [pc, #532]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	091b      	lsrs	r3, r3, #4
 800a6ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6d4:	4b82      	ldr	r3, [pc, #520]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a6de:	4b80      	ldr	r3, [pc, #512]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e2:	08db      	lsrs	r3, r3, #3
 800a6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 80e1 	beq.w	800a8c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b02      	cmp	r3, #2
 800a706:	f000 8083 	beq.w	800a810 <HAL_RCC_GetSysClockFreq+0x204>
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	f200 80a1 	bhi.w	800a854 <HAL_RCC_GetSysClockFreq+0x248>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d003      	beq.n	800a720 <HAL_RCC_GetSysClockFreq+0x114>
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d056      	beq.n	800a7cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a71e:	e099      	b.n	800a854 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a720:	4b6f      	ldr	r3, [pc, #444]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0320 	and.w	r3, r3, #32
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d02d      	beq.n	800a788 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a72c:	4b6c      	ldr	r3, [pc, #432]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a6b      	ldr	r2, [pc, #428]	; (800a8e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	ee07 3a90 	vmov	s15, r3
 800a744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a756:	4b62      	ldr	r3, [pc, #392]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a766:	ed97 6a02 	vldr	s12, [r7, #8]
 800a76a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a8f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a782:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a786:	e087      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a792:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a8f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a79a:	4b51      	ldr	r3, [pc, #324]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a8f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ca:	e065      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7de:	4b40      	ldr	r3, [pc, #256]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a8f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a80e:	e043      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a8fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b2f      	ldr	r3, [pc, #188]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a832:	ed97 6a02 	vldr	s12, [r7, #8]
 800a836:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a8f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a852:	e021      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a866:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a876:	ed97 6a02 	vldr	s12, [r7, #8]
 800a87a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a8f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a896:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a898:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	0a5b      	lsrs	r3, r3, #9
 800a89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8bc:	ee17 3a90 	vmov	r3, s15
 800a8c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a8c2:	e005      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]
    break;
 800a8c8:	e002      	b.n	800a8d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8cc:	61bb      	str	r3, [r7, #24]
    break;
 800a8ce:	bf00      	nop
  }

  return sysclockfreq;
 800a8d0:	69bb      	ldr	r3, [r7, #24]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3724      	adds	r7, #36	; 0x24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	58024400 	.word	0x58024400
 800a8e4:	03d09000 	.word	0x03d09000
 800a8e8:	003d0900 	.word	0x003d0900
 800a8ec:	017d7840 	.word	0x017d7840
 800a8f0:	46000000 	.word	0x46000000
 800a8f4:	4c742400 	.word	0x4c742400
 800a8f8:	4a742400 	.word	0x4a742400
 800a8fc:	4bbebc20 	.word	0x4bbebc20

0800a900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a906:	f7ff fe81 	bl	800a60c <HAL_RCC_GetSysClockFreq>
 800a90a:	4602      	mov	r2, r0
 800a90c:	4b10      	ldr	r3, [pc, #64]	; (800a950 <HAL_RCC_GetHCLKFreq+0x50>)
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	0a1b      	lsrs	r3, r3, #8
 800a912:	f003 030f 	and.w	r3, r3, #15
 800a916:	490f      	ldr	r1, [pc, #60]	; (800a954 <HAL_RCC_GetHCLKFreq+0x54>)
 800a918:	5ccb      	ldrb	r3, [r1, r3]
 800a91a:	f003 031f 	and.w	r3, r3, #31
 800a91e:	fa22 f303 	lsr.w	r3, r2, r3
 800a922:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a924:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <HAL_RCC_GetHCLKFreq+0x50>)
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	f003 030f 	and.w	r3, r3, #15
 800a92c:	4a09      	ldr	r2, [pc, #36]	; (800a954 <HAL_RCC_GetHCLKFreq+0x54>)
 800a92e:	5cd3      	ldrb	r3, [r2, r3]
 800a930:	f003 031f 	and.w	r3, r3, #31
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	fa22 f303 	lsr.w	r3, r2, r3
 800a93a:	4a07      	ldr	r2, [pc, #28]	; (800a958 <HAL_RCC_GetHCLKFreq+0x58>)
 800a93c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a93e:	4a07      	ldr	r2, [pc, #28]	; (800a95c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <HAL_RCC_GetHCLKFreq+0x58>)
 800a946:	681b      	ldr	r3, [r3, #0]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	58024400 	.word	0x58024400
 800a954:	08014088 	.word	0x08014088
 800a958:	240000ec 	.word	0x240000ec
 800a95c:	240000e8 	.word	0x240000e8

0800a960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a964:	f7ff ffcc 	bl	800a900 <HAL_RCC_GetHCLKFreq>
 800a968:	4602      	mov	r2, r0
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	091b      	lsrs	r3, r3, #4
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	4904      	ldr	r1, [pc, #16]	; (800a988 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a976:	5ccb      	ldrb	r3, [r1, r3]
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a980:	4618      	mov	r0, r3
 800a982:	bd80      	pop	{r7, pc}
 800a984:	58024400 	.word	0x58024400
 800a988:	08014088 	.word	0x08014088

0800a98c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a990:	f7ff ffb6 	bl	800a900 <HAL_RCC_GetHCLKFreq>
 800a994:	4602      	mov	r2, r0
 800a996:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	0a1b      	lsrs	r3, r3, #8
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	4904      	ldr	r1, [pc, #16]	; (800a9b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9a2:	5ccb      	ldrb	r3, [r1, r3]
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	08014088 	.word	0x08014088

0800a9b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d03f      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9dc:	d02a      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a9de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9e2:	d824      	bhi.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e8:	d018      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ee:	d81e      	bhi.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a9f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f8:	d007      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a9fa:	e018      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9fc:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	4aa2      	ldr	r2, [pc, #648]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aa08:	e015      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	2102      	movs	r1, #2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 f9d5 	bl	800bdc0 <RCCEx_PLL2_Config>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aa1a:	e00c      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	2102      	movs	r1, #2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 fa7e 	bl	800bf24 <RCCEx_PLL3_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aa2c:	e003      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	75fb      	strb	r3, [r7, #23]
      break;
 800aa32:	e000      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aa34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa3c:	4b93      	ldr	r3, [pc, #588]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa48:	4990      	ldr	r1, [pc, #576]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa4e:	e001      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d03d      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d826      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aa68:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6e:	bf00      	nop
 800aa70:	0800aa85 	.word	0x0800aa85
 800aa74:	0800aa93 	.word	0x0800aa93
 800aa78:	0800aaa5 	.word	0x0800aaa5
 800aa7c:	0800aabd 	.word	0x0800aabd
 800aa80:	0800aabd 	.word	0x0800aabd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa84:	4b81      	ldr	r3, [pc, #516]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	4a80      	ldr	r2, [pc, #512]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa90:	e015      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3304      	adds	r3, #4
 800aa96:	2100      	movs	r1, #0
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f001 f991 	bl	800bdc0 <RCCEx_PLL2_Config>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aaa2:	e00c      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 fa3a 	bl	800bf24 <RCCEx_PLL3_Config>
 800aab0:	4603      	mov	r3, r0
 800aab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aab4:	e003      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	75fb      	strb	r3, [r7, #23]
      break;
 800aaba:	e000      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800aabc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aac4:	4b71      	ldr	r3, [pc, #452]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac8:	f023 0207 	bic.w	r2, r3, #7
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad0:	496e      	ldr	r1, [pc, #440]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	650b      	str	r3, [r1, #80]	; 0x50
 800aad6:	e001      	b.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d042      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf0:	d02b      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800aaf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf6:	d825      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aaf8:	2bc0      	cmp	r3, #192	; 0xc0
 800aafa:	d028      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aafc:	2bc0      	cmp	r3, #192	; 0xc0
 800aafe:	d821      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab00:	2b80      	cmp	r3, #128	; 0x80
 800ab02:	d016      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d81d      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ab0c:	2b40      	cmp	r3, #64	; 0x40
 800ab0e:	d007      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ab10:	e018      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab12:	4b5e      	ldr	r3, [pc, #376]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	4a5d      	ldr	r2, [pc, #372]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ab1e:	e017      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 f94a 	bl	800bdc0 <RCCEx_PLL2_Config>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ab30:	e00e      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3324      	adds	r3, #36	; 0x24
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 f9f3 	bl	800bf24 <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ab42:	e005      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]
      break;
 800ab48:	e002      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ab4a:	bf00      	nop
 800ab4c:	e000      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ab4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab56:	4b4d      	ldr	r3, [pc, #308]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab62:	494a      	ldr	r1, [pc, #296]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	650b      	str	r3, [r1, #80]	; 0x50
 800ab68:	e001      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d049      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab84:	d030      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ab86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab8a:	d82a      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ab8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab90:	d02c      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ab92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab96:	d824      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ab98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab9c:	d018      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ab9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aba2:	d81e      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800aba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abac:	d007      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800abae:	e018      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb0:	4b36      	ldr	r3, [pc, #216]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	4a35      	ldr	r2, [pc, #212]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abbc:	e017      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3304      	adds	r3, #4
 800abc2:	2100      	movs	r1, #0
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 f8fb 	bl	800bdc0 <RCCEx_PLL2_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800abce:	e00e      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3324      	adds	r3, #36	; 0x24
 800abd4:	2100      	movs	r1, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f001 f9a4 	bl	800bf24 <RCCEx_PLL3_Config>
 800abdc:	4603      	mov	r3, r0
 800abde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abe0:	e005      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	75fb      	strb	r3, [r7, #23]
      break;
 800abe6:	e002      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800abe8:	bf00      	nop
 800abea:	e000      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800abec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abf4:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac02:	4922      	ldr	r1, [pc, #136]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	658b      	str	r3, [r1, #88]	; 0x58
 800ac08:	e001      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d04b      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac24:	d030      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ac26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac2a:	d82a      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ac2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac30:	d02e      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ac32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac36:	d824      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ac38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac3c:	d018      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ac3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac42:	d81e      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ac48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac4c:	d007      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ac4e:	e018      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	4a0d      	ldr	r2, [pc, #52]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac5c:	e019      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3304      	adds	r3, #4
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 f8ab 	bl	800bdc0 <RCCEx_PLL2_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ac6e:	e010      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3324      	adds	r3, #36	; 0x24
 800ac74:	2100      	movs	r1, #0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 f954 	bl	800bf24 <RCCEx_PLL3_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac80:	e007      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	e004      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800ac88:	bf00      	nop
 800ac8a:	e002      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ac8c:	58024400 	.word	0x58024400
      break;
 800ac90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac98:	4b99      	ldr	r3, [pc, #612]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aca6:	4996      	ldr	r1, [pc, #600]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	658b      	str	r3, [r1, #88]	; 0x58
 800acac:	e001      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d032      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc2:	2b30      	cmp	r3, #48	; 0x30
 800acc4:	d01c      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800acc6:	2b30      	cmp	r3, #48	; 0x30
 800acc8:	d817      	bhi.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 800acca:	2b20      	cmp	r3, #32
 800accc:	d00c      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d813      	bhi.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d016      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800acd6:	2b10      	cmp	r3, #16
 800acd8:	d10f      	bne.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acda:	4b89      	ldr	r3, [pc, #548]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	4a88      	ldr	r2, [pc, #544]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ace0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ace4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ace6:	e00e      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3304      	adds	r3, #4
 800acec:	2102      	movs	r1, #2
 800acee:	4618      	mov	r0, r3
 800acf0:	f001 f866 	bl	800bdc0 <RCCEx_PLL2_Config>
 800acf4:	4603      	mov	r3, r0
 800acf6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800acf8:	e005      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	75fb      	strb	r3, [r7, #23]
      break;
 800acfe:	e002      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ad04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d109      	bne.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad0c:	4b7c      	ldr	r3, [pc, #496]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad18:	4979      	ldr	r1, [pc, #484]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad1e:	e001      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d047      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad38:	d030      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ad3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad3e:	d82a      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ad40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad44:	d02c      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ad46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad4a:	d824      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ad4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad50:	d018      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800ad52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad56:	d81e      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ad5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad60:	d007      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800ad62:	e018      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad64:	4b66      	ldr	r3, [pc, #408]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a65      	ldr	r2, [pc, #404]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad70:	e017      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3304      	adds	r3, #4
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f001 f821 	bl	800bdc0 <RCCEx_PLL2_Config>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad82:	e00e      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3324      	adds	r3, #36	; 0x24
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 f8ca 	bl	800bf24 <RCCEx_PLL3_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad94:	e005      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	75fb      	strb	r3, [r7, #23]
      break;
 800ad9a:	e002      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e000      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ada0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d109      	bne.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ada8:	4b55      	ldr	r3, [pc, #340]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb4:	4952      	ldr	r1, [pc, #328]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800adb6:	4313      	orrs	r3, r2
 800adb8:	650b      	str	r3, [r1, #80]	; 0x50
 800adba:	e001      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d049      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800add4:	d02e      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800add6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adda:	d828      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800addc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade0:	d02a      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ade2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade6:	d822      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ade8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adec:	d026      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800adee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adf2:	d81c      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800adf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adf8:	d010      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800adfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adfe:	d816      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d01d      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d111      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 ffd5 	bl	800bdc0 <RCCEx_PLL2_Config>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ae1a:	e012      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3324      	adds	r3, #36	; 0x24
 800ae20:	2101      	movs	r1, #1
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 f87e 	bl	800bf24 <RCCEx_PLL3_Config>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ae2c:	e009      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
      break;
 800ae32:	e006      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ae34:	bf00      	nop
 800ae36:	e004      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ae38:	bf00      	nop
 800ae3a:	e002      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ae3c:	bf00      	nop
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ae40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae48:	4b2d      	ldr	r3, [pc, #180]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae54:	492a      	ldr	r1, [pc, #168]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	650b      	str	r3, [r1, #80]	; 0x50
 800ae5a:	e001      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d04d      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae76:	d02e      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800ae78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae7c:	d828      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ae7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae82:	d02a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ae84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae88:	d822      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ae8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae8e:	d026      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x526>
 800ae90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae94:	d81c      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ae96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9a:	d010      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ae9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea0:	d816      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01d      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800aea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeaa:	d111      	bne.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 ff84 	bl	800bdc0 <RCCEx_PLL2_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aebc:	e012      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	2101      	movs	r1, #1
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f82d 	bl	800bf24 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aece:	e009      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	75fb      	strb	r3, [r7, #23]
      break;
 800aed4:	e006      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aed6:	bf00      	nop
 800aed8:	e004      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aeda:	bf00      	nop
 800aedc:	e002      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10c      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aeea:	4b05      	ldr	r3, [pc, #20]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aef8:	4901      	ldr	r1, [pc, #4]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	658b      	str	r3, [r1, #88]	; 0x58
 800aefe:	e003      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800af00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d02f      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af1c:	d00e      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800af1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af22:	d814      	bhi.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800af24:	2b00      	cmp	r3, #0
 800af26:	d015      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800af28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af2c:	d10f      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af2e:	4baf      	ldr	r3, [pc, #700]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4aae      	ldr	r2, [pc, #696]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800af3a:	e00c      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	2101      	movs	r1, #1
 800af42:	4618      	mov	r0, r3
 800af44:	f000 ff3c 	bl	800bdc0 <RCCEx_PLL2_Config>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800af4c:	e003      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	75fb      	strb	r3, [r7, #23]
      break;
 800af52:	e000      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800af54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af5c:	4ba3      	ldr	r3, [pc, #652]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af68:	49a0      	ldr	r1, [pc, #640]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	650b      	str	r3, [r1, #80]	; 0x50
 800af6e:	e001      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d032      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af84:	2b03      	cmp	r3, #3
 800af86:	d81b      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800af88:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800afc7 	.word	0x0800afc7
 800af94:	0800afa1 	.word	0x0800afa1
 800af98:	0800afaf 	.word	0x0800afaf
 800af9c:	0800afc7 	.word	0x0800afc7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afa0:	4b92      	ldr	r3, [pc, #584]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	4a91      	ldr	r2, [pc, #580]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800afac:	e00c      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	2102      	movs	r1, #2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 ff03 	bl	800bdc0 <RCCEx_PLL2_Config>
 800afba:	4603      	mov	r3, r0
 800afbc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800afbe:	e003      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	75fb      	strb	r3, [r7, #23]
      break;
 800afc4:	e000      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800afc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800afce:	4b87      	ldr	r3, [pc, #540]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd2:	f023 0203 	bic.w	r2, r3, #3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afda:	4984      	ldr	r1, [pc, #528]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afe0:	e001      	b.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 8086 	beq.w	800b100 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aff4:	4b7e      	ldr	r3, [pc, #504]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a7d      	ldr	r2, [pc, #500]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800affa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800affe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b000:	f7fb fb30 	bl	8006664 <HAL_GetTick>
 800b004:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b006:	e009      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b008:	f7fb fb2c 	bl	8006664 <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	2b64      	cmp	r3, #100	; 0x64
 800b014:	d902      	bls.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	75fb      	strb	r3, [r7, #23]
        break;
 800b01a:	e005      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b01c:	4b74      	ldr	r3, [pc, #464]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0ef      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d166      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b02e:	4b6f      	ldr	r3, [pc, #444]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b038:	4053      	eors	r3, r2
 800b03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d013      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b042:	4b6a      	ldr	r3, [pc, #424]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b04a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b04c:	4b67      	ldr	r3, [pc, #412]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b050:	4a66      	ldr	r2, [pc, #408]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b056:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b058:	4b64      	ldr	r3, [pc, #400]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05c:	4a63      	ldr	r2, [pc, #396]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b05e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b062:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b064:	4a61      	ldr	r2, [pc, #388]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b074:	d115      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b076:	f7fb faf5 	bl	8006664 <HAL_GetTick>
 800b07a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b07c:	e00b      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b07e:	f7fb faf1 	bl	8006664 <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d902      	bls.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	75fb      	strb	r3, [r7, #23]
            break;
 800b094:	e005      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b096:	4b55      	ldr	r3, [pc, #340]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0ed      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d126      	bne.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0b6:	d10d      	bne.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b0b8:	4b4c      	ldr	r3, [pc, #304]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0c6:	0919      	lsrs	r1, r3, #4
 800b0c8:	4b4a      	ldr	r3, [pc, #296]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b0ca:	400b      	ands	r3, r1
 800b0cc:	4947      	ldr	r1, [pc, #284]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	610b      	str	r3, [r1, #16]
 800b0d2:	e005      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b0d4:	4b45      	ldr	r3, [pc, #276]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	4a44      	ldr	r2, [pc, #272]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0de:	6113      	str	r3, [r2, #16]
 800b0e0:	4b42      	ldr	r3, [pc, #264]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0ee:	493f      	ldr	r1, [pc, #252]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	670b      	str	r3, [r1, #112]	; 0x70
 800b0f4:	e004      	b.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	75bb      	strb	r3, [r7, #22]
 800b0fa:	e001      	b.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 8085 	beq.w	800b218 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b112:	2b28      	cmp	r3, #40	; 0x28
 800b114:	d866      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b116:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b1f9 	.word	0x0800b1f9
 800b120:	0800b1e5 	.word	0x0800b1e5
 800b124:	0800b1e5 	.word	0x0800b1e5
 800b128:	0800b1e5 	.word	0x0800b1e5
 800b12c:	0800b1e5 	.word	0x0800b1e5
 800b130:	0800b1e5 	.word	0x0800b1e5
 800b134:	0800b1e5 	.word	0x0800b1e5
 800b138:	0800b1e5 	.word	0x0800b1e5
 800b13c:	0800b1c1 	.word	0x0800b1c1
 800b140:	0800b1e5 	.word	0x0800b1e5
 800b144:	0800b1e5 	.word	0x0800b1e5
 800b148:	0800b1e5 	.word	0x0800b1e5
 800b14c:	0800b1e5 	.word	0x0800b1e5
 800b150:	0800b1e5 	.word	0x0800b1e5
 800b154:	0800b1e5 	.word	0x0800b1e5
 800b158:	0800b1e5 	.word	0x0800b1e5
 800b15c:	0800b1d3 	.word	0x0800b1d3
 800b160:	0800b1e5 	.word	0x0800b1e5
 800b164:	0800b1e5 	.word	0x0800b1e5
 800b168:	0800b1e5 	.word	0x0800b1e5
 800b16c:	0800b1e5 	.word	0x0800b1e5
 800b170:	0800b1e5 	.word	0x0800b1e5
 800b174:	0800b1e5 	.word	0x0800b1e5
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b1f9 	.word	0x0800b1f9
 800b180:	0800b1e5 	.word	0x0800b1e5
 800b184:	0800b1e5 	.word	0x0800b1e5
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b1e5 	.word	0x0800b1e5
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b1e5 	.word	0x0800b1e5
 800b198:	0800b1e5 	.word	0x0800b1e5
 800b19c:	0800b1f9 	.word	0x0800b1f9
 800b1a0:	0800b1e5 	.word	0x0800b1e5
 800b1a4:	0800b1e5 	.word	0x0800b1e5
 800b1a8:	0800b1e5 	.word	0x0800b1e5
 800b1ac:	0800b1e5 	.word	0x0800b1e5
 800b1b0:	0800b1e5 	.word	0x0800b1e5
 800b1b4:	0800b1e5 	.word	0x0800b1e5
 800b1b8:	0800b1e5 	.word	0x0800b1e5
 800b1bc:	0800b1f9 	.word	0x0800b1f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fdfa 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b1d0:	e013      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3324      	adds	r3, #36	; 0x24
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fea3 	bl	800bf24 <RCCEx_PLL3_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b1e2:	e00a      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e8:	e007      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b1ea:	bf00      	nop
 800b1ec:	58024400 	.word	0x58024400
 800b1f0:	58024800 	.word	0x58024800
 800b1f4:	00ffffcf 	.word	0x00ffffcf
      break;
 800b1f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d109      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b200:	4b96      	ldr	r3, [pc, #600]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b204:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b20c:	4993      	ldr	r1, [pc, #588]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	654b      	str	r3, [r1, #84]	; 0x54
 800b212:	e001      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0302 	and.w	r3, r3, #2
 800b220:	2b00      	cmp	r3, #0
 800b222:	d038      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b228:	2b05      	cmp	r3, #5
 800b22a:	d821      	bhi.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b277 	.word	0x0800b277
 800b238:	0800b24d 	.word	0x0800b24d
 800b23c:	0800b25f 	.word	0x0800b25f
 800b240:	0800b277 	.word	0x0800b277
 800b244:	0800b277 	.word	0x0800b277
 800b248:	0800b277 	.word	0x0800b277
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3304      	adds	r3, #4
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fdb4 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b25c:	e00c      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3324      	adds	r3, #36	; 0x24
 800b262:	2101      	movs	r1, #1
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fe5d 	bl	800bf24 <RCCEx_PLL3_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b26e:	e003      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	75fb      	strb	r3, [r7, #23]
      break;
 800b274:	e000      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b276:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d109      	bne.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b27e:	4b77      	ldr	r3, [pc, #476]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b282:	f023 0207 	bic.w	r2, r3, #7
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b28a:	4974      	ldr	r1, [pc, #464]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	654b      	str	r3, [r1, #84]	; 0x54
 800b290:	e001      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0304 	and.w	r3, r3, #4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d03a      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2a8:	2b05      	cmp	r3, #5
 800b2aa:	d821      	bhi.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b2f7 	.word	0x0800b2f7
 800b2b8:	0800b2cd 	.word	0x0800b2cd
 800b2bc:	0800b2df 	.word	0x0800b2df
 800b2c0:	0800b2f7 	.word	0x0800b2f7
 800b2c4:	0800b2f7 	.word	0x0800b2f7
 800b2c8:	0800b2f7 	.word	0x0800b2f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fd74 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b2dc:	e00c      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3324      	adds	r3, #36	; 0x24
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 fe1d 	bl	800bf24 <RCCEx_PLL3_Config>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b2ee:	e003      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f4:	e000      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b2f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10a      	bne.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2fe:	4b57      	ldr	r3, [pc, #348]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b302:	f023 0207 	bic.w	r2, r3, #7
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30c:	4953      	ldr	r1, [pc, #332]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	658b      	str	r3, [r1, #88]	; 0x58
 800b312:	e001      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0320 	and.w	r3, r3, #32
 800b320:	2b00      	cmp	r3, #0
 800b322:	d04b      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b32e:	d02e      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b334:	d828      	bhi.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33a:	d02a      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b340:	d822      	bhi.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b346:	d026      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b34c:	d81c      	bhi.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b352:	d010      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b358:	d816      	bhi.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d01d      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b35e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b362:	d111      	bne.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3304      	adds	r3, #4
 800b368:	2100      	movs	r1, #0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 fd28 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b370:	4603      	mov	r3, r0
 800b372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b374:	e012      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3324      	adds	r3, #36	; 0x24
 800b37a:	2102      	movs	r1, #2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fdd1 	bl	800bf24 <RCCEx_PLL3_Config>
 800b382:	4603      	mov	r3, r0
 800b384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b386:	e009      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	75fb      	strb	r3, [r7, #23]
      break;
 800b38c:	e006      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b38e:	bf00      	nop
 800b390:	e004      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b392:	bf00      	nop
 800b394:	e002      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b396:	bf00      	nop
 800b398:	e000      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b39a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3a2:	4b2e      	ldr	r3, [pc, #184]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3b0:	492a      	ldr	r1, [pc, #168]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	654b      	str	r3, [r1, #84]	; 0x54
 800b3b6:	e001      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d04d      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3d2:	d02e      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b3d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3d8:	d828      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3de:	d02a      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e4:	d822      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b3e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3ea:	d026      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b3ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3f0:	d81c      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b3f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3f6:	d010      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3fc:	d816      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d01d      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b406:	d111      	bne.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3304      	adds	r3, #4
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fcd6 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b414:	4603      	mov	r3, r0
 800b416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b418:	e012      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3324      	adds	r3, #36	; 0x24
 800b41e:	2102      	movs	r1, #2
 800b420:	4618      	mov	r0, r3
 800b422:	f000 fd7f 	bl	800bf24 <RCCEx_PLL3_Config>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b42a:	e009      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	75fb      	strb	r3, [r7, #23]
      break;
 800b430:	e006      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b432:	bf00      	nop
 800b434:	e004      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b436:	bf00      	nop
 800b438:	e002      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b43e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10c      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b454:	4901      	ldr	r1, [pc, #4]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b456:	4313      	orrs	r3, r2
 800b458:	658b      	str	r3, [r1, #88]	; 0x58
 800b45a:	e003      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b45c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d04b      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b47a:	d02e      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b47c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b480:	d828      	bhi.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b486:	d02a      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b48c:	d822      	bhi.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b48e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b492:	d026      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b498:	d81c      	bhi.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b49a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b49e:	d010      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b4a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a4:	d816      	bhi.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d01d      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ae:	d111      	bne.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fc82 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b4c0:	e012      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	3324      	adds	r3, #36	; 0x24
 800b4c6:	2102      	movs	r1, #2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fd2b 	bl	800bf24 <RCCEx_PLL3_Config>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b4d2:	e009      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d8:	e006      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b4da:	bf00      	nop
 800b4dc:	e004      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b4de:	bf00      	nop
 800b4e0:	e002      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b4e2:	bf00      	nop
 800b4e4:	e000      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b4e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4ee:	4b9d      	ldr	r3, [pc, #628]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4fc:	4999      	ldr	r1, [pc, #612]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	658b      	str	r3, [r1, #88]	; 0x58
 800b502:	e001      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b00      	cmp	r3, #0
 800b512:	d01a      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b51e:	d10a      	bne.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3324      	adds	r3, #36	; 0x24
 800b524:	2102      	movs	r1, #2
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fcfc 	bl	800bf24 <RCCEx_PLL3_Config>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b536:	4b8b      	ldr	r3, [pc, #556]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b544:	4987      	ldr	r1, [pc, #540]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b546:	4313      	orrs	r3, r2
 800b548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0310 	and.w	r3, r3, #16
 800b552:	2b00      	cmp	r3, #0
 800b554:	d01a      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b560:	d10a      	bne.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fcdb 	bl	800bf24 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b578:	4b7a      	ldr	r3, [pc, #488]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b586:	4977      	ldr	r1, [pc, #476]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d034      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b59e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a2:	d01d      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b5a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a8:	d817      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b5ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5b2:	d009      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b5b4:	e011      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fbff 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b5c6:	e00c      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3324      	adds	r3, #36	; 0x24
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fca8 	bl	800bf24 <RCCEx_PLL3_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b5d8:	e003      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b5de:	e000      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b5e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5e8:	4b5e      	ldr	r3, [pc, #376]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5f6:	495b      	ldr	r1, [pc, #364]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	658b      	str	r3, [r1, #88]	; 0x58
 800b5fc:	e001      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d033      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b618:	d01c      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b61a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b61e:	d816      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b624:	d003      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b62a:	d007      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b62c:	e00f      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b62e:	4b4d      	ldr	r3, [pc, #308]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	4a4c      	ldr	r2, [pc, #304]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b63a:	e00c      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3324      	adds	r3, #36	; 0x24
 800b640:	2101      	movs	r1, #1
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fc6e 	bl	800bf24 <RCCEx_PLL3_Config>
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b64c:	e003      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	75fb      	strb	r3, [r7, #23]
      break;
 800b652:	e000      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b654:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10a      	bne.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b65c:	4b41      	ldr	r3, [pc, #260]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b66a:	493e      	ldr	r1, [pc, #248]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b66c:	4313      	orrs	r3, r2
 800b66e:	654b      	str	r3, [r1, #84]	; 0x54
 800b670:	e001      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d029      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68e:	d007      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b690:	e00f      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b692:	4b34      	ldr	r3, [pc, #208]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b696:	4a33      	ldr	r2, [pc, #204]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b69e:	e00b      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 fb8a 	bl	800bdc0 <RCCEx_PLL2_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b6b0:	e002      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6be:	4b29      	ldr	r3, [pc, #164]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ca:	4926      	ldr	r1, [pc, #152]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b6d0:	e001      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3324      	adds	r3, #36	; 0x24
 800b6e6:	2102      	movs	r1, #2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fc1b 	bl	800bf24 <RCCEx_PLL3_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d033      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b70c:	d017      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b70e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b712:	d811      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b718:	d013      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b71a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b71e:	d80b      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d010      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b728:	d106      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b72a:	4b0e      	ldr	r3, [pc, #56]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	4a0d      	ldr	r2, [pc, #52]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b736:	e007      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	75fb      	strb	r3, [r7, #23]
      break;
 800b73c:	e004      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b73e:	bf00      	nop
 800b740:	e002      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b742:	bf00      	nop
 800b744:	e000      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b746:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10c      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75a:	4902      	ldr	r1, [pc, #8]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	654b      	str	r3, [r1, #84]	; 0x54
 800b760:	e004      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b762:	bf00      	nop
 800b764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d008      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b778:	4b31      	ldr	r3, [pc, #196]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b784:	492e      	ldr	r1, [pc, #184]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b786:	4313      	orrs	r3, r2
 800b788:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b796:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7a4:	4926      	ldr	r1, [pc, #152]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d008      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7b6:	4b22      	ldr	r3, [pc, #136]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7c2:	491f      	ldr	r1, [pc, #124]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00d      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	4a19      	ldr	r2, [pc, #100]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b7de:	6113      	str	r3, [r2, #16]
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b7ea:	4915      	ldr	r1, [pc, #84]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	da08      	bge.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b7f8:	4b11      	ldr	r3, [pc, #68]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b804:	490e      	ldr	r1, [pc, #56]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b806:	4313      	orrs	r3, r2
 800b808:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b824:	4906      	ldr	r1, [pc, #24]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b826:	4313      	orrs	r3, r2
 800b828:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b82a:	7dbb      	ldrb	r3, [r7, #22]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	e000      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	58024400 	.word	0x58024400

0800b844 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b848:	f7ff f85a 	bl	800a900 <HAL_RCC_GetHCLKFreq>
 800b84c:	4602      	mov	r2, r0
 800b84e:	4b06      	ldr	r3, [pc, #24]	; (800b868 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	091b      	lsrs	r3, r3, #4
 800b854:	f003 0307 	and.w	r3, r3, #7
 800b858:	4904      	ldr	r1, [pc, #16]	; (800b86c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b85a:	5ccb      	ldrb	r3, [r1, r3]
 800b85c:	f003 031f 	and.w	r3, r3, #31
 800b860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b864:	4618      	mov	r0, r3
 800b866:	bd80      	pop	{r7, pc}
 800b868:	58024400 	.word	0x58024400
 800b86c:	08014088 	.word	0x08014088

0800b870 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	; 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b878:	4ba1      	ldr	r3, [pc, #644]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b882:	4b9f      	ldr	r3, [pc, #636]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b886:	0b1b      	lsrs	r3, r3, #12
 800b888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b88c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b88e:	4b9c      	ldr	r3, [pc, #624]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	091b      	lsrs	r3, r3, #4
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b89a:	4b99      	ldr	r3, [pc, #612]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89e:	08db      	lsrs	r3, r3, #3
 800b8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 8111 	beq.w	800bae0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	f000 8083 	beq.w	800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	f200 80a1 	bhi.w	800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d056      	beq.n	800b988 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b8da:	e099      	b.n	800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8dc:	4b88      	ldr	r3, [pc, #544]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0320 	and.w	r3, r3, #32
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d02d      	beq.n	800b944 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8e8:	4b85      	ldr	r3, [pc, #532]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	08db      	lsrs	r3, r3, #3
 800b8ee:	f003 0303 	and.w	r3, r3, #3
 800b8f2:	4a84      	ldr	r2, [pc, #528]	; (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	ee07 3a90 	vmov	s15, r3
 800b900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b912:	4b7b      	ldr	r3, [pc, #492]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91a:	ee07 3a90 	vmov	s15, r3
 800b91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b922:	ed97 6a03 	vldr	s12, [r7, #12]
 800b926:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b942:	e087      	b.n	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	ee07 3a90 	vmov	s15, r3
 800b94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b956:	4b6a      	ldr	r3, [pc, #424]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b966:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b986:	e065      	b.n	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b992:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99a:	4b59      	ldr	r3, [pc, #356]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a2:	ee07 3a90 	vmov	s15, r3
 800b9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9ca:	e043      	b.n	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9de:	4b48      	ldr	r3, [pc, #288]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba0e:	e021      	b.n	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba22:	4b37      	ldr	r3, [pc, #220]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ba54:	4b2a      	ldr	r3, [pc, #168]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	0a5b      	lsrs	r3, r3, #9
 800ba5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5e:	ee07 3a90 	vmov	s15, r3
 800ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7a:	ee17 2a90 	vmov	r2, s15
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ba82:	4b1f      	ldr	r3, [pc, #124]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba86:	0c1b      	lsrs	r3, r3, #16
 800ba88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa8:	ee17 2a90 	vmov	r2, s15
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bab0:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	0e1b      	lsrs	r3, r3, #24
 800bab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad6:	ee17 2a90 	vmov	r2, s15
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bade:	e008      	b.n	800baf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	609a      	str	r2, [r3, #8]
}
 800baf2:	bf00      	nop
 800baf4:	3724      	adds	r7, #36	; 0x24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	58024400 	.word	0x58024400
 800bb04:	03d09000 	.word	0x03d09000
 800bb08:	46000000 	.word	0x46000000
 800bb0c:	4c742400 	.word	0x4c742400
 800bb10:	4a742400 	.word	0x4a742400
 800bb14:	4bbebc20 	.word	0x4bbebc20

0800bb18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b089      	sub	sp, #36	; 0x24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb20:	4ba1      	ldr	r3, [pc, #644]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb24:	f003 0303 	and.w	r3, r3, #3
 800bb28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bb2a:	4b9f      	ldr	r3, [pc, #636]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	0d1b      	lsrs	r3, r3, #20
 800bb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bb36:	4b9c      	ldr	r3, [pc, #624]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3a:	0a1b      	lsrs	r3, r3, #8
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bb42:	4b99      	ldr	r3, [pc, #612]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	08db      	lsrs	r3, r3, #3
 800bb48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	fb02 f303 	mul.w	r3, r2, r3
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8111 	beq.w	800bd88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	f000 8083 	beq.w	800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	f200 80a1 	bhi.w	800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d056      	beq.n	800bc30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb82:	e099      	b.n	800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb84:	4b88      	ldr	r3, [pc, #544]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0320 	and.w	r3, r3, #32
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d02d      	beq.n	800bbec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb90:	4b85      	ldr	r3, [pc, #532]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	08db      	lsrs	r3, r3, #3
 800bb96:	f003 0303 	and.w	r3, r3, #3
 800bb9a:	4a84      	ldr	r2, [pc, #528]	; (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bba0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	ee07 3a90 	vmov	s15, r3
 800bba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbba:	4b7b      	ldr	r3, [pc, #492]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc2:	ee07 3a90 	vmov	s15, r3
 800bbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbe6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bbea:	e087      	b.n	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfe:	4b6a      	ldr	r3, [pc, #424]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc2e:	e065      	b.n	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc42:	4b59      	ldr	r3, [pc, #356]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc72:	e043      	b.n	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bdbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc86:	4b48      	ldr	r3, [pc, #288]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcb6:	e021      	b.n	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	4b37      	ldr	r3, [pc, #220]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bcfc:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd00:	0a5b      	lsrs	r3, r3, #9
 800bd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd06:	ee07 3a90 	vmov	s15, r3
 800bd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd22:	ee17 2a90 	vmov	r2, s15
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bd2a:	4b1f      	ldr	r3, [pc, #124]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	0c1b      	lsrs	r3, r3, #16
 800bd30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd34:	ee07 3a90 	vmov	s15, r3
 800bd38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd44:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd50:	ee17 2a90 	vmov	r2, s15
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bd58:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5c:	0e1b      	lsrs	r3, r3, #24
 800bd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd62:	ee07 3a90 	vmov	s15, r3
 800bd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd72:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd7e:	ee17 2a90 	vmov	r2, s15
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd86:	e008      	b.n	800bd9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	609a      	str	r2, [r3, #8]
}
 800bd9a:	bf00      	nop
 800bd9c:	3724      	adds	r7, #36	; 0x24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	58024400 	.word	0x58024400
 800bdac:	03d09000 	.word	0x03d09000
 800bdb0:	46000000 	.word	0x46000000
 800bdb4:	4c742400 	.word	0x4c742400
 800bdb8:	4a742400 	.word	0x4a742400
 800bdbc:	4bbebc20 	.word	0x4bbebc20

0800bdc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdce:	4b53      	ldr	r3, [pc, #332]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd2:	f003 0303 	and.w	r3, r3, #3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d101      	bne.n	800bdde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e099      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bdde:	4b4f      	ldr	r3, [pc, #316]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a4e      	ldr	r2, [pc, #312]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bde4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bde8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdea:	f7fa fc3b 	bl	8006664 <HAL_GetTick>
 800bdee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdf0:	e008      	b.n	800be04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bdf2:	f7fa fc37 	bl	8006664 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d901      	bls.n	800be04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e086      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be04:	4b45      	ldr	r3, [pc, #276]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1f0      	bne.n	800bdf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be10:	4b42      	ldr	r3, [pc, #264]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	031b      	lsls	r3, r3, #12
 800be1e:	493f      	ldr	r1, [pc, #252]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be20:	4313      	orrs	r3, r2
 800be22:	628b      	str	r3, [r1, #40]	; 0x28
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	3b01      	subs	r3, #1
 800be2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	3b01      	subs	r3, #1
 800be34:	025b      	lsls	r3, r3, #9
 800be36:	b29b      	uxth	r3, r3
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	3b01      	subs	r3, #1
 800be40:	041b      	lsls	r3, r3, #16
 800be42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be46:	431a      	orrs	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	061b      	lsls	r3, r3, #24
 800be50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be54:	4931      	ldr	r1, [pc, #196]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be56:	4313      	orrs	r3, r2
 800be58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be5a:	4b30      	ldr	r3, [pc, #192]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	492d      	ldr	r1, [pc, #180]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be6c:	4b2b      	ldr	r3, [pc, #172]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	f023 0220 	bic.w	r2, r3, #32
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	4928      	ldr	r1, [pc, #160]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be7e:	4b27      	ldr	r3, [pc, #156]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	4a26      	ldr	r2, [pc, #152]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be84:	f023 0310 	bic.w	r3, r3, #16
 800be88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be8e:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <RCCEx_PLL2_Config+0x160>)
 800be90:	4013      	ands	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	69d2      	ldr	r2, [r2, #28]
 800be96:	00d2      	lsls	r2, r2, #3
 800be98:	4920      	ldr	r1, [pc, #128]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be9e:	4b1f      	ldr	r3, [pc, #124]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	4a1e      	ldr	r2, [pc, #120]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bea4:	f043 0310 	orr.w	r3, r3, #16
 800bea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800beb0:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	4a19      	ldr	r2, [pc, #100]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bebc:	e00f      	b.n	800bede <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d106      	bne.n	800bed2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bec4:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec8:	4a14      	ldr	r2, [pc, #80]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bece:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed0:	e005      	b.n	800bede <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bed2:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	4a11      	ldr	r2, [pc, #68]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bedc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bede:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a0e      	ldr	r2, [pc, #56]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beea:	f7fa fbbb 	bl	8006664 <HAL_GetTick>
 800beee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bef0:	e008      	b.n	800bf04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bef2:	f7fa fbb7 	bl	8006664 <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e006      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0f0      	beq.n	800bef2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	58024400 	.word	0x58024400
 800bf20:	ffff0007 	.word	0xffff0007

0800bf24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf32:	4b53      	ldr	r3, [pc, #332]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d101      	bne.n	800bf42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e099      	b.n	800c076 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf42:	4b4f      	ldr	r3, [pc, #316]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a4e      	ldr	r2, [pc, #312]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf4e:	f7fa fb89 	bl	8006664 <HAL_GetTick>
 800bf52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf54:	e008      	b.n	800bf68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bf56:	f7fa fb85 	bl	8006664 <HAL_GetTick>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d901      	bls.n	800bf68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e086      	b.n	800c076 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf68:	4b45      	ldr	r3, [pc, #276]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1f0      	bne.n	800bf56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf74:	4b42      	ldr	r3, [pc, #264]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	051b      	lsls	r3, r3, #20
 800bf82:	493f      	ldr	r1, [pc, #252]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	628b      	str	r3, [r1, #40]	; 0x28
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	025b      	lsls	r3, r3, #9
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	041b      	lsls	r3, r3, #16
 800bfa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	061b      	lsls	r3, r3, #24
 800bfb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfb8:	4931      	ldr	r1, [pc, #196]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bfbe:	4b30      	ldr	r3, [pc, #192]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	492d      	ldr	r1, [pc, #180]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfd0:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	4928      	ldr	r1, [pc, #160]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfe2:	4b27      	ldr	r3, [pc, #156]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	4a26      	ldr	r2, [pc, #152]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <RCCEx_PLL3_Config+0x160>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	69d2      	ldr	r2, [r2, #28]
 800bffa:	00d2      	lsls	r2, r2, #3
 800bffc:	4920      	ldr	r1, [pc, #128]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c002:	4b1f      	ldr	r3, [pc, #124]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	4a1e      	ldr	r2, [pc, #120]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	4a19      	ldr	r2, [pc, #100]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c01a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c020:	e00f      	b.n	800c042 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d106      	bne.n	800c036 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c028:	4b15      	ldr	r3, [pc, #84]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4a14      	ldr	r2, [pc, #80]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c02e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c032:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c034:	e005      	b.n	800c042 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c036:	4b12      	ldr	r3, [pc, #72]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	4a11      	ldr	r2, [pc, #68]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c03c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c042:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a0e      	ldr	r2, [pc, #56]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c04e:	f7fa fb09 	bl	8006664 <HAL_GetTick>
 800c052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c054:	e008      	b.n	800c068 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c056:	f7fa fb05 	bl	8006664 <HAL_GetTick>
 800c05a:	4602      	mov	r2, r0
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	2b02      	cmp	r3, #2
 800c062:	d901      	bls.n	800c068 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e006      	b.n	800c076 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f0      	beq.n	800c056 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	58024400 	.word	0x58024400
 800c084:	ffff0007 	.word	0xffff0007

0800c088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e049      	b.n	800c12e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7f8 f8fe 	bl	80042b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f001 fb5c 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d001      	beq.n	800c150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e04c      	b.n	800c1ea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a26      	ldr	r2, [pc, #152]	; (800c1f8 <HAL_TIM_Base_Start+0xc0>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d022      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c16a:	d01d      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a22      	ldr	r2, [pc, #136]	; (800c1fc <HAL_TIM_Base_Start+0xc4>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d018      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a21      	ldr	r2, [pc, #132]	; (800c200 <HAL_TIM_Base_Start+0xc8>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d013      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a1f      	ldr	r2, [pc, #124]	; (800c204 <HAL_TIM_Base_Start+0xcc>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d00e      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a1e      	ldr	r2, [pc, #120]	; (800c208 <HAL_TIM_Base_Start+0xd0>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d009      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a1c      	ldr	r2, [pc, #112]	; (800c20c <HAL_TIM_Base_Start+0xd4>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d004      	beq.n	800c1a8 <HAL_TIM_Base_Start+0x70>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a1b      	ldr	r2, [pc, #108]	; (800c210 <HAL_TIM_Base_Start+0xd8>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d115      	bne.n	800c1d4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	4b19      	ldr	r3, [pc, #100]	; (800c214 <HAL_TIM_Base_Start+0xdc>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b06      	cmp	r3, #6
 800c1b8:	d015      	beq.n	800c1e6 <HAL_TIM_Base_Start+0xae>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c0:	d011      	beq.n	800c1e6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f042 0201 	orr.w	r2, r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1d2:	e008      	b.n	800c1e6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f042 0201 	orr.w	r2, r2, #1
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e000      	b.n	800c1e8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	40010000 	.word	0x40010000
 800c1fc:	40000400 	.word	0x40000400
 800c200:	40000800 	.word	0x40000800
 800c204:	40000c00 	.word	0x40000c00
 800c208:	40010400 	.word	0x40010400
 800c20c:	40001800 	.word	0x40001800
 800c210:	40014000 	.word	0x40014000
 800c214:	00010007 	.word	0x00010007

0800c218 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6a1a      	ldr	r2, [r3, #32]
 800c226:	f241 1311 	movw	r3, #4369	; 0x1111
 800c22a:	4013      	ands	r3, r2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10f      	bne.n	800c250 <HAL_TIM_Base_Stop+0x38>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6a1a      	ldr	r2, [r3, #32]
 800c236:	f240 4344 	movw	r3, #1092	; 0x444
 800c23a:	4013      	ands	r3, r2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d107      	bne.n	800c250 <HAL_TIM_Base_Stop+0x38>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f022 0201 	bic.w	r2, r2, #1
 800c24e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
	...

0800c268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d001      	beq.n	800c280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e054      	b.n	800c32a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f042 0201 	orr.w	r2, r2, #1
 800c296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a26      	ldr	r2, [pc, #152]	; (800c338 <HAL_TIM_Base_Start_IT+0xd0>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d022      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2aa:	d01d      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a22      	ldr	r2, [pc, #136]	; (800c33c <HAL_TIM_Base_Start_IT+0xd4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d018      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a21      	ldr	r2, [pc, #132]	; (800c340 <HAL_TIM_Base_Start_IT+0xd8>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d013      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a1f      	ldr	r2, [pc, #124]	; (800c344 <HAL_TIM_Base_Start_IT+0xdc>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d00e      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <HAL_TIM_Base_Start_IT+0xe0>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d009      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a1c      	ldr	r2, [pc, #112]	; (800c34c <HAL_TIM_Base_Start_IT+0xe4>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d004      	beq.n	800c2e8 <HAL_TIM_Base_Start_IT+0x80>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <HAL_TIM_Base_Start_IT+0xe8>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d115      	bne.n	800c314 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	4b19      	ldr	r3, [pc, #100]	; (800c354 <HAL_TIM_Base_Start_IT+0xec>)
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b06      	cmp	r3, #6
 800c2f8:	d015      	beq.n	800c326 <HAL_TIM_Base_Start_IT+0xbe>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c300:	d011      	beq.n	800c326 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f042 0201 	orr.w	r2, r2, #1
 800c310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c312:	e008      	b.n	800c326 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0201 	orr.w	r2, r2, #1
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	e000      	b.n	800c328 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	40010000 	.word	0x40010000
 800c33c:	40000400 	.word	0x40000400
 800c340:	40000800 	.word	0x40000800
 800c344:	40000c00 	.word	0x40000c00
 800c348:	40010400 	.word	0x40010400
 800c34c:	40001800 	.word	0x40001800
 800c350:	40014000 	.word	0x40014000
 800c354:	00010007 	.word	0x00010007

0800c358 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f022 0201 	bic.w	r2, r2, #1
 800c36e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6a1a      	ldr	r2, [r3, #32]
 800c376:	f241 1311 	movw	r3, #4369	; 0x1111
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10f      	bne.n	800c3a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6a1a      	ldr	r2, [r3, #32]
 800c386:	f240 4344 	movw	r3, #1092	; 0x444
 800c38a:	4013      	ands	r3, r2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d107      	bne.n	800c3a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f022 0201 	bic.w	r2, r2, #1
 800c39e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e049      	b.n	800c45c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f841 	bl	800c464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2202      	movs	r2, #2
 800c3e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	f001 f9c5 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <HAL_TIM_PWM_Start+0x24>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	bf14      	ite	ne
 800c494:	2301      	movne	r3, #1
 800c496:	2300      	moveq	r3, #0
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	e03c      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	d109      	bne.n	800c4b6 <HAL_TIM_PWM_Start+0x3e>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	bf14      	ite	ne
 800c4ae:	2301      	movne	r3, #1
 800c4b0:	2300      	moveq	r3, #0
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	e02f      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d109      	bne.n	800c4d0 <HAL_TIM_PWM_Start+0x58>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	bf14      	ite	ne
 800c4c8:	2301      	movne	r3, #1
 800c4ca:	2300      	moveq	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	e022      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b0c      	cmp	r3, #12
 800c4d4:	d109      	bne.n	800c4ea <HAL_TIM_PWM_Start+0x72>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	bf14      	ite	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	2300      	moveq	r3, #0
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	e015      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b10      	cmp	r3, #16
 800c4ee:	d109      	bne.n	800c504 <HAL_TIM_PWM_Start+0x8c>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	bf14      	ite	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	2300      	moveq	r3, #0
 800c500:	b2db      	uxtb	r3, r3
 800c502:	e008      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	bf14      	ite	ne
 800c510:	2301      	movne	r3, #1
 800c512:	2300      	moveq	r3, #0
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e0a1      	b.n	800c662 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <HAL_TIM_PWM_Start+0xb6>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2202      	movs	r2, #2
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c52c:	e023      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d104      	bne.n	800c53e <HAL_TIM_PWM_Start+0xc6>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2202      	movs	r2, #2
 800c538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c53c:	e01b      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b08      	cmp	r3, #8
 800c542:	d104      	bne.n	800c54e <HAL_TIM_PWM_Start+0xd6>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c54c:	e013      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b0c      	cmp	r3, #12
 800c552:	d104      	bne.n	800c55e <HAL_TIM_PWM_Start+0xe6>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c55c:	e00b      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b10      	cmp	r3, #16
 800c562:	d104      	bne.n	800c56e <HAL_TIM_PWM_Start+0xf6>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c56c:	e003      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2202      	movs	r2, #2
 800c572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2201      	movs	r2, #1
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f001 fe38 	bl	800e1f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a38      	ldr	r2, [pc, #224]	; (800c66c <HAL_TIM_PWM_Start+0x1f4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d013      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a37      	ldr	r2, [pc, #220]	; (800c670 <HAL_TIM_PWM_Start+0x1f8>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00e      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a35      	ldr	r2, [pc, #212]	; (800c674 <HAL_TIM_PWM_Start+0x1fc>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a34      	ldr	r2, [pc, #208]	; (800c678 <HAL_TIM_PWM_Start+0x200>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d004      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a32      	ldr	r2, [pc, #200]	; (800c67c <HAL_TIM_PWM_Start+0x204>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d101      	bne.n	800c5ba <HAL_TIM_PWM_Start+0x142>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <HAL_TIM_PWM_Start+0x144>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a25      	ldr	r2, [pc, #148]	; (800c66c <HAL_TIM_PWM_Start+0x1f4>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d022      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5e2:	d01d      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a25      	ldr	r2, [pc, #148]	; (800c680 <HAL_TIM_PWM_Start+0x208>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d018      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a24      	ldr	r2, [pc, #144]	; (800c684 <HAL_TIM_PWM_Start+0x20c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d013      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a22      	ldr	r2, [pc, #136]	; (800c688 <HAL_TIM_PWM_Start+0x210>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d00e      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a1a      	ldr	r2, [pc, #104]	; (800c670 <HAL_TIM_PWM_Start+0x1f8>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d009      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1e      	ldr	r2, [pc, #120]	; (800c68c <HAL_TIM_PWM_Start+0x214>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d004      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a16      	ldr	r2, [pc, #88]	; (800c674 <HAL_TIM_PWM_Start+0x1fc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d115      	bne.n	800c64c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	689a      	ldr	r2, [r3, #8]
 800c626:	4b1a      	ldr	r3, [pc, #104]	; (800c690 <HAL_TIM_PWM_Start+0x218>)
 800c628:	4013      	ands	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b06      	cmp	r3, #6
 800c630:	d015      	beq.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c638:	d011      	beq.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f042 0201 	orr.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c64a:	e008      	b.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0201 	orr.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e000      	b.n	800c660 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c65e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	40010000 	.word	0x40010000
 800c670:	40010400 	.word	0x40010400
 800c674:	40014000 	.word	0x40014000
 800c678:	40014400 	.word	0x40014400
 800c67c:	40014800 	.word	0x40014800
 800c680:	40000400 	.word	0x40000400
 800c684:	40000800 	.word	0x40000800
 800c688:	40000c00 	.word	0x40000c00
 800c68c:	40001800 	.word	0x40001800
 800c690:	00010007 	.word	0x00010007

0800c694 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 fda4 	bl	800e1f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a3e      	ldr	r2, [pc, #248]	; (800c7ac <HAL_TIM_PWM_Stop+0x118>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d013      	beq.n	800c6de <HAL_TIM_PWM_Stop+0x4a>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a3d      	ldr	r2, [pc, #244]	; (800c7b0 <HAL_TIM_PWM_Stop+0x11c>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d00e      	beq.n	800c6de <HAL_TIM_PWM_Stop+0x4a>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a3b      	ldr	r2, [pc, #236]	; (800c7b4 <HAL_TIM_PWM_Stop+0x120>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d009      	beq.n	800c6de <HAL_TIM_PWM_Stop+0x4a>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a3a      	ldr	r2, [pc, #232]	; (800c7b8 <HAL_TIM_PWM_Stop+0x124>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d004      	beq.n	800c6de <HAL_TIM_PWM_Stop+0x4a>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a38      	ldr	r2, [pc, #224]	; (800c7bc <HAL_TIM_PWM_Stop+0x128>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d101      	bne.n	800c6e2 <HAL_TIM_PWM_Stop+0x4e>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e000      	b.n	800c6e4 <HAL_TIM_PWM_Stop+0x50>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d017      	beq.n	800c718 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6a1a      	ldr	r2, [r3, #32]
 800c6ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10f      	bne.n	800c718 <HAL_TIM_PWM_Stop+0x84>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6a1a      	ldr	r2, [r3, #32]
 800c6fe:	f240 4344 	movw	r3, #1092	; 0x444
 800c702:	4013      	ands	r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d107      	bne.n	800c718 <HAL_TIM_PWM_Stop+0x84>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c716:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c722:	4013      	ands	r3, r2
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10f      	bne.n	800c748 <HAL_TIM_PWM_Stop+0xb4>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6a1a      	ldr	r2, [r3, #32]
 800c72e:	f240 4344 	movw	r3, #1092	; 0x444
 800c732:	4013      	ands	r3, r2
 800c734:	2b00      	cmp	r3, #0
 800c736:	d107      	bne.n	800c748 <HAL_TIM_PWM_Stop+0xb4>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f022 0201 	bic.w	r2, r2, #1
 800c746:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <HAL_TIM_PWM_Stop+0xc4>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c756:	e023      	b.n	800c7a0 <HAL_TIM_PWM_Stop+0x10c>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b04      	cmp	r3, #4
 800c75c:	d104      	bne.n	800c768 <HAL_TIM_PWM_Stop+0xd4>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c766:	e01b      	b.n	800c7a0 <HAL_TIM_PWM_Stop+0x10c>
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b08      	cmp	r3, #8
 800c76c:	d104      	bne.n	800c778 <HAL_TIM_PWM_Stop+0xe4>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c776:	e013      	b.n	800c7a0 <HAL_TIM_PWM_Stop+0x10c>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b0c      	cmp	r3, #12
 800c77c:	d104      	bne.n	800c788 <HAL_TIM_PWM_Stop+0xf4>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c786:	e00b      	b.n	800c7a0 <HAL_TIM_PWM_Stop+0x10c>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	2b10      	cmp	r3, #16
 800c78c:	d104      	bne.n	800c798 <HAL_TIM_PWM_Stop+0x104>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c796:	e003      	b.n	800c7a0 <HAL_TIM_PWM_Stop+0x10c>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	40010000 	.word	0x40010000
 800c7b0:	40010400 	.word	0x40010400
 800c7b4:	40014000 	.word	0x40014000
 800c7b8:	40014400 	.word	0x40014400
 800c7bc:	40014800 	.word	0x40014800

0800c7c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e049      	b.n	800c866 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f841 	bl	800c86e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f000 ffc0 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c876:	bf00      	nop
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
	...

0800c884 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d104      	bne.n	800c8a6 <HAL_TIM_IC_Start_DMA+0x22>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	e023      	b.n	800c8ee <HAL_TIM_IC_Start_DMA+0x6a>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	d104      	bne.n	800c8b6 <HAL_TIM_IC_Start_DMA+0x32>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	e01b      	b.n	800c8ee <HAL_TIM_IC_Start_DMA+0x6a>
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b08      	cmp	r3, #8
 800c8ba:	d104      	bne.n	800c8c6 <HAL_TIM_IC_Start_DMA+0x42>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	e013      	b.n	800c8ee <HAL_TIM_IC_Start_DMA+0x6a>
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	2b0c      	cmp	r3, #12
 800c8ca:	d104      	bne.n	800c8d6 <HAL_TIM_IC_Start_DMA+0x52>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	e00b      	b.n	800c8ee <HAL_TIM_IC_Start_DMA+0x6a>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	d104      	bne.n	800c8e6 <HAL_TIM_IC_Start_DMA+0x62>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	e003      	b.n	800c8ee <HAL_TIM_IC_Start_DMA+0x6a>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <HAL_TIM_IC_Start_DMA+0x7c>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	e013      	b.n	800c928 <HAL_TIM_IC_Start_DMA+0xa4>
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b04      	cmp	r3, #4
 800c904:	d104      	bne.n	800c910 <HAL_TIM_IC_Start_DMA+0x8c>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	e00b      	b.n	800c928 <HAL_TIM_IC_Start_DMA+0xa4>
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	2b08      	cmp	r3, #8
 800c914:	d104      	bne.n	800c920 <HAL_TIM_IC_Start_DMA+0x9c>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	e003      	b.n	800c928 <HAL_TIM_IC_Start_DMA+0xa4>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c926:	b2db      	uxtb	r3, r3
 800c928:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800c92a:	7dbb      	ldrb	r3, [r7, #22]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d002      	beq.n	800c936 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800c930:	7d7b      	ldrb	r3, [r7, #21]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d101      	bne.n	800c93a <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800c936:	2302      	movs	r3, #2
 800c938:	e15c      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800c93a:	7dbb      	ldrb	r3, [r7, #22]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d153      	bne.n	800c9e8 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800c940:	7d7b      	ldrb	r3, [r7, #21]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d150      	bne.n	800c9e8 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) && (Length > 0U))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d104      	bne.n	800c956 <HAL_TIM_IC_Start_DMA+0xd2>
 800c94c:	887b      	ldrh	r3, [r7, #2]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e14e      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <HAL_TIM_IC_Start_DMA+0xe2>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c964:	e023      	b.n	800c9ae <HAL_TIM_IC_Start_DMA+0x12a>
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d104      	bne.n	800c976 <HAL_TIM_IC_Start_DMA+0xf2>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2202      	movs	r2, #2
 800c970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c974:	e01b      	b.n	800c9ae <HAL_TIM_IC_Start_DMA+0x12a>
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	2b08      	cmp	r3, #8
 800c97a:	d104      	bne.n	800c986 <HAL_TIM_IC_Start_DMA+0x102>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c984:	e013      	b.n	800c9ae <HAL_TIM_IC_Start_DMA+0x12a>
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b0c      	cmp	r3, #12
 800c98a:	d104      	bne.n	800c996 <HAL_TIM_IC_Start_DMA+0x112>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c994:	e00b      	b.n	800c9ae <HAL_TIM_IC_Start_DMA+0x12a>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b10      	cmp	r3, #16
 800c99a:	d104      	bne.n	800c9a6 <HAL_TIM_IC_Start_DMA+0x122>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9a4:	e003      	b.n	800c9ae <HAL_TIM_IC_Start_DMA+0x12a>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2202      	movs	r2, #2
 800c9aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <HAL_TIM_IC_Start_DMA+0x13a>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2202      	movs	r2, #2
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800c9bc:	e016      	b.n	800c9ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d104      	bne.n	800c9ce <HAL_TIM_IC_Start_DMA+0x14a>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800c9cc:	e00e      	b.n	800c9ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b08      	cmp	r3, #8
 800c9d2:	d104      	bne.n	800c9de <HAL_TIM_IC_Start_DMA+0x15a>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800c9dc:	e006      	b.n	800c9ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800c9e6:	e001      	b.n	800c9ec <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e103      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f001 fbfd 	bl	800e1f4 <TIM_CCxChannelCmd>

  switch (Channel)
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2b0c      	cmp	r3, #12
 800c9fe:	f200 80ad 	bhi.w	800cb5c <HAL_TIM_IC_Start_DMA+0x2d8>
 800ca02:	a201      	add	r2, pc, #4	; (adr r2, 800ca08 <HAL_TIM_IC_Start_DMA+0x184>)
 800ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca08:	0800ca3d 	.word	0x0800ca3d
 800ca0c:	0800cb5d 	.word	0x0800cb5d
 800ca10:	0800cb5d 	.word	0x0800cb5d
 800ca14:	0800cb5d 	.word	0x0800cb5d
 800ca18:	0800ca85 	.word	0x0800ca85
 800ca1c:	0800cb5d 	.word	0x0800cb5d
 800ca20:	0800cb5d 	.word	0x0800cb5d
 800ca24:	0800cb5d 	.word	0x0800cb5d
 800ca28:	0800cacd 	.word	0x0800cacd
 800ca2c:	0800cb5d 	.word	0x0800cb5d
 800ca30:	0800cb5d 	.word	0x0800cb5d
 800ca34:	0800cb5d 	.word	0x0800cb5d
 800ca38:	0800cb15 	.word	0x0800cb15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	4a6e      	ldr	r2, [pc, #440]	; (800cbfc <HAL_TIM_IC_Start_DMA+0x378>)
 800ca42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	4a6d      	ldr	r2, [pc, #436]	; (800cc00 <HAL_TIM_IC_Start_DMA+0x37c>)
 800ca4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	4a6c      	ldr	r2, [pc, #432]	; (800cc04 <HAL_TIM_IC_Start_DMA+0x380>)
 800ca52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3334      	adds	r3, #52	; 0x34
 800ca5e:	4619      	mov	r1, r3
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	887b      	ldrh	r3, [r7, #2]
 800ca64:	f7fa fad8 	bl	8007018 <HAL_DMA_Start_IT>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e0c0      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca80:	60da      	str	r2, [r3, #12]
      break;
 800ca82:	e06e      	b.n	800cb62 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca88:	4a5c      	ldr	r2, [pc, #368]	; (800cbfc <HAL_TIM_IC_Start_DMA+0x378>)
 800ca8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca90:	4a5b      	ldr	r2, [pc, #364]	; (800cc00 <HAL_TIM_IC_Start_DMA+0x37c>)
 800ca92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	4a5a      	ldr	r2, [pc, #360]	; (800cc04 <HAL_TIM_IC_Start_DMA+0x380>)
 800ca9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3338      	adds	r3, #56	; 0x38
 800caa6:	4619      	mov	r1, r3
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	887b      	ldrh	r3, [r7, #2]
 800caac:	f7fa fab4 	bl	8007018 <HAL_DMA_Start_IT>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e09c      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cac8:	60da      	str	r2, [r3, #12]
      break;
 800caca:	e04a      	b.n	800cb62 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad0:	4a4a      	ldr	r2, [pc, #296]	; (800cbfc <HAL_TIM_IC_Start_DMA+0x378>)
 800cad2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	4a49      	ldr	r2, [pc, #292]	; (800cc00 <HAL_TIM_IC_Start_DMA+0x37c>)
 800cada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	4a48      	ldr	r2, [pc, #288]	; (800cc04 <HAL_TIM_IC_Start_DMA+0x380>)
 800cae2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	333c      	adds	r3, #60	; 0x3c
 800caee:	4619      	mov	r1, r3
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	887b      	ldrh	r3, [r7, #2]
 800caf4:	f7fa fa90 	bl	8007018 <HAL_DMA_Start_IT>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e078      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb10:	60da      	str	r2, [r3, #12]
      break;
 800cb12:	e026      	b.n	800cb62 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb18:	4a38      	ldr	r2, [pc, #224]	; (800cbfc <HAL_TIM_IC_Start_DMA+0x378>)
 800cb1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb20:	4a37      	ldr	r2, [pc, #220]	; (800cc00 <HAL_TIM_IC_Start_DMA+0x37c>)
 800cb22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb28:	4a36      	ldr	r2, [pc, #216]	; (800cc04 <HAL_TIM_IC_Start_DMA+0x380>)
 800cb2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3340      	adds	r3, #64	; 0x40
 800cb36:	4619      	mov	r1, r3
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	887b      	ldrh	r3, [r7, #2]
 800cb3c:	f7fa fa6c 	bl	8007018 <HAL_DMA_Start_IT>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e054      	b.n	800cbf4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68da      	ldr	r2, [r3, #12]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb58:	60da      	str	r2, [r3, #12]
      break;
 800cb5a:	e002      	b.n	800cb62 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb60:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a28      	ldr	r2, [pc, #160]	; (800cc08 <HAL_TIM_IC_Start_DMA+0x384>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d022      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb74:	d01d      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a24      	ldr	r2, [pc, #144]	; (800cc0c <HAL_TIM_IC_Start_DMA+0x388>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d018      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a22      	ldr	r2, [pc, #136]	; (800cc10 <HAL_TIM_IC_Start_DMA+0x38c>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d013      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a21      	ldr	r2, [pc, #132]	; (800cc14 <HAL_TIM_IC_Start_DMA+0x390>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d00e      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a1f      	ldr	r2, [pc, #124]	; (800cc18 <HAL_TIM_IC_Start_DMA+0x394>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d009      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1e      	ldr	r2, [pc, #120]	; (800cc1c <HAL_TIM_IC_Start_DMA+0x398>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d004      	beq.n	800cbb2 <HAL_TIM_IC_Start_DMA+0x32e>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a1c      	ldr	r2, [pc, #112]	; (800cc20 <HAL_TIM_IC_Start_DMA+0x39c>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d115      	bne.n	800cbde <HAL_TIM_IC_Start_DMA+0x35a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	4b1a      	ldr	r3, [pc, #104]	; (800cc24 <HAL_TIM_IC_Start_DMA+0x3a0>)
 800cbba:	4013      	ands	r3, r2
 800cbbc:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b06      	cmp	r3, #6
 800cbc2:	d015      	beq.n	800cbf0 <HAL_TIM_IC_Start_DMA+0x36c>
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbca:	d011      	beq.n	800cbf0 <HAL_TIM_IC_Start_DMA+0x36c>
    {
      __HAL_TIM_ENABLE(htim);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f042 0201 	orr.w	r2, r2, #1
 800cbda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbdc:	e008      	b.n	800cbf0 <HAL_TIM_IC_Start_DMA+0x36c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f042 0201 	orr.w	r2, r2, #1
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e000      	b.n	800cbf2 <HAL_TIM_IC_Start_DMA+0x36e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbf0:	bf00      	nop
  }

  /* Return function status */
  return status;
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	0800d653 	.word	0x0800d653
 800cc00:	0800d71b 	.word	0x0800d71b
 800cc04:	0800d5c1 	.word	0x0800d5c1
 800cc08:	40010000 	.word	0x40010000
 800cc0c:	40000400 	.word	0x40000400
 800cc10:	40000800 	.word	0x40000800
 800cc14:	40000c00 	.word	0x40000c00
 800cc18:	40010400 	.word	0x40010400
 800cc1c:	40001800 	.word	0x40001800
 800cc20:	40014000 	.word	0x40014000
 800cc24:	00010007 	.word	0x00010007

0800cc28 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f001 fad8 	bl	800e1f4 <TIM_CCxChannelCmd>

  switch (Channel)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b0c      	cmp	r3, #12
 800cc48:	d854      	bhi.n	800ccf4 <HAL_TIM_IC_Stop_DMA+0xcc>
 800cc4a:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <HAL_TIM_IC_Stop_DMA+0x28>)
 800cc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc50:	0800cc85 	.word	0x0800cc85
 800cc54:	0800ccf5 	.word	0x0800ccf5
 800cc58:	0800ccf5 	.word	0x0800ccf5
 800cc5c:	0800ccf5 	.word	0x0800ccf5
 800cc60:	0800cca1 	.word	0x0800cca1
 800cc64:	0800ccf5 	.word	0x0800ccf5
 800cc68:	0800ccf5 	.word	0x0800ccf5
 800cc6c:	0800ccf5 	.word	0x0800ccf5
 800cc70:	0800ccbd 	.word	0x0800ccbd
 800cc74:	0800ccf5 	.word	0x0800ccf5
 800cc78:	0800ccf5 	.word	0x0800ccf5
 800cc7c:	0800ccf5 	.word	0x0800ccf5
 800cc80:	0800ccd9 	.word	0x0800ccd9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68da      	ldr	r2, [r3, #12]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cc92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fa ff45 	bl	8007b28 <HAL_DMA_Abort_IT>
      break;
 800cc9e:	e02c      	b.n	800ccfa <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fa ff37 	bl	8007b28 <HAL_DMA_Abort_IT>
      break;
 800ccba:	e01e      	b.n	800ccfa <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68da      	ldr	r2, [r3, #12]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ccca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fa ff29 	bl	8007b28 <HAL_DMA_Abort_IT>
      break;
 800ccd6:	e010      	b.n	800ccfa <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68da      	ldr	r2, [r3, #12]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cce6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fa ff1b 	bl	8007b28 <HAL_DMA_Abort_IT>
      break;
 800ccf2:	e002      	b.n	800ccfa <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf8:	bf00      	nop
  }

  if (status == HAL_OK)
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d15f      	bne.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0x198>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6a1a      	ldr	r2, [r3, #32]
 800cd06:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10f      	bne.n	800cd30 <HAL_TIM_IC_Stop_DMA+0x108>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6a1a      	ldr	r2, [r3, #32]
 800cd16:	f240 4344 	movw	r3, #1092	; 0x444
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d107      	bne.n	800cd30 <HAL_TIM_IC_Stop_DMA+0x108>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0201 	bic.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d104      	bne.n	800cd40 <HAL_TIM_IC_Stop_DMA+0x118>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd3e:	e023      	b.n	800cd88 <HAL_TIM_IC_Stop_DMA+0x160>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b04      	cmp	r3, #4
 800cd44:	d104      	bne.n	800cd50 <HAL_TIM_IC_Stop_DMA+0x128>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd4e:	e01b      	b.n	800cd88 <HAL_TIM_IC_Stop_DMA+0x160>
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d104      	bne.n	800cd60 <HAL_TIM_IC_Stop_DMA+0x138>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd5e:	e013      	b.n	800cd88 <HAL_TIM_IC_Stop_DMA+0x160>
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	2b0c      	cmp	r3, #12
 800cd64:	d104      	bne.n	800cd70 <HAL_TIM_IC_Stop_DMA+0x148>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd6e:	e00b      	b.n	800cd88 <HAL_TIM_IC_Stop_DMA+0x160>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	2b10      	cmp	r3, #16
 800cd74:	d104      	bne.n	800cd80 <HAL_TIM_IC_Stop_DMA+0x158>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd7e:	e003      	b.n	800cd88 <HAL_TIM_IC_Stop_DMA+0x160>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d104      	bne.n	800cd98 <HAL_TIM_IC_Stop_DMA+0x170>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd96:	e013      	b.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0x198>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b04      	cmp	r3, #4
 800cd9c:	d104      	bne.n	800cda8 <HAL_TIM_IC_Stop_DMA+0x180>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cda6:	e00b      	b.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0x198>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2b08      	cmp	r3, #8
 800cdac:	d104      	bne.n	800cdb8 <HAL_TIM_IC_Stop_DMA+0x190>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdb6:	e003      	b.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0x198>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop

0800cdcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	f003 0302 	and.w	r3, r3, #2
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d122      	bne.n	800ce28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d11b      	bne.n	800ce28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f06f 0202 	mvn.w	r2, #2
 800cdf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7f6 fbea 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 800ce14:	e005      	b.n	800ce22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fba0 	bl	800d55c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fbb1 	bl	800d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f003 0304 	and.w	r3, r3, #4
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d122      	bne.n	800ce7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	d11b      	bne.n	800ce7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f06f 0204 	mvn.w	r2, #4
 800ce4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2202      	movs	r2, #2
 800ce52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7f6 fbc0 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 800ce68:	e005      	b.n	800ce76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fb76 	bl	800d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fb87 	bl	800d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b08      	cmp	r3, #8
 800ce88:	d122      	bne.n	800ced0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f003 0308 	and.w	r3, r3, #8
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	d11b      	bne.n	800ced0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f06f 0208 	mvn.w	r2, #8
 800cea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2204      	movs	r2, #4
 800cea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	f003 0303 	and.w	r3, r3, #3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7f6 fb96 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 800cebc:	e005      	b.n	800ceca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fb4c 	bl	800d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fb5d 	bl	800d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	f003 0310 	and.w	r3, r3, #16
 800ceda:	2b10      	cmp	r3, #16
 800cedc:	d122      	bne.n	800cf24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	f003 0310 	and.w	r3, r3, #16
 800cee8:	2b10      	cmp	r3, #16
 800ceea:	d11b      	bne.n	800cf24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f06f 0210 	mvn.w	r2, #16
 800cef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2208      	movs	r2, #8
 800cefa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7f6 fb6c 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 800cf10:	e005      	b.n	800cf1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fb22 	bl	800d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fb33 	bl	800d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d10e      	bne.n	800cf50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d107      	bne.n	800cf50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f06f 0201 	mvn.w	r2, #1
 800cf48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7f6 fba4 	bl	8003698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf5a:	2b80      	cmp	r3, #128	; 0x80
 800cf5c:	d10e      	bne.n	800cf7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf68:	2b80      	cmp	r3, #128	; 0x80
 800cf6a:	d107      	bne.n	800cf7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cf74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f001 f9fa 	bl	800e370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf8a:	d10e      	bne.n	800cfaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf96:	2b80      	cmp	r3, #128	; 0x80
 800cf98:	d107      	bne.n	800cfaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 f9ed 	bl	800e384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb4:	2b40      	cmp	r3, #64	; 0x40
 800cfb6:	d10e      	bne.n	800cfd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfc2:	2b40      	cmp	r3, #64	; 0x40
 800cfc4:	d107      	bne.n	800cfd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fae1 	bl	800d598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b20      	cmp	r3, #32
 800cfe2:	d10e      	bne.n	800d002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b20      	cmp	r3, #32
 800cff0:	d107      	bne.n	800d002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f06f 0220 	mvn.w	r2, #32
 800cffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 f9ad 	bl	800e35c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d002:	bf00      	nop
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b086      	sub	sp, #24
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d020:	2b01      	cmp	r3, #1
 800d022:	d101      	bne.n	800d028 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d024:	2302      	movs	r3, #2
 800d026:	e088      	b.n	800d13a <HAL_TIM_IC_ConfigChannel+0x130>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d11b      	bne.n	800d06e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6818      	ldr	r0, [r3, #0]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	6819      	ldr	r1, [r3, #0]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	f000 ff0d 	bl	800de64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	699a      	ldr	r2, [r3, #24]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f022 020c 	bic.w	r2, r2, #12
 800d058:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6999      	ldr	r1, [r3, #24]
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	689a      	ldr	r2, [r3, #8]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	430a      	orrs	r2, r1
 800d06a:	619a      	str	r2, [r3, #24]
 800d06c:	e060      	b.n	800d130 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b04      	cmp	r3, #4
 800d072:	d11c      	bne.n	800d0ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6818      	ldr	r0, [r3, #0]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	6819      	ldr	r1, [r3, #0]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f000 ff91 	bl	800dfaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	699a      	ldr	r2, [r3, #24]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d096:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6999      	ldr	r1, [r3, #24]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	021a      	lsls	r2, r3, #8
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	619a      	str	r2, [r3, #24]
 800d0ac:	e040      	b.n	800d130 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	d11b      	bne.n	800d0ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6818      	ldr	r0, [r3, #0]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	6819      	ldr	r1, [r3, #0]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	f000 ffde 	bl	800e084 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	69da      	ldr	r2, [r3, #28]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f022 020c 	bic.w	r2, r2, #12
 800d0d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	69d9      	ldr	r1, [r3, #28]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	430a      	orrs	r2, r1
 800d0e8:	61da      	str	r2, [r3, #28]
 800d0ea:	e021      	b.n	800d130 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b0c      	cmp	r3, #12
 800d0f0:	d11c      	bne.n	800d12c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	6819      	ldr	r1, [r3, #0]
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	f000 fffb 	bl	800e0fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	69da      	ldr	r2, [r3, #28]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d114:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	69d9      	ldr	r1, [r3, #28]
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	021a      	lsls	r2, r3, #8
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	430a      	orrs	r2, r1
 800d128:	61da      	str	r2, [r3, #28]
 800d12a:	e001      	b.n	800d130 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d12c:	2301      	movs	r3, #1
 800d12e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d138:	7dfb      	ldrb	r3, [r7, #23]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
	...

0800d144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d101      	bne.n	800d162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d15e:	2302      	movs	r3, #2
 800d160:	e0ff      	b.n	800d362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b14      	cmp	r3, #20
 800d16e:	f200 80f0 	bhi.w	800d352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d172:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d178:	0800d1cd 	.word	0x0800d1cd
 800d17c:	0800d353 	.word	0x0800d353
 800d180:	0800d353 	.word	0x0800d353
 800d184:	0800d353 	.word	0x0800d353
 800d188:	0800d20d 	.word	0x0800d20d
 800d18c:	0800d353 	.word	0x0800d353
 800d190:	0800d353 	.word	0x0800d353
 800d194:	0800d353 	.word	0x0800d353
 800d198:	0800d24f 	.word	0x0800d24f
 800d19c:	0800d353 	.word	0x0800d353
 800d1a0:	0800d353 	.word	0x0800d353
 800d1a4:	0800d353 	.word	0x0800d353
 800d1a8:	0800d28f 	.word	0x0800d28f
 800d1ac:	0800d353 	.word	0x0800d353
 800d1b0:	0800d353 	.word	0x0800d353
 800d1b4:	0800d353 	.word	0x0800d353
 800d1b8:	0800d2d1 	.word	0x0800d2d1
 800d1bc:	0800d353 	.word	0x0800d353
 800d1c0:	0800d353 	.word	0x0800d353
 800d1c4:	0800d353 	.word	0x0800d353
 800d1c8:	0800d311 	.word	0x0800d311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fb70 	bl	800d8b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699a      	ldr	r2, [r3, #24]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f042 0208 	orr.w	r2, r2, #8
 800d1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	699a      	ldr	r2, [r3, #24]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0204 	bic.w	r2, r2, #4
 800d1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6999      	ldr	r1, [r3, #24]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	691a      	ldr	r2, [r3, #16]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	619a      	str	r2, [r3, #24]
      break;
 800d20a:	e0a5      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fbe0 	bl	800d9d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699a      	ldr	r2, [r3, #24]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6999      	ldr	r1, [r3, #24]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	021a      	lsls	r2, r3, #8
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	430a      	orrs	r2, r1
 800d24a:	619a      	str	r2, [r3, #24]
      break;
 800d24c:	e084      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	68b9      	ldr	r1, [r7, #8]
 800d254:	4618      	mov	r0, r3
 800d256:	f000 fc49 	bl	800daec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	69da      	ldr	r2, [r3, #28]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f042 0208 	orr.w	r2, r2, #8
 800d268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	69da      	ldr	r2, [r3, #28]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f022 0204 	bic.w	r2, r2, #4
 800d278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	69d9      	ldr	r1, [r3, #28]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	691a      	ldr	r2, [r3, #16]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	430a      	orrs	r2, r1
 800d28a:	61da      	str	r2, [r3, #28]
      break;
 800d28c:	e064      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	4618      	mov	r0, r3
 800d296:	f000 fcb1 	bl	800dbfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69da      	ldr	r2, [r3, #28]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69da      	ldr	r2, [r3, #28]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	69d9      	ldr	r1, [r3, #28]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	021a      	lsls	r2, r3, #8
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	61da      	str	r2, [r3, #28]
      break;
 800d2ce:	e043      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 fcfa 	bl	800dcd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0208 	orr.w	r2, r2, #8
 800d2ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f022 0204 	bic.w	r2, r2, #4
 800d2fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	691a      	ldr	r2, [r3, #16]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d30e:	e023      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fd3e 	bl	800dd98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d32a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d33a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	021a      	lsls	r2, r3, #8
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d350:	e002      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	75fb      	strb	r3, [r7, #23]
      break;
 800d356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop

0800d36c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d380:	2b01      	cmp	r3, #1
 800d382:	d101      	bne.n	800d388 <HAL_TIM_ConfigClockSource+0x1c>
 800d384:	2302      	movs	r3, #2
 800d386:	e0dc      	b.n	800d542 <HAL_TIM_ConfigClockSource+0x1d6>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2202      	movs	r2, #2
 800d394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	4b6a      	ldr	r3, [pc, #424]	; (800d54c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a64      	ldr	r2, [pc, #400]	; (800d550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	f000 80a9 	beq.w	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3c4:	4a62      	ldr	r2, [pc, #392]	; (800d550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	f200 80ae 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3cc:	4a61      	ldr	r2, [pc, #388]	; (800d554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	f000 80a1 	beq.w	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3d4:	4a5f      	ldr	r2, [pc, #380]	; (800d554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	f200 80a6 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3dc:	4a5e      	ldr	r2, [pc, #376]	; (800d558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	f000 8099 	beq.w	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3e4:	4a5c      	ldr	r2, [pc, #368]	; (800d558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	f200 809e 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d3f0:	f000 8091 	beq.w	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d3f8:	f200 8096 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d400:	f000 8089 	beq.w	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d408:	f200 808e 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d410:	d03e      	beq.n	800d490 <HAL_TIM_ConfigClockSource+0x124>
 800d412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d416:	f200 8087 	bhi.w	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d41e:	f000 8086 	beq.w	800d52e <HAL_TIM_ConfigClockSource+0x1c2>
 800d422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d426:	d87f      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d428:	2b70      	cmp	r3, #112	; 0x70
 800d42a:	d01a      	beq.n	800d462 <HAL_TIM_ConfigClockSource+0xf6>
 800d42c:	2b70      	cmp	r3, #112	; 0x70
 800d42e:	d87b      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d430:	2b60      	cmp	r3, #96	; 0x60
 800d432:	d050      	beq.n	800d4d6 <HAL_TIM_ConfigClockSource+0x16a>
 800d434:	2b60      	cmp	r3, #96	; 0x60
 800d436:	d877      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d438:	2b50      	cmp	r3, #80	; 0x50
 800d43a:	d03c      	beq.n	800d4b6 <HAL_TIM_ConfigClockSource+0x14a>
 800d43c:	2b50      	cmp	r3, #80	; 0x50
 800d43e:	d873      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d440:	2b40      	cmp	r3, #64	; 0x40
 800d442:	d058      	beq.n	800d4f6 <HAL_TIM_ConfigClockSource+0x18a>
 800d444:	2b40      	cmp	r3, #64	; 0x40
 800d446:	d86f      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d448:	2b30      	cmp	r3, #48	; 0x30
 800d44a:	d064      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d44c:	2b30      	cmp	r3, #48	; 0x30
 800d44e:	d86b      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d450:	2b20      	cmp	r3, #32
 800d452:	d060      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d454:	2b20      	cmp	r3, #32
 800d456:	d867      	bhi.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d05c      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d45c:	2b10      	cmp	r3, #16
 800d45e:	d05a      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x1aa>
 800d460:	e062      	b.n	800d528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6818      	ldr	r0, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	6899      	ldr	r1, [r3, #8]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f000 fe9f 	bl	800e1b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	609a      	str	r2, [r3, #8]
      break;
 800d48e:	e04f      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	6899      	ldr	r1, [r3, #8]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	f000 fe88 	bl	800e1b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	689a      	ldr	r2, [r3, #8]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4b2:	609a      	str	r2, [r3, #8]
      break;
 800d4b4:	e03c      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6818      	ldr	r0, [r3, #0]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	6859      	ldr	r1, [r3, #4]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	f000 fd42 	bl	800df4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2150      	movs	r1, #80	; 0x50
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f000 fe52 	bl	800e178 <TIM_ITRx_SetConfig>
      break;
 800d4d4:	e02c      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6818      	ldr	r0, [r3, #0]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	6859      	ldr	r1, [r3, #4]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f000 fd9e 	bl	800e024 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2160      	movs	r1, #96	; 0x60
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fe42 	bl	800e178 <TIM_ITRx_SetConfig>
      break;
 800d4f4:	e01c      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	6859      	ldr	r1, [r3, #4]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	461a      	mov	r2, r3
 800d504:	f000 fd22 	bl	800df4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2140      	movs	r1, #64	; 0x40
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fe32 	bl	800e178 <TIM_ITRx_SetConfig>
      break;
 800d514:	e00c      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4619      	mov	r1, r3
 800d520:	4610      	mov	r0, r2
 800d522:	f000 fe29 	bl	800e178 <TIM_ITRx_SetConfig>
      break;
 800d526:	e003      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d528:	2301      	movs	r3, #1
 800d52a:	73fb      	strb	r3, [r7, #15]
      break;
 800d52c:	e000      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d52e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d540:	7bfb      	ldrb	r3, [r7, #15]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	ffceff88 	.word	0xffceff88
 800d550:	00100040 	.word	0x00100040
 800d554:	00100030 	.word	0x00100030
 800d558:	00100020 	.word	0x00100020

0800d55c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d564:	bf00      	nop
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d107      	bne.n	800d5e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5e6:	e02a      	b.n	800d63e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d107      	bne.n	800d602 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d600:	e01d      	b.n	800d63e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d107      	bne.n	800d61c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2204      	movs	r2, #4
 800d610:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d61a:	e010      	b.n	800d63e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d107      	bne.n	800d636 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2208      	movs	r2, #8
 800d62a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d634:	e003      	b.n	800d63e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7ff ffb4 	bl	800d5ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	771a      	strb	r2, [r3, #28]
}
 800d64a:	bf00      	nop
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	429a      	cmp	r2, r3
 800d668:	d10f      	bne.n	800d68a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2201      	movs	r2, #1
 800d66e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d146      	bne.n	800d706 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d688:	e03d      	b.n	800d706 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d10f      	bne.n	800d6b4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2202      	movs	r2, #2
 800d698:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	69db      	ldr	r3, [r3, #28]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d131      	bne.n	800d706 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6b2:	e028      	b.n	800d706 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d10f      	bne.n	800d6de <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2204      	movs	r2, #4
 800d6c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d11c      	bne.n	800d706 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6dc:	e013      	b.n	800d706 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d10e      	bne.n	800d706 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2208      	movs	r2, #8
 800d6ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d107      	bne.n	800d706 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7f5 ff6e 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	771a      	strb	r2, [r3, #28]
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d103      	bne.n	800d73a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2201      	movs	r2, #1
 800d736:	771a      	strb	r2, [r3, #28]
 800d738:	e019      	b.n	800d76e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d103      	bne.n	800d74c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2202      	movs	r2, #2
 800d748:	771a      	strb	r2, [r3, #28]
 800d74a:	e010      	b.n	800d76e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	429a      	cmp	r2, r3
 800d754:	d103      	bne.n	800d75e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2204      	movs	r2, #4
 800d75a:	771a      	strb	r2, [r3, #28]
 800d75c:	e007      	b.n	800d76e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	429a      	cmp	r2, r3
 800d766:	d102      	bne.n	800d76e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2208      	movs	r2, #8
 800d76c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7ff fefe 	bl	800d570 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	771a      	strb	r2, [r3, #28]
}
 800d77a:	bf00      	nop
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d784:	b480      	push	{r7}
 800d786:	b085      	sub	sp, #20
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a40      	ldr	r2, [pc, #256]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d013      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7a2:	d00f      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a3d      	ldr	r2, [pc, #244]	; (800d89c <TIM_Base_SetConfig+0x118>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d00b      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a3c      	ldr	r2, [pc, #240]	; (800d8a0 <TIM_Base_SetConfig+0x11c>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d007      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a3b      	ldr	r2, [pc, #236]	; (800d8a4 <TIM_Base_SetConfig+0x120>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d003      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a3a      	ldr	r2, [pc, #232]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d108      	bne.n	800d7d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a2f      	ldr	r2, [pc, #188]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d01f      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7e4:	d01b      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a2c      	ldr	r2, [pc, #176]	; (800d89c <TIM_Base_SetConfig+0x118>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d017      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a2b      	ldr	r2, [pc, #172]	; (800d8a0 <TIM_Base_SetConfig+0x11c>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d013      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a2a      	ldr	r2, [pc, #168]	; (800d8a4 <TIM_Base_SetConfig+0x120>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d00f      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a29      	ldr	r2, [pc, #164]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d00b      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a28      	ldr	r2, [pc, #160]	; (800d8ac <TIM_Base_SetConfig+0x128>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d007      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a27      	ldr	r2, [pc, #156]	; (800d8b0 <TIM_Base_SetConfig+0x12c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d003      	beq.n	800d81e <TIM_Base_SetConfig+0x9a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a26      	ldr	r2, [pc, #152]	; (800d8b4 <TIM_Base_SetConfig+0x130>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d108      	bne.n	800d830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	689a      	ldr	r2, [r3, #8]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a10      	ldr	r2, [pc, #64]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d00f      	beq.n	800d87c <TIM_Base_SetConfig+0xf8>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a12      	ldr	r2, [pc, #72]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00b      	beq.n	800d87c <TIM_Base_SetConfig+0xf8>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a11      	ldr	r2, [pc, #68]	; (800d8ac <TIM_Base_SetConfig+0x128>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d007      	beq.n	800d87c <TIM_Base_SetConfig+0xf8>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a10      	ldr	r2, [pc, #64]	; (800d8b0 <TIM_Base_SetConfig+0x12c>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d003      	beq.n	800d87c <TIM_Base_SetConfig+0xf8>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a0f      	ldr	r2, [pc, #60]	; (800d8b4 <TIM_Base_SetConfig+0x130>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d103      	bne.n	800d884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	691a      	ldr	r2, [r3, #16]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	615a      	str	r2, [r3, #20]
}
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	40010000 	.word	0x40010000
 800d89c:	40000400 	.word	0x40000400
 800d8a0:	40000800 	.word	0x40000800
 800d8a4:	40000c00 	.word	0x40000c00
 800d8a8:	40010400 	.word	0x40010400
 800d8ac:	40014000 	.word	0x40014000
 800d8b0:	40014400 	.word	0x40014400
 800d8b4:	40014800 	.word	0x40014800

0800d8b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	f023 0201 	bic.w	r2, r3, #1
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4b37      	ldr	r3, [pc, #220]	; (800d9c0 <TIM_OC1_SetConfig+0x108>)
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f023 0303 	bic.w	r3, r3, #3
 800d8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f023 0302 	bic.w	r3, r3, #2
 800d900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	4313      	orrs	r3, r2
 800d90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a2d      	ldr	r2, [pc, #180]	; (800d9c4 <TIM_OC1_SetConfig+0x10c>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d00f      	beq.n	800d934 <TIM_OC1_SetConfig+0x7c>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4a2c      	ldr	r2, [pc, #176]	; (800d9c8 <TIM_OC1_SetConfig+0x110>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d00b      	beq.n	800d934 <TIM_OC1_SetConfig+0x7c>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4a2b      	ldr	r2, [pc, #172]	; (800d9cc <TIM_OC1_SetConfig+0x114>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d007      	beq.n	800d934 <TIM_OC1_SetConfig+0x7c>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a2a      	ldr	r2, [pc, #168]	; (800d9d0 <TIM_OC1_SetConfig+0x118>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d003      	beq.n	800d934 <TIM_OC1_SetConfig+0x7c>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a29      	ldr	r2, [pc, #164]	; (800d9d4 <TIM_OC1_SetConfig+0x11c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d10c      	bne.n	800d94e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f023 0308 	bic.w	r3, r3, #8
 800d93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	4313      	orrs	r3, r2
 800d944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f023 0304 	bic.w	r3, r3, #4
 800d94c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4a1c      	ldr	r2, [pc, #112]	; (800d9c4 <TIM_OC1_SetConfig+0x10c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d00f      	beq.n	800d976 <TIM_OC1_SetConfig+0xbe>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a1b      	ldr	r2, [pc, #108]	; (800d9c8 <TIM_OC1_SetConfig+0x110>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d00b      	beq.n	800d976 <TIM_OC1_SetConfig+0xbe>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a1a      	ldr	r2, [pc, #104]	; (800d9cc <TIM_OC1_SetConfig+0x114>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d007      	beq.n	800d976 <TIM_OC1_SetConfig+0xbe>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a19      	ldr	r2, [pc, #100]	; (800d9d0 <TIM_OC1_SetConfig+0x118>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d003      	beq.n	800d976 <TIM_OC1_SetConfig+0xbe>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a18      	ldr	r2, [pc, #96]	; (800d9d4 <TIM_OC1_SetConfig+0x11c>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d111      	bne.n	800d99a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	4313      	orrs	r3, r2
 800d998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	621a      	str	r2, [r3, #32]
}
 800d9b4:	bf00      	nop
 800d9b6:	371c      	adds	r7, #28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	fffeff8f 	.word	0xfffeff8f
 800d9c4:	40010000 	.word	0x40010000
 800d9c8:	40010400 	.word	0x40010400
 800d9cc:	40014000 	.word	0x40014000
 800d9d0:	40014400 	.word	0x40014400
 800d9d4:	40014800 	.word	0x40014800

0800d9d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	f023 0210 	bic.w	r2, r3, #16
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	4b34      	ldr	r3, [pc, #208]	; (800dad4 <TIM_OC2_SetConfig+0xfc>)
 800da04:	4013      	ands	r3, r2
 800da06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	021b      	lsls	r3, r3, #8
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	4313      	orrs	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	f023 0320 	bic.w	r3, r3, #32
 800da22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	697a      	ldr	r2, [r7, #20]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a29      	ldr	r2, [pc, #164]	; (800dad8 <TIM_OC2_SetConfig+0x100>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d003      	beq.n	800da40 <TIM_OC2_SetConfig+0x68>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a28      	ldr	r2, [pc, #160]	; (800dadc <TIM_OC2_SetConfig+0x104>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d10d      	bne.n	800da5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	011b      	lsls	r3, r3, #4
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	4313      	orrs	r3, r2
 800da52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a1e      	ldr	r2, [pc, #120]	; (800dad8 <TIM_OC2_SetConfig+0x100>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d00f      	beq.n	800da84 <TIM_OC2_SetConfig+0xac>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a1d      	ldr	r2, [pc, #116]	; (800dadc <TIM_OC2_SetConfig+0x104>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d00b      	beq.n	800da84 <TIM_OC2_SetConfig+0xac>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4a1c      	ldr	r2, [pc, #112]	; (800dae0 <TIM_OC2_SetConfig+0x108>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d007      	beq.n	800da84 <TIM_OC2_SetConfig+0xac>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a1b      	ldr	r2, [pc, #108]	; (800dae4 <TIM_OC2_SetConfig+0x10c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d003      	beq.n	800da84 <TIM_OC2_SetConfig+0xac>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a1a      	ldr	r2, [pc, #104]	; (800dae8 <TIM_OC2_SetConfig+0x110>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d113      	bne.n	800daac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	695b      	ldr	r3, [r3, #20]
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	621a      	str	r2, [r3, #32]
}
 800dac6:	bf00      	nop
 800dac8:	371c      	adds	r7, #28
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	feff8fff 	.word	0xfeff8fff
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40014000 	.word	0x40014000
 800dae4:	40014400 	.word	0x40014400
 800dae8:	40014800 	.word	0x40014800

0800daec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a1b      	ldr	r3, [r3, #32]
 800db06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	69db      	ldr	r3, [r3, #28]
 800db12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4b33      	ldr	r3, [pc, #204]	; (800dbe4 <TIM_OC3_SetConfig+0xf8>)
 800db18:	4013      	ands	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f023 0303 	bic.w	r3, r3, #3
 800db22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	021b      	lsls	r3, r3, #8
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	4313      	orrs	r3, r2
 800db40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a28      	ldr	r2, [pc, #160]	; (800dbe8 <TIM_OC3_SetConfig+0xfc>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d003      	beq.n	800db52 <TIM_OC3_SetConfig+0x66>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a27      	ldr	r2, [pc, #156]	; (800dbec <TIM_OC3_SetConfig+0x100>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d10d      	bne.n	800db6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	021b      	lsls	r3, r3, #8
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	4313      	orrs	r3, r2
 800db64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a1d      	ldr	r2, [pc, #116]	; (800dbe8 <TIM_OC3_SetConfig+0xfc>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d00f      	beq.n	800db96 <TIM_OC3_SetConfig+0xaa>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a1c      	ldr	r2, [pc, #112]	; (800dbec <TIM_OC3_SetConfig+0x100>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d00b      	beq.n	800db96 <TIM_OC3_SetConfig+0xaa>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a1b      	ldr	r2, [pc, #108]	; (800dbf0 <TIM_OC3_SetConfig+0x104>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d007      	beq.n	800db96 <TIM_OC3_SetConfig+0xaa>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a1a      	ldr	r2, [pc, #104]	; (800dbf4 <TIM_OC3_SetConfig+0x108>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d003      	beq.n	800db96 <TIM_OC3_SetConfig+0xaa>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a19      	ldr	r2, [pc, #100]	; (800dbf8 <TIM_OC3_SetConfig+0x10c>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d113      	bne.n	800dbbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	695b      	ldr	r3, [r3, #20]
 800dbaa:	011b      	lsls	r3, r3, #4
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	011b      	lsls	r3, r3, #4
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	685a      	ldr	r2, [r3, #4]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	621a      	str	r2, [r3, #32]
}
 800dbd8:	bf00      	nop
 800dbda:	371c      	adds	r7, #28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	fffeff8f 	.word	0xfffeff8f
 800dbe8:	40010000 	.word	0x40010000
 800dbec:	40010400 	.word	0x40010400
 800dbf0:	40014000 	.word	0x40014000
 800dbf4:	40014400 	.word	0x40014400
 800dbf8:	40014800 	.word	0x40014800

0800dbfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	69db      	ldr	r3, [r3, #28]
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4b24      	ldr	r3, [pc, #144]	; (800dcb8 <TIM_OC4_SetConfig+0xbc>)
 800dc28:	4013      	ands	r3, r2
 800dc2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	021b      	lsls	r3, r3, #8
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	031b      	lsls	r3, r3, #12
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a19      	ldr	r2, [pc, #100]	; (800dcbc <TIM_OC4_SetConfig+0xc0>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d00f      	beq.n	800dc7c <TIM_OC4_SetConfig+0x80>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a18      	ldr	r2, [pc, #96]	; (800dcc0 <TIM_OC4_SetConfig+0xc4>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d00b      	beq.n	800dc7c <TIM_OC4_SetConfig+0x80>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a17      	ldr	r2, [pc, #92]	; (800dcc4 <TIM_OC4_SetConfig+0xc8>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d007      	beq.n	800dc7c <TIM_OC4_SetConfig+0x80>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a16      	ldr	r2, [pc, #88]	; (800dcc8 <TIM_OC4_SetConfig+0xcc>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d003      	beq.n	800dc7c <TIM_OC4_SetConfig+0x80>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a15      	ldr	r2, [pc, #84]	; (800dccc <TIM_OC4_SetConfig+0xd0>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d109      	bne.n	800dc90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	019b      	lsls	r3, r3, #6
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	697a      	ldr	r2, [r7, #20]
 800dc94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	685a      	ldr	r2, [r3, #4]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	621a      	str	r2, [r3, #32]
}
 800dcaa:	bf00      	nop
 800dcac:	371c      	adds	r7, #28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	feff8fff 	.word	0xfeff8fff
 800dcbc:	40010000 	.word	0x40010000
 800dcc0:	40010400 	.word	0x40010400
 800dcc4:	40014000 	.word	0x40014000
 800dcc8:	40014400 	.word	0x40014400
 800dccc:	40014800 	.word	0x40014800

0800dcd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a1b      	ldr	r3, [r3, #32]
 800dcea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <TIM_OC5_SetConfig+0xb0>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	041b      	lsls	r3, r3, #16
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a18      	ldr	r2, [pc, #96]	; (800dd84 <TIM_OC5_SetConfig+0xb4>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00f      	beq.n	800dd46 <TIM_OC5_SetConfig+0x76>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <TIM_OC5_SetConfig+0xb8>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d00b      	beq.n	800dd46 <TIM_OC5_SetConfig+0x76>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a16      	ldr	r2, [pc, #88]	; (800dd8c <TIM_OC5_SetConfig+0xbc>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d007      	beq.n	800dd46 <TIM_OC5_SetConfig+0x76>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a15      	ldr	r2, [pc, #84]	; (800dd90 <TIM_OC5_SetConfig+0xc0>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d003      	beq.n	800dd46 <TIM_OC5_SetConfig+0x76>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a14      	ldr	r2, [pc, #80]	; (800dd94 <TIM_OC5_SetConfig+0xc4>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d109      	bne.n	800dd5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	621a      	str	r2, [r3, #32]
}
 800dd74:	bf00      	nop
 800dd76:	371c      	adds	r7, #28
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	fffeff8f 	.word	0xfffeff8f
 800dd84:	40010000 	.word	0x40010000
 800dd88:	40010400 	.word	0x40010400
 800dd8c:	40014000 	.word	0x40014000
 800dd90:	40014400 	.word	0x40014400
 800dd94:	40014800 	.word	0x40014800

0800dd98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6a1b      	ldr	r3, [r3, #32]
 800dda6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	4b22      	ldr	r3, [pc, #136]	; (800de4c <TIM_OC6_SetConfig+0xb4>)
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	021b      	lsls	r3, r3, #8
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	051b      	lsls	r3, r3, #20
 800dde2:	693a      	ldr	r2, [r7, #16]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a19      	ldr	r2, [pc, #100]	; (800de50 <TIM_OC6_SetConfig+0xb8>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d00f      	beq.n	800de10 <TIM_OC6_SetConfig+0x78>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a18      	ldr	r2, [pc, #96]	; (800de54 <TIM_OC6_SetConfig+0xbc>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d00b      	beq.n	800de10 <TIM_OC6_SetConfig+0x78>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a17      	ldr	r2, [pc, #92]	; (800de58 <TIM_OC6_SetConfig+0xc0>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d007      	beq.n	800de10 <TIM_OC6_SetConfig+0x78>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a16      	ldr	r2, [pc, #88]	; (800de5c <TIM_OC6_SetConfig+0xc4>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d003      	beq.n	800de10 <TIM_OC6_SetConfig+0x78>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a15      	ldr	r2, [pc, #84]	; (800de60 <TIM_OC6_SetConfig+0xc8>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d109      	bne.n	800de24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	029b      	lsls	r3, r3, #10
 800de1e:	697a      	ldr	r2, [r7, #20]
 800de20:	4313      	orrs	r3, r2
 800de22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	685a      	ldr	r2, [r3, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	621a      	str	r2, [r3, #32]
}
 800de3e:	bf00      	nop
 800de40:	371c      	adds	r7, #28
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	feff8fff 	.word	0xfeff8fff
 800de50:	40010000 	.word	0x40010000
 800de54:	40010400 	.word	0x40010400
 800de58:	40014000 	.word	0x40014000
 800de5c:	40014400 	.word	0x40014400
 800de60:	40014800 	.word	0x40014800

0800de64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	f023 0201 	bic.w	r2, r3, #1
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4a28      	ldr	r2, [pc, #160]	; (800df30 <TIM_TI1_SetConfig+0xcc>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d01b      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de98:	d017      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	4a25      	ldr	r2, [pc, #148]	; (800df34 <TIM_TI1_SetConfig+0xd0>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d013      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	4a24      	ldr	r2, [pc, #144]	; (800df38 <TIM_TI1_SetConfig+0xd4>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d00f      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	4a23      	ldr	r2, [pc, #140]	; (800df3c <TIM_TI1_SetConfig+0xd8>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d00b      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	4a22      	ldr	r2, [pc, #136]	; (800df40 <TIM_TI1_SetConfig+0xdc>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d007      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	4a21      	ldr	r2, [pc, #132]	; (800df44 <TIM_TI1_SetConfig+0xe0>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d003      	beq.n	800deca <TIM_TI1_SetConfig+0x66>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	4a20      	ldr	r2, [pc, #128]	; (800df48 <TIM_TI1_SetConfig+0xe4>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d101      	bne.n	800dece <TIM_TI1_SetConfig+0x6a>
 800deca:	2301      	movs	r3, #1
 800decc:	e000      	b.n	800ded0 <TIM_TI1_SetConfig+0x6c>
 800dece:	2300      	movs	r3, #0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d008      	beq.n	800dee6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	617b      	str	r3, [r7, #20]
 800dee4:	e003      	b.n	800deee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	f043 0301 	orr.w	r3, r3, #1
 800deec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800def4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	011b      	lsls	r3, r3, #4
 800defa:	b2db      	uxtb	r3, r3
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	4313      	orrs	r3, r2
 800df00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f023 030a 	bic.w	r3, r3, #10
 800df08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f003 030a 	and.w	r3, r3, #10
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4313      	orrs	r3, r2
 800df14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	621a      	str	r2, [r3, #32]
}
 800df22:	bf00      	nop
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	40010000 	.word	0x40010000
 800df34:	40000400 	.word	0x40000400
 800df38:	40000800 	.word	0x40000800
 800df3c:	40000c00 	.word	0x40000c00
 800df40:	40010400 	.word	0x40010400
 800df44:	40001800 	.word	0x40001800
 800df48:	40014000 	.word	0x40014000

0800df4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	f023 0201 	bic.w	r2, r3, #1
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	699b      	ldr	r3, [r3, #24]
 800df6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	011b      	lsls	r3, r3, #4
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	4313      	orrs	r3, r2
 800df80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f023 030a 	bic.w	r3, r3, #10
 800df88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	4313      	orrs	r3, r2
 800df90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	621a      	str	r2, [r3, #32]
}
 800df9e:	bf00      	nop
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b087      	sub	sp, #28
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	607a      	str	r2, [r7, #4]
 800dfb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6a1b      	ldr	r3, [r3, #32]
 800dfbc:	f023 0210 	bic.w	r2, r3, #16
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	021b      	lsls	r3, r3, #8
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	031b      	lsls	r3, r3, #12
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dffc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	011b      	lsls	r3, r3, #4
 800e002:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	4313      	orrs	r3, r2
 800e00a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	621a      	str	r2, [r3, #32]
}
 800e018:	bf00      	nop
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6a1b      	ldr	r3, [r3, #32]
 800e034:	f023 0210 	bic.w	r2, r3, #16
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6a1b      	ldr	r3, [r3, #32]
 800e046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e04e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	031b      	lsls	r3, r3, #12
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	4313      	orrs	r3, r2
 800e058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	011b      	lsls	r3, r3, #4
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	4313      	orrs	r3, r2
 800e06a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	621a      	str	r2, [r3, #32]
}
 800e078:	bf00      	nop
 800e07a:	371c      	adds	r7, #28
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e084:	b480      	push	{r7}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	69db      	ldr	r3, [r3, #28]
 800e0a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6a1b      	ldr	r3, [r3, #32]
 800e0a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f023 0303 	bic.w	r3, r3, #3
 800e0b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e0c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	011b      	lsls	r3, r3, #4
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e0d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	021b      	lsls	r3, r3, #8
 800e0da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	621a      	str	r2, [r3, #32]
}
 800e0f0:	bf00      	nop
 800e0f2:	371c      	adds	r7, #28
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	69db      	ldr	r3, [r3, #28]
 800e11a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	021b      	lsls	r3, r3, #8
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	4313      	orrs	r3, r2
 800e132:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e13a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	031b      	lsls	r3, r3, #12
 800e140:	b29b      	uxth	r3, r3
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	4313      	orrs	r3, r2
 800e146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e14e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	031b      	lsls	r3, r3, #12
 800e154:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	621a      	str	r2, [r3, #32]
}
 800e16a:	bf00      	nop
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
	...

0800e178 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <TIM_ITRx_SetConfig+0x38>)
 800e18c:	4013      	ands	r3, r2
 800e18e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e190:	683a      	ldr	r2, [r7, #0]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	4313      	orrs	r3, r2
 800e196:	f043 0307 	orr.w	r3, r3, #7
 800e19a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	609a      	str	r2, [r3, #8]
}
 800e1a2:	bf00      	nop
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	ffcfff8f 	.word	0xffcfff8f

0800e1b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b087      	sub	sp, #28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	021a      	lsls	r2, r3, #8
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	431a      	orrs	r2, r3
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	697a      	ldr	r2, [r7, #20]
 800e1e6:	609a      	str	r2, [r3, #8]
}
 800e1e8:	bf00      	nop
 800e1ea:	371c      	adds	r7, #28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b087      	sub	sp, #28
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f003 031f 	and.w	r3, r3, #31
 800e206:	2201      	movs	r2, #1
 800e208:	fa02 f303 	lsl.w	r3, r2, r3
 800e20c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6a1a      	ldr	r2, [r3, #32]
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	43db      	mvns	r3, r3
 800e216:	401a      	ands	r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6a1a      	ldr	r2, [r3, #32]
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f003 031f 	and.w	r3, r3, #31
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	fa01 f303 	lsl.w	r3, r1, r3
 800e22c:	431a      	orrs	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	621a      	str	r2, [r3, #32]
}
 800e232:	bf00      	nop
 800e234:	371c      	adds	r7, #28
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
	...

0800e240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e250:	2b01      	cmp	r3, #1
 800e252:	d101      	bne.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e254:	2302      	movs	r3, #2
 800e256:	e06d      	b.n	800e334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2202      	movs	r2, #2
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a30      	ldr	r2, [pc, #192]	; (800e340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d004      	beq.n	800e28c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a2f      	ldr	r2, [pc, #188]	; (800e344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d108      	bne.n	800e29e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a20      	ldr	r2, [pc, #128]	; (800e340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d022      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ca:	d01d      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a1d      	ldr	r2, [pc, #116]	; (800e348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d018      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a1c      	ldr	r2, [pc, #112]	; (800e34c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d013      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a1a      	ldr	r2, [pc, #104]	; (800e350 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d00e      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a15      	ldr	r2, [pc, #84]	; (800e344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d009      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a16      	ldr	r2, [pc, #88]	; (800e354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d004      	beq.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a15      	ldr	r2, [pc, #84]	; (800e358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d10c      	bne.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e30e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	4313      	orrs	r3, r2
 800e318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	40010000 	.word	0x40010000
 800e344:	40010400 	.word	0x40010400
 800e348:	40000400 	.word	0x40000400
 800e34c:	40000800 	.word	0x40000800
 800e350:	40000c00 	.word	0x40000c00
 800e354:	40001800 	.word	0x40001800
 800e358:	40014000 	.word	0x40014000

0800e35c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e042      	b.n	800e430 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d106      	bne.n	800e3c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7f7 ff75 	bl	80062ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2224      	movs	r2, #36	; 0x24
 800e3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f022 0201 	bic.w	r2, r2, #1
 800e3d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fccc 	bl	800ed78 <UART_SetConfig>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d101      	bne.n	800e3ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e022      	b.n	800e430 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f001 fa28 	bl	800f848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	685a      	ldr	r2, [r3, #4]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	689a      	ldr	r2, [r3, #8]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f042 0201 	orr.w	r2, r2, #1
 800e426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f001 faaf 	bl	800f98c <UART_CheckIdleState>
 800e42e:	4603      	mov	r3, r0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08a      	sub	sp, #40	; 0x28
 800e43c:	af02      	add	r7, sp, #8
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	4613      	mov	r3, r2
 800e446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e44e:	2b20      	cmp	r3, #32
 800e450:	f040 8083 	bne.w	800e55a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <HAL_UART_Transmit+0x28>
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	e07b      	b.n	800e55c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d101      	bne.n	800e472 <HAL_UART_Transmit+0x3a>
 800e46e:	2302      	movs	r3, #2
 800e470:	e074      	b.n	800e55c <HAL_UART_Transmit+0x124>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2201      	movs	r2, #1
 800e476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2221      	movs	r2, #33	; 0x21
 800e486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e48a:	f7f8 f8eb 	bl	8006664 <HAL_GetTick>
 800e48e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	88fa      	ldrh	r2, [r7, #6]
 800e494:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	88fa      	ldrh	r2, [r7, #6]
 800e49c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a8:	d108      	bne.n	800e4bc <HAL_UART_Transmit+0x84>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d104      	bne.n	800e4bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	e003      	b.n	800e4c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e4cc:	e02c      	b.n	800e528 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2180      	movs	r1, #128	; 0x80
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f001 faa2 	bl	800fa22 <UART_WaitOnFlagUntilTimeout>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e039      	b.n	800e55c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10b      	bne.n	800e506 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	3302      	adds	r3, #2
 800e502:	61bb      	str	r3, [r7, #24]
 800e504:	e007      	b.n	800e516 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	781a      	ldrb	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	3301      	adds	r3, #1
 800e514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	3b01      	subs	r3, #1
 800e520:	b29a      	uxth	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e52e:	b29b      	uxth	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1cc      	bne.n	800e4ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2200      	movs	r2, #0
 800e53c:	2140      	movs	r1, #64	; 0x40
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f001 fa6f 	bl	800fa22 <UART_WaitOnFlagUntilTimeout>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	e006      	b.n	800e55c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2220      	movs	r2, #32
 800e552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	e000      	b.n	800e55c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e55a:	2302      	movs	r3, #2
  }
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08a      	sub	sp, #40	; 0x28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	4613      	mov	r3, r2
 800e570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e578:	2b20      	cmp	r3, #32
 800e57a:	d142      	bne.n	800e602 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <HAL_UART_Receive_IT+0x24>
 800e582:	88fb      	ldrh	r3, [r7, #6]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e03b      	b.n	800e604 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e592:	2b01      	cmp	r3, #1
 800e594:	d101      	bne.n	800e59a <HAL_UART_Receive_IT+0x36>
 800e596:	2302      	movs	r3, #2
 800e598:	e034      	b.n	800e604 <HAL_UART_Receive_IT+0xa0>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a17      	ldr	r2, [pc, #92]	; (800e60c <HAL_UART_Receive_IT+0xa8>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d01f      	beq.n	800e5f2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d018      	beq.n	800e5f2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	e853 3f00 	ldrex	r3, [r3]
 800e5cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	623b      	str	r3, [r7, #32]
 800e5e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e2:	69f9      	ldr	r1, [r7, #28]
 800e5e4:	6a3a      	ldr	r2, [r7, #32]
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e6      	bne.n	800e5c0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e5f2:	88fb      	ldrh	r3, [r7, #6]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	68b9      	ldr	r1, [r7, #8]
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f001 fadb 	bl	800fbb4 <UART_Start_Receive_IT>
 800e5fe:	4603      	mov	r3, r0
 800e600:	e000      	b.n	800e604 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e602:	2302      	movs	r3, #2
  }
}
 800e604:	4618      	mov	r0, r3
 800e606:	3728      	adds	r7, #40	; 0x28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	58000c00 	.word	0x58000c00

0800e610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b0ba      	sub	sp, #232	; 0xe8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e63a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e63e:	4013      	ands	r3, r2
 800e640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d11b      	bne.n	800e684 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e650:	f003 0320 	and.w	r3, r3, #32
 800e654:	2b00      	cmp	r3, #0
 800e656:	d015      	beq.n	800e684 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e65c:	f003 0320 	and.w	r3, r3, #32
 800e660:	2b00      	cmp	r3, #0
 800e662:	d105      	bne.n	800e670 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d009      	beq.n	800e684 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e674:	2b00      	cmp	r3, #0
 800e676:	f000 835a 	beq.w	800ed2e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	4798      	blx	r3
      }
      return;
 800e682:	e354      	b.n	800ed2e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 811f 	beq.w	800e8cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e68e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e692:	4b8b      	ldr	r3, [pc, #556]	; (800e8c0 <HAL_UART_IRQHandler+0x2b0>)
 800e694:	4013      	ands	r3, r2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e69a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e69e:	4b89      	ldr	r3, [pc, #548]	; (800e8c4 <HAL_UART_IRQHandler+0x2b4>)
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f000 8112 	beq.w	800e8cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ac:	f003 0301 	and.w	r3, r3, #1
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <HAL_UART_IRQHandler+0xc8>
 800e6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ce:	f043 0201 	orr.w	r2, r3, #1
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6dc:	f003 0302 	and.w	r3, r3, #2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d011      	beq.n	800e708 <HAL_UART_IRQHandler+0xf8>
 800e6e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6e8:	f003 0301 	and.w	r3, r3, #1
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00b      	beq.n	800e708 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6fe:	f043 0204 	orr.w	r2, r3, #4
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d011      	beq.n	800e738 <HAL_UART_IRQHandler+0x128>
 800e714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2204      	movs	r2, #4
 800e726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e72e:	f043 0202 	orr.w	r2, r3, #2
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e73c:	f003 0308 	and.w	r3, r3, #8
 800e740:	2b00      	cmp	r3, #0
 800e742:	d017      	beq.n	800e774 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e748:	f003 0320 	and.w	r3, r3, #32
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d105      	bne.n	800e75c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e750:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e754:	4b5a      	ldr	r3, [pc, #360]	; (800e8c0 <HAL_UART_IRQHandler+0x2b0>)
 800e756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2208      	movs	r2, #8
 800e762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e76a:	f043 0208 	orr.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d012      	beq.n	800e7a6 <HAL_UART_IRQHandler+0x196>
 800e780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00c      	beq.n	800e7a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e79c:	f043 0220 	orr.w	r2, r3, #32
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f000 82c0 	beq.w	800ed32 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7b6:	f003 0320 	and.w	r3, r3, #32
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d013      	beq.n	800e7e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7c2:	f003 0320 	and.w	r3, r3, #32
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d105      	bne.n	800e7d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d007      	beq.n	800e7e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7fa:	2b40      	cmp	r3, #64	; 0x40
 800e7fc:	d005      	beq.n	800e80a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e802:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e806:	2b00      	cmp	r3, #0
 800e808:	d04f      	beq.n	800e8aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f001 fafc 	bl	800fe08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e81a:	2b40      	cmp	r3, #64	; 0x40
 800e81c:	d141      	bne.n	800e8a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3308      	adds	r3, #8
 800e824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e82c:	e853 3f00 	ldrex	r3, [r3]
 800e830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e83c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3308      	adds	r3, #8
 800e846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e84a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e84e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d1d9      	bne.n	800e81e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d013      	beq.n	800e89a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e876:	4a14      	ldr	r2, [pc, #80]	; (800e8c8 <HAL_UART_IRQHandler+0x2b8>)
 800e878:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f9 f952 	bl	8007b28 <HAL_DMA_Abort_IT>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d017      	beq.n	800e8ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e894:	4610      	mov	r0, r2
 800e896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e898:	e00f      	b.n	800e8ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fa56 	bl	800ed4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8a0:	e00b      	b.n	800e8ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fa52 	bl	800ed4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8a8:	e007      	b.n	800e8ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fa4e 	bl	800ed4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e8b8:	e23b      	b.n	800ed32 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ba:	bf00      	nop
    return;
 800e8bc:	e239      	b.n	800ed32 <HAL_UART_IRQHandler+0x722>
 800e8be:	bf00      	nop
 800e8c0:	10000001 	.word	0x10000001
 800e8c4:	04000120 	.word	0x04000120
 800e8c8:	0800fed5 	.word	0x0800fed5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	f040 81ce 	bne.w	800ec72 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8da:	f003 0310 	and.w	r3, r3, #16
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 81c7 	beq.w	800ec72 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8e8:	f003 0310 	and.w	r3, r3, #16
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f000 81c0 	beq.w	800ec72 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2210      	movs	r2, #16
 800e8f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e904:	2b40      	cmp	r3, #64	; 0x40
 800e906:	f040 813b 	bne.w	800eb80 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a8b      	ldr	r2, [pc, #556]	; (800eb40 <HAL_UART_IRQHandler+0x530>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d059      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a89      	ldr	r2, [pc, #548]	; (800eb44 <HAL_UART_IRQHandler+0x534>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d053      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a87      	ldr	r2, [pc, #540]	; (800eb48 <HAL_UART_IRQHandler+0x538>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d04d      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4a85      	ldr	r2, [pc, #532]	; (800eb4c <HAL_UART_IRQHandler+0x53c>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d047      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a83      	ldr	r2, [pc, #524]	; (800eb50 <HAL_UART_IRQHandler+0x540>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d041      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a81      	ldr	r2, [pc, #516]	; (800eb54 <HAL_UART_IRQHandler+0x544>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d03b      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a7f      	ldr	r2, [pc, #508]	; (800eb58 <HAL_UART_IRQHandler+0x548>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d035      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a7d      	ldr	r2, [pc, #500]	; (800eb5c <HAL_UART_IRQHandler+0x54c>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d02f      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a7b      	ldr	r2, [pc, #492]	; (800eb60 <HAL_UART_IRQHandler+0x550>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d029      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a79      	ldr	r2, [pc, #484]	; (800eb64 <HAL_UART_IRQHandler+0x554>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d023      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a77      	ldr	r2, [pc, #476]	; (800eb68 <HAL_UART_IRQHandler+0x558>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d01d      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a75      	ldr	r2, [pc, #468]	; (800eb6c <HAL_UART_IRQHandler+0x55c>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d017      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a73      	ldr	r2, [pc, #460]	; (800eb70 <HAL_UART_IRQHandler+0x560>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d011      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a71      	ldr	r2, [pc, #452]	; (800eb74 <HAL_UART_IRQHandler+0x564>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d00b      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a6f      	ldr	r2, [pc, #444]	; (800eb78 <HAL_UART_IRQHandler+0x568>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d005      	beq.n	800e9ca <HAL_UART_IRQHandler+0x3ba>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a6d      	ldr	r2, [pc, #436]	; (800eb7c <HAL_UART_IRQHandler+0x56c>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d105      	bne.n	800e9d6 <HAL_UART_IRQHandler+0x3c6>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	e004      	b.n	800e9e0 <HAL_UART_IRQHandler+0x3d0>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e9e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 81a4 	beq.w	800ed36 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	f080 819c 	bcs.w	800ed36 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea0c:	69db      	ldr	r3, [r3, #28]
 800ea0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea12:	f000 8086 	beq.w	800eb22 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ea2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ea4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ea50:	e841 2300 	strex	r3, r2, [r1]
 800ea54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ea58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1da      	bne.n	800ea16 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3308      	adds	r3, #8
 800ea66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ea70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea72:	f023 0301 	bic.w	r3, r3, #1
 800ea76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ea88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ea8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea90:	e841 2300 	strex	r3, r2, [r1]
 800ea94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ea96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1e1      	bne.n	800ea60 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaa6:	e853 3f00 	ldrex	r3, [r3]
 800eaaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eac0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e3      	bne.n	800ea9c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaea:	e853 3f00 	ldrex	r3, [r3]
 800eaee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eaf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaf2:	f023 0310 	bic.w	r3, r3, #16
 800eaf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	461a      	mov	r2, r3
 800eb00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb04:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb0c:	e841 2300 	strex	r3, r2, [r1]
 800eb10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e4      	bne.n	800eae2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7f8 fce5 	bl	80074ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 f912 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb3c:	e0fb      	b.n	800ed36 <HAL_UART_IRQHandler+0x726>
 800eb3e:	bf00      	nop
 800eb40:	40020010 	.word	0x40020010
 800eb44:	40020028 	.word	0x40020028
 800eb48:	40020040 	.word	0x40020040
 800eb4c:	40020058 	.word	0x40020058
 800eb50:	40020070 	.word	0x40020070
 800eb54:	40020088 	.word	0x40020088
 800eb58:	400200a0 	.word	0x400200a0
 800eb5c:	400200b8 	.word	0x400200b8
 800eb60:	40020410 	.word	0x40020410
 800eb64:	40020428 	.word	0x40020428
 800eb68:	40020440 	.word	0x40020440
 800eb6c:	40020458 	.word	0x40020458
 800eb70:	40020470 	.word	0x40020470
 800eb74:	40020488 	.word	0x40020488
 800eb78:	400204a0 	.word	0x400204a0
 800eb7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f000 80cc 	beq.w	800ed3a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800eba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 80c7 	beq.w	800ed3a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebce:	647b      	str	r3, [r7, #68]	; 0x44
 800ebd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebd6:	e841 2300 	strex	r3, r2, [r1]
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ebdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e4      	bne.n	800ebac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	e853 3f00 	ldrex	r3, [r3]
 800ebf0:	623b      	str	r3, [r7, #32]
   return(result);
 800ebf2:	6a3a      	ldr	r2, [r7, #32]
 800ebf4:	4b54      	ldr	r3, [pc, #336]	; (800ed48 <HAL_UART_IRQHandler+0x738>)
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3308      	adds	r3, #8
 800ec02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ec06:	633a      	str	r2, [r7, #48]	; 0x30
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec0e:	e841 2300 	strex	r3, r2, [r1]
 800ec12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1e3      	bne.n	800ebe2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	e853 3f00 	ldrex	r3, [r3]
 800ec3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f023 0310 	bic.w	r3, r3, #16
 800ec42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec50:	61fb      	str	r3, [r7, #28]
 800ec52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec54:	69b9      	ldr	r1, [r7, #24]
 800ec56:	69fa      	ldr	r2, [r7, #28]
 800ec58:	e841 2300 	strex	r3, r2, [r1]
 800ec5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1e4      	bne.n	800ec2e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f878 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec70:	e063      	b.n	800ed3a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00e      	beq.n	800ec9c <HAL_UART_IRQHandler+0x68c>
 800ec7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d008      	beq.n	800ec9c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ec92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f001 fdbb 	bl	8010810 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec9a:	e051      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d014      	beq.n	800ecd2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d105      	bne.n	800ecc0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ecb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d008      	beq.n	800ecd2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d03a      	beq.n	800ed3e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	4798      	blx	r3
    }
    return;
 800ecd0:	e035      	b.n	800ed3e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ecd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d009      	beq.n	800ecf2 <HAL_UART_IRQHandler+0x6e2>
 800ecde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d003      	beq.n	800ecf2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 f908 	bl	800ff00 <UART_EndTransmit_IT>
    return;
 800ecf0:	e026      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ecf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <HAL_UART_IRQHandler+0x702>
 800ecfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d003      	beq.n	800ed12 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f001 fd94 	bl	8010838 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed10:	e016      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ed12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d010      	beq.n	800ed40 <HAL_UART_IRQHandler+0x730>
 800ed1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	da0c      	bge.n	800ed40 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 fd7c 	bl	8010824 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed2c:	e008      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
      return;
 800ed2e:	bf00      	nop
 800ed30:	e006      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
    return;
 800ed32:	bf00      	nop
 800ed34:	e004      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
      return;
 800ed36:	bf00      	nop
 800ed38:	e002      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
      return;
 800ed3a:	bf00      	nop
 800ed3c:	e000      	b.n	800ed40 <HAL_UART_IRQHandler+0x730>
    return;
 800ed3e:	bf00      	nop
  }
}
 800ed40:	37e8      	adds	r7, #232	; 0xe8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	effffffe 	.word	0xeffffffe

0800ed4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed7c:	b092      	sub	sp, #72	; 0x48
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	431a      	orrs	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	431a      	orrs	r2, r3
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	69db      	ldr	r3, [r3, #28]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	4bbe      	ldr	r3, [pc, #760]	; (800f0a0 <UART_SetConfig+0x328>)
 800eda8:	4013      	ands	r3, r2
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	6812      	ldr	r2, [r2, #0]
 800edae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edb0:	430b      	orrs	r3, r1
 800edb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	68da      	ldr	r2, [r3, #12]
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	430a      	orrs	r2, r1
 800edc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4ab3      	ldr	r2, [pc, #716]	; (800f0a4 <UART_SetConfig+0x32c>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d004      	beq.n	800ede4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ede0:	4313      	orrs	r3, r2
 800ede2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	689a      	ldr	r2, [r3, #8]
 800edea:	4baf      	ldr	r3, [pc, #700]	; (800f0a8 <UART_SetConfig+0x330>)
 800edec:	4013      	ands	r3, r2
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edf4:	430b      	orrs	r3, r1
 800edf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfe:	f023 010f 	bic.w	r1, r3, #15
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	430a      	orrs	r2, r1
 800ee0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4aa6      	ldr	r2, [pc, #664]	; (800f0ac <UART_SetConfig+0x334>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d177      	bne.n	800ef08 <UART_SetConfig+0x190>
 800ee18:	4ba5      	ldr	r3, [pc, #660]	; (800f0b0 <UART_SetConfig+0x338>)
 800ee1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee20:	2b28      	cmp	r3, #40	; 0x28
 800ee22:	d86d      	bhi.n	800ef00 <UART_SetConfig+0x188>
 800ee24:	a201      	add	r2, pc, #4	; (adr r2, 800ee2c <UART_SetConfig+0xb4>)
 800ee26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2a:	bf00      	nop
 800ee2c:	0800eed1 	.word	0x0800eed1
 800ee30:	0800ef01 	.word	0x0800ef01
 800ee34:	0800ef01 	.word	0x0800ef01
 800ee38:	0800ef01 	.word	0x0800ef01
 800ee3c:	0800ef01 	.word	0x0800ef01
 800ee40:	0800ef01 	.word	0x0800ef01
 800ee44:	0800ef01 	.word	0x0800ef01
 800ee48:	0800ef01 	.word	0x0800ef01
 800ee4c:	0800eed9 	.word	0x0800eed9
 800ee50:	0800ef01 	.word	0x0800ef01
 800ee54:	0800ef01 	.word	0x0800ef01
 800ee58:	0800ef01 	.word	0x0800ef01
 800ee5c:	0800ef01 	.word	0x0800ef01
 800ee60:	0800ef01 	.word	0x0800ef01
 800ee64:	0800ef01 	.word	0x0800ef01
 800ee68:	0800ef01 	.word	0x0800ef01
 800ee6c:	0800eee1 	.word	0x0800eee1
 800ee70:	0800ef01 	.word	0x0800ef01
 800ee74:	0800ef01 	.word	0x0800ef01
 800ee78:	0800ef01 	.word	0x0800ef01
 800ee7c:	0800ef01 	.word	0x0800ef01
 800ee80:	0800ef01 	.word	0x0800ef01
 800ee84:	0800ef01 	.word	0x0800ef01
 800ee88:	0800ef01 	.word	0x0800ef01
 800ee8c:	0800eee9 	.word	0x0800eee9
 800ee90:	0800ef01 	.word	0x0800ef01
 800ee94:	0800ef01 	.word	0x0800ef01
 800ee98:	0800ef01 	.word	0x0800ef01
 800ee9c:	0800ef01 	.word	0x0800ef01
 800eea0:	0800ef01 	.word	0x0800ef01
 800eea4:	0800ef01 	.word	0x0800ef01
 800eea8:	0800ef01 	.word	0x0800ef01
 800eeac:	0800eef1 	.word	0x0800eef1
 800eeb0:	0800ef01 	.word	0x0800ef01
 800eeb4:	0800ef01 	.word	0x0800ef01
 800eeb8:	0800ef01 	.word	0x0800ef01
 800eebc:	0800ef01 	.word	0x0800ef01
 800eec0:	0800ef01 	.word	0x0800ef01
 800eec4:	0800ef01 	.word	0x0800ef01
 800eec8:	0800ef01 	.word	0x0800ef01
 800eecc:	0800eef9 	.word	0x0800eef9
 800eed0:	2301      	movs	r3, #1
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e222      	b.n	800f31e <UART_SetConfig+0x5a6>
 800eed8:	2304      	movs	r3, #4
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e21e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800eee0:	2308      	movs	r3, #8
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e21a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800eee8:	2310      	movs	r3, #16
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e216      	b.n	800f31e <UART_SetConfig+0x5a6>
 800eef0:	2320      	movs	r3, #32
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e212      	b.n	800f31e <UART_SetConfig+0x5a6>
 800eef8:	2340      	movs	r3, #64	; 0x40
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e20e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef00:	2380      	movs	r3, #128	; 0x80
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e20a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a69      	ldr	r2, [pc, #420]	; (800f0b4 <UART_SetConfig+0x33c>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d130      	bne.n	800ef74 <UART_SetConfig+0x1fc>
 800ef12:	4b67      	ldr	r3, [pc, #412]	; (800f0b0 <UART_SetConfig+0x338>)
 800ef14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef16:	f003 0307 	and.w	r3, r3, #7
 800ef1a:	2b05      	cmp	r3, #5
 800ef1c:	d826      	bhi.n	800ef6c <UART_SetConfig+0x1f4>
 800ef1e:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <UART_SetConfig+0x1ac>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef3d 	.word	0x0800ef3d
 800ef28:	0800ef45 	.word	0x0800ef45
 800ef2c:	0800ef4d 	.word	0x0800ef4d
 800ef30:	0800ef55 	.word	0x0800ef55
 800ef34:	0800ef5d 	.word	0x0800ef5d
 800ef38:	0800ef65 	.word	0x0800ef65
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef42:	e1ec      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef44:	2304      	movs	r3, #4
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e1e8      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef4c:	2308      	movs	r3, #8
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef52:	e1e4      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef54:	2310      	movs	r3, #16
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e1e0      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e1dc      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef64:	2340      	movs	r3, #64	; 0x40
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e1d8      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef6c:	2380      	movs	r3, #128	; 0x80
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e1d4      	b.n	800f31e <UART_SetConfig+0x5a6>
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a4f      	ldr	r2, [pc, #316]	; (800f0b8 <UART_SetConfig+0x340>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d130      	bne.n	800efe0 <UART_SetConfig+0x268>
 800ef7e:	4b4c      	ldr	r3, [pc, #304]	; (800f0b0 <UART_SetConfig+0x338>)
 800ef80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	2b05      	cmp	r3, #5
 800ef88:	d826      	bhi.n	800efd8 <UART_SetConfig+0x260>
 800ef8a:	a201      	add	r2, pc, #4	; (adr r2, 800ef90 <UART_SetConfig+0x218>)
 800ef8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef90:	0800efa9 	.word	0x0800efa9
 800ef94:	0800efb1 	.word	0x0800efb1
 800ef98:	0800efb9 	.word	0x0800efb9
 800ef9c:	0800efc1 	.word	0x0800efc1
 800efa0:	0800efc9 	.word	0x0800efc9
 800efa4:	0800efd1 	.word	0x0800efd1
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efae:	e1b6      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efb0:	2304      	movs	r3, #4
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb6:	e1b2      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efb8:	2308      	movs	r3, #8
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efbe:	e1ae      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efc0:	2310      	movs	r3, #16
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc6:	e1aa      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efc8:	2320      	movs	r3, #32
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e1a6      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efd0:	2340      	movs	r3, #64	; 0x40
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e1a2      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efd8:	2380      	movs	r3, #128	; 0x80
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e19e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a35      	ldr	r2, [pc, #212]	; (800f0bc <UART_SetConfig+0x344>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d130      	bne.n	800f04c <UART_SetConfig+0x2d4>
 800efea:	4b31      	ldr	r3, [pc, #196]	; (800f0b0 <UART_SetConfig+0x338>)
 800efec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efee:	f003 0307 	and.w	r3, r3, #7
 800eff2:	2b05      	cmp	r3, #5
 800eff4:	d826      	bhi.n	800f044 <UART_SetConfig+0x2cc>
 800eff6:	a201      	add	r2, pc, #4	; (adr r2, 800effc <UART_SetConfig+0x284>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f015 	.word	0x0800f015
 800f000:	0800f01d 	.word	0x0800f01d
 800f004:	0800f025 	.word	0x0800f025
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f035 	.word	0x0800f035
 800f010:	0800f03d 	.word	0x0800f03d
 800f014:	2300      	movs	r3, #0
 800f016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01a:	e180      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f01c:	2304      	movs	r3, #4
 800f01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f022:	e17c      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f024:	2308      	movs	r3, #8
 800f026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02a:	e178      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f02c:	2310      	movs	r3, #16
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f032:	e174      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f034:	2320      	movs	r3, #32
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e170      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f03c:	2340      	movs	r3, #64	; 0x40
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e16c      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f044:	2380      	movs	r3, #128	; 0x80
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e168      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a1b      	ldr	r2, [pc, #108]	; (800f0c0 <UART_SetConfig+0x348>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d142      	bne.n	800f0dc <UART_SetConfig+0x364>
 800f056:	4b16      	ldr	r3, [pc, #88]	; (800f0b0 <UART_SetConfig+0x338>)
 800f058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f05a:	f003 0307 	and.w	r3, r3, #7
 800f05e:	2b05      	cmp	r3, #5
 800f060:	d838      	bhi.n	800f0d4 <UART_SetConfig+0x35c>
 800f062:	a201      	add	r2, pc, #4	; (adr r2, 800f068 <UART_SetConfig+0x2f0>)
 800f064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f068:	0800f081 	.word	0x0800f081
 800f06c:	0800f089 	.word	0x0800f089
 800f070:	0800f091 	.word	0x0800f091
 800f074:	0800f099 	.word	0x0800f099
 800f078:	0800f0c5 	.word	0x0800f0c5
 800f07c:	0800f0cd 	.word	0x0800f0cd
 800f080:	2300      	movs	r3, #0
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f086:	e14a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f088:	2304      	movs	r3, #4
 800f08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08e:	e146      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f090:	2308      	movs	r3, #8
 800f092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f096:	e142      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f098:	2310      	movs	r3, #16
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e13e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f0a0:	cfff69f3 	.word	0xcfff69f3
 800f0a4:	58000c00 	.word	0x58000c00
 800f0a8:	11fff4ff 	.word	0x11fff4ff
 800f0ac:	40011000 	.word	0x40011000
 800f0b0:	58024400 	.word	0x58024400
 800f0b4:	40004400 	.word	0x40004400
 800f0b8:	40004800 	.word	0x40004800
 800f0bc:	40004c00 	.word	0x40004c00
 800f0c0:	40005000 	.word	0x40005000
 800f0c4:	2320      	movs	r3, #32
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e128      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f0cc:	2340      	movs	r3, #64	; 0x40
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e124      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f0d4:	2380      	movs	r3, #128	; 0x80
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0da:	e120      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4acb      	ldr	r2, [pc, #812]	; (800f410 <UART_SetConfig+0x698>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d176      	bne.n	800f1d4 <UART_SetConfig+0x45c>
 800f0e6:	4bcb      	ldr	r3, [pc, #812]	; (800f414 <UART_SetConfig+0x69c>)
 800f0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0ee:	2b28      	cmp	r3, #40	; 0x28
 800f0f0:	d86c      	bhi.n	800f1cc <UART_SetConfig+0x454>
 800f0f2:	a201      	add	r2, pc, #4	; (adr r2, 800f0f8 <UART_SetConfig+0x380>)
 800f0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f8:	0800f19d 	.word	0x0800f19d
 800f0fc:	0800f1cd 	.word	0x0800f1cd
 800f100:	0800f1cd 	.word	0x0800f1cd
 800f104:	0800f1cd 	.word	0x0800f1cd
 800f108:	0800f1cd 	.word	0x0800f1cd
 800f10c:	0800f1cd 	.word	0x0800f1cd
 800f110:	0800f1cd 	.word	0x0800f1cd
 800f114:	0800f1cd 	.word	0x0800f1cd
 800f118:	0800f1a5 	.word	0x0800f1a5
 800f11c:	0800f1cd 	.word	0x0800f1cd
 800f120:	0800f1cd 	.word	0x0800f1cd
 800f124:	0800f1cd 	.word	0x0800f1cd
 800f128:	0800f1cd 	.word	0x0800f1cd
 800f12c:	0800f1cd 	.word	0x0800f1cd
 800f130:	0800f1cd 	.word	0x0800f1cd
 800f134:	0800f1cd 	.word	0x0800f1cd
 800f138:	0800f1ad 	.word	0x0800f1ad
 800f13c:	0800f1cd 	.word	0x0800f1cd
 800f140:	0800f1cd 	.word	0x0800f1cd
 800f144:	0800f1cd 	.word	0x0800f1cd
 800f148:	0800f1cd 	.word	0x0800f1cd
 800f14c:	0800f1cd 	.word	0x0800f1cd
 800f150:	0800f1cd 	.word	0x0800f1cd
 800f154:	0800f1cd 	.word	0x0800f1cd
 800f158:	0800f1b5 	.word	0x0800f1b5
 800f15c:	0800f1cd 	.word	0x0800f1cd
 800f160:	0800f1cd 	.word	0x0800f1cd
 800f164:	0800f1cd 	.word	0x0800f1cd
 800f168:	0800f1cd 	.word	0x0800f1cd
 800f16c:	0800f1cd 	.word	0x0800f1cd
 800f170:	0800f1cd 	.word	0x0800f1cd
 800f174:	0800f1cd 	.word	0x0800f1cd
 800f178:	0800f1bd 	.word	0x0800f1bd
 800f17c:	0800f1cd 	.word	0x0800f1cd
 800f180:	0800f1cd 	.word	0x0800f1cd
 800f184:	0800f1cd 	.word	0x0800f1cd
 800f188:	0800f1cd 	.word	0x0800f1cd
 800f18c:	0800f1cd 	.word	0x0800f1cd
 800f190:	0800f1cd 	.word	0x0800f1cd
 800f194:	0800f1cd 	.word	0x0800f1cd
 800f198:	0800f1c5 	.word	0x0800f1c5
 800f19c:	2301      	movs	r3, #1
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e0bc      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1a4:	2304      	movs	r3, #4
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1aa:	e0b8      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1ac:	2308      	movs	r3, #8
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b2:	e0b4      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1b4:	2310      	movs	r3, #16
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ba:	e0b0      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1bc:	2320      	movs	r3, #32
 800f1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c2:	e0ac      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1c4:	2340      	movs	r3, #64	; 0x40
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ca:	e0a8      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1cc:	2380      	movs	r3, #128	; 0x80
 800f1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d2:	e0a4      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4a8f      	ldr	r2, [pc, #572]	; (800f418 <UART_SetConfig+0x6a0>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d130      	bne.n	800f240 <UART_SetConfig+0x4c8>
 800f1de:	4b8d      	ldr	r3, [pc, #564]	; (800f414 <UART_SetConfig+0x69c>)
 800f1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e2:	f003 0307 	and.w	r3, r3, #7
 800f1e6:	2b05      	cmp	r3, #5
 800f1e8:	d826      	bhi.n	800f238 <UART_SetConfig+0x4c0>
 800f1ea:	a201      	add	r2, pc, #4	; (adr r2, 800f1f0 <UART_SetConfig+0x478>)
 800f1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f0:	0800f209 	.word	0x0800f209
 800f1f4:	0800f211 	.word	0x0800f211
 800f1f8:	0800f219 	.word	0x0800f219
 800f1fc:	0800f221 	.word	0x0800f221
 800f200:	0800f229 	.word	0x0800f229
 800f204:	0800f231 	.word	0x0800f231
 800f208:	2300      	movs	r3, #0
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20e:	e086      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f210:	2304      	movs	r3, #4
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f216:	e082      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f218:	2308      	movs	r3, #8
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21e:	e07e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f220:	2310      	movs	r3, #16
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f226:	e07a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f228:	2320      	movs	r3, #32
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22e:	e076      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f230:	2340      	movs	r3, #64	; 0x40
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f236:	e072      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f238:	2380      	movs	r3, #128	; 0x80
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23e:	e06e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a75      	ldr	r2, [pc, #468]	; (800f41c <UART_SetConfig+0x6a4>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d130      	bne.n	800f2ac <UART_SetConfig+0x534>
 800f24a:	4b72      	ldr	r3, [pc, #456]	; (800f414 <UART_SetConfig+0x69c>)
 800f24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f24e:	f003 0307 	and.w	r3, r3, #7
 800f252:	2b05      	cmp	r3, #5
 800f254:	d826      	bhi.n	800f2a4 <UART_SetConfig+0x52c>
 800f256:	a201      	add	r2, pc, #4	; (adr r2, 800f25c <UART_SetConfig+0x4e4>)
 800f258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f25c:	0800f275 	.word	0x0800f275
 800f260:	0800f27d 	.word	0x0800f27d
 800f264:	0800f285 	.word	0x0800f285
 800f268:	0800f28d 	.word	0x0800f28d
 800f26c:	0800f295 	.word	0x0800f295
 800f270:	0800f29d 	.word	0x0800f29d
 800f274:	2300      	movs	r3, #0
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27a:	e050      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f27c:	2304      	movs	r3, #4
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f282:	e04c      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f284:	2308      	movs	r3, #8
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28a:	e048      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f28c:	2310      	movs	r3, #16
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f292:	e044      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f294:	2320      	movs	r3, #32
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29a:	e040      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a2:	e03c      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f2a4:	2380      	movs	r3, #128	; 0x80
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2aa:	e038      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a5b      	ldr	r2, [pc, #364]	; (800f420 <UART_SetConfig+0x6a8>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d130      	bne.n	800f318 <UART_SetConfig+0x5a0>
 800f2b6:	4b57      	ldr	r3, [pc, #348]	; (800f414 <UART_SetConfig+0x69c>)
 800f2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ba:	f003 0307 	and.w	r3, r3, #7
 800f2be:	2b05      	cmp	r3, #5
 800f2c0:	d826      	bhi.n	800f310 <UART_SetConfig+0x598>
 800f2c2:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <UART_SetConfig+0x550>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f2e1 	.word	0x0800f2e1
 800f2cc:	0800f2e9 	.word	0x0800f2e9
 800f2d0:	0800f2f1 	.word	0x0800f2f1
 800f2d4:	0800f2f9 	.word	0x0800f2f9
 800f2d8:	0800f301 	.word	0x0800f301
 800f2dc:	0800f309 	.word	0x0800f309
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e6:	e01a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f2e8:	2304      	movs	r3, #4
 800f2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ee:	e016      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f2f0:	2308      	movs	r3, #8
 800f2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f6:	e012      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f2f8:	2310      	movs	r3, #16
 800f2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fe:	e00e      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f300:	2320      	movs	r3, #32
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f306:	e00a      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f308:	2340      	movs	r3, #64	; 0x40
 800f30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30e:	e006      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f310:	2380      	movs	r3, #128	; 0x80
 800f312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f316:	e002      	b.n	800f31e <UART_SetConfig+0x5a6>
 800f318:	2380      	movs	r3, #128	; 0x80
 800f31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4a3f      	ldr	r2, [pc, #252]	; (800f420 <UART_SetConfig+0x6a8>)
 800f324:	4293      	cmp	r3, r2
 800f326:	f040 80f8 	bne.w	800f51a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f32a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f32e:	2b20      	cmp	r3, #32
 800f330:	dc46      	bgt.n	800f3c0 <UART_SetConfig+0x648>
 800f332:	2b02      	cmp	r3, #2
 800f334:	f2c0 8082 	blt.w	800f43c <UART_SetConfig+0x6c4>
 800f338:	3b02      	subs	r3, #2
 800f33a:	2b1e      	cmp	r3, #30
 800f33c:	d87e      	bhi.n	800f43c <UART_SetConfig+0x6c4>
 800f33e:	a201      	add	r2, pc, #4	; (adr r2, 800f344 <UART_SetConfig+0x5cc>)
 800f340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f344:	0800f3c7 	.word	0x0800f3c7
 800f348:	0800f43d 	.word	0x0800f43d
 800f34c:	0800f3cf 	.word	0x0800f3cf
 800f350:	0800f43d 	.word	0x0800f43d
 800f354:	0800f43d 	.word	0x0800f43d
 800f358:	0800f43d 	.word	0x0800f43d
 800f35c:	0800f3df 	.word	0x0800f3df
 800f360:	0800f43d 	.word	0x0800f43d
 800f364:	0800f43d 	.word	0x0800f43d
 800f368:	0800f43d 	.word	0x0800f43d
 800f36c:	0800f43d 	.word	0x0800f43d
 800f370:	0800f43d 	.word	0x0800f43d
 800f374:	0800f43d 	.word	0x0800f43d
 800f378:	0800f43d 	.word	0x0800f43d
 800f37c:	0800f3ef 	.word	0x0800f3ef
 800f380:	0800f43d 	.word	0x0800f43d
 800f384:	0800f43d 	.word	0x0800f43d
 800f388:	0800f43d 	.word	0x0800f43d
 800f38c:	0800f43d 	.word	0x0800f43d
 800f390:	0800f43d 	.word	0x0800f43d
 800f394:	0800f43d 	.word	0x0800f43d
 800f398:	0800f43d 	.word	0x0800f43d
 800f39c:	0800f43d 	.word	0x0800f43d
 800f3a0:	0800f43d 	.word	0x0800f43d
 800f3a4:	0800f43d 	.word	0x0800f43d
 800f3a8:	0800f43d 	.word	0x0800f43d
 800f3ac:	0800f43d 	.word	0x0800f43d
 800f3b0:	0800f43d 	.word	0x0800f43d
 800f3b4:	0800f43d 	.word	0x0800f43d
 800f3b8:	0800f43d 	.word	0x0800f43d
 800f3bc:	0800f42f 	.word	0x0800f42f
 800f3c0:	2b40      	cmp	r3, #64	; 0x40
 800f3c2:	d037      	beq.n	800f434 <UART_SetConfig+0x6bc>
 800f3c4:	e03a      	b.n	800f43c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3c6:	f7fc fa3d 	bl	800b844 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3cc:	e03c      	b.n	800f448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fc fa4c 	bl	800b870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3dc:	e034      	b.n	800f448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3de:	f107 0318 	add.w	r3, r7, #24
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fc fb98 	bl	800bb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ec:	e02c      	b.n	800f448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3ee:	4b09      	ldr	r3, [pc, #36]	; (800f414 <UART_SetConfig+0x69c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 0320 	and.w	r3, r3, #32
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d016      	beq.n	800f428 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3fa:	4b06      	ldr	r3, [pc, #24]	; (800f414 <UART_SetConfig+0x69c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	08db      	lsrs	r3, r3, #3
 800f400:	f003 0303 	and.w	r3, r3, #3
 800f404:	4a07      	ldr	r2, [pc, #28]	; (800f424 <UART_SetConfig+0x6ac>)
 800f406:	fa22 f303 	lsr.w	r3, r2, r3
 800f40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f40c:	e01c      	b.n	800f448 <UART_SetConfig+0x6d0>
 800f40e:	bf00      	nop
 800f410:	40011400 	.word	0x40011400
 800f414:	58024400 	.word	0x58024400
 800f418:	40007800 	.word	0x40007800
 800f41c:	40007c00 	.word	0x40007c00
 800f420:	58000c00 	.word	0x58000c00
 800f424:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f428:	4b9d      	ldr	r3, [pc, #628]	; (800f6a0 <UART_SetConfig+0x928>)
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42c:	e00c      	b.n	800f448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f42e:	4b9d      	ldr	r3, [pc, #628]	; (800f6a4 <UART_SetConfig+0x92c>)
 800f430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f432:	e009      	b.n	800f448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f43a:	e005      	b.n	800f448 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f43c:	2300      	movs	r3, #0
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f440:	2301      	movs	r3, #1
 800f442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f446:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 81de 	beq.w	800f80c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f454:	4a94      	ldr	r2, [pc, #592]	; (800f6a8 <UART_SetConfig+0x930>)
 800f456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f45a:	461a      	mov	r2, r3
 800f45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f462:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	685a      	ldr	r2, [r3, #4]
 800f468:	4613      	mov	r3, r2
 800f46a:	005b      	lsls	r3, r3, #1
 800f46c:	4413      	add	r3, r2
 800f46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f470:	429a      	cmp	r2, r3
 800f472:	d305      	bcc.n	800f480 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d903      	bls.n	800f488 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f486:	e1c1      	b.n	800f80c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48a:	2200      	movs	r2, #0
 800f48c:	60bb      	str	r3, [r7, #8]
 800f48e:	60fa      	str	r2, [r7, #12]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f494:	4a84      	ldr	r2, [pc, #528]	; (800f6a8 <UART_SetConfig+0x930>)
 800f496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	2200      	movs	r2, #0
 800f49e:	603b      	str	r3, [r7, #0]
 800f4a0:	607a      	str	r2, [r7, #4]
 800f4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f4aa:	f7f1 f92d 	bl	8000708 <__aeabi_uldivmod>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	f04f 0300 	mov.w	r3, #0
 800f4be:	020b      	lsls	r3, r1, #8
 800f4c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f4c4:	0202      	lsls	r2, r0, #8
 800f4c6:	6979      	ldr	r1, [r7, #20]
 800f4c8:	6849      	ldr	r1, [r1, #4]
 800f4ca:	0849      	lsrs	r1, r1, #1
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	eb12 0804 	adds.w	r8, r2, r4
 800f4d6:	eb43 0905 	adc.w	r9, r3, r5
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	469a      	mov	sl, r3
 800f4e2:	4693      	mov	fp, r2
 800f4e4:	4652      	mov	r2, sl
 800f4e6:	465b      	mov	r3, fp
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	f7f1 f90c 	bl	8000708 <__aeabi_uldivmod>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4fe:	d308      	bcc.n	800f512 <UART_SetConfig+0x79a>
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f506:	d204      	bcs.n	800f512 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f50e:	60da      	str	r2, [r3, #12]
 800f510:	e17c      	b.n	800f80c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f518:	e178      	b.n	800f80c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f522:	f040 80c5 	bne.w	800f6b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f526:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f52a:	2b20      	cmp	r3, #32
 800f52c:	dc48      	bgt.n	800f5c0 <UART_SetConfig+0x848>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	db7b      	blt.n	800f62a <UART_SetConfig+0x8b2>
 800f532:	2b20      	cmp	r3, #32
 800f534:	d879      	bhi.n	800f62a <UART_SetConfig+0x8b2>
 800f536:	a201      	add	r2, pc, #4	; (adr r2, 800f53c <UART_SetConfig+0x7c4>)
 800f538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53c:	0800f5c7 	.word	0x0800f5c7
 800f540:	0800f5cf 	.word	0x0800f5cf
 800f544:	0800f62b 	.word	0x0800f62b
 800f548:	0800f62b 	.word	0x0800f62b
 800f54c:	0800f5d7 	.word	0x0800f5d7
 800f550:	0800f62b 	.word	0x0800f62b
 800f554:	0800f62b 	.word	0x0800f62b
 800f558:	0800f62b 	.word	0x0800f62b
 800f55c:	0800f5e7 	.word	0x0800f5e7
 800f560:	0800f62b 	.word	0x0800f62b
 800f564:	0800f62b 	.word	0x0800f62b
 800f568:	0800f62b 	.word	0x0800f62b
 800f56c:	0800f62b 	.word	0x0800f62b
 800f570:	0800f62b 	.word	0x0800f62b
 800f574:	0800f62b 	.word	0x0800f62b
 800f578:	0800f62b 	.word	0x0800f62b
 800f57c:	0800f5f7 	.word	0x0800f5f7
 800f580:	0800f62b 	.word	0x0800f62b
 800f584:	0800f62b 	.word	0x0800f62b
 800f588:	0800f62b 	.word	0x0800f62b
 800f58c:	0800f62b 	.word	0x0800f62b
 800f590:	0800f62b 	.word	0x0800f62b
 800f594:	0800f62b 	.word	0x0800f62b
 800f598:	0800f62b 	.word	0x0800f62b
 800f59c:	0800f62b 	.word	0x0800f62b
 800f5a0:	0800f62b 	.word	0x0800f62b
 800f5a4:	0800f62b 	.word	0x0800f62b
 800f5a8:	0800f62b 	.word	0x0800f62b
 800f5ac:	0800f62b 	.word	0x0800f62b
 800f5b0:	0800f62b 	.word	0x0800f62b
 800f5b4:	0800f62b 	.word	0x0800f62b
 800f5b8:	0800f62b 	.word	0x0800f62b
 800f5bc:	0800f61d 	.word	0x0800f61d
 800f5c0:	2b40      	cmp	r3, #64	; 0x40
 800f5c2:	d02e      	beq.n	800f622 <UART_SetConfig+0x8aa>
 800f5c4:	e031      	b.n	800f62a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5c6:	f7fb f9cb 	bl	800a960 <HAL_RCC_GetPCLK1Freq>
 800f5ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5cc:	e033      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5ce:	f7fb f9dd 	bl	800a98c <HAL_RCC_GetPCLK2Freq>
 800f5d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5d4:	e02f      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fc f948 	bl	800b870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5e4:	e027      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5e6:	f107 0318 	add.w	r3, r7, #24
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fc fa94 	bl	800bb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f4:	e01f      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5f6:	4b2d      	ldr	r3, [pc, #180]	; (800f6ac <UART_SetConfig+0x934>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 0320 	and.w	r3, r3, #32
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d009      	beq.n	800f616 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f602:	4b2a      	ldr	r3, [pc, #168]	; (800f6ac <UART_SetConfig+0x934>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	08db      	lsrs	r3, r3, #3
 800f608:	f003 0303 	and.w	r3, r3, #3
 800f60c:	4a24      	ldr	r2, [pc, #144]	; (800f6a0 <UART_SetConfig+0x928>)
 800f60e:	fa22 f303 	lsr.w	r3, r2, r3
 800f612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f614:	e00f      	b.n	800f636 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f616:	4b22      	ldr	r3, [pc, #136]	; (800f6a0 <UART_SetConfig+0x928>)
 800f618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f61a:	e00c      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f61c:	4b21      	ldr	r3, [pc, #132]	; (800f6a4 <UART_SetConfig+0x92c>)
 800f61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f620:	e009      	b.n	800f636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f628:	e005      	b.n	800f636 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f62a:	2300      	movs	r3, #0
 800f62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f62e:	2301      	movs	r3, #1
 800f630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 80e7 	beq.w	800f80c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f642:	4a19      	ldr	r2, [pc, #100]	; (800f6a8 <UART_SetConfig+0x930>)
 800f644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f648:	461a      	mov	r2, r3
 800f64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f650:	005a      	lsls	r2, r3, #1
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	085b      	lsrs	r3, r3, #1
 800f658:	441a      	add	r2, r3
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f662:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	2b0f      	cmp	r3, #15
 800f668:	d916      	bls.n	800f698 <UART_SetConfig+0x920>
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f670:	d212      	bcs.n	800f698 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f674:	b29b      	uxth	r3, r3
 800f676:	f023 030f 	bic.w	r3, r3, #15
 800f67a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	085b      	lsrs	r3, r3, #1
 800f680:	b29b      	uxth	r3, r3
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	b29a      	uxth	r2, r3
 800f688:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f68a:	4313      	orrs	r3, r2
 800f68c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f694:	60da      	str	r2, [r3, #12]
 800f696:	e0b9      	b.n	800f80c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f69e:	e0b5      	b.n	800f80c <UART_SetConfig+0xa94>
 800f6a0:	03d09000 	.word	0x03d09000
 800f6a4:	003d0900 	.word	0x003d0900
 800f6a8:	080140a0 	.word	0x080140a0
 800f6ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f6b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6b4:	2b20      	cmp	r3, #32
 800f6b6:	dc49      	bgt.n	800f74c <UART_SetConfig+0x9d4>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	db7c      	blt.n	800f7b6 <UART_SetConfig+0xa3e>
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	d87a      	bhi.n	800f7b6 <UART_SetConfig+0xa3e>
 800f6c0:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <UART_SetConfig+0x950>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f753 	.word	0x0800f753
 800f6cc:	0800f75b 	.word	0x0800f75b
 800f6d0:	0800f7b7 	.word	0x0800f7b7
 800f6d4:	0800f7b7 	.word	0x0800f7b7
 800f6d8:	0800f763 	.word	0x0800f763
 800f6dc:	0800f7b7 	.word	0x0800f7b7
 800f6e0:	0800f7b7 	.word	0x0800f7b7
 800f6e4:	0800f7b7 	.word	0x0800f7b7
 800f6e8:	0800f773 	.word	0x0800f773
 800f6ec:	0800f7b7 	.word	0x0800f7b7
 800f6f0:	0800f7b7 	.word	0x0800f7b7
 800f6f4:	0800f7b7 	.word	0x0800f7b7
 800f6f8:	0800f7b7 	.word	0x0800f7b7
 800f6fc:	0800f7b7 	.word	0x0800f7b7
 800f700:	0800f7b7 	.word	0x0800f7b7
 800f704:	0800f7b7 	.word	0x0800f7b7
 800f708:	0800f783 	.word	0x0800f783
 800f70c:	0800f7b7 	.word	0x0800f7b7
 800f710:	0800f7b7 	.word	0x0800f7b7
 800f714:	0800f7b7 	.word	0x0800f7b7
 800f718:	0800f7b7 	.word	0x0800f7b7
 800f71c:	0800f7b7 	.word	0x0800f7b7
 800f720:	0800f7b7 	.word	0x0800f7b7
 800f724:	0800f7b7 	.word	0x0800f7b7
 800f728:	0800f7b7 	.word	0x0800f7b7
 800f72c:	0800f7b7 	.word	0x0800f7b7
 800f730:	0800f7b7 	.word	0x0800f7b7
 800f734:	0800f7b7 	.word	0x0800f7b7
 800f738:	0800f7b7 	.word	0x0800f7b7
 800f73c:	0800f7b7 	.word	0x0800f7b7
 800f740:	0800f7b7 	.word	0x0800f7b7
 800f744:	0800f7b7 	.word	0x0800f7b7
 800f748:	0800f7a9 	.word	0x0800f7a9
 800f74c:	2b40      	cmp	r3, #64	; 0x40
 800f74e:	d02e      	beq.n	800f7ae <UART_SetConfig+0xa36>
 800f750:	e031      	b.n	800f7b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f752:	f7fb f905 	bl	800a960 <HAL_RCC_GetPCLK1Freq>
 800f756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f758:	e033      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f75a:	f7fb f917 	bl	800a98c <HAL_RCC_GetPCLK2Freq>
 800f75e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f760:	e02f      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f766:	4618      	mov	r0, r3
 800f768:	f7fc f882 	bl	800b870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f770:	e027      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f772:	f107 0318 	add.w	r3, r7, #24
 800f776:	4618      	mov	r0, r3
 800f778:	f7fc f9ce 	bl	800bb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f780:	e01f      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f782:	4b2d      	ldr	r3, [pc, #180]	; (800f838 <UART_SetConfig+0xac0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f003 0320 	and.w	r3, r3, #32
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f78e:	4b2a      	ldr	r3, [pc, #168]	; (800f838 <UART_SetConfig+0xac0>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	08db      	lsrs	r3, r3, #3
 800f794:	f003 0303 	and.w	r3, r3, #3
 800f798:	4a28      	ldr	r2, [pc, #160]	; (800f83c <UART_SetConfig+0xac4>)
 800f79a:	fa22 f303 	lsr.w	r3, r2, r3
 800f79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7a0:	e00f      	b.n	800f7c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f7a2:	4b26      	ldr	r3, [pc, #152]	; (800f83c <UART_SetConfig+0xac4>)
 800f7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7a6:	e00c      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7a8:	4b25      	ldr	r3, [pc, #148]	; (800f840 <UART_SetConfig+0xac8>)
 800f7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ac:	e009      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7b4:	e005      	b.n	800f7c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f7c0:	bf00      	nop
    }

    if (pclk != 0U)
 800f7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d021      	beq.n	800f80c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7cc:	4a1d      	ldr	r2, [pc, #116]	; (800f844 <UART_SetConfig+0xacc>)
 800f7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	085b      	lsrs	r3, r3, #1
 800f7e0:	441a      	add	r2, r3
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	2b0f      	cmp	r3, #15
 800f7f0:	d909      	bls.n	800f806 <UART_SetConfig+0xa8e>
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7f8:	d205      	bcs.n	800f806 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	60da      	str	r2, [r3, #12]
 800f804:	e002      	b.n	800f80c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	2201      	movs	r2, #1
 800f810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	2201      	movs	r2, #1
 800f818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	2200      	movs	r2, #0
 800f820:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2200      	movs	r2, #0
 800f826:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f828:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3748      	adds	r7, #72	; 0x48
 800f830:	46bd      	mov	sp, r7
 800f832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f836:	bf00      	nop
 800f838:	58024400 	.word	0x58024400
 800f83c:	03d09000 	.word	0x03d09000
 800f840:	003d0900 	.word	0x003d0900
 800f844:	080140a0 	.word	0x080140a0

0800f848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00a      	beq.n	800f872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	430a      	orrs	r2, r1
 800f870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f876:	f003 0302 	and.w	r3, r3, #2
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00a      	beq.n	800f894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	430a      	orrs	r2, r1
 800f892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00a      	beq.n	800f8b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ba:	f003 0308 	and.w	r3, r3, #8
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00a      	beq.n	800f8d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	430a      	orrs	r2, r1
 800f8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8dc:	f003 0310 	and.w	r3, r3, #16
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00a      	beq.n	800f8fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fe:	f003 0320 	and.w	r3, r3, #32
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00a      	beq.n	800f91c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	430a      	orrs	r2, r1
 800f91a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f924:	2b00      	cmp	r3, #0
 800f926:	d01a      	beq.n	800f95e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	430a      	orrs	r2, r1
 800f93c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f946:	d10a      	bne.n	800f95e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	430a      	orrs	r2, r1
 800f95c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00a      	beq.n	800f980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	430a      	orrs	r2, r1
 800f97e:	605a      	str	r2, [r3, #4]
  }
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af02      	add	r7, sp, #8
 800f992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f99c:	f7f6 fe62 	bl	8006664 <HAL_GetTick>
 800f9a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f003 0308 	and.w	r3, r3, #8
 800f9ac:	2b08      	cmp	r3, #8
 800f9ae:	d10e      	bne.n	800f9ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 f82f 	bl	800fa22 <UART_WaitOnFlagUntilTimeout>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	e025      	b.n	800fa1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f003 0304 	and.w	r3, r3, #4
 800f9d8:	2b04      	cmp	r3, #4
 800f9da:	d10e      	bne.n	800f9fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f819 	bl	800fa22 <UART_WaitOnFlagUntilTimeout>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9f6:	2303      	movs	r3, #3
 800f9f8:	e00f      	b.n	800fa1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2220      	movs	r2, #32
 800f9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2220      	movs	r2, #32
 800fa06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b09c      	sub	sp, #112	; 0x70
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	60f8      	str	r0, [r7, #12]
 800fa2a:	60b9      	str	r1, [r7, #8]
 800fa2c:	603b      	str	r3, [r7, #0]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa32:	e0a9      	b.n	800fb88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	f000 80a5 	beq.w	800fb88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa3e:	f7f6 fe11 	bl	8006664 <HAL_GetTick>
 800fa42:	4602      	mov	r2, r0
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	1ad3      	subs	r3, r2, r3
 800fa48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d302      	bcc.n	800fa54 <UART_WaitOnFlagUntilTimeout+0x32>
 800fa4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d140      	bne.n	800fad6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa5c:	e853 3f00 	ldrex	r3, [r3]
 800fa60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fa62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fa68:	667b      	str	r3, [r7, #100]	; 0x64
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa7a:	e841 2300 	strex	r3, r2, [r1]
 800fa7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fa80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d1e6      	bne.n	800fa54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa90:	e853 3f00 	ldrex	r3, [r3]
 800fa94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	f023 0301 	bic.w	r3, r3, #1
 800fa9c:	663b      	str	r3, [r7, #96]	; 0x60
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	3308      	adds	r3, #8
 800faa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800faa6:	64ba      	str	r2, [r7, #72]	; 0x48
 800faa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faae:	e841 2300 	strex	r3, r2, [r1]
 800fab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1e5      	bne.n	800fa86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2220      	movs	r2, #32
 800fabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2220      	movs	r2, #32
 800fac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fad2:	2303      	movs	r3, #3
 800fad4:	e069      	b.n	800fbaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f003 0304 	and.w	r3, r3, #4
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d051      	beq.n	800fb88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800faee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800faf2:	d149      	bne.n	800fb88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fafc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	e853 3f00 	ldrex	r3, [r3]
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fb12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb1c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb24:	e841 2300 	strex	r3, r2, [r1]
 800fb28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d1e6      	bne.n	800fafe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3308      	adds	r3, #8
 800fb36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	e853 3f00 	ldrex	r3, [r3]
 800fb3e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	f023 0301 	bic.w	r3, r3, #1
 800fb46:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3308      	adds	r3, #8
 800fb4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb50:	623a      	str	r2, [r7, #32]
 800fb52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb54:	69f9      	ldr	r1, [r7, #28]
 800fb56:	6a3a      	ldr	r2, [r7, #32]
 800fb58:	e841 2300 	strex	r3, r2, [r1]
 800fb5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1e5      	bne.n	800fb30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2220      	movs	r2, #32
 800fb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2220      	movs	r2, #32
 800fb70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2220      	movs	r2, #32
 800fb78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fb84:	2303      	movs	r3, #3
 800fb86:	e010      	b.n	800fbaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	69da      	ldr	r2, [r3, #28]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	4013      	ands	r3, r2
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	bf0c      	ite	eq
 800fb98:	2301      	moveq	r3, #1
 800fb9a:	2300      	movne	r3, #0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	461a      	mov	r2, r3
 800fba0:	79fb      	ldrb	r3, [r7, #7]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	f43f af46 	beq.w	800fa34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3770      	adds	r7, #112	; 0x70
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
	...

0800fbb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b0a3      	sub	sp, #140	; 0x8c
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	88fa      	ldrh	r2, [r7, #6]
 800fbcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	88fa      	ldrh	r2, [r7, #6]
 800fbd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbe6:	d10e      	bne.n	800fc06 <UART_Start_Receive_IT+0x52>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d105      	bne.n	800fbfc <UART_Start_Receive_IT+0x48>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fbf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbfa:	e02d      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	22ff      	movs	r2, #255	; 0xff
 800fc00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc04:	e028      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d10d      	bne.n	800fc2a <UART_Start_Receive_IT+0x76>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d104      	bne.n	800fc20 <UART_Start_Receive_IT+0x6c>
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	22ff      	movs	r2, #255	; 0xff
 800fc1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc1e:	e01b      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	227f      	movs	r2, #127	; 0x7f
 800fc24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc28:	e016      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc32:	d10d      	bne.n	800fc50 <UART_Start_Receive_IT+0x9c>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <UART_Start_Receive_IT+0x92>
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	227f      	movs	r2, #127	; 0x7f
 800fc40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc44:	e008      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	223f      	movs	r2, #63	; 0x3f
 800fc4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc4e:	e003      	b.n	800fc58 <UART_Start_Receive_IT+0xa4>
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2222      	movs	r2, #34	; 0x22
 800fc64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc72:	e853 3f00 	ldrex	r3, [r3]
 800fc76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fc78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc7a:	f043 0301 	orr.w	r3, r3, #1
 800fc7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	3308      	adds	r3, #8
 800fc88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fc8c:	673a      	str	r2, [r7, #112]	; 0x70
 800fc8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fc9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e3      	bne.n	800fc68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fca8:	d153      	bne.n	800fd52 <UART_Start_Receive_IT+0x19e>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fcb0:	88fa      	ldrh	r2, [r7, #6]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d34d      	bcc.n	800fd52 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcbe:	d107      	bne.n	800fcd0 <UART_Start_Receive_IT+0x11c>
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	691b      	ldr	r3, [r3, #16]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d103      	bne.n	800fcd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	4a4b      	ldr	r2, [pc, #300]	; (800fdf8 <UART_Start_Receive_IT+0x244>)
 800fccc:	671a      	str	r2, [r3, #112]	; 0x70
 800fcce:	e002      	b.n	800fcd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	4a4a      	ldr	r2, [pc, #296]	; (800fdfc <UART_Start_Receive_IT+0x248>)
 800fcd4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d01a      	beq.n	800fd1c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcee:	e853 3f00 	ldrex	r3, [r3]
 800fcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	461a      	mov	r2, r3
 800fd04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd0a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd10:	e841 2300 	strex	r3, r2, [r1]
 800fd14:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fd16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1e4      	bne.n	800fce6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3308      	adds	r3, #8
 800fd22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd32:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3308      	adds	r3, #8
 800fd3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd3c:	64ba      	str	r2, [r7, #72]	; 0x48
 800fd3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd44:	e841 2300 	strex	r3, r2, [r1]
 800fd48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1e5      	bne.n	800fd1c <UART_Start_Receive_IT+0x168>
 800fd50:	e04a      	b.n	800fde8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd5a:	d107      	bne.n	800fd6c <UART_Start_Receive_IT+0x1b8>
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d103      	bne.n	800fd6c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4a26      	ldr	r2, [pc, #152]	; (800fe00 <UART_Start_Receive_IT+0x24c>)
 800fd68:	671a      	str	r2, [r3, #112]	; 0x70
 800fd6a:	e002      	b.n	800fd72 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	4a25      	ldr	r2, [pc, #148]	; (800fe04 <UART_Start_Receive_IT+0x250>)
 800fd70:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d019      	beq.n	800fdb6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	e853 3f00 	ldrex	r3, [r3]
 800fd8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fd96:	677b      	str	r3, [r7, #116]	; 0x74
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fda0:	637b      	str	r3, [r7, #52]	; 0x34
 800fda2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fda6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fda8:	e841 2300 	strex	r3, r2, [r1]
 800fdac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d1e6      	bne.n	800fd82 <UART_Start_Receive_IT+0x1ce>
 800fdb4:	e018      	b.n	800fde8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	e853 3f00 	ldrex	r3, [r3]
 800fdc2:	613b      	str	r3, [r7, #16]
   return(result);
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	f043 0320 	orr.w	r3, r3, #32
 800fdca:	67bb      	str	r3, [r7, #120]	; 0x78
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdd4:	623b      	str	r3, [r7, #32]
 800fdd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd8:	69f9      	ldr	r1, [r7, #28]
 800fdda:	6a3a      	ldr	r2, [r7, #32]
 800fddc:	e841 2300 	strex	r3, r2, [r1]
 800fde0:	61bb      	str	r3, [r7, #24]
   return(result);
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1e6      	bne.n	800fdb6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	378c      	adds	r7, #140	; 0x8c
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	08010511 	.word	0x08010511
 800fdfc:	08010219 	.word	0x08010219
 800fe00:	080100b7 	.word	0x080100b7
 800fe04:	0800ff57 	.word	0x0800ff57

0800fe08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b095      	sub	sp, #84	; 0x54
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e6      	bne.n	800fe10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3308      	adds	r3, #8
 800fe48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4a:	6a3b      	ldr	r3, [r7, #32]
 800fe4c:	e853 3f00 	ldrex	r3, [r3]
 800fe50:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	4b1e      	ldr	r3, [pc, #120]	; (800fed0 <UART_EndRxTransfer+0xc8>)
 800fe56:	4013      	ands	r3, r2
 800fe58:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe6a:	e841 2300 	strex	r3, r2, [r1]
 800fe6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d1e5      	bne.n	800fe42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d118      	bne.n	800feb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	e853 3f00 	ldrex	r3, [r3]
 800fe8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	f023 0310 	bic.w	r3, r3, #16
 800fe92:	647b      	str	r3, [r7, #68]	; 0x44
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	6979      	ldr	r1, [r7, #20]
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	e841 2300 	strex	r3, r2, [r1]
 800fea8:	613b      	str	r3, [r7, #16]
   return(result);
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1e6      	bne.n	800fe7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2220      	movs	r2, #32
 800feb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fec4:	bf00      	nop
 800fec6:	3754      	adds	r7, #84	; 0x54
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	effffffe 	.word	0xeffffffe

0800fed4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7fe ff2a 	bl	800ed4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef8:	bf00      	nop
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b088      	sub	sp, #32
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	e853 3f00 	ldrex	r3, [r3]
 800ff14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff1c:	61fb      	str	r3, [r7, #28]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	61bb      	str	r3, [r7, #24]
 800ff28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff2a:	6979      	ldr	r1, [r7, #20]
 800ff2c:	69ba      	ldr	r2, [r7, #24]
 800ff2e:	e841 2300 	strex	r3, r2, [r1]
 800ff32:	613b      	str	r3, [r7, #16]
   return(result);
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1e6      	bne.n	800ff08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7f3 fb41 	bl	80035d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff4e:	bf00      	nop
 800ff50:	3720      	adds	r7, #32
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b096      	sub	sp, #88	; 0x58
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff6e:	2b22      	cmp	r3, #34	; 0x22
 800ff70:	f040 8095 	bne.w	801009e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ff82:	b2d9      	uxtb	r1, r3
 800ff84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff8e:	400a      	ands	r2, r1
 800ff90:	b2d2      	uxtb	r2, r2
 800ff92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d178      	bne.n	80100ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	e853 3f00 	ldrex	r3, [r3]
 800ffc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffd0:	653b      	str	r3, [r7, #80]	; 0x50
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffda:	647b      	str	r3, [r7, #68]	; 0x44
 800ffdc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffe2:	e841 2300 	strex	r3, r2, [r1]
 800ffe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1e6      	bne.n	800ffbc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	3308      	adds	r3, #8
 800fff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	e853 3f00 	ldrex	r3, [r3]
 800fffc:	623b      	str	r3, [r7, #32]
   return(result);
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	f023 0301 	bic.w	r3, r3, #1
 8010004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3308      	adds	r3, #8
 801000c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801000e:	633a      	str	r2, [r7, #48]	; 0x30
 8010010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010016:	e841 2300 	strex	r3, r2, [r1]
 801001a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801001c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1e5      	bne.n	800ffee <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2220      	movs	r2, #32
 8010026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010034:	2b01      	cmp	r3, #1
 8010036:	d12e      	bne.n	8010096 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	e853 3f00 	ldrex	r3, [r3]
 801004a:	60fb      	str	r3, [r7, #12]
   return(result);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f023 0310 	bic.w	r3, r3, #16
 8010052:	64bb      	str	r3, [r7, #72]	; 0x48
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	461a      	mov	r2, r3
 801005a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801005c:	61fb      	str	r3, [r7, #28]
 801005e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	69b9      	ldr	r1, [r7, #24]
 8010062:	69fa      	ldr	r2, [r7, #28]
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	617b      	str	r3, [r7, #20]
   return(result);
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e6      	bne.n	801003e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	69db      	ldr	r3, [r3, #28]
 8010076:	f003 0310 	and.w	r3, r3, #16
 801007a:	2b10      	cmp	r3, #16
 801007c:	d103      	bne.n	8010086 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2210      	movs	r2, #16
 8010084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fe fe66 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010094:	e00b      	b.n	80100ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f3 fa26 	bl	80034e8 <HAL_UART_RxCpltCallback>
}
 801009c:	e007      	b.n	80100ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	699a      	ldr	r2, [r3, #24]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f042 0208 	orr.w	r2, r2, #8
 80100ac:	619a      	str	r2, [r3, #24]
}
 80100ae:	bf00      	nop
 80100b0:	3758      	adds	r7, #88	; 0x58
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b096      	sub	sp, #88	; 0x58
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100ce:	2b22      	cmp	r3, #34	; 0x22
 80100d0:	f040 8095 	bne.w	80101fe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80100e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80100e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80100ec:	4013      	ands	r3, r2
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f8:	1c9a      	adds	r2, r3, #2
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010104:	b29b      	uxth	r3, r3
 8010106:	3b01      	subs	r3, #1
 8010108:	b29a      	uxth	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010116:	b29b      	uxth	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	d178      	bne.n	801020e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010124:	e853 3f00 	ldrex	r3, [r3]
 8010128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801013a:	643b      	str	r3, [r7, #64]	; 0x40
 801013c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010142:	e841 2300 	strex	r3, r2, [r1]
 8010146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1e6      	bne.n	801011c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3308      	adds	r3, #8
 8010154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010156:	6a3b      	ldr	r3, [r7, #32]
 8010158:	e853 3f00 	ldrex	r3, [r3]
 801015c:	61fb      	str	r3, [r7, #28]
   return(result);
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	f023 0301 	bic.w	r3, r3, #1
 8010164:	64bb      	str	r3, [r7, #72]	; 0x48
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	3308      	adds	r3, #8
 801016c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801016e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010176:	e841 2300 	strex	r3, r2, [r1]
 801017a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801017c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1e5      	bne.n	801014e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2220      	movs	r2, #32
 8010186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010194:	2b01      	cmp	r3, #1
 8010196:	d12e      	bne.n	80101f6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	e853 3f00 	ldrex	r3, [r3]
 80101aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	f023 0310 	bic.w	r3, r3, #16
 80101b2:	647b      	str	r3, [r7, #68]	; 0x44
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	461a      	mov	r2, r3
 80101ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101bc:	61bb      	str	r3, [r7, #24]
 80101be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c0:	6979      	ldr	r1, [r7, #20]
 80101c2:	69ba      	ldr	r2, [r7, #24]
 80101c4:	e841 2300 	strex	r3, r2, [r1]
 80101c8:	613b      	str	r3, [r7, #16]
   return(result);
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1e6      	bne.n	801019e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	69db      	ldr	r3, [r3, #28]
 80101d6:	f003 0310 	and.w	r3, r3, #16
 80101da:	2b10      	cmp	r3, #16
 80101dc:	d103      	bne.n	80101e6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2210      	movs	r2, #16
 80101e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7fe fdb6 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101f4:	e00b      	b.n	801020e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7f3 f976 	bl	80034e8 <HAL_UART_RxCpltCallback>
}
 80101fc:	e007      	b.n	801020e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	699a      	ldr	r2, [r3, #24]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f042 0208 	orr.w	r2, r2, #8
 801020c:	619a      	str	r2, [r3, #24]
}
 801020e:	bf00      	nop
 8010210:	3758      	adds	r7, #88	; 0x58
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
	...

08010218 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b0a6      	sub	sp, #152	; 0x98
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010226:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	689b      	ldr	r3, [r3, #8]
 8010244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801024e:	2b22      	cmp	r3, #34	; 0x22
 8010250:	f040 814d 	bne.w	80104ee <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801025a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801025e:	e0f4      	b.n	801044a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010266:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801026a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801026e:	b2d9      	uxtb	r1, r3
 8010270:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010274:	b2da      	uxtb	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027a:	400a      	ands	r2, r1
 801027c:	b2d2      	uxtb	r2, r2
 801027e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010284:	1c5a      	adds	r2, r3, #1
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010290:	b29b      	uxth	r3, r3
 8010292:	3b01      	subs	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	69db      	ldr	r3, [r3, #28]
 80102a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102aa:	f003 0307 	and.w	r3, r3, #7
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d053      	beq.n	801035a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d011      	beq.n	80102e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80102be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00b      	beq.n	80102e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2201      	movs	r2, #1
 80102d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102d8:	f043 0201 	orr.w	r2, r3, #1
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102e6:	f003 0302 	and.w	r3, r3, #2
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d011      	beq.n	8010312 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80102ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00b      	beq.n	8010312 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2202      	movs	r2, #2
 8010300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010308:	f043 0204 	orr.w	r2, r3, #4
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010316:	f003 0304 	and.w	r3, r3, #4
 801031a:	2b00      	cmp	r3, #0
 801031c:	d011      	beq.n	8010342 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801031e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00b      	beq.n	8010342 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2204      	movs	r2, #4
 8010330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010338:	f043 0202 	orr.w	r2, r3, #2
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010348:	2b00      	cmp	r3, #0
 801034a:	d006      	beq.n	801035a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7fe fcfd 	bl	800ed4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2200      	movs	r2, #0
 8010356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010360:	b29b      	uxth	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	d171      	bne.n	801044a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801036c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801036e:	e853 3f00 	ldrex	r3, [r3]
 8010372:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801037a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	461a      	mov	r2, r3
 8010384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010388:	66bb      	str	r3, [r7, #104]	; 0x68
 801038a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801038c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801038e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010390:	e841 2300 	strex	r3, r2, [r1]
 8010394:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1e4      	bne.n	8010366 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3308      	adds	r3, #8
 80103a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103a6:	e853 3f00 	ldrex	r3, [r3]
 80103aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103ae:	4b56      	ldr	r3, [pc, #344]	; (8010508 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80103b0:	4013      	ands	r3, r2
 80103b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3308      	adds	r3, #8
 80103ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80103bc:	657a      	str	r2, [r7, #84]	; 0x54
 80103be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103c4:	e841 2300 	strex	r3, r2, [r1]
 80103c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1e5      	bne.n	801039c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2220      	movs	r2, #32
 80103d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d12e      	bne.n	8010444 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	e853 3f00 	ldrex	r3, [r3]
 80103f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	f023 0310 	bic.w	r3, r3, #16
 8010400:	67bb      	str	r3, [r7, #120]	; 0x78
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	461a      	mov	r2, r3
 8010408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801040a:	643b      	str	r3, [r7, #64]	; 0x40
 801040c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010412:	e841 2300 	strex	r3, r2, [r1]
 8010416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1e6      	bne.n	80103ec <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	69db      	ldr	r3, [r3, #28]
 8010424:	f003 0310 	and.w	r3, r3, #16
 8010428:	2b10      	cmp	r3, #16
 801042a:	d103      	bne.n	8010434 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2210      	movs	r2, #16
 8010432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801043a:	4619      	mov	r1, r3
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7fe fc8f 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
 8010442:	e002      	b.n	801044a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7f3 f84f 	bl	80034e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801044a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801044e:	2b00      	cmp	r3, #0
 8010450:	d006      	beq.n	8010460 <UART_RxISR_8BIT_FIFOEN+0x248>
 8010452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010456:	f003 0320 	and.w	r3, r3, #32
 801045a:	2b00      	cmp	r3, #0
 801045c:	f47f af00 	bne.w	8010260 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801046a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801046e:	2b00      	cmp	r3, #0
 8010470:	d045      	beq.n	80104fe <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010478:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801047c:	429a      	cmp	r2, r3
 801047e:	d23e      	bcs.n	80104fe <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	3308      	adds	r3, #8
 8010486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	e853 3f00 	ldrex	r3, [r3]
 801048e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010496:	673b      	str	r3, [r7, #112]	; 0x70
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	3308      	adds	r3, #8
 801049e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80104a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104a8:	e841 2300 	strex	r3, r2, [r1]
 80104ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1e5      	bne.n	8010480 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a15      	ldr	r2, [pc, #84]	; (801050c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80104b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	e853 3f00 	ldrex	r3, [r3]
 80104c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	f043 0320 	orr.w	r3, r3, #32
 80104ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104d8:	61bb      	str	r3, [r7, #24]
 80104da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104dc:	6979      	ldr	r1, [r7, #20]
 80104de:	69ba      	ldr	r2, [r7, #24]
 80104e0:	e841 2300 	strex	r3, r2, [r1]
 80104e4:	613b      	str	r3, [r7, #16]
   return(result);
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1e6      	bne.n	80104ba <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80104ec:	e007      	b.n	80104fe <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	699a      	ldr	r2, [r3, #24]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f042 0208 	orr.w	r2, r2, #8
 80104fc:	619a      	str	r2, [r3, #24]
}
 80104fe:	bf00      	nop
 8010500:	3798      	adds	r7, #152	; 0x98
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	effffffe 	.word	0xeffffffe
 801050c:	0800ff57 	.word	0x0800ff57

08010510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b0a8      	sub	sp, #160	; 0xa0
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801051e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010546:	2b22      	cmp	r3, #34	; 0x22
 8010548:	f040 8151 	bne.w	80107ee <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010552:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010556:	e0f8      	b.n	801074a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801056a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801056e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010572:	4013      	ands	r3, r2
 8010574:	b29a      	uxth	r2, r3
 8010576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801057a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010580:	1c9a      	adds	r2, r3, #2
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801058c:	b29b      	uxth	r3, r3
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	69db      	ldr	r3, [r3, #28]
 801059e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80105a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105a6:	f003 0307 	and.w	r3, r3, #7
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d053      	beq.n	8010656 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d011      	beq.n	80105de <UART_RxISR_16BIT_FIFOEN+0xce>
 80105ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00b      	beq.n	80105de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2201      	movs	r2, #1
 80105cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105d4:	f043 0201 	orr.w	r2, r3, #1
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105e2:	f003 0302 	and.w	r3, r3, #2
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d011      	beq.n	801060e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80105ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105ee:	f003 0301 	and.w	r3, r3, #1
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d00b      	beq.n	801060e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2202      	movs	r2, #2
 80105fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010604:	f043 0204 	orr.w	r2, r3, #4
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801060e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010612:	f003 0304 	and.w	r3, r3, #4
 8010616:	2b00      	cmp	r3, #0
 8010618:	d011      	beq.n	801063e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801061a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801061e:	f003 0301 	and.w	r3, r3, #1
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00b      	beq.n	801063e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2204      	movs	r2, #4
 801062c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010634:	f043 0202 	orr.w	r2, r3, #2
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010644:	2b00      	cmp	r3, #0
 8010646:	d006      	beq.n	8010656 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7fe fb7f 	bl	800ed4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801065c:	b29b      	uxth	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d173      	bne.n	801074a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801066a:	e853 3f00 	ldrex	r3, [r3]
 801066e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010686:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010688:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801068a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801068c:	e841 2300 	strex	r3, r2, [r1]
 8010690:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010694:	2b00      	cmp	r3, #0
 8010696:	d1e4      	bne.n	8010662 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3308      	adds	r3, #8
 801069e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a2:	e853 3f00 	ldrex	r3, [r3]
 80106a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106aa:	4b57      	ldr	r3, [pc, #348]	; (8010808 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80106ac:	4013      	ands	r3, r2
 80106ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3308      	adds	r3, #8
 80106b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80106be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106c4:	e841 2300 	strex	r3, r2, [r1]
 80106c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1e3      	bne.n	8010698 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2220      	movs	r2, #32
 80106d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d12e      	bne.n	8010744 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f4:	e853 3f00 	ldrex	r3, [r3]
 80106f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106fc:	f023 0310 	bic.w	r3, r3, #16
 8010700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801070a:	647b      	str	r3, [r7, #68]	; 0x44
 801070c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010712:	e841 2300 	strex	r3, r2, [r1]
 8010716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1e6      	bne.n	80106ec <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	69db      	ldr	r3, [r3, #28]
 8010724:	f003 0310 	and.w	r3, r3, #16
 8010728:	2b10      	cmp	r3, #16
 801072a:	d103      	bne.n	8010734 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2210      	movs	r2, #16
 8010732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801073a:	4619      	mov	r1, r3
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7fe fb0f 	bl	800ed60 <HAL_UARTEx_RxEventCallback>
 8010742:	e002      	b.n	801074a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7f2 fecf 	bl	80034e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801074a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801074e:	2b00      	cmp	r3, #0
 8010750:	d006      	beq.n	8010760 <UART_RxISR_16BIT_FIFOEN+0x250>
 8010752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010756:	f003 0320 	and.w	r3, r3, #32
 801075a:	2b00      	cmp	r3, #0
 801075c:	f47f aefc 	bne.w	8010558 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010766:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801076a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801076e:	2b00      	cmp	r3, #0
 8010770:	d045      	beq.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010778:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801077c:	429a      	cmp	r2, r3
 801077e:	d23e      	bcs.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3308      	adds	r3, #8
 8010786:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	e853 3f00 	ldrex	r3, [r3]
 801078e:	623b      	str	r3, [r7, #32]
   return(result);
 8010790:	6a3b      	ldr	r3, [r7, #32]
 8010792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010796:	677b      	str	r3, [r7, #116]	; 0x74
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3308      	adds	r3, #8
 801079e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80107a0:	633a      	str	r2, [r7, #48]	; 0x30
 80107a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a8:	e841 2300 	strex	r3, r2, [r1]
 80107ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e5      	bne.n	8010780 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4a15      	ldr	r2, [pc, #84]	; (801080c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80107b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	e853 3f00 	ldrex	r3, [r3]
 80107c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f043 0320 	orr.w	r3, r3, #32
 80107ce:	673b      	str	r3, [r7, #112]	; 0x70
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	461a      	mov	r2, r3
 80107d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107d8:	61fb      	str	r3, [r7, #28]
 80107da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107dc:	69b9      	ldr	r1, [r7, #24]
 80107de:	69fa      	ldr	r2, [r7, #28]
 80107e0:	e841 2300 	strex	r3, r2, [r1]
 80107e4:	617b      	str	r3, [r7, #20]
   return(result);
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1e6      	bne.n	80107ba <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107ec:	e007      	b.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	699a      	ldr	r2, [r3, #24]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f042 0208 	orr.w	r2, r2, #8
 80107fc:	619a      	str	r2, [r3, #24]
}
 80107fe:	bf00      	nop
 8010800:	37a0      	adds	r7, #160	; 0xa0
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	effffffe 	.word	0xeffffffe
 801080c:	080100b7 	.word	0x080100b7

08010810 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010818:	bf00      	nop
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801082c:	bf00      	nop
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801085a:	2b01      	cmp	r3, #1
 801085c:	d101      	bne.n	8010862 <HAL_UARTEx_DisableFifoMode+0x16>
 801085e:	2302      	movs	r3, #2
 8010860:	e027      	b.n	80108b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2201      	movs	r2, #1
 8010866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2224      	movs	r2, #36	; 0x24
 801086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f022 0201 	bic.w	r2, r2, #1
 8010888:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010890:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2220      	movs	r2, #32
 80108a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3714      	adds	r7, #20
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b084      	sub	sp, #16
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d101      	bne.n	80108d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108d2:	2302      	movs	r3, #2
 80108d4:	e02d      	b.n	8010932 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2201      	movs	r2, #1
 80108da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2224      	movs	r2, #36	; 0x24
 80108e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f022 0201 	bic.w	r2, r2, #1
 80108fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	683a      	ldr	r2, [r7, #0]
 801090e:	430a      	orrs	r2, r1
 8010910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f850 	bl	80109b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2220      	movs	r2, #32
 8010924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b084      	sub	sp, #16
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
 8010942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801094a:	2b01      	cmp	r3, #1
 801094c:	d101      	bne.n	8010952 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801094e:	2302      	movs	r3, #2
 8010950:	e02d      	b.n	80109ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2201      	movs	r2, #1
 8010956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2224      	movs	r2, #36	; 0x24
 801095e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f022 0201 	bic.w	r2, r2, #1
 8010978:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f812 	bl	80109b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2220      	movs	r2, #32
 80109a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
	...

080109b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d108      	bne.n	80109da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2201      	movs	r2, #1
 80109cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2201      	movs	r2, #1
 80109d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109d8:	e031      	b.n	8010a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109da:	2310      	movs	r3, #16
 80109dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109de:	2310      	movs	r3, #16
 80109e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	0e5b      	lsrs	r3, r3, #25
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	f003 0307 	and.w	r3, r3, #7
 80109f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	0f5b      	lsrs	r3, r3, #29
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0307 	and.w	r3, r3, #7
 8010a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a02:	7bbb      	ldrb	r3, [r7, #14]
 8010a04:	7b3a      	ldrb	r2, [r7, #12]
 8010a06:	4911      	ldr	r1, [pc, #68]	; (8010a4c <UARTEx_SetNbDataToProcess+0x94>)
 8010a08:	5c8a      	ldrb	r2, [r1, r2]
 8010a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a0e:	7b3a      	ldrb	r2, [r7, #12]
 8010a10:	490f      	ldr	r1, [pc, #60]	; (8010a50 <UARTEx_SetNbDataToProcess+0x98>)
 8010a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a20:	7bfb      	ldrb	r3, [r7, #15]
 8010a22:	7b7a      	ldrb	r2, [r7, #13]
 8010a24:	4909      	ldr	r1, [pc, #36]	; (8010a4c <UARTEx_SetNbDataToProcess+0x94>)
 8010a26:	5c8a      	ldrb	r2, [r1, r2]
 8010a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a2c:	7b7a      	ldrb	r2, [r7, #13]
 8010a2e:	4908      	ldr	r1, [pc, #32]	; (8010a50 <UARTEx_SetNbDataToProcess+0x98>)
 8010a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a3e:	bf00      	nop
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	080140b8 	.word	0x080140b8
 8010a50:	080140c0 	.word	0x080140c0

08010a54 <__errno>:
 8010a54:	4b01      	ldr	r3, [pc, #4]	; (8010a5c <__errno+0x8>)
 8010a56:	6818      	ldr	r0, [r3, #0]
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	240000f8 	.word	0x240000f8

08010a60 <__libc_init_array>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	4d0d      	ldr	r5, [pc, #52]	; (8010a98 <__libc_init_array+0x38>)
 8010a64:	4c0d      	ldr	r4, [pc, #52]	; (8010a9c <__libc_init_array+0x3c>)
 8010a66:	1b64      	subs	r4, r4, r5
 8010a68:	10a4      	asrs	r4, r4, #2
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	42a6      	cmp	r6, r4
 8010a6e:	d109      	bne.n	8010a84 <__libc_init_array+0x24>
 8010a70:	4d0b      	ldr	r5, [pc, #44]	; (8010aa0 <__libc_init_array+0x40>)
 8010a72:	4c0c      	ldr	r4, [pc, #48]	; (8010aa4 <__libc_init_array+0x44>)
 8010a74:	f003 fae6 	bl	8014044 <_init>
 8010a78:	1b64      	subs	r4, r4, r5
 8010a7a:	10a4      	asrs	r4, r4, #2
 8010a7c:	2600      	movs	r6, #0
 8010a7e:	42a6      	cmp	r6, r4
 8010a80:	d105      	bne.n	8010a8e <__libc_init_array+0x2e>
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
 8010a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a88:	4798      	blx	r3
 8010a8a:	3601      	adds	r6, #1
 8010a8c:	e7ee      	b.n	8010a6c <__libc_init_array+0xc>
 8010a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a92:	4798      	blx	r3
 8010a94:	3601      	adds	r6, #1
 8010a96:	e7f2      	b.n	8010a7e <__libc_init_array+0x1e>
 8010a98:	08015db8 	.word	0x08015db8
 8010a9c:	08015db8 	.word	0x08015db8
 8010aa0:	08015db8 	.word	0x08015db8
 8010aa4:	08015dbc 	.word	0x08015dbc

08010aa8 <memcpy>:
 8010aa8:	440a      	add	r2, r1
 8010aaa:	4291      	cmp	r1, r2
 8010aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ab0:	d100      	bne.n	8010ab4 <memcpy+0xc>
 8010ab2:	4770      	bx	lr
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010abe:	4291      	cmp	r1, r2
 8010ac0:	d1f9      	bne.n	8010ab6 <memcpy+0xe>
 8010ac2:	bd10      	pop	{r4, pc}

08010ac4 <memset>:
 8010ac4:	4402      	add	r2, r0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d100      	bne.n	8010ace <memset+0xa>
 8010acc:	4770      	bx	lr
 8010ace:	f803 1b01 	strb.w	r1, [r3], #1
 8010ad2:	e7f9      	b.n	8010ac8 <memset+0x4>

08010ad4 <sulp>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	460d      	mov	r5, r1
 8010ada:	4616      	mov	r6, r2
 8010adc:	ec45 4b10 	vmov	d0, r4, r5
 8010ae0:	f001 fcc8 	bl	8012474 <__ulp>
 8010ae4:	b17e      	cbz	r6, 8010b06 <sulp+0x32>
 8010ae6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010aea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	dd09      	ble.n	8010b06 <sulp+0x32>
 8010af2:	051b      	lsls	r3, r3, #20
 8010af4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010af8:	2000      	movs	r0, #0
 8010afa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010afe:	ec41 0b17 	vmov	d7, r0, r1
 8010b02:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010b06:	bd70      	pop	{r4, r5, r6, pc}

08010b08 <_strtod_l>:
 8010b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b0c:	ed2d 8b0e 	vpush	{d8-d14}
 8010b10:	b097      	sub	sp, #92	; 0x5c
 8010b12:	461f      	mov	r7, r3
 8010b14:	2300      	movs	r3, #0
 8010b16:	9312      	str	r3, [sp, #72]	; 0x48
 8010b18:	4ba1      	ldr	r3, [pc, #644]	; (8010da0 <_strtod_l+0x298>)
 8010b1a:	920d      	str	r2, [sp, #52]	; 0x34
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	9307      	str	r3, [sp, #28]
 8010b20:	4604      	mov	r4, r0
 8010b22:	4618      	mov	r0, r3
 8010b24:	468b      	mov	fp, r1
 8010b26:	f7ef fbdb 	bl	80002e0 <strlen>
 8010b2a:	f04f 0800 	mov.w	r8, #0
 8010b2e:	4605      	mov	r5, r0
 8010b30:	f04f 0900 	mov.w	r9, #0
 8010b34:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b3a:	7813      	ldrb	r3, [r2, #0]
 8010b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8010b3e:	d04d      	beq.n	8010bdc <_strtod_l+0xd4>
 8010b40:	d83a      	bhi.n	8010bb8 <_strtod_l+0xb0>
 8010b42:	2b0d      	cmp	r3, #13
 8010b44:	d833      	bhi.n	8010bae <_strtod_l+0xa6>
 8010b46:	2b08      	cmp	r3, #8
 8010b48:	d833      	bhi.n	8010bb2 <_strtod_l+0xaa>
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d03d      	beq.n	8010bca <_strtod_l+0xc2>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010b54:	7833      	ldrb	r3, [r6, #0]
 8010b56:	2b30      	cmp	r3, #48	; 0x30
 8010b58:	f040 80b0 	bne.w	8010cbc <_strtod_l+0x1b4>
 8010b5c:	7873      	ldrb	r3, [r6, #1]
 8010b5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b62:	2b58      	cmp	r3, #88	; 0x58
 8010b64:	d167      	bne.n	8010c36 <_strtod_l+0x12e>
 8010b66:	9b08      	ldr	r3, [sp, #32]
 8010b68:	9301      	str	r3, [sp, #4]
 8010b6a:	ab12      	add	r3, sp, #72	; 0x48
 8010b6c:	9702      	str	r7, [sp, #8]
 8010b6e:	9300      	str	r3, [sp, #0]
 8010b70:	4a8c      	ldr	r2, [pc, #560]	; (8010da4 <_strtod_l+0x29c>)
 8010b72:	ab13      	add	r3, sp, #76	; 0x4c
 8010b74:	a911      	add	r1, sp, #68	; 0x44
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 fdf0 	bl	801175c <__gethex>
 8010b7c:	f010 0507 	ands.w	r5, r0, #7
 8010b80:	4607      	mov	r7, r0
 8010b82:	d005      	beq.n	8010b90 <_strtod_l+0x88>
 8010b84:	2d06      	cmp	r5, #6
 8010b86:	d12b      	bne.n	8010be0 <_strtod_l+0xd8>
 8010b88:	3601      	adds	r6, #1
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	9611      	str	r6, [sp, #68]	; 0x44
 8010b8e:	9308      	str	r3, [sp, #32]
 8010b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 854e 	bne.w	8011634 <_strtod_l+0xb2c>
 8010b98:	9b08      	ldr	r3, [sp, #32]
 8010b9a:	b1e3      	cbz	r3, 8010bd6 <_strtod_l+0xce>
 8010b9c:	ec49 8b17 	vmov	d7, r8, r9
 8010ba0:	eeb1 0b47 	vneg.f64	d0, d7
 8010ba4:	b017      	add	sp, #92	; 0x5c
 8010ba6:	ecbd 8b0e 	vpop	{d8-d14}
 8010baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bae:	2b20      	cmp	r3, #32
 8010bb0:	d1cd      	bne.n	8010b4e <_strtod_l+0x46>
 8010bb2:	3201      	adds	r2, #1
 8010bb4:	9211      	str	r2, [sp, #68]	; 0x44
 8010bb6:	e7bf      	b.n	8010b38 <_strtod_l+0x30>
 8010bb8:	2b2d      	cmp	r3, #45	; 0x2d
 8010bba:	d1c8      	bne.n	8010b4e <_strtod_l+0x46>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	9308      	str	r3, [sp, #32]
 8010bc0:	1c53      	adds	r3, r2, #1
 8010bc2:	9311      	str	r3, [sp, #68]	; 0x44
 8010bc4:	7853      	ldrb	r3, [r2, #1]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1c3      	bne.n	8010b52 <_strtod_l+0x4a>
 8010bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bcc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f040 852d 	bne.w	8011630 <_strtod_l+0xb28>
 8010bd6:	ec49 8b10 	vmov	d0, r8, r9
 8010bda:	e7e3      	b.n	8010ba4 <_strtod_l+0x9c>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	e7ee      	b.n	8010bbe <_strtod_l+0xb6>
 8010be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010be2:	b13a      	cbz	r2, 8010bf4 <_strtod_l+0xec>
 8010be4:	2135      	movs	r1, #53	; 0x35
 8010be6:	a814      	add	r0, sp, #80	; 0x50
 8010be8:	f001 fd4c 	bl	8012684 <__copybits>
 8010bec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f001 f90e 	bl	8011e10 <_Bfree>
 8010bf4:	3d01      	subs	r5, #1
 8010bf6:	2d04      	cmp	r5, #4
 8010bf8:	d806      	bhi.n	8010c08 <_strtod_l+0x100>
 8010bfa:	e8df f005 	tbb	[pc, r5]
 8010bfe:	030a      	.short	0x030a
 8010c00:	1714      	.short	0x1714
 8010c02:	0a          	.byte	0x0a
 8010c03:	00          	.byte	0x00
 8010c04:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8010c08:	073f      	lsls	r7, r7, #28
 8010c0a:	d5c1      	bpl.n	8010b90 <_strtod_l+0x88>
 8010c0c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8010c10:	e7be      	b.n	8010b90 <_strtod_l+0x88>
 8010c12:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8010c16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010c1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010c20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010c24:	e7f0      	b.n	8010c08 <_strtod_l+0x100>
 8010c26:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8010da8 <_strtod_l+0x2a0>
 8010c2a:	e7ed      	b.n	8010c08 <_strtod_l+0x100>
 8010c2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010c30:	f04f 38ff 	mov.w	r8, #4294967295
 8010c34:	e7e8      	b.n	8010c08 <_strtod_l+0x100>
 8010c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c38:	1c5a      	adds	r2, r3, #1
 8010c3a:	9211      	str	r2, [sp, #68]	; 0x44
 8010c3c:	785b      	ldrb	r3, [r3, #1]
 8010c3e:	2b30      	cmp	r3, #48	; 0x30
 8010c40:	d0f9      	beq.n	8010c36 <_strtod_l+0x12e>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d0a4      	beq.n	8010b90 <_strtod_l+0x88>
 8010c46:	2301      	movs	r3, #1
 8010c48:	f04f 0a00 	mov.w	sl, #0
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c50:	930a      	str	r3, [sp, #40]	; 0x28
 8010c52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010c56:	f8cd a018 	str.w	sl, [sp, #24]
 8010c5a:	220a      	movs	r2, #10
 8010c5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010c5e:	7807      	ldrb	r7, [r0, #0]
 8010c60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010c64:	b2d9      	uxtb	r1, r3
 8010c66:	2909      	cmp	r1, #9
 8010c68:	d92a      	bls.n	8010cc0 <_strtod_l+0x1b8>
 8010c6a:	9907      	ldr	r1, [sp, #28]
 8010c6c:	462a      	mov	r2, r5
 8010c6e:	f001 fe0f 	bl	8012890 <strncmp>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d033      	beq.n	8010cde <_strtod_l+0x1d6>
 8010c76:	2000      	movs	r0, #0
 8010c78:	9b06      	ldr	r3, [sp, #24]
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	4607      	mov	r7, r0
 8010c80:	2a65      	cmp	r2, #101	; 0x65
 8010c82:	d001      	beq.n	8010c88 <_strtod_l+0x180>
 8010c84:	2a45      	cmp	r2, #69	; 0x45
 8010c86:	d117      	bne.n	8010cb8 <_strtod_l+0x1b0>
 8010c88:	b91b      	cbnz	r3, 8010c92 <_strtod_l+0x18a>
 8010c8a:	9b04      	ldr	r3, [sp, #16]
 8010c8c:	4303      	orrs	r3, r0
 8010c8e:	d09c      	beq.n	8010bca <_strtod_l+0xc2>
 8010c90:	2300      	movs	r3, #0
 8010c92:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8010c96:	f10b 0201 	add.w	r2, fp, #1
 8010c9a:	9211      	str	r2, [sp, #68]	; 0x44
 8010c9c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010ca0:	2a2b      	cmp	r2, #43	; 0x2b
 8010ca2:	d071      	beq.n	8010d88 <_strtod_l+0x280>
 8010ca4:	2a2d      	cmp	r2, #45	; 0x2d
 8010ca6:	d077      	beq.n	8010d98 <_strtod_l+0x290>
 8010ca8:	f04f 0e00 	mov.w	lr, #0
 8010cac:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010cb0:	2d09      	cmp	r5, #9
 8010cb2:	d97f      	bls.n	8010db4 <_strtod_l+0x2ac>
 8010cb4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010cb8:	2500      	movs	r5, #0
 8010cba:	e09b      	b.n	8010df4 <_strtod_l+0x2ec>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e7c3      	b.n	8010c48 <_strtod_l+0x140>
 8010cc0:	9906      	ldr	r1, [sp, #24]
 8010cc2:	2908      	cmp	r1, #8
 8010cc4:	bfdd      	ittte	le
 8010cc6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010cc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ccc:	9309      	strle	r3, [sp, #36]	; 0x24
 8010cce:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010cd2:	9b06      	ldr	r3, [sp, #24]
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	9306      	str	r3, [sp, #24]
 8010cda:	9011      	str	r0, [sp, #68]	; 0x44
 8010cdc:	e7be      	b.n	8010c5c <_strtod_l+0x154>
 8010cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ce0:	195a      	adds	r2, r3, r5
 8010ce2:	9211      	str	r2, [sp, #68]	; 0x44
 8010ce4:	5d5a      	ldrb	r2, [r3, r5]
 8010ce6:	9b06      	ldr	r3, [sp, #24]
 8010ce8:	b3a3      	cbz	r3, 8010d54 <_strtod_l+0x24c>
 8010cea:	4607      	mov	r7, r0
 8010cec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010cf0:	2909      	cmp	r1, #9
 8010cf2:	d912      	bls.n	8010d1a <_strtod_l+0x212>
 8010cf4:	2101      	movs	r1, #1
 8010cf6:	e7c3      	b.n	8010c80 <_strtod_l+0x178>
 8010cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cfa:	1c5a      	adds	r2, r3, #1
 8010cfc:	9211      	str	r2, [sp, #68]	; 0x44
 8010cfe:	785a      	ldrb	r2, [r3, #1]
 8010d00:	3001      	adds	r0, #1
 8010d02:	2a30      	cmp	r2, #48	; 0x30
 8010d04:	d0f8      	beq.n	8010cf8 <_strtod_l+0x1f0>
 8010d06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010d0a:	2b08      	cmp	r3, #8
 8010d0c:	f200 8497 	bhi.w	801163e <_strtod_l+0xb36>
 8010d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d12:	930a      	str	r3, [sp, #40]	; 0x28
 8010d14:	4607      	mov	r7, r0
 8010d16:	2000      	movs	r0, #0
 8010d18:	4603      	mov	r3, r0
 8010d1a:	3a30      	subs	r2, #48	; 0x30
 8010d1c:	f100 0101 	add.w	r1, r0, #1
 8010d20:	d012      	beq.n	8010d48 <_strtod_l+0x240>
 8010d22:	440f      	add	r7, r1
 8010d24:	eb00 0c03 	add.w	ip, r0, r3
 8010d28:	4619      	mov	r1, r3
 8010d2a:	250a      	movs	r5, #10
 8010d2c:	4561      	cmp	r1, ip
 8010d2e:	d113      	bne.n	8010d58 <_strtod_l+0x250>
 8010d30:	1819      	adds	r1, r3, r0
 8010d32:	2908      	cmp	r1, #8
 8010d34:	f103 0301 	add.w	r3, r3, #1
 8010d38:	4403      	add	r3, r0
 8010d3a:	dc1c      	bgt.n	8010d76 <_strtod_l+0x26e>
 8010d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d3e:	210a      	movs	r1, #10
 8010d40:	fb01 2200 	mla	r2, r1, r0, r2
 8010d44:	9209      	str	r2, [sp, #36]	; 0x24
 8010d46:	2100      	movs	r1, #0
 8010d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d4a:	1c50      	adds	r0, r2, #1
 8010d4c:	9011      	str	r0, [sp, #68]	; 0x44
 8010d4e:	7852      	ldrb	r2, [r2, #1]
 8010d50:	4608      	mov	r0, r1
 8010d52:	e7cb      	b.n	8010cec <_strtod_l+0x1e4>
 8010d54:	9806      	ldr	r0, [sp, #24]
 8010d56:	e7d4      	b.n	8010d02 <_strtod_l+0x1fa>
 8010d58:	2908      	cmp	r1, #8
 8010d5a:	dc04      	bgt.n	8010d66 <_strtod_l+0x25e>
 8010d5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010d5e:	436e      	muls	r6, r5
 8010d60:	9609      	str	r6, [sp, #36]	; 0x24
 8010d62:	3101      	adds	r1, #1
 8010d64:	e7e2      	b.n	8010d2c <_strtod_l+0x224>
 8010d66:	f101 0e01 	add.w	lr, r1, #1
 8010d6a:	f1be 0f10 	cmp.w	lr, #16
 8010d6e:	bfd8      	it	le
 8010d70:	fb05 fa0a 	mulle.w	sl, r5, sl
 8010d74:	e7f5      	b.n	8010d62 <_strtod_l+0x25a>
 8010d76:	2b10      	cmp	r3, #16
 8010d78:	bfdc      	itt	le
 8010d7a:	210a      	movle	r1, #10
 8010d7c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8010d80:	e7e1      	b.n	8010d46 <_strtod_l+0x23e>
 8010d82:	2700      	movs	r7, #0
 8010d84:	2101      	movs	r1, #1
 8010d86:	e780      	b.n	8010c8a <_strtod_l+0x182>
 8010d88:	f04f 0e00 	mov.w	lr, #0
 8010d8c:	f10b 0202 	add.w	r2, fp, #2
 8010d90:	9211      	str	r2, [sp, #68]	; 0x44
 8010d92:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8010d96:	e789      	b.n	8010cac <_strtod_l+0x1a4>
 8010d98:	f04f 0e01 	mov.w	lr, #1
 8010d9c:	e7f6      	b.n	8010d8c <_strtod_l+0x284>
 8010d9e:	bf00      	nop
 8010da0:	080141a0 	.word	0x080141a0
 8010da4:	080140d8 	.word	0x080140d8
 8010da8:	7ff00000 	.word	0x7ff00000
 8010dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010dae:	1c55      	adds	r5, r2, #1
 8010db0:	9511      	str	r5, [sp, #68]	; 0x44
 8010db2:	7852      	ldrb	r2, [r2, #1]
 8010db4:	2a30      	cmp	r2, #48	; 0x30
 8010db6:	d0f9      	beq.n	8010dac <_strtod_l+0x2a4>
 8010db8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010dbc:	2d08      	cmp	r5, #8
 8010dbe:	f63f af7b 	bhi.w	8010cb8 <_strtod_l+0x1b0>
 8010dc2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010dc8:	9207      	str	r2, [sp, #28]
 8010dca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010dcc:	1c55      	adds	r5, r2, #1
 8010dce:	9511      	str	r5, [sp, #68]	; 0x44
 8010dd0:	7852      	ldrb	r2, [r2, #1]
 8010dd2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010dd6:	2e09      	cmp	r6, #9
 8010dd8:	d937      	bls.n	8010e4a <_strtod_l+0x342>
 8010dda:	9e07      	ldr	r6, [sp, #28]
 8010ddc:	1bad      	subs	r5, r5, r6
 8010dde:	2d08      	cmp	r5, #8
 8010de0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010de4:	dc02      	bgt.n	8010dec <_strtod_l+0x2e4>
 8010de6:	4565      	cmp	r5, ip
 8010de8:	bfa8      	it	ge
 8010dea:	4665      	movge	r5, ip
 8010dec:	f1be 0f00 	cmp.w	lr, #0
 8010df0:	d000      	beq.n	8010df4 <_strtod_l+0x2ec>
 8010df2:	426d      	negs	r5, r5
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d14d      	bne.n	8010e94 <_strtod_l+0x38c>
 8010df8:	9b04      	ldr	r3, [sp, #16]
 8010dfa:	4303      	orrs	r3, r0
 8010dfc:	f47f aec8 	bne.w	8010b90 <_strtod_l+0x88>
 8010e00:	2900      	cmp	r1, #0
 8010e02:	f47f aee2 	bne.w	8010bca <_strtod_l+0xc2>
 8010e06:	2a69      	cmp	r2, #105	; 0x69
 8010e08:	d027      	beq.n	8010e5a <_strtod_l+0x352>
 8010e0a:	dc24      	bgt.n	8010e56 <_strtod_l+0x34e>
 8010e0c:	2a49      	cmp	r2, #73	; 0x49
 8010e0e:	d024      	beq.n	8010e5a <_strtod_l+0x352>
 8010e10:	2a4e      	cmp	r2, #78	; 0x4e
 8010e12:	f47f aeda 	bne.w	8010bca <_strtod_l+0xc2>
 8010e16:	4996      	ldr	r1, [pc, #600]	; (8011070 <_strtod_l+0x568>)
 8010e18:	a811      	add	r0, sp, #68	; 0x44
 8010e1a:	f000 fef7 	bl	8011c0c <__match>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f43f aed3 	beq.w	8010bca <_strtod_l+0xc2>
 8010e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b28      	cmp	r3, #40	; 0x28
 8010e2a:	d12d      	bne.n	8010e88 <_strtod_l+0x380>
 8010e2c:	4991      	ldr	r1, [pc, #580]	; (8011074 <_strtod_l+0x56c>)
 8010e2e:	aa14      	add	r2, sp, #80	; 0x50
 8010e30:	a811      	add	r0, sp, #68	; 0x44
 8010e32:	f000 feff 	bl	8011c34 <__hexnan>
 8010e36:	2805      	cmp	r0, #5
 8010e38:	d126      	bne.n	8010e88 <_strtod_l+0x380>
 8010e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e3c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010e40:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010e44:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010e48:	e6a2      	b.n	8010b90 <_strtod_l+0x88>
 8010e4a:	250a      	movs	r5, #10
 8010e4c:	fb05 250c 	mla	r5, r5, ip, r2
 8010e50:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8010e54:	e7b9      	b.n	8010dca <_strtod_l+0x2c2>
 8010e56:	2a6e      	cmp	r2, #110	; 0x6e
 8010e58:	e7db      	b.n	8010e12 <_strtod_l+0x30a>
 8010e5a:	4987      	ldr	r1, [pc, #540]	; (8011078 <_strtod_l+0x570>)
 8010e5c:	a811      	add	r0, sp, #68	; 0x44
 8010e5e:	f000 fed5 	bl	8011c0c <__match>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f43f aeb1 	beq.w	8010bca <_strtod_l+0xc2>
 8010e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e6a:	4984      	ldr	r1, [pc, #528]	; (801107c <_strtod_l+0x574>)
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	a811      	add	r0, sp, #68	; 0x44
 8010e70:	9311      	str	r3, [sp, #68]	; 0x44
 8010e72:	f000 fecb 	bl	8011c0c <__match>
 8010e76:	b910      	cbnz	r0, 8010e7e <_strtod_l+0x376>
 8010e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8010e7e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8011090 <_strtod_l+0x588>
 8010e82:	f04f 0800 	mov.w	r8, #0
 8010e86:	e683      	b.n	8010b90 <_strtod_l+0x88>
 8010e88:	487d      	ldr	r0, [pc, #500]	; (8011080 <_strtod_l+0x578>)
 8010e8a:	f001 fce9 	bl	8012860 <nan>
 8010e8e:	ec59 8b10 	vmov	r8, r9, d0
 8010e92:	e67d      	b.n	8010b90 <_strtod_l+0x88>
 8010e94:	1bea      	subs	r2, r5, r7
 8010e96:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8010e9a:	9207      	str	r2, [sp, #28]
 8010e9c:	9a06      	ldr	r2, [sp, #24]
 8010e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010ea2:	2a00      	cmp	r2, #0
 8010ea4:	bf08      	it	eq
 8010ea6:	461a      	moveq	r2, r3
 8010ea8:	2b10      	cmp	r3, #16
 8010eaa:	9206      	str	r2, [sp, #24]
 8010eac:	461a      	mov	r2, r3
 8010eae:	bfa8      	it	ge
 8010eb0:	2210      	movge	r2, #16
 8010eb2:	2b09      	cmp	r3, #9
 8010eb4:	ec59 8b17 	vmov	r8, r9, d7
 8010eb8:	dd0c      	ble.n	8010ed4 <_strtod_l+0x3cc>
 8010eba:	4972      	ldr	r1, [pc, #456]	; (8011084 <_strtod_l+0x57c>)
 8010ebc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010ec0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8010ec4:	ee06 aa90 	vmov	s13, sl
 8010ec8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010ecc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ed0:	ec59 8b16 	vmov	r8, r9, d6
 8010ed4:	2b0f      	cmp	r3, #15
 8010ed6:	dc36      	bgt.n	8010f46 <_strtod_l+0x43e>
 8010ed8:	9907      	ldr	r1, [sp, #28]
 8010eda:	2900      	cmp	r1, #0
 8010edc:	f43f ae58 	beq.w	8010b90 <_strtod_l+0x88>
 8010ee0:	dd23      	ble.n	8010f2a <_strtod_l+0x422>
 8010ee2:	2916      	cmp	r1, #22
 8010ee4:	dc0b      	bgt.n	8010efe <_strtod_l+0x3f6>
 8010ee6:	4b67      	ldr	r3, [pc, #412]	; (8011084 <_strtod_l+0x57c>)
 8010ee8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010eec:	ed93 7b00 	vldr	d7, [r3]
 8010ef0:	ec49 8b16 	vmov	d6, r8, r9
 8010ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ef8:	ec59 8b17 	vmov	r8, r9, d7
 8010efc:	e648      	b.n	8010b90 <_strtod_l+0x88>
 8010efe:	9807      	ldr	r0, [sp, #28]
 8010f00:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010f04:	4281      	cmp	r1, r0
 8010f06:	db1e      	blt.n	8010f46 <_strtod_l+0x43e>
 8010f08:	4a5e      	ldr	r2, [pc, #376]	; (8011084 <_strtod_l+0x57c>)
 8010f0a:	f1c3 030f 	rsb	r3, r3, #15
 8010f0e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010f12:	ed91 7b00 	vldr	d7, [r1]
 8010f16:	ec49 8b16 	vmov	d6, r8, r9
 8010f1a:	1ac3      	subs	r3, r0, r3
 8010f1c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f24:	ed92 6b00 	vldr	d6, [r2]
 8010f28:	e7e4      	b.n	8010ef4 <_strtod_l+0x3ec>
 8010f2a:	9907      	ldr	r1, [sp, #28]
 8010f2c:	3116      	adds	r1, #22
 8010f2e:	db0a      	blt.n	8010f46 <_strtod_l+0x43e>
 8010f30:	4b54      	ldr	r3, [pc, #336]	; (8011084 <_strtod_l+0x57c>)
 8010f32:	1b7d      	subs	r5, r7, r5
 8010f34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010f38:	ed95 7b00 	vldr	d7, [r5]
 8010f3c:	ec49 8b16 	vmov	d6, r8, r9
 8010f40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010f44:	e7d8      	b.n	8010ef8 <_strtod_l+0x3f0>
 8010f46:	9907      	ldr	r1, [sp, #28]
 8010f48:	1a9a      	subs	r2, r3, r2
 8010f4a:	440a      	add	r2, r1
 8010f4c:	2a00      	cmp	r2, #0
 8010f4e:	dd6f      	ble.n	8011030 <_strtod_l+0x528>
 8010f50:	f012 000f 	ands.w	r0, r2, #15
 8010f54:	d00a      	beq.n	8010f6c <_strtod_l+0x464>
 8010f56:	494b      	ldr	r1, [pc, #300]	; (8011084 <_strtod_l+0x57c>)
 8010f58:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010f5c:	ed91 7b00 	vldr	d7, [r1]
 8010f60:	ec49 8b16 	vmov	d6, r8, r9
 8010f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f68:	ec59 8b17 	vmov	r8, r9, d7
 8010f6c:	f032 020f 	bics.w	r2, r2, #15
 8010f70:	d04f      	beq.n	8011012 <_strtod_l+0x50a>
 8010f72:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8010f76:	dd22      	ble.n	8010fbe <_strtod_l+0x4b6>
 8010f78:	2500      	movs	r5, #0
 8010f7a:	462e      	mov	r6, r5
 8010f7c:	9506      	str	r5, [sp, #24]
 8010f7e:	462f      	mov	r7, r5
 8010f80:	2322      	movs	r3, #34	; 0x22
 8010f82:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8011090 <_strtod_l+0x588>
 8010f86:	6023      	str	r3, [r4, #0]
 8010f88:	f04f 0800 	mov.w	r8, #0
 8010f8c:	9b06      	ldr	r3, [sp, #24]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f43f adfe 	beq.w	8010b90 <_strtod_l+0x88>
 8010f94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 ff3a 	bl	8011e10 <_Bfree>
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 ff36 	bl	8011e10 <_Bfree>
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f000 ff32 	bl	8011e10 <_Bfree>
 8010fac:	9906      	ldr	r1, [sp, #24]
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 ff2e 	bl	8011e10 <_Bfree>
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 ff2a 	bl	8011e10 <_Bfree>
 8010fbc:	e5e8      	b.n	8010b90 <_strtod_l+0x88>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	ec49 8b17 	vmov	d7, r8, r9
 8010fc4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8011088 <_strtod_l+0x580>
 8010fc8:	1112      	asrs	r2, r2, #4
 8010fca:	4601      	mov	r1, r0
 8010fcc:	2a01      	cmp	r2, #1
 8010fce:	dc23      	bgt.n	8011018 <_strtod_l+0x510>
 8010fd0:	b108      	cbz	r0, 8010fd6 <_strtod_l+0x4ce>
 8010fd2:	ec59 8b17 	vmov	r8, r9, d7
 8010fd6:	4a2c      	ldr	r2, [pc, #176]	; (8011088 <_strtod_l+0x580>)
 8010fd8:	482c      	ldr	r0, [pc, #176]	; (801108c <_strtod_l+0x584>)
 8010fda:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010fde:	ed92 7b00 	vldr	d7, [r2]
 8010fe2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010fe6:	ec49 8b16 	vmov	d6, r8, r9
 8010fea:	4a29      	ldr	r2, [pc, #164]	; (8011090 <_strtod_l+0x588>)
 8010fec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ff0:	ee17 1a90 	vmov	r1, s15
 8010ff4:	400a      	ands	r2, r1
 8010ff6:	4282      	cmp	r2, r0
 8010ff8:	ec59 8b17 	vmov	r8, r9, d7
 8010ffc:	d8bc      	bhi.n	8010f78 <_strtod_l+0x470>
 8010ffe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011002:	4282      	cmp	r2, r0
 8011004:	bf86      	itte	hi
 8011006:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8011094 <_strtod_l+0x58c>
 801100a:	f04f 38ff 	movhi.w	r8, #4294967295
 801100e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011012:	2200      	movs	r2, #0
 8011014:	9204      	str	r2, [sp, #16]
 8011016:	e078      	b.n	801110a <_strtod_l+0x602>
 8011018:	07d6      	lsls	r6, r2, #31
 801101a:	d504      	bpl.n	8011026 <_strtod_l+0x51e>
 801101c:	ed9c 6b00 	vldr	d6, [ip]
 8011020:	2001      	movs	r0, #1
 8011022:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011026:	3101      	adds	r1, #1
 8011028:	1052      	asrs	r2, r2, #1
 801102a:	f10c 0c08 	add.w	ip, ip, #8
 801102e:	e7cd      	b.n	8010fcc <_strtod_l+0x4c4>
 8011030:	d0ef      	beq.n	8011012 <_strtod_l+0x50a>
 8011032:	4252      	negs	r2, r2
 8011034:	f012 000f 	ands.w	r0, r2, #15
 8011038:	d00a      	beq.n	8011050 <_strtod_l+0x548>
 801103a:	4912      	ldr	r1, [pc, #72]	; (8011084 <_strtod_l+0x57c>)
 801103c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011040:	ed91 7b00 	vldr	d7, [r1]
 8011044:	ec49 8b16 	vmov	d6, r8, r9
 8011048:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801104c:	ec59 8b17 	vmov	r8, r9, d7
 8011050:	1112      	asrs	r2, r2, #4
 8011052:	d0de      	beq.n	8011012 <_strtod_l+0x50a>
 8011054:	2a1f      	cmp	r2, #31
 8011056:	dd1f      	ble.n	8011098 <_strtod_l+0x590>
 8011058:	2500      	movs	r5, #0
 801105a:	462e      	mov	r6, r5
 801105c:	9506      	str	r5, [sp, #24]
 801105e:	462f      	mov	r7, r5
 8011060:	2322      	movs	r3, #34	; 0x22
 8011062:	f04f 0800 	mov.w	r8, #0
 8011066:	f04f 0900 	mov.w	r9, #0
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	e78e      	b.n	8010f8c <_strtod_l+0x484>
 801106e:	bf00      	nop
 8011070:	080140d5 	.word	0x080140d5
 8011074:	080140ec 	.word	0x080140ec
 8011078:	080140cc 	.word	0x080140cc
 801107c:	080140cf 	.word	0x080140cf
 8011080:	0801435f 	.word	0x0801435f
 8011084:	08014250 	.word	0x08014250
 8011088:	08014228 	.word	0x08014228
 801108c:	7ca00000 	.word	0x7ca00000
 8011090:	7ff00000 	.word	0x7ff00000
 8011094:	7fefffff 	.word	0x7fefffff
 8011098:	f012 0110 	ands.w	r1, r2, #16
 801109c:	bf18      	it	ne
 801109e:	216a      	movne	r1, #106	; 0x6a
 80110a0:	9104      	str	r1, [sp, #16]
 80110a2:	ec49 8b17 	vmov	d7, r8, r9
 80110a6:	49be      	ldr	r1, [pc, #760]	; (80113a0 <_strtod_l+0x898>)
 80110a8:	2000      	movs	r0, #0
 80110aa:	07d6      	lsls	r6, r2, #31
 80110ac:	d504      	bpl.n	80110b8 <_strtod_l+0x5b0>
 80110ae:	ed91 6b00 	vldr	d6, [r1]
 80110b2:	2001      	movs	r0, #1
 80110b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110b8:	1052      	asrs	r2, r2, #1
 80110ba:	f101 0108 	add.w	r1, r1, #8
 80110be:	d1f4      	bne.n	80110aa <_strtod_l+0x5a2>
 80110c0:	b108      	cbz	r0, 80110c6 <_strtod_l+0x5be>
 80110c2:	ec59 8b17 	vmov	r8, r9, d7
 80110c6:	9a04      	ldr	r2, [sp, #16]
 80110c8:	b1c2      	cbz	r2, 80110fc <_strtod_l+0x5f4>
 80110ca:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80110ce:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	4648      	mov	r0, r9
 80110d6:	dd11      	ble.n	80110fc <_strtod_l+0x5f4>
 80110d8:	2a1f      	cmp	r2, #31
 80110da:	f340 812e 	ble.w	801133a <_strtod_l+0x832>
 80110de:	2a34      	cmp	r2, #52	; 0x34
 80110e0:	bfde      	ittt	le
 80110e2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80110e6:	f04f 32ff 	movle.w	r2, #4294967295
 80110ea:	fa02 f101 	lslle.w	r1, r2, r1
 80110ee:	f04f 0800 	mov.w	r8, #0
 80110f2:	bfcc      	ite	gt
 80110f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80110f8:	ea01 0900 	andle.w	r9, r1, r0
 80110fc:	ec49 8b17 	vmov	d7, r8, r9
 8011100:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011108:	d0a6      	beq.n	8011058 <_strtod_l+0x550>
 801110a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801110c:	9200      	str	r2, [sp, #0]
 801110e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011110:	9a06      	ldr	r2, [sp, #24]
 8011112:	4620      	mov	r0, r4
 8011114:	f000 fee4 	bl	8011ee0 <__s2b>
 8011118:	9006      	str	r0, [sp, #24]
 801111a:	2800      	cmp	r0, #0
 801111c:	f43f af2c 	beq.w	8010f78 <_strtod_l+0x470>
 8011120:	9b07      	ldr	r3, [sp, #28]
 8011122:	1b7d      	subs	r5, r7, r5
 8011124:	2b00      	cmp	r3, #0
 8011126:	bfb4      	ite	lt
 8011128:	462b      	movlt	r3, r5
 801112a:	2300      	movge	r3, #0
 801112c:	9309      	str	r3, [sp, #36]	; 0x24
 801112e:	9b07      	ldr	r3, [sp, #28]
 8011130:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8011380 <_strtod_l+0x878>
 8011134:	ed9f ab94 	vldr	d10, [pc, #592]	; 8011388 <_strtod_l+0x880>
 8011138:	ed9f bb95 	vldr	d11, [pc, #596]	; 8011390 <_strtod_l+0x888>
 801113c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011140:	2500      	movs	r5, #0
 8011142:	930c      	str	r3, [sp, #48]	; 0x30
 8011144:	462e      	mov	r6, r5
 8011146:	9b06      	ldr	r3, [sp, #24]
 8011148:	4620      	mov	r0, r4
 801114a:	6859      	ldr	r1, [r3, #4]
 801114c:	f000 fe20 	bl	8011d90 <_Balloc>
 8011150:	4607      	mov	r7, r0
 8011152:	2800      	cmp	r0, #0
 8011154:	f43f af14 	beq.w	8010f80 <_strtod_l+0x478>
 8011158:	9b06      	ldr	r3, [sp, #24]
 801115a:	691a      	ldr	r2, [r3, #16]
 801115c:	3202      	adds	r2, #2
 801115e:	f103 010c 	add.w	r1, r3, #12
 8011162:	0092      	lsls	r2, r2, #2
 8011164:	300c      	adds	r0, #12
 8011166:	f7ff fc9f 	bl	8010aa8 <memcpy>
 801116a:	ec49 8b10 	vmov	d0, r8, r9
 801116e:	aa14      	add	r2, sp, #80	; 0x50
 8011170:	a913      	add	r1, sp, #76	; 0x4c
 8011172:	4620      	mov	r0, r4
 8011174:	f001 f9fa 	bl	801256c <__d2b>
 8011178:	ec49 8b18 	vmov	d8, r8, r9
 801117c:	9012      	str	r0, [sp, #72]	; 0x48
 801117e:	2800      	cmp	r0, #0
 8011180:	f43f aefe 	beq.w	8010f80 <_strtod_l+0x478>
 8011184:	2101      	movs	r1, #1
 8011186:	4620      	mov	r0, r4
 8011188:	f000 ff44 	bl	8012014 <__i2b>
 801118c:	4606      	mov	r6, r0
 801118e:	2800      	cmp	r0, #0
 8011190:	f43f aef6 	beq.w	8010f80 <_strtod_l+0x478>
 8011194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011196:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011198:	2b00      	cmp	r3, #0
 801119a:	bfab      	itete	ge
 801119c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801119e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80111a0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80111a4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80111a8:	bfac      	ite	ge
 80111aa:	eb03 0b02 	addge.w	fp, r3, r2
 80111ae:	eba2 0a03 	sublt.w	sl, r2, r3
 80111b2:	9a04      	ldr	r2, [sp, #16]
 80111b4:	1a9b      	subs	r3, r3, r2
 80111b6:	440b      	add	r3, r1
 80111b8:	4a7a      	ldr	r2, [pc, #488]	; (80113a4 <_strtod_l+0x89c>)
 80111ba:	3b01      	subs	r3, #1
 80111bc:	4293      	cmp	r3, r2
 80111be:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80111c2:	f280 80cd 	bge.w	8011360 <_strtod_l+0x858>
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	2a1f      	cmp	r2, #31
 80111ca:	eba1 0102 	sub.w	r1, r1, r2
 80111ce:	f04f 0001 	mov.w	r0, #1
 80111d2:	f300 80b9 	bgt.w	8011348 <_strtod_l+0x840>
 80111d6:	fa00 f302 	lsl.w	r3, r0, r2
 80111da:	930b      	str	r3, [sp, #44]	; 0x2c
 80111dc:	2300      	movs	r3, #0
 80111de:	930a      	str	r3, [sp, #40]	; 0x28
 80111e0:	eb0b 0301 	add.w	r3, fp, r1
 80111e4:	9a04      	ldr	r2, [sp, #16]
 80111e6:	459b      	cmp	fp, r3
 80111e8:	448a      	add	sl, r1
 80111ea:	4492      	add	sl, r2
 80111ec:	465a      	mov	r2, fp
 80111ee:	bfa8      	it	ge
 80111f0:	461a      	movge	r2, r3
 80111f2:	4552      	cmp	r2, sl
 80111f4:	bfa8      	it	ge
 80111f6:	4652      	movge	r2, sl
 80111f8:	2a00      	cmp	r2, #0
 80111fa:	bfc2      	ittt	gt
 80111fc:	1a9b      	subgt	r3, r3, r2
 80111fe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011202:	ebab 0b02 	subgt.w	fp, fp, r2
 8011206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011208:	2a00      	cmp	r2, #0
 801120a:	dd18      	ble.n	801123e <_strtod_l+0x736>
 801120c:	4631      	mov	r1, r6
 801120e:	4620      	mov	r0, r4
 8011210:	930f      	str	r3, [sp, #60]	; 0x3c
 8011212:	f000 ffbf 	bl	8012194 <__pow5mult>
 8011216:	4606      	mov	r6, r0
 8011218:	2800      	cmp	r0, #0
 801121a:	f43f aeb1 	beq.w	8010f80 <_strtod_l+0x478>
 801121e:	4601      	mov	r1, r0
 8011220:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011222:	4620      	mov	r0, r4
 8011224:	f000 ff0c 	bl	8012040 <__multiply>
 8011228:	900e      	str	r0, [sp, #56]	; 0x38
 801122a:	2800      	cmp	r0, #0
 801122c:	f43f aea8 	beq.w	8010f80 <_strtod_l+0x478>
 8011230:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011232:	4620      	mov	r0, r4
 8011234:	f000 fdec 	bl	8011e10 <_Bfree>
 8011238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801123a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801123c:	9212      	str	r2, [sp, #72]	; 0x48
 801123e:	2b00      	cmp	r3, #0
 8011240:	f300 8093 	bgt.w	801136a <_strtod_l+0x862>
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	dd08      	ble.n	801125c <_strtod_l+0x754>
 801124a:	4639      	mov	r1, r7
 801124c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801124e:	4620      	mov	r0, r4
 8011250:	f000 ffa0 	bl	8012194 <__pow5mult>
 8011254:	4607      	mov	r7, r0
 8011256:	2800      	cmp	r0, #0
 8011258:	f43f ae92 	beq.w	8010f80 <_strtod_l+0x478>
 801125c:	f1ba 0f00 	cmp.w	sl, #0
 8011260:	dd08      	ble.n	8011274 <_strtod_l+0x76c>
 8011262:	4639      	mov	r1, r7
 8011264:	4652      	mov	r2, sl
 8011266:	4620      	mov	r0, r4
 8011268:	f000 ffee 	bl	8012248 <__lshift>
 801126c:	4607      	mov	r7, r0
 801126e:	2800      	cmp	r0, #0
 8011270:	f43f ae86 	beq.w	8010f80 <_strtod_l+0x478>
 8011274:	f1bb 0f00 	cmp.w	fp, #0
 8011278:	dd08      	ble.n	801128c <_strtod_l+0x784>
 801127a:	4631      	mov	r1, r6
 801127c:	465a      	mov	r2, fp
 801127e:	4620      	mov	r0, r4
 8011280:	f000 ffe2 	bl	8012248 <__lshift>
 8011284:	4606      	mov	r6, r0
 8011286:	2800      	cmp	r0, #0
 8011288:	f43f ae7a 	beq.w	8010f80 <_strtod_l+0x478>
 801128c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801128e:	463a      	mov	r2, r7
 8011290:	4620      	mov	r0, r4
 8011292:	f001 f865 	bl	8012360 <__mdiff>
 8011296:	4605      	mov	r5, r0
 8011298:	2800      	cmp	r0, #0
 801129a:	f43f ae71 	beq.w	8010f80 <_strtod_l+0x478>
 801129e:	2300      	movs	r3, #0
 80112a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80112a4:	60c3      	str	r3, [r0, #12]
 80112a6:	4631      	mov	r1, r6
 80112a8:	f001 f83e 	bl	8012328 <__mcmp>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	da7d      	bge.n	80113ac <_strtod_l+0x8a4>
 80112b0:	ea5a 0308 	orrs.w	r3, sl, r8
 80112b4:	f040 80a3 	bne.w	80113fe <_strtod_l+0x8f6>
 80112b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f040 809e 	bne.w	80113fe <_strtod_l+0x8f6>
 80112c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80112c6:	0d1b      	lsrs	r3, r3, #20
 80112c8:	051b      	lsls	r3, r3, #20
 80112ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80112ce:	f240 8096 	bls.w	80113fe <_strtod_l+0x8f6>
 80112d2:	696b      	ldr	r3, [r5, #20]
 80112d4:	b91b      	cbnz	r3, 80112de <_strtod_l+0x7d6>
 80112d6:	692b      	ldr	r3, [r5, #16]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	f340 8090 	ble.w	80113fe <_strtod_l+0x8f6>
 80112de:	4629      	mov	r1, r5
 80112e0:	2201      	movs	r2, #1
 80112e2:	4620      	mov	r0, r4
 80112e4:	f000 ffb0 	bl	8012248 <__lshift>
 80112e8:	4631      	mov	r1, r6
 80112ea:	4605      	mov	r5, r0
 80112ec:	f001 f81c 	bl	8012328 <__mcmp>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f340 8084 	ble.w	80113fe <_strtod_l+0x8f6>
 80112f6:	9904      	ldr	r1, [sp, #16]
 80112f8:	4a2b      	ldr	r2, [pc, #172]	; (80113a8 <_strtod_l+0x8a0>)
 80112fa:	464b      	mov	r3, r9
 80112fc:	2900      	cmp	r1, #0
 80112fe:	f000 809d 	beq.w	801143c <_strtod_l+0x934>
 8011302:	ea02 0109 	and.w	r1, r2, r9
 8011306:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801130a:	f300 8097 	bgt.w	801143c <_strtod_l+0x934>
 801130e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011312:	f77f aea5 	ble.w	8011060 <_strtod_l+0x558>
 8011316:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011398 <_strtod_l+0x890>
 801131a:	ec49 8b16 	vmov	d6, r8, r9
 801131e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011322:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011326:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801132a:	4313      	orrs	r3, r2
 801132c:	bf08      	it	eq
 801132e:	2322      	moveq	r3, #34	; 0x22
 8011330:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011334:	bf08      	it	eq
 8011336:	6023      	streq	r3, [r4, #0]
 8011338:	e62c      	b.n	8010f94 <_strtod_l+0x48c>
 801133a:	f04f 31ff 	mov.w	r1, #4294967295
 801133e:	fa01 f202 	lsl.w	r2, r1, r2
 8011342:	ea02 0808 	and.w	r8, r2, r8
 8011346:	e6d9      	b.n	80110fc <_strtod_l+0x5f4>
 8011348:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801134c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011350:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011354:	33e2      	adds	r3, #226	; 0xe2
 8011356:	fa00 f303 	lsl.w	r3, r0, r3
 801135a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801135e:	e73f      	b.n	80111e0 <_strtod_l+0x6d8>
 8011360:	2200      	movs	r2, #0
 8011362:	2301      	movs	r3, #1
 8011364:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011368:	e73a      	b.n	80111e0 <_strtod_l+0x6d8>
 801136a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801136c:	461a      	mov	r2, r3
 801136e:	4620      	mov	r0, r4
 8011370:	f000 ff6a 	bl	8012248 <__lshift>
 8011374:	9012      	str	r0, [sp, #72]	; 0x48
 8011376:	2800      	cmp	r0, #0
 8011378:	f47f af64 	bne.w	8011244 <_strtod_l+0x73c>
 801137c:	e600      	b.n	8010f80 <_strtod_l+0x478>
 801137e:	bf00      	nop
 8011380:	94a03595 	.word	0x94a03595
 8011384:	3fcfffff 	.word	0x3fcfffff
 8011388:	94a03595 	.word	0x94a03595
 801138c:	3fdfffff 	.word	0x3fdfffff
 8011390:	35afe535 	.word	0x35afe535
 8011394:	3fe00000 	.word	0x3fe00000
 8011398:	00000000 	.word	0x00000000
 801139c:	39500000 	.word	0x39500000
 80113a0:	08014100 	.word	0x08014100
 80113a4:	fffffc02 	.word	0xfffffc02
 80113a8:	7ff00000 	.word	0x7ff00000
 80113ac:	46cb      	mov	fp, r9
 80113ae:	d15f      	bne.n	8011470 <_strtod_l+0x968>
 80113b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113b4:	f1ba 0f00 	cmp.w	sl, #0
 80113b8:	d02a      	beq.n	8011410 <_strtod_l+0x908>
 80113ba:	4aa7      	ldr	r2, [pc, #668]	; (8011658 <_strtod_l+0xb50>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d12b      	bne.n	8011418 <_strtod_l+0x910>
 80113c0:	9b04      	ldr	r3, [sp, #16]
 80113c2:	4642      	mov	r2, r8
 80113c4:	b1fb      	cbz	r3, 8011406 <_strtod_l+0x8fe>
 80113c6:	4ba5      	ldr	r3, [pc, #660]	; (801165c <_strtod_l+0xb54>)
 80113c8:	ea09 0303 	and.w	r3, r9, r3
 80113cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80113d0:	f04f 31ff 	mov.w	r1, #4294967295
 80113d4:	d81a      	bhi.n	801140c <_strtod_l+0x904>
 80113d6:	0d1b      	lsrs	r3, r3, #20
 80113d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80113dc:	fa01 f303 	lsl.w	r3, r1, r3
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d119      	bne.n	8011418 <_strtod_l+0x910>
 80113e4:	4b9e      	ldr	r3, [pc, #632]	; (8011660 <_strtod_l+0xb58>)
 80113e6:	459b      	cmp	fp, r3
 80113e8:	d102      	bne.n	80113f0 <_strtod_l+0x8e8>
 80113ea:	3201      	adds	r2, #1
 80113ec:	f43f adc8 	beq.w	8010f80 <_strtod_l+0x478>
 80113f0:	4b9a      	ldr	r3, [pc, #616]	; (801165c <_strtod_l+0xb54>)
 80113f2:	ea0b 0303 	and.w	r3, fp, r3
 80113f6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80113fa:	f04f 0800 	mov.w	r8, #0
 80113fe:	9b04      	ldr	r3, [sp, #16]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d188      	bne.n	8011316 <_strtod_l+0x80e>
 8011404:	e5c6      	b.n	8010f94 <_strtod_l+0x48c>
 8011406:	f04f 33ff 	mov.w	r3, #4294967295
 801140a:	e7e9      	b.n	80113e0 <_strtod_l+0x8d8>
 801140c:	460b      	mov	r3, r1
 801140e:	e7e7      	b.n	80113e0 <_strtod_l+0x8d8>
 8011410:	ea53 0308 	orrs.w	r3, r3, r8
 8011414:	f43f af6f 	beq.w	80112f6 <_strtod_l+0x7ee>
 8011418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801141a:	b1cb      	cbz	r3, 8011450 <_strtod_l+0x948>
 801141c:	ea13 0f0b 	tst.w	r3, fp
 8011420:	d0ed      	beq.n	80113fe <_strtod_l+0x8f6>
 8011422:	9a04      	ldr	r2, [sp, #16]
 8011424:	4640      	mov	r0, r8
 8011426:	4649      	mov	r1, r9
 8011428:	f1ba 0f00 	cmp.w	sl, #0
 801142c:	d014      	beq.n	8011458 <_strtod_l+0x950>
 801142e:	f7ff fb51 	bl	8010ad4 <sulp>
 8011432:	ee38 7b00 	vadd.f64	d7, d8, d0
 8011436:	ec59 8b17 	vmov	r8, r9, d7
 801143a:	e7e0      	b.n	80113fe <_strtod_l+0x8f6>
 801143c:	4013      	ands	r3, r2
 801143e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011442:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011446:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801144a:	f04f 38ff 	mov.w	r8, #4294967295
 801144e:	e7d6      	b.n	80113fe <_strtod_l+0x8f6>
 8011450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011452:	ea13 0f08 	tst.w	r3, r8
 8011456:	e7e3      	b.n	8011420 <_strtod_l+0x918>
 8011458:	f7ff fb3c 	bl	8010ad4 <sulp>
 801145c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011460:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011468:	ec59 8b10 	vmov	r8, r9, d0
 801146c:	d1c7      	bne.n	80113fe <_strtod_l+0x8f6>
 801146e:	e5f7      	b.n	8011060 <_strtod_l+0x558>
 8011470:	4631      	mov	r1, r6
 8011472:	4628      	mov	r0, r5
 8011474:	f001 f8d6 	bl	8012624 <__ratio>
 8011478:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801147c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011484:	d865      	bhi.n	8011552 <_strtod_l+0xa4a>
 8011486:	f1ba 0f00 	cmp.w	sl, #0
 801148a:	d042      	beq.n	8011512 <_strtod_l+0xa0a>
 801148c:	4b75      	ldr	r3, [pc, #468]	; (8011664 <_strtod_l+0xb5c>)
 801148e:	2200      	movs	r2, #0
 8011490:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8011494:	4871      	ldr	r0, [pc, #452]	; (801165c <_strtod_l+0xb54>)
 8011496:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8011670 <_strtod_l+0xb68>
 801149a:	ea0b 0100 	and.w	r1, fp, r0
 801149e:	4561      	cmp	r1, ip
 80114a0:	f040 808e 	bne.w	80115c0 <_strtod_l+0xab8>
 80114a4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80114a8:	ec49 8b10 	vmov	d0, r8, r9
 80114ac:	ec43 2b1c 	vmov	d12, r2, r3
 80114b0:	910a      	str	r1, [sp, #40]	; 0x28
 80114b2:	f000 ffdf 	bl	8012474 <__ulp>
 80114b6:	ec49 8b1e 	vmov	d14, r8, r9
 80114ba:	4868      	ldr	r0, [pc, #416]	; (801165c <_strtod_l+0xb54>)
 80114bc:	eeac eb00 	vfma.f64	d14, d12, d0
 80114c0:	ee1e 3a90 	vmov	r3, s29
 80114c4:	4a68      	ldr	r2, [pc, #416]	; (8011668 <_strtod_l+0xb60>)
 80114c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80114c8:	4018      	ands	r0, r3
 80114ca:	4290      	cmp	r0, r2
 80114cc:	ec59 8b1e 	vmov	r8, r9, d14
 80114d0:	d94e      	bls.n	8011570 <_strtod_l+0xa68>
 80114d2:	ee18 3a90 	vmov	r3, s17
 80114d6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80114da:	4293      	cmp	r3, r2
 80114dc:	d104      	bne.n	80114e8 <_strtod_l+0x9e0>
 80114de:	ee18 3a10 	vmov	r3, s16
 80114e2:	3301      	adds	r3, #1
 80114e4:	f43f ad4c 	beq.w	8010f80 <_strtod_l+0x478>
 80114e8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8011660 <_strtod_l+0xb58>
 80114ec:	f04f 38ff 	mov.w	r8, #4294967295
 80114f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80114f2:	4620      	mov	r0, r4
 80114f4:	f000 fc8c 	bl	8011e10 <_Bfree>
 80114f8:	4639      	mov	r1, r7
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fc88 	bl	8011e10 <_Bfree>
 8011500:	4631      	mov	r1, r6
 8011502:	4620      	mov	r0, r4
 8011504:	f000 fc84 	bl	8011e10 <_Bfree>
 8011508:	4629      	mov	r1, r5
 801150a:	4620      	mov	r0, r4
 801150c:	f000 fc80 	bl	8011e10 <_Bfree>
 8011510:	e619      	b.n	8011146 <_strtod_l+0x63e>
 8011512:	f1b8 0f00 	cmp.w	r8, #0
 8011516:	d112      	bne.n	801153e <_strtod_l+0xa36>
 8011518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801151c:	b9b3      	cbnz	r3, 801154c <_strtod_l+0xa44>
 801151e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011522:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801152e:	bf58      	it	pl
 8011530:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8011534:	eeb1 7b4d 	vneg.f64	d7, d13
 8011538:	ec53 2b17 	vmov	r2, r3, d7
 801153c:	e7aa      	b.n	8011494 <_strtod_l+0x98c>
 801153e:	f1b8 0f01 	cmp.w	r8, #1
 8011542:	d103      	bne.n	801154c <_strtod_l+0xa44>
 8011544:	f1b9 0f00 	cmp.w	r9, #0
 8011548:	f43f ad8a 	beq.w	8011060 <_strtod_l+0x558>
 801154c:	4b47      	ldr	r3, [pc, #284]	; (801166c <_strtod_l+0xb64>)
 801154e:	2200      	movs	r2, #0
 8011550:	e79e      	b.n	8011490 <_strtod_l+0x988>
 8011552:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011556:	ee20 db0d 	vmul.f64	d13, d0, d13
 801155a:	f1ba 0f00 	cmp.w	sl, #0
 801155e:	d104      	bne.n	801156a <_strtod_l+0xa62>
 8011560:	eeb1 7b4d 	vneg.f64	d7, d13
 8011564:	ec53 2b17 	vmov	r2, r3, d7
 8011568:	e794      	b.n	8011494 <_strtod_l+0x98c>
 801156a:	eeb0 7b4d 	vmov.f64	d7, d13
 801156e:	e7f9      	b.n	8011564 <_strtod_l+0xa5c>
 8011570:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011574:	9b04      	ldr	r3, [sp, #16]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d1ba      	bne.n	80114f0 <_strtod_l+0x9e8>
 801157a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801157e:	0d1b      	lsrs	r3, r3, #20
 8011580:	051b      	lsls	r3, r3, #20
 8011582:	4299      	cmp	r1, r3
 8011584:	d1b4      	bne.n	80114f0 <_strtod_l+0x9e8>
 8011586:	ec51 0b1d 	vmov	r0, r1, d13
 801158a:	f7ef f8d5 	bl	8000738 <__aeabi_d2lz>
 801158e:	f7ef f88d 	bl	80006ac <__aeabi_l2d>
 8011592:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011596:	ec41 0b17 	vmov	d7, r0, r1
 801159a:	ea43 0308 	orr.w	r3, r3, r8
 801159e:	ea53 030a 	orrs.w	r3, r3, sl
 80115a2:	ee3d db47 	vsub.f64	d13, d13, d7
 80115a6:	d03c      	beq.n	8011622 <_strtod_l+0xb1a>
 80115a8:	eeb4 dbca 	vcmpe.f64	d13, d10
 80115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b0:	f53f acf0 	bmi.w	8010f94 <_strtod_l+0x48c>
 80115b4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80115b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115bc:	dd98      	ble.n	80114f0 <_strtod_l+0x9e8>
 80115be:	e4e9      	b.n	8010f94 <_strtod_l+0x48c>
 80115c0:	9804      	ldr	r0, [sp, #16]
 80115c2:	b1f0      	cbz	r0, 8011602 <_strtod_l+0xafa>
 80115c4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80115c8:	d81b      	bhi.n	8011602 <_strtod_l+0xafa>
 80115ca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011650 <_strtod_l+0xb48>
 80115ce:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80115d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d6:	d811      	bhi.n	80115fc <_strtod_l+0xaf4>
 80115d8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80115dc:	ee1d 3a10 	vmov	r3, s26
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	bf38      	it	cc
 80115e4:	2301      	movcc	r3, #1
 80115e6:	ee0d 3a10 	vmov	s26, r3
 80115ea:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80115ee:	f1ba 0f00 	cmp.w	sl, #0
 80115f2:	d113      	bne.n	801161c <_strtod_l+0xb14>
 80115f4:	eeb1 7b4d 	vneg.f64	d7, d13
 80115f8:	ec53 2b17 	vmov	r2, r3, d7
 80115fc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8011600:	1a43      	subs	r3, r0, r1
 8011602:	eeb0 0b48 	vmov.f64	d0, d8
 8011606:	ec43 2b1c 	vmov	d12, r2, r3
 801160a:	910a      	str	r1, [sp, #40]	; 0x28
 801160c:	f000 ff32 	bl	8012474 <__ulp>
 8011610:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011612:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011616:	ec59 8b18 	vmov	r8, r9, d8
 801161a:	e7ab      	b.n	8011574 <_strtod_l+0xa6c>
 801161c:	eeb0 7b4d 	vmov.f64	d7, d13
 8011620:	e7ea      	b.n	80115f8 <_strtod_l+0xaf0>
 8011622:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162a:	f57f af61 	bpl.w	80114f0 <_strtod_l+0x9e8>
 801162e:	e4b1      	b.n	8010f94 <_strtod_l+0x48c>
 8011630:	2300      	movs	r3, #0
 8011632:	9308      	str	r3, [sp, #32]
 8011634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011638:	6013      	str	r3, [r2, #0]
 801163a:	f7ff baad 	b.w	8010b98 <_strtod_l+0x90>
 801163e:	2a65      	cmp	r2, #101	; 0x65
 8011640:	f43f ab9f 	beq.w	8010d82 <_strtod_l+0x27a>
 8011644:	2a45      	cmp	r2, #69	; 0x45
 8011646:	f43f ab9c 	beq.w	8010d82 <_strtod_l+0x27a>
 801164a:	2101      	movs	r1, #1
 801164c:	f7ff bbd4 	b.w	8010df8 <_strtod_l+0x2f0>
 8011650:	ffc00000 	.word	0xffc00000
 8011654:	41dfffff 	.word	0x41dfffff
 8011658:	000fffff 	.word	0x000fffff
 801165c:	7ff00000 	.word	0x7ff00000
 8011660:	7fefffff 	.word	0x7fefffff
 8011664:	3ff00000 	.word	0x3ff00000
 8011668:	7c9fffff 	.word	0x7c9fffff
 801166c:	bff00000 	.word	0xbff00000
 8011670:	7fe00000 	.word	0x7fe00000

08011674 <strtod>:
 8011674:	460a      	mov	r2, r1
 8011676:	4601      	mov	r1, r0
 8011678:	4802      	ldr	r0, [pc, #8]	; (8011684 <strtod+0x10>)
 801167a:	4b03      	ldr	r3, [pc, #12]	; (8011688 <strtod+0x14>)
 801167c:	6800      	ldr	r0, [r0, #0]
 801167e:	f7ff ba43 	b.w	8010b08 <_strtod_l>
 8011682:	bf00      	nop
 8011684:	240000f8 	.word	0x240000f8
 8011688:	24000160 	.word	0x24000160

0801168c <rshift>:
 801168c:	6903      	ldr	r3, [r0, #16]
 801168e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011696:	ea4f 1261 	mov.w	r2, r1, asr #5
 801169a:	f100 0414 	add.w	r4, r0, #20
 801169e:	dd45      	ble.n	801172c <rshift+0xa0>
 80116a0:	f011 011f 	ands.w	r1, r1, #31
 80116a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80116a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80116ac:	d10c      	bne.n	80116c8 <rshift+0x3c>
 80116ae:	f100 0710 	add.w	r7, r0, #16
 80116b2:	4629      	mov	r1, r5
 80116b4:	42b1      	cmp	r1, r6
 80116b6:	d334      	bcc.n	8011722 <rshift+0x96>
 80116b8:	1a9b      	subs	r3, r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	1eea      	subs	r2, r5, #3
 80116be:	4296      	cmp	r6, r2
 80116c0:	bf38      	it	cc
 80116c2:	2300      	movcc	r3, #0
 80116c4:	4423      	add	r3, r4
 80116c6:	e015      	b.n	80116f4 <rshift+0x68>
 80116c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80116cc:	f1c1 0820 	rsb	r8, r1, #32
 80116d0:	40cf      	lsrs	r7, r1
 80116d2:	f105 0e04 	add.w	lr, r5, #4
 80116d6:	46a1      	mov	r9, r4
 80116d8:	4576      	cmp	r6, lr
 80116da:	46f4      	mov	ip, lr
 80116dc:	d815      	bhi.n	801170a <rshift+0x7e>
 80116de:	1a9a      	subs	r2, r3, r2
 80116e0:	0092      	lsls	r2, r2, #2
 80116e2:	3a04      	subs	r2, #4
 80116e4:	3501      	adds	r5, #1
 80116e6:	42ae      	cmp	r6, r5
 80116e8:	bf38      	it	cc
 80116ea:	2200      	movcc	r2, #0
 80116ec:	18a3      	adds	r3, r4, r2
 80116ee:	50a7      	str	r7, [r4, r2]
 80116f0:	b107      	cbz	r7, 80116f4 <rshift+0x68>
 80116f2:	3304      	adds	r3, #4
 80116f4:	1b1a      	subs	r2, r3, r4
 80116f6:	42a3      	cmp	r3, r4
 80116f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80116fc:	bf08      	it	eq
 80116fe:	2300      	moveq	r3, #0
 8011700:	6102      	str	r2, [r0, #16]
 8011702:	bf08      	it	eq
 8011704:	6143      	streq	r3, [r0, #20]
 8011706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801170a:	f8dc c000 	ldr.w	ip, [ip]
 801170e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011712:	ea4c 0707 	orr.w	r7, ip, r7
 8011716:	f849 7b04 	str.w	r7, [r9], #4
 801171a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801171e:	40cf      	lsrs	r7, r1
 8011720:	e7da      	b.n	80116d8 <rshift+0x4c>
 8011722:	f851 cb04 	ldr.w	ip, [r1], #4
 8011726:	f847 cf04 	str.w	ip, [r7, #4]!
 801172a:	e7c3      	b.n	80116b4 <rshift+0x28>
 801172c:	4623      	mov	r3, r4
 801172e:	e7e1      	b.n	80116f4 <rshift+0x68>

08011730 <__hexdig_fun>:
 8011730:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011734:	2b09      	cmp	r3, #9
 8011736:	d802      	bhi.n	801173e <__hexdig_fun+0xe>
 8011738:	3820      	subs	r0, #32
 801173a:	b2c0      	uxtb	r0, r0
 801173c:	4770      	bx	lr
 801173e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011742:	2b05      	cmp	r3, #5
 8011744:	d801      	bhi.n	801174a <__hexdig_fun+0x1a>
 8011746:	3847      	subs	r0, #71	; 0x47
 8011748:	e7f7      	b.n	801173a <__hexdig_fun+0xa>
 801174a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801174e:	2b05      	cmp	r3, #5
 8011750:	d801      	bhi.n	8011756 <__hexdig_fun+0x26>
 8011752:	3827      	subs	r0, #39	; 0x27
 8011754:	e7f1      	b.n	801173a <__hexdig_fun+0xa>
 8011756:	2000      	movs	r0, #0
 8011758:	4770      	bx	lr
	...

0801175c <__gethex>:
 801175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	ed2d 8b02 	vpush	{d8}
 8011764:	b089      	sub	sp, #36	; 0x24
 8011766:	ee08 0a10 	vmov	s16, r0
 801176a:	9304      	str	r3, [sp, #16]
 801176c:	4bb4      	ldr	r3, [pc, #720]	; (8011a40 <__gethex+0x2e4>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	9301      	str	r3, [sp, #4]
 8011772:	4618      	mov	r0, r3
 8011774:	468b      	mov	fp, r1
 8011776:	4690      	mov	r8, r2
 8011778:	f7ee fdb2 	bl	80002e0 <strlen>
 801177c:	9b01      	ldr	r3, [sp, #4]
 801177e:	f8db 2000 	ldr.w	r2, [fp]
 8011782:	4403      	add	r3, r0
 8011784:	4682      	mov	sl, r0
 8011786:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801178a:	9305      	str	r3, [sp, #20]
 801178c:	1c93      	adds	r3, r2, #2
 801178e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011792:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011796:	32fe      	adds	r2, #254	; 0xfe
 8011798:	18d1      	adds	r1, r2, r3
 801179a:	461f      	mov	r7, r3
 801179c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80117a0:	9100      	str	r1, [sp, #0]
 80117a2:	2830      	cmp	r0, #48	; 0x30
 80117a4:	d0f8      	beq.n	8011798 <__gethex+0x3c>
 80117a6:	f7ff ffc3 	bl	8011730 <__hexdig_fun>
 80117aa:	4604      	mov	r4, r0
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d13a      	bne.n	8011826 <__gethex+0xca>
 80117b0:	9901      	ldr	r1, [sp, #4]
 80117b2:	4652      	mov	r2, sl
 80117b4:	4638      	mov	r0, r7
 80117b6:	f001 f86b 	bl	8012890 <strncmp>
 80117ba:	4605      	mov	r5, r0
 80117bc:	2800      	cmp	r0, #0
 80117be:	d168      	bne.n	8011892 <__gethex+0x136>
 80117c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80117c4:	eb07 060a 	add.w	r6, r7, sl
 80117c8:	f7ff ffb2 	bl	8011730 <__hexdig_fun>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d062      	beq.n	8011896 <__gethex+0x13a>
 80117d0:	4633      	mov	r3, r6
 80117d2:	7818      	ldrb	r0, [r3, #0]
 80117d4:	2830      	cmp	r0, #48	; 0x30
 80117d6:	461f      	mov	r7, r3
 80117d8:	f103 0301 	add.w	r3, r3, #1
 80117dc:	d0f9      	beq.n	80117d2 <__gethex+0x76>
 80117de:	f7ff ffa7 	bl	8011730 <__hexdig_fun>
 80117e2:	2301      	movs	r3, #1
 80117e4:	fab0 f480 	clz	r4, r0
 80117e8:	0964      	lsrs	r4, r4, #5
 80117ea:	4635      	mov	r5, r6
 80117ec:	9300      	str	r3, [sp, #0]
 80117ee:	463a      	mov	r2, r7
 80117f0:	4616      	mov	r6, r2
 80117f2:	3201      	adds	r2, #1
 80117f4:	7830      	ldrb	r0, [r6, #0]
 80117f6:	f7ff ff9b 	bl	8011730 <__hexdig_fun>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d1f8      	bne.n	80117f0 <__gethex+0x94>
 80117fe:	9901      	ldr	r1, [sp, #4]
 8011800:	4652      	mov	r2, sl
 8011802:	4630      	mov	r0, r6
 8011804:	f001 f844 	bl	8012890 <strncmp>
 8011808:	b980      	cbnz	r0, 801182c <__gethex+0xd0>
 801180a:	b94d      	cbnz	r5, 8011820 <__gethex+0xc4>
 801180c:	eb06 050a 	add.w	r5, r6, sl
 8011810:	462a      	mov	r2, r5
 8011812:	4616      	mov	r6, r2
 8011814:	3201      	adds	r2, #1
 8011816:	7830      	ldrb	r0, [r6, #0]
 8011818:	f7ff ff8a 	bl	8011730 <__hexdig_fun>
 801181c:	2800      	cmp	r0, #0
 801181e:	d1f8      	bne.n	8011812 <__gethex+0xb6>
 8011820:	1bad      	subs	r5, r5, r6
 8011822:	00ad      	lsls	r5, r5, #2
 8011824:	e004      	b.n	8011830 <__gethex+0xd4>
 8011826:	2400      	movs	r4, #0
 8011828:	4625      	mov	r5, r4
 801182a:	e7e0      	b.n	80117ee <__gethex+0x92>
 801182c:	2d00      	cmp	r5, #0
 801182e:	d1f7      	bne.n	8011820 <__gethex+0xc4>
 8011830:	7833      	ldrb	r3, [r6, #0]
 8011832:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011836:	2b50      	cmp	r3, #80	; 0x50
 8011838:	d13b      	bne.n	80118b2 <__gethex+0x156>
 801183a:	7873      	ldrb	r3, [r6, #1]
 801183c:	2b2b      	cmp	r3, #43	; 0x2b
 801183e:	d02c      	beq.n	801189a <__gethex+0x13e>
 8011840:	2b2d      	cmp	r3, #45	; 0x2d
 8011842:	d02e      	beq.n	80118a2 <__gethex+0x146>
 8011844:	1c71      	adds	r1, r6, #1
 8011846:	f04f 0900 	mov.w	r9, #0
 801184a:	7808      	ldrb	r0, [r1, #0]
 801184c:	f7ff ff70 	bl	8011730 <__hexdig_fun>
 8011850:	1e43      	subs	r3, r0, #1
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b18      	cmp	r3, #24
 8011856:	d82c      	bhi.n	80118b2 <__gethex+0x156>
 8011858:	f1a0 0210 	sub.w	r2, r0, #16
 801185c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011860:	f7ff ff66 	bl	8011730 <__hexdig_fun>
 8011864:	1e43      	subs	r3, r0, #1
 8011866:	b2db      	uxtb	r3, r3
 8011868:	2b18      	cmp	r3, #24
 801186a:	d91d      	bls.n	80118a8 <__gethex+0x14c>
 801186c:	f1b9 0f00 	cmp.w	r9, #0
 8011870:	d000      	beq.n	8011874 <__gethex+0x118>
 8011872:	4252      	negs	r2, r2
 8011874:	4415      	add	r5, r2
 8011876:	f8cb 1000 	str.w	r1, [fp]
 801187a:	b1e4      	cbz	r4, 80118b6 <__gethex+0x15a>
 801187c:	9b00      	ldr	r3, [sp, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	bf14      	ite	ne
 8011882:	2700      	movne	r7, #0
 8011884:	2706      	moveq	r7, #6
 8011886:	4638      	mov	r0, r7
 8011888:	b009      	add	sp, #36	; 0x24
 801188a:	ecbd 8b02 	vpop	{d8}
 801188e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011892:	463e      	mov	r6, r7
 8011894:	4625      	mov	r5, r4
 8011896:	2401      	movs	r4, #1
 8011898:	e7ca      	b.n	8011830 <__gethex+0xd4>
 801189a:	f04f 0900 	mov.w	r9, #0
 801189e:	1cb1      	adds	r1, r6, #2
 80118a0:	e7d3      	b.n	801184a <__gethex+0xee>
 80118a2:	f04f 0901 	mov.w	r9, #1
 80118a6:	e7fa      	b.n	801189e <__gethex+0x142>
 80118a8:	230a      	movs	r3, #10
 80118aa:	fb03 0202 	mla	r2, r3, r2, r0
 80118ae:	3a10      	subs	r2, #16
 80118b0:	e7d4      	b.n	801185c <__gethex+0x100>
 80118b2:	4631      	mov	r1, r6
 80118b4:	e7df      	b.n	8011876 <__gethex+0x11a>
 80118b6:	1bf3      	subs	r3, r6, r7
 80118b8:	3b01      	subs	r3, #1
 80118ba:	4621      	mov	r1, r4
 80118bc:	2b07      	cmp	r3, #7
 80118be:	dc0b      	bgt.n	80118d8 <__gethex+0x17c>
 80118c0:	ee18 0a10 	vmov	r0, s16
 80118c4:	f000 fa64 	bl	8011d90 <_Balloc>
 80118c8:	4604      	mov	r4, r0
 80118ca:	b940      	cbnz	r0, 80118de <__gethex+0x182>
 80118cc:	4b5d      	ldr	r3, [pc, #372]	; (8011a44 <__gethex+0x2e8>)
 80118ce:	4602      	mov	r2, r0
 80118d0:	21de      	movs	r1, #222	; 0xde
 80118d2:	485d      	ldr	r0, [pc, #372]	; (8011a48 <__gethex+0x2ec>)
 80118d4:	f000 fffe 	bl	80128d4 <__assert_func>
 80118d8:	3101      	adds	r1, #1
 80118da:	105b      	asrs	r3, r3, #1
 80118dc:	e7ee      	b.n	80118bc <__gethex+0x160>
 80118de:	f100 0914 	add.w	r9, r0, #20
 80118e2:	f04f 0b00 	mov.w	fp, #0
 80118e6:	f1ca 0301 	rsb	r3, sl, #1
 80118ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80118ee:	f8cd b000 	str.w	fp, [sp]
 80118f2:	9306      	str	r3, [sp, #24]
 80118f4:	42b7      	cmp	r7, r6
 80118f6:	d340      	bcc.n	801197a <__gethex+0x21e>
 80118f8:	9802      	ldr	r0, [sp, #8]
 80118fa:	9b00      	ldr	r3, [sp, #0]
 80118fc:	f840 3b04 	str.w	r3, [r0], #4
 8011900:	eba0 0009 	sub.w	r0, r0, r9
 8011904:	1080      	asrs	r0, r0, #2
 8011906:	0146      	lsls	r6, r0, #5
 8011908:	6120      	str	r0, [r4, #16]
 801190a:	4618      	mov	r0, r3
 801190c:	f000 fb32 	bl	8011f74 <__hi0bits>
 8011910:	1a30      	subs	r0, r6, r0
 8011912:	f8d8 6000 	ldr.w	r6, [r8]
 8011916:	42b0      	cmp	r0, r6
 8011918:	dd63      	ble.n	80119e2 <__gethex+0x286>
 801191a:	1b87      	subs	r7, r0, r6
 801191c:	4639      	mov	r1, r7
 801191e:	4620      	mov	r0, r4
 8011920:	f000 fed3 	bl	80126ca <__any_on>
 8011924:	4682      	mov	sl, r0
 8011926:	b1a8      	cbz	r0, 8011954 <__gethex+0x1f8>
 8011928:	1e7b      	subs	r3, r7, #1
 801192a:	1159      	asrs	r1, r3, #5
 801192c:	f003 021f 	and.w	r2, r3, #31
 8011930:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011934:	f04f 0a01 	mov.w	sl, #1
 8011938:	fa0a f202 	lsl.w	r2, sl, r2
 801193c:	420a      	tst	r2, r1
 801193e:	d009      	beq.n	8011954 <__gethex+0x1f8>
 8011940:	4553      	cmp	r3, sl
 8011942:	dd05      	ble.n	8011950 <__gethex+0x1f4>
 8011944:	1eb9      	subs	r1, r7, #2
 8011946:	4620      	mov	r0, r4
 8011948:	f000 febf 	bl	80126ca <__any_on>
 801194c:	2800      	cmp	r0, #0
 801194e:	d145      	bne.n	80119dc <__gethex+0x280>
 8011950:	f04f 0a02 	mov.w	sl, #2
 8011954:	4639      	mov	r1, r7
 8011956:	4620      	mov	r0, r4
 8011958:	f7ff fe98 	bl	801168c <rshift>
 801195c:	443d      	add	r5, r7
 801195e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011962:	42ab      	cmp	r3, r5
 8011964:	da4c      	bge.n	8011a00 <__gethex+0x2a4>
 8011966:	ee18 0a10 	vmov	r0, s16
 801196a:	4621      	mov	r1, r4
 801196c:	f000 fa50 	bl	8011e10 <_Bfree>
 8011970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011972:	2300      	movs	r3, #0
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	27a3      	movs	r7, #163	; 0xa3
 8011978:	e785      	b.n	8011886 <__gethex+0x12a>
 801197a:	1e73      	subs	r3, r6, #1
 801197c:	9a05      	ldr	r2, [sp, #20]
 801197e:	9303      	str	r3, [sp, #12]
 8011980:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011984:	4293      	cmp	r3, r2
 8011986:	d019      	beq.n	80119bc <__gethex+0x260>
 8011988:	f1bb 0f20 	cmp.w	fp, #32
 801198c:	d107      	bne.n	801199e <__gethex+0x242>
 801198e:	9b02      	ldr	r3, [sp, #8]
 8011990:	9a00      	ldr	r2, [sp, #0]
 8011992:	f843 2b04 	str.w	r2, [r3], #4
 8011996:	9302      	str	r3, [sp, #8]
 8011998:	2300      	movs	r3, #0
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	469b      	mov	fp, r3
 801199e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80119a2:	f7ff fec5 	bl	8011730 <__hexdig_fun>
 80119a6:	9b00      	ldr	r3, [sp, #0]
 80119a8:	f000 000f 	and.w	r0, r0, #15
 80119ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80119b0:	4303      	orrs	r3, r0
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	f10b 0b04 	add.w	fp, fp, #4
 80119b8:	9b03      	ldr	r3, [sp, #12]
 80119ba:	e00d      	b.n	80119d8 <__gethex+0x27c>
 80119bc:	9b03      	ldr	r3, [sp, #12]
 80119be:	9a06      	ldr	r2, [sp, #24]
 80119c0:	4413      	add	r3, r2
 80119c2:	42bb      	cmp	r3, r7
 80119c4:	d3e0      	bcc.n	8011988 <__gethex+0x22c>
 80119c6:	4618      	mov	r0, r3
 80119c8:	9901      	ldr	r1, [sp, #4]
 80119ca:	9307      	str	r3, [sp, #28]
 80119cc:	4652      	mov	r2, sl
 80119ce:	f000 ff5f 	bl	8012890 <strncmp>
 80119d2:	9b07      	ldr	r3, [sp, #28]
 80119d4:	2800      	cmp	r0, #0
 80119d6:	d1d7      	bne.n	8011988 <__gethex+0x22c>
 80119d8:	461e      	mov	r6, r3
 80119da:	e78b      	b.n	80118f4 <__gethex+0x198>
 80119dc:	f04f 0a03 	mov.w	sl, #3
 80119e0:	e7b8      	b.n	8011954 <__gethex+0x1f8>
 80119e2:	da0a      	bge.n	80119fa <__gethex+0x29e>
 80119e4:	1a37      	subs	r7, r6, r0
 80119e6:	4621      	mov	r1, r4
 80119e8:	ee18 0a10 	vmov	r0, s16
 80119ec:	463a      	mov	r2, r7
 80119ee:	f000 fc2b 	bl	8012248 <__lshift>
 80119f2:	1bed      	subs	r5, r5, r7
 80119f4:	4604      	mov	r4, r0
 80119f6:	f100 0914 	add.w	r9, r0, #20
 80119fa:	f04f 0a00 	mov.w	sl, #0
 80119fe:	e7ae      	b.n	801195e <__gethex+0x202>
 8011a00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011a04:	42a8      	cmp	r0, r5
 8011a06:	dd72      	ble.n	8011aee <__gethex+0x392>
 8011a08:	1b45      	subs	r5, r0, r5
 8011a0a:	42ae      	cmp	r6, r5
 8011a0c:	dc36      	bgt.n	8011a7c <__gethex+0x320>
 8011a0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d02a      	beq.n	8011a6c <__gethex+0x310>
 8011a16:	2b03      	cmp	r3, #3
 8011a18:	d02c      	beq.n	8011a74 <__gethex+0x318>
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d11c      	bne.n	8011a58 <__gethex+0x2fc>
 8011a1e:	42ae      	cmp	r6, r5
 8011a20:	d11a      	bne.n	8011a58 <__gethex+0x2fc>
 8011a22:	2e01      	cmp	r6, #1
 8011a24:	d112      	bne.n	8011a4c <__gethex+0x2f0>
 8011a26:	9a04      	ldr	r2, [sp, #16]
 8011a28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a2c:	6013      	str	r3, [r2, #0]
 8011a2e:	2301      	movs	r3, #1
 8011a30:	6123      	str	r3, [r4, #16]
 8011a32:	f8c9 3000 	str.w	r3, [r9]
 8011a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a38:	2762      	movs	r7, #98	; 0x62
 8011a3a:	601c      	str	r4, [r3, #0]
 8011a3c:	e723      	b.n	8011886 <__gethex+0x12a>
 8011a3e:	bf00      	nop
 8011a40:	080141a0 	.word	0x080141a0
 8011a44:	08014128 	.word	0x08014128
 8011a48:	08014139 	.word	0x08014139
 8011a4c:	1e71      	subs	r1, r6, #1
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f000 fe3b 	bl	80126ca <__any_on>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d1e6      	bne.n	8011a26 <__gethex+0x2ca>
 8011a58:	ee18 0a10 	vmov	r0, s16
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	f000 f9d7 	bl	8011e10 <_Bfree>
 8011a62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a64:	2300      	movs	r3, #0
 8011a66:	6013      	str	r3, [r2, #0]
 8011a68:	2750      	movs	r7, #80	; 0x50
 8011a6a:	e70c      	b.n	8011886 <__gethex+0x12a>
 8011a6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1f2      	bne.n	8011a58 <__gethex+0x2fc>
 8011a72:	e7d8      	b.n	8011a26 <__gethex+0x2ca>
 8011a74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1d5      	bne.n	8011a26 <__gethex+0x2ca>
 8011a7a:	e7ed      	b.n	8011a58 <__gethex+0x2fc>
 8011a7c:	1e6f      	subs	r7, r5, #1
 8011a7e:	f1ba 0f00 	cmp.w	sl, #0
 8011a82:	d131      	bne.n	8011ae8 <__gethex+0x38c>
 8011a84:	b127      	cbz	r7, 8011a90 <__gethex+0x334>
 8011a86:	4639      	mov	r1, r7
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f000 fe1e 	bl	80126ca <__any_on>
 8011a8e:	4682      	mov	sl, r0
 8011a90:	117b      	asrs	r3, r7, #5
 8011a92:	2101      	movs	r1, #1
 8011a94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011a98:	f007 071f 	and.w	r7, r7, #31
 8011a9c:	fa01 f707 	lsl.w	r7, r1, r7
 8011aa0:	421f      	tst	r7, r3
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	bf18      	it	ne
 8011aa8:	f04a 0a02 	orrne.w	sl, sl, #2
 8011aac:	1b76      	subs	r6, r6, r5
 8011aae:	f7ff fded 	bl	801168c <rshift>
 8011ab2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011ab6:	2702      	movs	r7, #2
 8011ab8:	f1ba 0f00 	cmp.w	sl, #0
 8011abc:	d048      	beq.n	8011b50 <__gethex+0x3f4>
 8011abe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ac2:	2b02      	cmp	r3, #2
 8011ac4:	d015      	beq.n	8011af2 <__gethex+0x396>
 8011ac6:	2b03      	cmp	r3, #3
 8011ac8:	d017      	beq.n	8011afa <__gethex+0x39e>
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d109      	bne.n	8011ae2 <__gethex+0x386>
 8011ace:	f01a 0f02 	tst.w	sl, #2
 8011ad2:	d006      	beq.n	8011ae2 <__gethex+0x386>
 8011ad4:	f8d9 0000 	ldr.w	r0, [r9]
 8011ad8:	ea4a 0a00 	orr.w	sl, sl, r0
 8011adc:	f01a 0f01 	tst.w	sl, #1
 8011ae0:	d10e      	bne.n	8011b00 <__gethex+0x3a4>
 8011ae2:	f047 0710 	orr.w	r7, r7, #16
 8011ae6:	e033      	b.n	8011b50 <__gethex+0x3f4>
 8011ae8:	f04f 0a01 	mov.w	sl, #1
 8011aec:	e7d0      	b.n	8011a90 <__gethex+0x334>
 8011aee:	2701      	movs	r7, #1
 8011af0:	e7e2      	b.n	8011ab8 <__gethex+0x35c>
 8011af2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011af4:	f1c3 0301 	rsb	r3, r3, #1
 8011af8:	9315      	str	r3, [sp, #84]	; 0x54
 8011afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d0f0      	beq.n	8011ae2 <__gethex+0x386>
 8011b00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011b04:	f104 0314 	add.w	r3, r4, #20
 8011b08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011b0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011b10:	f04f 0c00 	mov.w	ip, #0
 8011b14:	4618      	mov	r0, r3
 8011b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011b1e:	d01c      	beq.n	8011b5a <__gethex+0x3fe>
 8011b20:	3201      	adds	r2, #1
 8011b22:	6002      	str	r2, [r0, #0]
 8011b24:	2f02      	cmp	r7, #2
 8011b26:	f104 0314 	add.w	r3, r4, #20
 8011b2a:	d13f      	bne.n	8011bac <__gethex+0x450>
 8011b2c:	f8d8 2000 	ldr.w	r2, [r8]
 8011b30:	3a01      	subs	r2, #1
 8011b32:	42b2      	cmp	r2, r6
 8011b34:	d10a      	bne.n	8011b4c <__gethex+0x3f0>
 8011b36:	1171      	asrs	r1, r6, #5
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b3e:	f006 061f 	and.w	r6, r6, #31
 8011b42:	fa02 f606 	lsl.w	r6, r2, r6
 8011b46:	421e      	tst	r6, r3
 8011b48:	bf18      	it	ne
 8011b4a:	4617      	movne	r7, r2
 8011b4c:	f047 0720 	orr.w	r7, r7, #32
 8011b50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b52:	601c      	str	r4, [r3, #0]
 8011b54:	9b04      	ldr	r3, [sp, #16]
 8011b56:	601d      	str	r5, [r3, #0]
 8011b58:	e695      	b.n	8011886 <__gethex+0x12a>
 8011b5a:	4299      	cmp	r1, r3
 8011b5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011b60:	d8d8      	bhi.n	8011b14 <__gethex+0x3b8>
 8011b62:	68a3      	ldr	r3, [r4, #8]
 8011b64:	459b      	cmp	fp, r3
 8011b66:	db19      	blt.n	8011b9c <__gethex+0x440>
 8011b68:	6861      	ldr	r1, [r4, #4]
 8011b6a:	ee18 0a10 	vmov	r0, s16
 8011b6e:	3101      	adds	r1, #1
 8011b70:	f000 f90e 	bl	8011d90 <_Balloc>
 8011b74:	4681      	mov	r9, r0
 8011b76:	b918      	cbnz	r0, 8011b80 <__gethex+0x424>
 8011b78:	4b1a      	ldr	r3, [pc, #104]	; (8011be4 <__gethex+0x488>)
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	2184      	movs	r1, #132	; 0x84
 8011b7e:	e6a8      	b.n	80118d2 <__gethex+0x176>
 8011b80:	6922      	ldr	r2, [r4, #16]
 8011b82:	3202      	adds	r2, #2
 8011b84:	f104 010c 	add.w	r1, r4, #12
 8011b88:	0092      	lsls	r2, r2, #2
 8011b8a:	300c      	adds	r0, #12
 8011b8c:	f7fe ff8c 	bl	8010aa8 <memcpy>
 8011b90:	4621      	mov	r1, r4
 8011b92:	ee18 0a10 	vmov	r0, s16
 8011b96:	f000 f93b 	bl	8011e10 <_Bfree>
 8011b9a:	464c      	mov	r4, r9
 8011b9c:	6923      	ldr	r3, [r4, #16]
 8011b9e:	1c5a      	adds	r2, r3, #1
 8011ba0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ba4:	6122      	str	r2, [r4, #16]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	615a      	str	r2, [r3, #20]
 8011baa:	e7bb      	b.n	8011b24 <__gethex+0x3c8>
 8011bac:	6922      	ldr	r2, [r4, #16]
 8011bae:	455a      	cmp	r2, fp
 8011bb0:	dd0b      	ble.n	8011bca <__gethex+0x46e>
 8011bb2:	2101      	movs	r1, #1
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7ff fd69 	bl	801168c <rshift>
 8011bba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011bbe:	3501      	adds	r5, #1
 8011bc0:	42ab      	cmp	r3, r5
 8011bc2:	f6ff aed0 	blt.w	8011966 <__gethex+0x20a>
 8011bc6:	2701      	movs	r7, #1
 8011bc8:	e7c0      	b.n	8011b4c <__gethex+0x3f0>
 8011bca:	f016 061f 	ands.w	r6, r6, #31
 8011bce:	d0fa      	beq.n	8011bc6 <__gethex+0x46a>
 8011bd0:	4453      	add	r3, sl
 8011bd2:	f1c6 0620 	rsb	r6, r6, #32
 8011bd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011bda:	f000 f9cb 	bl	8011f74 <__hi0bits>
 8011bde:	42b0      	cmp	r0, r6
 8011be0:	dbe7      	blt.n	8011bb2 <__gethex+0x456>
 8011be2:	e7f0      	b.n	8011bc6 <__gethex+0x46a>
 8011be4:	08014128 	.word	0x08014128

08011be8 <L_shift>:
 8011be8:	f1c2 0208 	rsb	r2, r2, #8
 8011bec:	0092      	lsls	r2, r2, #2
 8011bee:	b570      	push	{r4, r5, r6, lr}
 8011bf0:	f1c2 0620 	rsb	r6, r2, #32
 8011bf4:	6843      	ldr	r3, [r0, #4]
 8011bf6:	6804      	ldr	r4, [r0, #0]
 8011bf8:	fa03 f506 	lsl.w	r5, r3, r6
 8011bfc:	432c      	orrs	r4, r5
 8011bfe:	40d3      	lsrs	r3, r2
 8011c00:	6004      	str	r4, [r0, #0]
 8011c02:	f840 3f04 	str.w	r3, [r0, #4]!
 8011c06:	4288      	cmp	r0, r1
 8011c08:	d3f4      	bcc.n	8011bf4 <L_shift+0xc>
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}

08011c0c <__match>:
 8011c0c:	b530      	push	{r4, r5, lr}
 8011c0e:	6803      	ldr	r3, [r0, #0]
 8011c10:	3301      	adds	r3, #1
 8011c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c16:	b914      	cbnz	r4, 8011c1e <__match+0x12>
 8011c18:	6003      	str	r3, [r0, #0]
 8011c1a:	2001      	movs	r0, #1
 8011c1c:	bd30      	pop	{r4, r5, pc}
 8011c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011c26:	2d19      	cmp	r5, #25
 8011c28:	bf98      	it	ls
 8011c2a:	3220      	addls	r2, #32
 8011c2c:	42a2      	cmp	r2, r4
 8011c2e:	d0f0      	beq.n	8011c12 <__match+0x6>
 8011c30:	2000      	movs	r0, #0
 8011c32:	e7f3      	b.n	8011c1c <__match+0x10>

08011c34 <__hexnan>:
 8011c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c38:	680b      	ldr	r3, [r1, #0]
 8011c3a:	115e      	asrs	r6, r3, #5
 8011c3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011c40:	f013 031f 	ands.w	r3, r3, #31
 8011c44:	b087      	sub	sp, #28
 8011c46:	bf18      	it	ne
 8011c48:	3604      	addne	r6, #4
 8011c4a:	2500      	movs	r5, #0
 8011c4c:	1f37      	subs	r7, r6, #4
 8011c4e:	4690      	mov	r8, r2
 8011c50:	6802      	ldr	r2, [r0, #0]
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	4682      	mov	sl, r0
 8011c56:	f846 5c04 	str.w	r5, [r6, #-4]
 8011c5a:	46b9      	mov	r9, r7
 8011c5c:	463c      	mov	r4, r7
 8011c5e:	9502      	str	r5, [sp, #8]
 8011c60:	46ab      	mov	fp, r5
 8011c62:	7851      	ldrb	r1, [r2, #1]
 8011c64:	1c53      	adds	r3, r2, #1
 8011c66:	9303      	str	r3, [sp, #12]
 8011c68:	b341      	cbz	r1, 8011cbc <__hexnan+0x88>
 8011c6a:	4608      	mov	r0, r1
 8011c6c:	9205      	str	r2, [sp, #20]
 8011c6e:	9104      	str	r1, [sp, #16]
 8011c70:	f7ff fd5e 	bl	8011730 <__hexdig_fun>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d14f      	bne.n	8011d18 <__hexnan+0xe4>
 8011c78:	9904      	ldr	r1, [sp, #16]
 8011c7a:	9a05      	ldr	r2, [sp, #20]
 8011c7c:	2920      	cmp	r1, #32
 8011c7e:	d818      	bhi.n	8011cb2 <__hexnan+0x7e>
 8011c80:	9b02      	ldr	r3, [sp, #8]
 8011c82:	459b      	cmp	fp, r3
 8011c84:	dd13      	ble.n	8011cae <__hexnan+0x7a>
 8011c86:	454c      	cmp	r4, r9
 8011c88:	d206      	bcs.n	8011c98 <__hexnan+0x64>
 8011c8a:	2d07      	cmp	r5, #7
 8011c8c:	dc04      	bgt.n	8011c98 <__hexnan+0x64>
 8011c8e:	462a      	mov	r2, r5
 8011c90:	4649      	mov	r1, r9
 8011c92:	4620      	mov	r0, r4
 8011c94:	f7ff ffa8 	bl	8011be8 <L_shift>
 8011c98:	4544      	cmp	r4, r8
 8011c9a:	d950      	bls.n	8011d3e <__hexnan+0x10a>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	f1a4 0904 	sub.w	r9, r4, #4
 8011ca2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ca6:	f8cd b008 	str.w	fp, [sp, #8]
 8011caa:	464c      	mov	r4, r9
 8011cac:	461d      	mov	r5, r3
 8011cae:	9a03      	ldr	r2, [sp, #12]
 8011cb0:	e7d7      	b.n	8011c62 <__hexnan+0x2e>
 8011cb2:	2929      	cmp	r1, #41	; 0x29
 8011cb4:	d156      	bne.n	8011d64 <__hexnan+0x130>
 8011cb6:	3202      	adds	r2, #2
 8011cb8:	f8ca 2000 	str.w	r2, [sl]
 8011cbc:	f1bb 0f00 	cmp.w	fp, #0
 8011cc0:	d050      	beq.n	8011d64 <__hexnan+0x130>
 8011cc2:	454c      	cmp	r4, r9
 8011cc4:	d206      	bcs.n	8011cd4 <__hexnan+0xa0>
 8011cc6:	2d07      	cmp	r5, #7
 8011cc8:	dc04      	bgt.n	8011cd4 <__hexnan+0xa0>
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4649      	mov	r1, r9
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f7ff ff8a 	bl	8011be8 <L_shift>
 8011cd4:	4544      	cmp	r4, r8
 8011cd6:	d934      	bls.n	8011d42 <__hexnan+0x10e>
 8011cd8:	f1a8 0204 	sub.w	r2, r8, #4
 8011cdc:	4623      	mov	r3, r4
 8011cde:	f853 1b04 	ldr.w	r1, [r3], #4
 8011ce2:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ce6:	429f      	cmp	r7, r3
 8011ce8:	d2f9      	bcs.n	8011cde <__hexnan+0xaa>
 8011cea:	1b3b      	subs	r3, r7, r4
 8011cec:	f023 0303 	bic.w	r3, r3, #3
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	3401      	adds	r4, #1
 8011cf4:	3e03      	subs	r6, #3
 8011cf6:	42b4      	cmp	r4, r6
 8011cf8:	bf88      	it	hi
 8011cfa:	2304      	movhi	r3, #4
 8011cfc:	4443      	add	r3, r8
 8011cfe:	2200      	movs	r2, #0
 8011d00:	f843 2b04 	str.w	r2, [r3], #4
 8011d04:	429f      	cmp	r7, r3
 8011d06:	d2fb      	bcs.n	8011d00 <__hexnan+0xcc>
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	b91b      	cbnz	r3, 8011d14 <__hexnan+0xe0>
 8011d0c:	4547      	cmp	r7, r8
 8011d0e:	d127      	bne.n	8011d60 <__hexnan+0x12c>
 8011d10:	2301      	movs	r3, #1
 8011d12:	603b      	str	r3, [r7, #0]
 8011d14:	2005      	movs	r0, #5
 8011d16:	e026      	b.n	8011d66 <__hexnan+0x132>
 8011d18:	3501      	adds	r5, #1
 8011d1a:	2d08      	cmp	r5, #8
 8011d1c:	f10b 0b01 	add.w	fp, fp, #1
 8011d20:	dd06      	ble.n	8011d30 <__hexnan+0xfc>
 8011d22:	4544      	cmp	r4, r8
 8011d24:	d9c3      	bls.n	8011cae <__hexnan+0x7a>
 8011d26:	2300      	movs	r3, #0
 8011d28:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d2c:	2501      	movs	r5, #1
 8011d2e:	3c04      	subs	r4, #4
 8011d30:	6822      	ldr	r2, [r4, #0]
 8011d32:	f000 000f 	and.w	r0, r0, #15
 8011d36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011d3a:	6022      	str	r2, [r4, #0]
 8011d3c:	e7b7      	b.n	8011cae <__hexnan+0x7a>
 8011d3e:	2508      	movs	r5, #8
 8011d40:	e7b5      	b.n	8011cae <__hexnan+0x7a>
 8011d42:	9b01      	ldr	r3, [sp, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d0df      	beq.n	8011d08 <__hexnan+0xd4>
 8011d48:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4c:	f1c3 0320 	rsb	r3, r3, #32
 8011d50:	fa22 f303 	lsr.w	r3, r2, r3
 8011d54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d58:	401a      	ands	r2, r3
 8011d5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011d5e:	e7d3      	b.n	8011d08 <__hexnan+0xd4>
 8011d60:	3f04      	subs	r7, #4
 8011d62:	e7d1      	b.n	8011d08 <__hexnan+0xd4>
 8011d64:	2004      	movs	r0, #4
 8011d66:	b007      	add	sp, #28
 8011d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d6c <__ascii_mbtowc>:
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	b901      	cbnz	r1, 8011d72 <__ascii_mbtowc+0x6>
 8011d70:	a901      	add	r1, sp, #4
 8011d72:	b142      	cbz	r2, 8011d86 <__ascii_mbtowc+0x1a>
 8011d74:	b14b      	cbz	r3, 8011d8a <__ascii_mbtowc+0x1e>
 8011d76:	7813      	ldrb	r3, [r2, #0]
 8011d78:	600b      	str	r3, [r1, #0]
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	1e10      	subs	r0, r2, #0
 8011d7e:	bf18      	it	ne
 8011d80:	2001      	movne	r0, #1
 8011d82:	b002      	add	sp, #8
 8011d84:	4770      	bx	lr
 8011d86:	4610      	mov	r0, r2
 8011d88:	e7fb      	b.n	8011d82 <__ascii_mbtowc+0x16>
 8011d8a:	f06f 0001 	mvn.w	r0, #1
 8011d8e:	e7f8      	b.n	8011d82 <__ascii_mbtowc+0x16>

08011d90 <_Balloc>:
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d94:	4604      	mov	r4, r0
 8011d96:	460d      	mov	r5, r1
 8011d98:	b976      	cbnz	r6, 8011db8 <_Balloc+0x28>
 8011d9a:	2010      	movs	r0, #16
 8011d9c:	f000 fdca 	bl	8012934 <malloc>
 8011da0:	4602      	mov	r2, r0
 8011da2:	6260      	str	r0, [r4, #36]	; 0x24
 8011da4:	b920      	cbnz	r0, 8011db0 <_Balloc+0x20>
 8011da6:	4b18      	ldr	r3, [pc, #96]	; (8011e08 <_Balloc+0x78>)
 8011da8:	4818      	ldr	r0, [pc, #96]	; (8011e0c <_Balloc+0x7c>)
 8011daa:	2166      	movs	r1, #102	; 0x66
 8011dac:	f000 fd92 	bl	80128d4 <__assert_func>
 8011db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011db4:	6006      	str	r6, [r0, #0]
 8011db6:	60c6      	str	r6, [r0, #12]
 8011db8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011dba:	68f3      	ldr	r3, [r6, #12]
 8011dbc:	b183      	cbz	r3, 8011de0 <_Balloc+0x50>
 8011dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011dc6:	b9b8      	cbnz	r0, 8011df8 <_Balloc+0x68>
 8011dc8:	2101      	movs	r1, #1
 8011dca:	fa01 f605 	lsl.w	r6, r1, r5
 8011dce:	1d72      	adds	r2, r6, #5
 8011dd0:	0092      	lsls	r2, r2, #2
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f000 fc9a 	bl	801270c <_calloc_r>
 8011dd8:	b160      	cbz	r0, 8011df4 <_Balloc+0x64>
 8011dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011dde:	e00e      	b.n	8011dfe <_Balloc+0x6e>
 8011de0:	2221      	movs	r2, #33	; 0x21
 8011de2:	2104      	movs	r1, #4
 8011de4:	4620      	mov	r0, r4
 8011de6:	f000 fc91 	bl	801270c <_calloc_r>
 8011dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dec:	60f0      	str	r0, [r6, #12]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1e4      	bne.n	8011dbe <_Balloc+0x2e>
 8011df4:	2000      	movs	r0, #0
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	6802      	ldr	r2, [r0, #0]
 8011dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011dfe:	2300      	movs	r3, #0
 8011e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e04:	e7f7      	b.n	8011df6 <_Balloc+0x66>
 8011e06:	bf00      	nop
 8011e08:	080141b4 	.word	0x080141b4
 8011e0c:	080141cb 	.word	0x080141cb

08011e10 <_Bfree>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e14:	4605      	mov	r5, r0
 8011e16:	460c      	mov	r4, r1
 8011e18:	b976      	cbnz	r6, 8011e38 <_Bfree+0x28>
 8011e1a:	2010      	movs	r0, #16
 8011e1c:	f000 fd8a 	bl	8012934 <malloc>
 8011e20:	4602      	mov	r2, r0
 8011e22:	6268      	str	r0, [r5, #36]	; 0x24
 8011e24:	b920      	cbnz	r0, 8011e30 <_Bfree+0x20>
 8011e26:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <_Bfree+0x3c>)
 8011e28:	4809      	ldr	r0, [pc, #36]	; (8011e50 <_Bfree+0x40>)
 8011e2a:	218a      	movs	r1, #138	; 0x8a
 8011e2c:	f000 fd52 	bl	80128d4 <__assert_func>
 8011e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e34:	6006      	str	r6, [r0, #0]
 8011e36:	60c6      	str	r6, [r0, #12]
 8011e38:	b13c      	cbz	r4, 8011e4a <_Bfree+0x3a>
 8011e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e3c:	6862      	ldr	r2, [r4, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e44:	6021      	str	r1, [r4, #0]
 8011e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e4a:	bd70      	pop	{r4, r5, r6, pc}
 8011e4c:	080141b4 	.word	0x080141b4
 8011e50:	080141cb 	.word	0x080141cb

08011e54 <__multadd>:
 8011e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e58:	690d      	ldr	r5, [r1, #16]
 8011e5a:	4607      	mov	r7, r0
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	461e      	mov	r6, r3
 8011e60:	f101 0c14 	add.w	ip, r1, #20
 8011e64:	2000      	movs	r0, #0
 8011e66:	f8dc 3000 	ldr.w	r3, [ip]
 8011e6a:	b299      	uxth	r1, r3
 8011e6c:	fb02 6101 	mla	r1, r2, r1, r6
 8011e70:	0c1e      	lsrs	r6, r3, #16
 8011e72:	0c0b      	lsrs	r3, r1, #16
 8011e74:	fb02 3306 	mla	r3, r2, r6, r3
 8011e78:	b289      	uxth	r1, r1
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e80:	4285      	cmp	r5, r0
 8011e82:	f84c 1b04 	str.w	r1, [ip], #4
 8011e86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e8a:	dcec      	bgt.n	8011e66 <__multadd+0x12>
 8011e8c:	b30e      	cbz	r6, 8011ed2 <__multadd+0x7e>
 8011e8e:	68a3      	ldr	r3, [r4, #8]
 8011e90:	42ab      	cmp	r3, r5
 8011e92:	dc19      	bgt.n	8011ec8 <__multadd+0x74>
 8011e94:	6861      	ldr	r1, [r4, #4]
 8011e96:	4638      	mov	r0, r7
 8011e98:	3101      	adds	r1, #1
 8011e9a:	f7ff ff79 	bl	8011d90 <_Balloc>
 8011e9e:	4680      	mov	r8, r0
 8011ea0:	b928      	cbnz	r0, 8011eae <__multadd+0x5a>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	4b0c      	ldr	r3, [pc, #48]	; (8011ed8 <__multadd+0x84>)
 8011ea6:	480d      	ldr	r0, [pc, #52]	; (8011edc <__multadd+0x88>)
 8011ea8:	21b5      	movs	r1, #181	; 0xb5
 8011eaa:	f000 fd13 	bl	80128d4 <__assert_func>
 8011eae:	6922      	ldr	r2, [r4, #16]
 8011eb0:	3202      	adds	r2, #2
 8011eb2:	f104 010c 	add.w	r1, r4, #12
 8011eb6:	0092      	lsls	r2, r2, #2
 8011eb8:	300c      	adds	r0, #12
 8011eba:	f7fe fdf5 	bl	8010aa8 <memcpy>
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	4638      	mov	r0, r7
 8011ec2:	f7ff ffa5 	bl	8011e10 <_Bfree>
 8011ec6:	4644      	mov	r4, r8
 8011ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ecc:	3501      	adds	r5, #1
 8011ece:	615e      	str	r6, [r3, #20]
 8011ed0:	6125      	str	r5, [r4, #16]
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed8:	08014128 	.word	0x08014128
 8011edc:	080141cb 	.word	0x080141cb

08011ee0 <__s2b>:
 8011ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee4:	460c      	mov	r4, r1
 8011ee6:	4615      	mov	r5, r2
 8011ee8:	461f      	mov	r7, r3
 8011eea:	2209      	movs	r2, #9
 8011eec:	3308      	adds	r3, #8
 8011eee:	4606      	mov	r6, r0
 8011ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	db09      	blt.n	8011f10 <__s2b+0x30>
 8011efc:	4630      	mov	r0, r6
 8011efe:	f7ff ff47 	bl	8011d90 <_Balloc>
 8011f02:	b940      	cbnz	r0, 8011f16 <__s2b+0x36>
 8011f04:	4602      	mov	r2, r0
 8011f06:	4b19      	ldr	r3, [pc, #100]	; (8011f6c <__s2b+0x8c>)
 8011f08:	4819      	ldr	r0, [pc, #100]	; (8011f70 <__s2b+0x90>)
 8011f0a:	21ce      	movs	r1, #206	; 0xce
 8011f0c:	f000 fce2 	bl	80128d4 <__assert_func>
 8011f10:	0052      	lsls	r2, r2, #1
 8011f12:	3101      	adds	r1, #1
 8011f14:	e7f0      	b.n	8011ef8 <__s2b+0x18>
 8011f16:	9b08      	ldr	r3, [sp, #32]
 8011f18:	6143      	str	r3, [r0, #20]
 8011f1a:	2d09      	cmp	r5, #9
 8011f1c:	f04f 0301 	mov.w	r3, #1
 8011f20:	6103      	str	r3, [r0, #16]
 8011f22:	dd16      	ble.n	8011f52 <__s2b+0x72>
 8011f24:	f104 0909 	add.w	r9, r4, #9
 8011f28:	46c8      	mov	r8, r9
 8011f2a:	442c      	add	r4, r5
 8011f2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f30:	4601      	mov	r1, r0
 8011f32:	3b30      	subs	r3, #48	; 0x30
 8011f34:	220a      	movs	r2, #10
 8011f36:	4630      	mov	r0, r6
 8011f38:	f7ff ff8c 	bl	8011e54 <__multadd>
 8011f3c:	45a0      	cmp	r8, r4
 8011f3e:	d1f5      	bne.n	8011f2c <__s2b+0x4c>
 8011f40:	f1a5 0408 	sub.w	r4, r5, #8
 8011f44:	444c      	add	r4, r9
 8011f46:	1b2d      	subs	r5, r5, r4
 8011f48:	1963      	adds	r3, r4, r5
 8011f4a:	42bb      	cmp	r3, r7
 8011f4c:	db04      	blt.n	8011f58 <__s2b+0x78>
 8011f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f52:	340a      	adds	r4, #10
 8011f54:	2509      	movs	r5, #9
 8011f56:	e7f6      	b.n	8011f46 <__s2b+0x66>
 8011f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f5c:	4601      	mov	r1, r0
 8011f5e:	3b30      	subs	r3, #48	; 0x30
 8011f60:	220a      	movs	r2, #10
 8011f62:	4630      	mov	r0, r6
 8011f64:	f7ff ff76 	bl	8011e54 <__multadd>
 8011f68:	e7ee      	b.n	8011f48 <__s2b+0x68>
 8011f6a:	bf00      	nop
 8011f6c:	08014128 	.word	0x08014128
 8011f70:	080141cb 	.word	0x080141cb

08011f74 <__hi0bits>:
 8011f74:	0c03      	lsrs	r3, r0, #16
 8011f76:	041b      	lsls	r3, r3, #16
 8011f78:	b9d3      	cbnz	r3, 8011fb0 <__hi0bits+0x3c>
 8011f7a:	0400      	lsls	r0, r0, #16
 8011f7c:	2310      	movs	r3, #16
 8011f7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011f82:	bf04      	itt	eq
 8011f84:	0200      	lsleq	r0, r0, #8
 8011f86:	3308      	addeq	r3, #8
 8011f88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011f8c:	bf04      	itt	eq
 8011f8e:	0100      	lsleq	r0, r0, #4
 8011f90:	3304      	addeq	r3, #4
 8011f92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011f96:	bf04      	itt	eq
 8011f98:	0080      	lsleq	r0, r0, #2
 8011f9a:	3302      	addeq	r3, #2
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	db05      	blt.n	8011fac <__hi0bits+0x38>
 8011fa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011fa4:	f103 0301 	add.w	r3, r3, #1
 8011fa8:	bf08      	it	eq
 8011faa:	2320      	moveq	r3, #32
 8011fac:	4618      	mov	r0, r3
 8011fae:	4770      	bx	lr
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	e7e4      	b.n	8011f7e <__hi0bits+0xa>

08011fb4 <__lo0bits>:
 8011fb4:	6803      	ldr	r3, [r0, #0]
 8011fb6:	f013 0207 	ands.w	r2, r3, #7
 8011fba:	4601      	mov	r1, r0
 8011fbc:	d00b      	beq.n	8011fd6 <__lo0bits+0x22>
 8011fbe:	07da      	lsls	r2, r3, #31
 8011fc0:	d423      	bmi.n	801200a <__lo0bits+0x56>
 8011fc2:	0798      	lsls	r0, r3, #30
 8011fc4:	bf49      	itett	mi
 8011fc6:	085b      	lsrmi	r3, r3, #1
 8011fc8:	089b      	lsrpl	r3, r3, #2
 8011fca:	2001      	movmi	r0, #1
 8011fcc:	600b      	strmi	r3, [r1, #0]
 8011fce:	bf5c      	itt	pl
 8011fd0:	600b      	strpl	r3, [r1, #0]
 8011fd2:	2002      	movpl	r0, #2
 8011fd4:	4770      	bx	lr
 8011fd6:	b298      	uxth	r0, r3
 8011fd8:	b9a8      	cbnz	r0, 8012006 <__lo0bits+0x52>
 8011fda:	0c1b      	lsrs	r3, r3, #16
 8011fdc:	2010      	movs	r0, #16
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	b90a      	cbnz	r2, 8011fe6 <__lo0bits+0x32>
 8011fe2:	3008      	adds	r0, #8
 8011fe4:	0a1b      	lsrs	r3, r3, #8
 8011fe6:	071a      	lsls	r2, r3, #28
 8011fe8:	bf04      	itt	eq
 8011fea:	091b      	lsreq	r3, r3, #4
 8011fec:	3004      	addeq	r0, #4
 8011fee:	079a      	lsls	r2, r3, #30
 8011ff0:	bf04      	itt	eq
 8011ff2:	089b      	lsreq	r3, r3, #2
 8011ff4:	3002      	addeq	r0, #2
 8011ff6:	07da      	lsls	r2, r3, #31
 8011ff8:	d403      	bmi.n	8012002 <__lo0bits+0x4e>
 8011ffa:	085b      	lsrs	r3, r3, #1
 8011ffc:	f100 0001 	add.w	r0, r0, #1
 8012000:	d005      	beq.n	801200e <__lo0bits+0x5a>
 8012002:	600b      	str	r3, [r1, #0]
 8012004:	4770      	bx	lr
 8012006:	4610      	mov	r0, r2
 8012008:	e7e9      	b.n	8011fde <__lo0bits+0x2a>
 801200a:	2000      	movs	r0, #0
 801200c:	4770      	bx	lr
 801200e:	2020      	movs	r0, #32
 8012010:	4770      	bx	lr
	...

08012014 <__i2b>:
 8012014:	b510      	push	{r4, lr}
 8012016:	460c      	mov	r4, r1
 8012018:	2101      	movs	r1, #1
 801201a:	f7ff feb9 	bl	8011d90 <_Balloc>
 801201e:	4602      	mov	r2, r0
 8012020:	b928      	cbnz	r0, 801202e <__i2b+0x1a>
 8012022:	4b05      	ldr	r3, [pc, #20]	; (8012038 <__i2b+0x24>)
 8012024:	4805      	ldr	r0, [pc, #20]	; (801203c <__i2b+0x28>)
 8012026:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801202a:	f000 fc53 	bl	80128d4 <__assert_func>
 801202e:	2301      	movs	r3, #1
 8012030:	6144      	str	r4, [r0, #20]
 8012032:	6103      	str	r3, [r0, #16]
 8012034:	bd10      	pop	{r4, pc}
 8012036:	bf00      	nop
 8012038:	08014128 	.word	0x08014128
 801203c:	080141cb 	.word	0x080141cb

08012040 <__multiply>:
 8012040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	4691      	mov	r9, r2
 8012046:	690a      	ldr	r2, [r1, #16]
 8012048:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801204c:	429a      	cmp	r2, r3
 801204e:	bfb8      	it	lt
 8012050:	460b      	movlt	r3, r1
 8012052:	460c      	mov	r4, r1
 8012054:	bfbc      	itt	lt
 8012056:	464c      	movlt	r4, r9
 8012058:	4699      	movlt	r9, r3
 801205a:	6927      	ldr	r7, [r4, #16]
 801205c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	6861      	ldr	r1, [r4, #4]
 8012064:	eb07 060a 	add.w	r6, r7, sl
 8012068:	42b3      	cmp	r3, r6
 801206a:	b085      	sub	sp, #20
 801206c:	bfb8      	it	lt
 801206e:	3101      	addlt	r1, #1
 8012070:	f7ff fe8e 	bl	8011d90 <_Balloc>
 8012074:	b930      	cbnz	r0, 8012084 <__multiply+0x44>
 8012076:	4602      	mov	r2, r0
 8012078:	4b44      	ldr	r3, [pc, #272]	; (801218c <__multiply+0x14c>)
 801207a:	4845      	ldr	r0, [pc, #276]	; (8012190 <__multiply+0x150>)
 801207c:	f240 115d 	movw	r1, #349	; 0x15d
 8012080:	f000 fc28 	bl	80128d4 <__assert_func>
 8012084:	f100 0514 	add.w	r5, r0, #20
 8012088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801208c:	462b      	mov	r3, r5
 801208e:	2200      	movs	r2, #0
 8012090:	4543      	cmp	r3, r8
 8012092:	d321      	bcc.n	80120d8 <__multiply+0x98>
 8012094:	f104 0314 	add.w	r3, r4, #20
 8012098:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801209c:	f109 0314 	add.w	r3, r9, #20
 80120a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80120a4:	9202      	str	r2, [sp, #8]
 80120a6:	1b3a      	subs	r2, r7, r4
 80120a8:	3a15      	subs	r2, #21
 80120aa:	f022 0203 	bic.w	r2, r2, #3
 80120ae:	3204      	adds	r2, #4
 80120b0:	f104 0115 	add.w	r1, r4, #21
 80120b4:	428f      	cmp	r7, r1
 80120b6:	bf38      	it	cc
 80120b8:	2204      	movcc	r2, #4
 80120ba:	9201      	str	r2, [sp, #4]
 80120bc:	9a02      	ldr	r2, [sp, #8]
 80120be:	9303      	str	r3, [sp, #12]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d80c      	bhi.n	80120de <__multiply+0x9e>
 80120c4:	2e00      	cmp	r6, #0
 80120c6:	dd03      	ble.n	80120d0 <__multiply+0x90>
 80120c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d05a      	beq.n	8012186 <__multiply+0x146>
 80120d0:	6106      	str	r6, [r0, #16]
 80120d2:	b005      	add	sp, #20
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	f843 2b04 	str.w	r2, [r3], #4
 80120dc:	e7d8      	b.n	8012090 <__multiply+0x50>
 80120de:	f8b3 a000 	ldrh.w	sl, [r3]
 80120e2:	f1ba 0f00 	cmp.w	sl, #0
 80120e6:	d024      	beq.n	8012132 <__multiply+0xf2>
 80120e8:	f104 0e14 	add.w	lr, r4, #20
 80120ec:	46a9      	mov	r9, r5
 80120ee:	f04f 0c00 	mov.w	ip, #0
 80120f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80120f6:	f8d9 1000 	ldr.w	r1, [r9]
 80120fa:	fa1f fb82 	uxth.w	fp, r2
 80120fe:	b289      	uxth	r1, r1
 8012100:	fb0a 110b 	mla	r1, sl, fp, r1
 8012104:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012108:	f8d9 2000 	ldr.w	r2, [r9]
 801210c:	4461      	add	r1, ip
 801210e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012112:	fb0a c20b 	mla	r2, sl, fp, ip
 8012116:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801211a:	b289      	uxth	r1, r1
 801211c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012120:	4577      	cmp	r7, lr
 8012122:	f849 1b04 	str.w	r1, [r9], #4
 8012126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801212a:	d8e2      	bhi.n	80120f2 <__multiply+0xb2>
 801212c:	9a01      	ldr	r2, [sp, #4]
 801212e:	f845 c002 	str.w	ip, [r5, r2]
 8012132:	9a03      	ldr	r2, [sp, #12]
 8012134:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012138:	3304      	adds	r3, #4
 801213a:	f1b9 0f00 	cmp.w	r9, #0
 801213e:	d020      	beq.n	8012182 <__multiply+0x142>
 8012140:	6829      	ldr	r1, [r5, #0]
 8012142:	f104 0c14 	add.w	ip, r4, #20
 8012146:	46ae      	mov	lr, r5
 8012148:	f04f 0a00 	mov.w	sl, #0
 801214c:	f8bc b000 	ldrh.w	fp, [ip]
 8012150:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012154:	fb09 220b 	mla	r2, r9, fp, r2
 8012158:	4492      	add	sl, r2
 801215a:	b289      	uxth	r1, r1
 801215c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012160:	f84e 1b04 	str.w	r1, [lr], #4
 8012164:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012168:	f8be 1000 	ldrh.w	r1, [lr]
 801216c:	0c12      	lsrs	r2, r2, #16
 801216e:	fb09 1102 	mla	r1, r9, r2, r1
 8012172:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012176:	4567      	cmp	r7, ip
 8012178:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801217c:	d8e6      	bhi.n	801214c <__multiply+0x10c>
 801217e:	9a01      	ldr	r2, [sp, #4]
 8012180:	50a9      	str	r1, [r5, r2]
 8012182:	3504      	adds	r5, #4
 8012184:	e79a      	b.n	80120bc <__multiply+0x7c>
 8012186:	3e01      	subs	r6, #1
 8012188:	e79c      	b.n	80120c4 <__multiply+0x84>
 801218a:	bf00      	nop
 801218c:	08014128 	.word	0x08014128
 8012190:	080141cb 	.word	0x080141cb

08012194 <__pow5mult>:
 8012194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012198:	4615      	mov	r5, r2
 801219a:	f012 0203 	ands.w	r2, r2, #3
 801219e:	4606      	mov	r6, r0
 80121a0:	460f      	mov	r7, r1
 80121a2:	d007      	beq.n	80121b4 <__pow5mult+0x20>
 80121a4:	4c25      	ldr	r4, [pc, #148]	; (801223c <__pow5mult+0xa8>)
 80121a6:	3a01      	subs	r2, #1
 80121a8:	2300      	movs	r3, #0
 80121aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121ae:	f7ff fe51 	bl	8011e54 <__multadd>
 80121b2:	4607      	mov	r7, r0
 80121b4:	10ad      	asrs	r5, r5, #2
 80121b6:	d03d      	beq.n	8012234 <__pow5mult+0xa0>
 80121b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80121ba:	b97c      	cbnz	r4, 80121dc <__pow5mult+0x48>
 80121bc:	2010      	movs	r0, #16
 80121be:	f000 fbb9 	bl	8012934 <malloc>
 80121c2:	4602      	mov	r2, r0
 80121c4:	6270      	str	r0, [r6, #36]	; 0x24
 80121c6:	b928      	cbnz	r0, 80121d4 <__pow5mult+0x40>
 80121c8:	4b1d      	ldr	r3, [pc, #116]	; (8012240 <__pow5mult+0xac>)
 80121ca:	481e      	ldr	r0, [pc, #120]	; (8012244 <__pow5mult+0xb0>)
 80121cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80121d0:	f000 fb80 	bl	80128d4 <__assert_func>
 80121d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121d8:	6004      	str	r4, [r0, #0]
 80121da:	60c4      	str	r4, [r0, #12]
 80121dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80121e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121e4:	b94c      	cbnz	r4, 80121fa <__pow5mult+0x66>
 80121e6:	f240 2171 	movw	r1, #625	; 0x271
 80121ea:	4630      	mov	r0, r6
 80121ec:	f7ff ff12 	bl	8012014 <__i2b>
 80121f0:	2300      	movs	r3, #0
 80121f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80121f6:	4604      	mov	r4, r0
 80121f8:	6003      	str	r3, [r0, #0]
 80121fa:	f04f 0900 	mov.w	r9, #0
 80121fe:	07eb      	lsls	r3, r5, #31
 8012200:	d50a      	bpl.n	8012218 <__pow5mult+0x84>
 8012202:	4639      	mov	r1, r7
 8012204:	4622      	mov	r2, r4
 8012206:	4630      	mov	r0, r6
 8012208:	f7ff ff1a 	bl	8012040 <__multiply>
 801220c:	4639      	mov	r1, r7
 801220e:	4680      	mov	r8, r0
 8012210:	4630      	mov	r0, r6
 8012212:	f7ff fdfd 	bl	8011e10 <_Bfree>
 8012216:	4647      	mov	r7, r8
 8012218:	106d      	asrs	r5, r5, #1
 801221a:	d00b      	beq.n	8012234 <__pow5mult+0xa0>
 801221c:	6820      	ldr	r0, [r4, #0]
 801221e:	b938      	cbnz	r0, 8012230 <__pow5mult+0x9c>
 8012220:	4622      	mov	r2, r4
 8012222:	4621      	mov	r1, r4
 8012224:	4630      	mov	r0, r6
 8012226:	f7ff ff0b 	bl	8012040 <__multiply>
 801222a:	6020      	str	r0, [r4, #0]
 801222c:	f8c0 9000 	str.w	r9, [r0]
 8012230:	4604      	mov	r4, r0
 8012232:	e7e4      	b.n	80121fe <__pow5mult+0x6a>
 8012234:	4638      	mov	r0, r7
 8012236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223a:	bf00      	nop
 801223c:	08014318 	.word	0x08014318
 8012240:	080141b4 	.word	0x080141b4
 8012244:	080141cb 	.word	0x080141cb

08012248 <__lshift>:
 8012248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801224c:	460c      	mov	r4, r1
 801224e:	6849      	ldr	r1, [r1, #4]
 8012250:	6923      	ldr	r3, [r4, #16]
 8012252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012256:	68a3      	ldr	r3, [r4, #8]
 8012258:	4607      	mov	r7, r0
 801225a:	4691      	mov	r9, r2
 801225c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012260:	f108 0601 	add.w	r6, r8, #1
 8012264:	42b3      	cmp	r3, r6
 8012266:	db0b      	blt.n	8012280 <__lshift+0x38>
 8012268:	4638      	mov	r0, r7
 801226a:	f7ff fd91 	bl	8011d90 <_Balloc>
 801226e:	4605      	mov	r5, r0
 8012270:	b948      	cbnz	r0, 8012286 <__lshift+0x3e>
 8012272:	4602      	mov	r2, r0
 8012274:	4b2a      	ldr	r3, [pc, #168]	; (8012320 <__lshift+0xd8>)
 8012276:	482b      	ldr	r0, [pc, #172]	; (8012324 <__lshift+0xdc>)
 8012278:	f240 11d9 	movw	r1, #473	; 0x1d9
 801227c:	f000 fb2a 	bl	80128d4 <__assert_func>
 8012280:	3101      	adds	r1, #1
 8012282:	005b      	lsls	r3, r3, #1
 8012284:	e7ee      	b.n	8012264 <__lshift+0x1c>
 8012286:	2300      	movs	r3, #0
 8012288:	f100 0114 	add.w	r1, r0, #20
 801228c:	f100 0210 	add.w	r2, r0, #16
 8012290:	4618      	mov	r0, r3
 8012292:	4553      	cmp	r3, sl
 8012294:	db37      	blt.n	8012306 <__lshift+0xbe>
 8012296:	6920      	ldr	r0, [r4, #16]
 8012298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801229c:	f104 0314 	add.w	r3, r4, #20
 80122a0:	f019 091f 	ands.w	r9, r9, #31
 80122a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80122ac:	d02f      	beq.n	801230e <__lshift+0xc6>
 80122ae:	f1c9 0e20 	rsb	lr, r9, #32
 80122b2:	468a      	mov	sl, r1
 80122b4:	f04f 0c00 	mov.w	ip, #0
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	fa02 f209 	lsl.w	r2, r2, r9
 80122be:	ea42 020c 	orr.w	r2, r2, ip
 80122c2:	f84a 2b04 	str.w	r2, [sl], #4
 80122c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ca:	4298      	cmp	r0, r3
 80122cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80122d0:	d8f2      	bhi.n	80122b8 <__lshift+0x70>
 80122d2:	1b03      	subs	r3, r0, r4
 80122d4:	3b15      	subs	r3, #21
 80122d6:	f023 0303 	bic.w	r3, r3, #3
 80122da:	3304      	adds	r3, #4
 80122dc:	f104 0215 	add.w	r2, r4, #21
 80122e0:	4290      	cmp	r0, r2
 80122e2:	bf38      	it	cc
 80122e4:	2304      	movcc	r3, #4
 80122e6:	f841 c003 	str.w	ip, [r1, r3]
 80122ea:	f1bc 0f00 	cmp.w	ip, #0
 80122ee:	d001      	beq.n	80122f4 <__lshift+0xac>
 80122f0:	f108 0602 	add.w	r6, r8, #2
 80122f4:	3e01      	subs	r6, #1
 80122f6:	4638      	mov	r0, r7
 80122f8:	612e      	str	r6, [r5, #16]
 80122fa:	4621      	mov	r1, r4
 80122fc:	f7ff fd88 	bl	8011e10 <_Bfree>
 8012300:	4628      	mov	r0, r5
 8012302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012306:	f842 0f04 	str.w	r0, [r2, #4]!
 801230a:	3301      	adds	r3, #1
 801230c:	e7c1      	b.n	8012292 <__lshift+0x4a>
 801230e:	3904      	subs	r1, #4
 8012310:	f853 2b04 	ldr.w	r2, [r3], #4
 8012314:	f841 2f04 	str.w	r2, [r1, #4]!
 8012318:	4298      	cmp	r0, r3
 801231a:	d8f9      	bhi.n	8012310 <__lshift+0xc8>
 801231c:	e7ea      	b.n	80122f4 <__lshift+0xac>
 801231e:	bf00      	nop
 8012320:	08014128 	.word	0x08014128
 8012324:	080141cb 	.word	0x080141cb

08012328 <__mcmp>:
 8012328:	b530      	push	{r4, r5, lr}
 801232a:	6902      	ldr	r2, [r0, #16]
 801232c:	690c      	ldr	r4, [r1, #16]
 801232e:	1b12      	subs	r2, r2, r4
 8012330:	d10e      	bne.n	8012350 <__mcmp+0x28>
 8012332:	f100 0314 	add.w	r3, r0, #20
 8012336:	3114      	adds	r1, #20
 8012338:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801233c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012340:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012344:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012348:	42a5      	cmp	r5, r4
 801234a:	d003      	beq.n	8012354 <__mcmp+0x2c>
 801234c:	d305      	bcc.n	801235a <__mcmp+0x32>
 801234e:	2201      	movs	r2, #1
 8012350:	4610      	mov	r0, r2
 8012352:	bd30      	pop	{r4, r5, pc}
 8012354:	4283      	cmp	r3, r0
 8012356:	d3f3      	bcc.n	8012340 <__mcmp+0x18>
 8012358:	e7fa      	b.n	8012350 <__mcmp+0x28>
 801235a:	f04f 32ff 	mov.w	r2, #4294967295
 801235e:	e7f7      	b.n	8012350 <__mcmp+0x28>

08012360 <__mdiff>:
 8012360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	460c      	mov	r4, r1
 8012366:	4606      	mov	r6, r0
 8012368:	4611      	mov	r1, r2
 801236a:	4620      	mov	r0, r4
 801236c:	4690      	mov	r8, r2
 801236e:	f7ff ffdb 	bl	8012328 <__mcmp>
 8012372:	1e05      	subs	r5, r0, #0
 8012374:	d110      	bne.n	8012398 <__mdiff+0x38>
 8012376:	4629      	mov	r1, r5
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff fd09 	bl	8011d90 <_Balloc>
 801237e:	b930      	cbnz	r0, 801238e <__mdiff+0x2e>
 8012380:	4b3a      	ldr	r3, [pc, #232]	; (801246c <__mdiff+0x10c>)
 8012382:	4602      	mov	r2, r0
 8012384:	f240 2132 	movw	r1, #562	; 0x232
 8012388:	4839      	ldr	r0, [pc, #228]	; (8012470 <__mdiff+0x110>)
 801238a:	f000 faa3 	bl	80128d4 <__assert_func>
 801238e:	2301      	movs	r3, #1
 8012390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012398:	bfa4      	itt	ge
 801239a:	4643      	movge	r3, r8
 801239c:	46a0      	movge	r8, r4
 801239e:	4630      	mov	r0, r6
 80123a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80123a4:	bfa6      	itte	ge
 80123a6:	461c      	movge	r4, r3
 80123a8:	2500      	movge	r5, #0
 80123aa:	2501      	movlt	r5, #1
 80123ac:	f7ff fcf0 	bl	8011d90 <_Balloc>
 80123b0:	b920      	cbnz	r0, 80123bc <__mdiff+0x5c>
 80123b2:	4b2e      	ldr	r3, [pc, #184]	; (801246c <__mdiff+0x10c>)
 80123b4:	4602      	mov	r2, r0
 80123b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80123ba:	e7e5      	b.n	8012388 <__mdiff+0x28>
 80123bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80123c0:	6926      	ldr	r6, [r4, #16]
 80123c2:	60c5      	str	r5, [r0, #12]
 80123c4:	f104 0914 	add.w	r9, r4, #20
 80123c8:	f108 0514 	add.w	r5, r8, #20
 80123cc:	f100 0e14 	add.w	lr, r0, #20
 80123d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80123d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80123d8:	f108 0210 	add.w	r2, r8, #16
 80123dc:	46f2      	mov	sl, lr
 80123de:	2100      	movs	r1, #0
 80123e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80123e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80123e8:	fa1f f883 	uxth.w	r8, r3
 80123ec:	fa11 f18b 	uxtah	r1, r1, fp
 80123f0:	0c1b      	lsrs	r3, r3, #16
 80123f2:	eba1 0808 	sub.w	r8, r1, r8
 80123f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80123fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80123fe:	fa1f f888 	uxth.w	r8, r8
 8012402:	1419      	asrs	r1, r3, #16
 8012404:	454e      	cmp	r6, r9
 8012406:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801240a:	f84a 3b04 	str.w	r3, [sl], #4
 801240e:	d8e7      	bhi.n	80123e0 <__mdiff+0x80>
 8012410:	1b33      	subs	r3, r6, r4
 8012412:	3b15      	subs	r3, #21
 8012414:	f023 0303 	bic.w	r3, r3, #3
 8012418:	3304      	adds	r3, #4
 801241a:	3415      	adds	r4, #21
 801241c:	42a6      	cmp	r6, r4
 801241e:	bf38      	it	cc
 8012420:	2304      	movcc	r3, #4
 8012422:	441d      	add	r5, r3
 8012424:	4473      	add	r3, lr
 8012426:	469e      	mov	lr, r3
 8012428:	462e      	mov	r6, r5
 801242a:	4566      	cmp	r6, ip
 801242c:	d30e      	bcc.n	801244c <__mdiff+0xec>
 801242e:	f10c 0203 	add.w	r2, ip, #3
 8012432:	1b52      	subs	r2, r2, r5
 8012434:	f022 0203 	bic.w	r2, r2, #3
 8012438:	3d03      	subs	r5, #3
 801243a:	45ac      	cmp	ip, r5
 801243c:	bf38      	it	cc
 801243e:	2200      	movcc	r2, #0
 8012440:	441a      	add	r2, r3
 8012442:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012446:	b17b      	cbz	r3, 8012468 <__mdiff+0x108>
 8012448:	6107      	str	r7, [r0, #16]
 801244a:	e7a3      	b.n	8012394 <__mdiff+0x34>
 801244c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012450:	fa11 f288 	uxtah	r2, r1, r8
 8012454:	1414      	asrs	r4, r2, #16
 8012456:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801245a:	b292      	uxth	r2, r2
 801245c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012460:	f84e 2b04 	str.w	r2, [lr], #4
 8012464:	1421      	asrs	r1, r4, #16
 8012466:	e7e0      	b.n	801242a <__mdiff+0xca>
 8012468:	3f01      	subs	r7, #1
 801246a:	e7ea      	b.n	8012442 <__mdiff+0xe2>
 801246c:	08014128 	.word	0x08014128
 8012470:	080141cb 	.word	0x080141cb

08012474 <__ulp>:
 8012474:	b082      	sub	sp, #8
 8012476:	ed8d 0b00 	vstr	d0, [sp]
 801247a:	9b01      	ldr	r3, [sp, #4]
 801247c:	4912      	ldr	r1, [pc, #72]	; (80124c8 <__ulp+0x54>)
 801247e:	4019      	ands	r1, r3
 8012480:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012484:	2900      	cmp	r1, #0
 8012486:	dd05      	ble.n	8012494 <__ulp+0x20>
 8012488:	2200      	movs	r2, #0
 801248a:	460b      	mov	r3, r1
 801248c:	ec43 2b10 	vmov	d0, r2, r3
 8012490:	b002      	add	sp, #8
 8012492:	4770      	bx	lr
 8012494:	4249      	negs	r1, r1
 8012496:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801249a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801249e:	f04f 0200 	mov.w	r2, #0
 80124a2:	f04f 0300 	mov.w	r3, #0
 80124a6:	da04      	bge.n	80124b2 <__ulp+0x3e>
 80124a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80124ac:	fa41 f300 	asr.w	r3, r1, r0
 80124b0:	e7ec      	b.n	801248c <__ulp+0x18>
 80124b2:	f1a0 0114 	sub.w	r1, r0, #20
 80124b6:	291e      	cmp	r1, #30
 80124b8:	bfda      	itte	le
 80124ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80124be:	fa20 f101 	lsrle.w	r1, r0, r1
 80124c2:	2101      	movgt	r1, #1
 80124c4:	460a      	mov	r2, r1
 80124c6:	e7e1      	b.n	801248c <__ulp+0x18>
 80124c8:	7ff00000 	.word	0x7ff00000

080124cc <__b2d>:
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	6905      	ldr	r5, [r0, #16]
 80124d0:	f100 0714 	add.w	r7, r0, #20
 80124d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80124d8:	1f2e      	subs	r6, r5, #4
 80124da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80124de:	4620      	mov	r0, r4
 80124e0:	f7ff fd48 	bl	8011f74 <__hi0bits>
 80124e4:	f1c0 0320 	rsb	r3, r0, #32
 80124e8:	280a      	cmp	r0, #10
 80124ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012568 <__b2d+0x9c>
 80124ee:	600b      	str	r3, [r1, #0]
 80124f0:	dc14      	bgt.n	801251c <__b2d+0x50>
 80124f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80124f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80124fa:	42b7      	cmp	r7, r6
 80124fc:	ea41 030c 	orr.w	r3, r1, ip
 8012500:	bf34      	ite	cc
 8012502:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012506:	2100      	movcs	r1, #0
 8012508:	3015      	adds	r0, #21
 801250a:	fa04 f000 	lsl.w	r0, r4, r0
 801250e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012512:	ea40 0201 	orr.w	r2, r0, r1
 8012516:	ec43 2b10 	vmov	d0, r2, r3
 801251a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801251c:	42b7      	cmp	r7, r6
 801251e:	bf3a      	itte	cc
 8012520:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012524:	f1a5 0608 	subcc.w	r6, r5, #8
 8012528:	2100      	movcs	r1, #0
 801252a:	380b      	subs	r0, #11
 801252c:	d017      	beq.n	801255e <__b2d+0x92>
 801252e:	f1c0 0c20 	rsb	ip, r0, #32
 8012532:	fa04 f500 	lsl.w	r5, r4, r0
 8012536:	42be      	cmp	r6, r7
 8012538:	fa21 f40c 	lsr.w	r4, r1, ip
 801253c:	ea45 0504 	orr.w	r5, r5, r4
 8012540:	bf8c      	ite	hi
 8012542:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012546:	2400      	movls	r4, #0
 8012548:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801254c:	fa01 f000 	lsl.w	r0, r1, r0
 8012550:	fa24 f40c 	lsr.w	r4, r4, ip
 8012554:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012558:	ea40 0204 	orr.w	r2, r0, r4
 801255c:	e7db      	b.n	8012516 <__b2d+0x4a>
 801255e:	ea44 030c 	orr.w	r3, r4, ip
 8012562:	460a      	mov	r2, r1
 8012564:	e7d7      	b.n	8012516 <__b2d+0x4a>
 8012566:	bf00      	nop
 8012568:	3ff00000 	.word	0x3ff00000

0801256c <__d2b>:
 801256c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012570:	4689      	mov	r9, r1
 8012572:	2101      	movs	r1, #1
 8012574:	ec57 6b10 	vmov	r6, r7, d0
 8012578:	4690      	mov	r8, r2
 801257a:	f7ff fc09 	bl	8011d90 <_Balloc>
 801257e:	4604      	mov	r4, r0
 8012580:	b930      	cbnz	r0, 8012590 <__d2b+0x24>
 8012582:	4602      	mov	r2, r0
 8012584:	4b25      	ldr	r3, [pc, #148]	; (801261c <__d2b+0xb0>)
 8012586:	4826      	ldr	r0, [pc, #152]	; (8012620 <__d2b+0xb4>)
 8012588:	f240 310a 	movw	r1, #778	; 0x30a
 801258c:	f000 f9a2 	bl	80128d4 <__assert_func>
 8012590:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012594:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012598:	bb35      	cbnz	r5, 80125e8 <__d2b+0x7c>
 801259a:	2e00      	cmp	r6, #0
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	d028      	beq.n	80125f2 <__d2b+0x86>
 80125a0:	4668      	mov	r0, sp
 80125a2:	9600      	str	r6, [sp, #0]
 80125a4:	f7ff fd06 	bl	8011fb4 <__lo0bits>
 80125a8:	9900      	ldr	r1, [sp, #0]
 80125aa:	b300      	cbz	r0, 80125ee <__d2b+0x82>
 80125ac:	9a01      	ldr	r2, [sp, #4]
 80125ae:	f1c0 0320 	rsb	r3, r0, #32
 80125b2:	fa02 f303 	lsl.w	r3, r2, r3
 80125b6:	430b      	orrs	r3, r1
 80125b8:	40c2      	lsrs	r2, r0
 80125ba:	6163      	str	r3, [r4, #20]
 80125bc:	9201      	str	r2, [sp, #4]
 80125be:	9b01      	ldr	r3, [sp, #4]
 80125c0:	61a3      	str	r3, [r4, #24]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	bf14      	ite	ne
 80125c6:	2202      	movne	r2, #2
 80125c8:	2201      	moveq	r2, #1
 80125ca:	6122      	str	r2, [r4, #16]
 80125cc:	b1d5      	cbz	r5, 8012604 <__d2b+0x98>
 80125ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125d2:	4405      	add	r5, r0
 80125d4:	f8c9 5000 	str.w	r5, [r9]
 80125d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125dc:	f8c8 0000 	str.w	r0, [r8]
 80125e0:	4620      	mov	r0, r4
 80125e2:	b003      	add	sp, #12
 80125e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125ec:	e7d5      	b.n	801259a <__d2b+0x2e>
 80125ee:	6161      	str	r1, [r4, #20]
 80125f0:	e7e5      	b.n	80125be <__d2b+0x52>
 80125f2:	a801      	add	r0, sp, #4
 80125f4:	f7ff fcde 	bl	8011fb4 <__lo0bits>
 80125f8:	9b01      	ldr	r3, [sp, #4]
 80125fa:	6163      	str	r3, [r4, #20]
 80125fc:	2201      	movs	r2, #1
 80125fe:	6122      	str	r2, [r4, #16]
 8012600:	3020      	adds	r0, #32
 8012602:	e7e3      	b.n	80125cc <__d2b+0x60>
 8012604:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801260c:	f8c9 0000 	str.w	r0, [r9]
 8012610:	6918      	ldr	r0, [r3, #16]
 8012612:	f7ff fcaf 	bl	8011f74 <__hi0bits>
 8012616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801261a:	e7df      	b.n	80125dc <__d2b+0x70>
 801261c:	08014128 	.word	0x08014128
 8012620:	080141cb 	.word	0x080141cb

08012624 <__ratio>:
 8012624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	4688      	mov	r8, r1
 801262a:	4669      	mov	r1, sp
 801262c:	4681      	mov	r9, r0
 801262e:	f7ff ff4d 	bl	80124cc <__b2d>
 8012632:	a901      	add	r1, sp, #4
 8012634:	4640      	mov	r0, r8
 8012636:	ec55 4b10 	vmov	r4, r5, d0
 801263a:	ee10 aa10 	vmov	sl, s0
 801263e:	f7ff ff45 	bl	80124cc <__b2d>
 8012642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012646:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801264a:	1a59      	subs	r1, r3, r1
 801264c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012656:	ec57 6b10 	vmov	r6, r7, d0
 801265a:	2b00      	cmp	r3, #0
 801265c:	bfd6      	itet	le
 801265e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012662:	462a      	movgt	r2, r5
 8012664:	463a      	movle	r2, r7
 8012666:	46ab      	mov	fp, r5
 8012668:	bfd6      	itet	le
 801266a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801266e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012672:	ee00 3a90 	vmovle	s1, r3
 8012676:	ec4b ab17 	vmov	d7, sl, fp
 801267a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801267e:	b003      	add	sp, #12
 8012680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012684 <__copybits>:
 8012684:	3901      	subs	r1, #1
 8012686:	b570      	push	{r4, r5, r6, lr}
 8012688:	1149      	asrs	r1, r1, #5
 801268a:	6914      	ldr	r4, [r2, #16]
 801268c:	3101      	adds	r1, #1
 801268e:	f102 0314 	add.w	r3, r2, #20
 8012692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801269a:	1f05      	subs	r5, r0, #4
 801269c:	42a3      	cmp	r3, r4
 801269e:	d30c      	bcc.n	80126ba <__copybits+0x36>
 80126a0:	1aa3      	subs	r3, r4, r2
 80126a2:	3b11      	subs	r3, #17
 80126a4:	f023 0303 	bic.w	r3, r3, #3
 80126a8:	3211      	adds	r2, #17
 80126aa:	42a2      	cmp	r2, r4
 80126ac:	bf88      	it	hi
 80126ae:	2300      	movhi	r3, #0
 80126b0:	4418      	add	r0, r3
 80126b2:	2300      	movs	r3, #0
 80126b4:	4288      	cmp	r0, r1
 80126b6:	d305      	bcc.n	80126c4 <__copybits+0x40>
 80126b8:	bd70      	pop	{r4, r5, r6, pc}
 80126ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80126be:	f845 6f04 	str.w	r6, [r5, #4]!
 80126c2:	e7eb      	b.n	801269c <__copybits+0x18>
 80126c4:	f840 3b04 	str.w	r3, [r0], #4
 80126c8:	e7f4      	b.n	80126b4 <__copybits+0x30>

080126ca <__any_on>:
 80126ca:	f100 0214 	add.w	r2, r0, #20
 80126ce:	6900      	ldr	r0, [r0, #16]
 80126d0:	114b      	asrs	r3, r1, #5
 80126d2:	4298      	cmp	r0, r3
 80126d4:	b510      	push	{r4, lr}
 80126d6:	db11      	blt.n	80126fc <__any_on+0x32>
 80126d8:	dd0a      	ble.n	80126f0 <__any_on+0x26>
 80126da:	f011 011f 	ands.w	r1, r1, #31
 80126de:	d007      	beq.n	80126f0 <__any_on+0x26>
 80126e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80126e4:	fa24 f001 	lsr.w	r0, r4, r1
 80126e8:	fa00 f101 	lsl.w	r1, r0, r1
 80126ec:	428c      	cmp	r4, r1
 80126ee:	d10b      	bne.n	8012708 <__any_on+0x3e>
 80126f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d803      	bhi.n	8012700 <__any_on+0x36>
 80126f8:	2000      	movs	r0, #0
 80126fa:	bd10      	pop	{r4, pc}
 80126fc:	4603      	mov	r3, r0
 80126fe:	e7f7      	b.n	80126f0 <__any_on+0x26>
 8012700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012704:	2900      	cmp	r1, #0
 8012706:	d0f5      	beq.n	80126f4 <__any_on+0x2a>
 8012708:	2001      	movs	r0, #1
 801270a:	e7f6      	b.n	80126fa <__any_on+0x30>

0801270c <_calloc_r>:
 801270c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801270e:	fba1 2402 	umull	r2, r4, r1, r2
 8012712:	b94c      	cbnz	r4, 8012728 <_calloc_r+0x1c>
 8012714:	4611      	mov	r1, r2
 8012716:	9201      	str	r2, [sp, #4]
 8012718:	f000 f82e 	bl	8012778 <_malloc_r>
 801271c:	9a01      	ldr	r2, [sp, #4]
 801271e:	4605      	mov	r5, r0
 8012720:	b930      	cbnz	r0, 8012730 <_calloc_r+0x24>
 8012722:	4628      	mov	r0, r5
 8012724:	b003      	add	sp, #12
 8012726:	bd30      	pop	{r4, r5, pc}
 8012728:	220c      	movs	r2, #12
 801272a:	6002      	str	r2, [r0, #0]
 801272c:	2500      	movs	r5, #0
 801272e:	e7f8      	b.n	8012722 <_calloc_r+0x16>
 8012730:	4621      	mov	r1, r4
 8012732:	f7fe f9c7 	bl	8010ac4 <memset>
 8012736:	e7f4      	b.n	8012722 <_calloc_r+0x16>

08012738 <sbrk_aligned>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	4e0e      	ldr	r6, [pc, #56]	; (8012774 <sbrk_aligned+0x3c>)
 801273c:	460c      	mov	r4, r1
 801273e:	6831      	ldr	r1, [r6, #0]
 8012740:	4605      	mov	r5, r0
 8012742:	b911      	cbnz	r1, 801274a <sbrk_aligned+0x12>
 8012744:	f000 f894 	bl	8012870 <_sbrk_r>
 8012748:	6030      	str	r0, [r6, #0]
 801274a:	4621      	mov	r1, r4
 801274c:	4628      	mov	r0, r5
 801274e:	f000 f88f 	bl	8012870 <_sbrk_r>
 8012752:	1c43      	adds	r3, r0, #1
 8012754:	d00a      	beq.n	801276c <sbrk_aligned+0x34>
 8012756:	1cc4      	adds	r4, r0, #3
 8012758:	f024 0403 	bic.w	r4, r4, #3
 801275c:	42a0      	cmp	r0, r4
 801275e:	d007      	beq.n	8012770 <sbrk_aligned+0x38>
 8012760:	1a21      	subs	r1, r4, r0
 8012762:	4628      	mov	r0, r5
 8012764:	f000 f884 	bl	8012870 <_sbrk_r>
 8012768:	3001      	adds	r0, #1
 801276a:	d101      	bne.n	8012770 <sbrk_aligned+0x38>
 801276c:	f04f 34ff 	mov.w	r4, #4294967295
 8012770:	4620      	mov	r0, r4
 8012772:	bd70      	pop	{r4, r5, r6, pc}
 8012774:	24000d3c 	.word	0x24000d3c

08012778 <_malloc_r>:
 8012778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801277c:	1ccd      	adds	r5, r1, #3
 801277e:	f025 0503 	bic.w	r5, r5, #3
 8012782:	3508      	adds	r5, #8
 8012784:	2d0c      	cmp	r5, #12
 8012786:	bf38      	it	cc
 8012788:	250c      	movcc	r5, #12
 801278a:	2d00      	cmp	r5, #0
 801278c:	4607      	mov	r7, r0
 801278e:	db01      	blt.n	8012794 <_malloc_r+0x1c>
 8012790:	42a9      	cmp	r1, r5
 8012792:	d905      	bls.n	80127a0 <_malloc_r+0x28>
 8012794:	230c      	movs	r3, #12
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	2600      	movs	r6, #0
 801279a:	4630      	mov	r0, r6
 801279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a0:	4e2e      	ldr	r6, [pc, #184]	; (801285c <_malloc_r+0xe4>)
 80127a2:	f000 f8cf 	bl	8012944 <__malloc_lock>
 80127a6:	6833      	ldr	r3, [r6, #0]
 80127a8:	461c      	mov	r4, r3
 80127aa:	bb34      	cbnz	r4, 80127fa <_malloc_r+0x82>
 80127ac:	4629      	mov	r1, r5
 80127ae:	4638      	mov	r0, r7
 80127b0:	f7ff ffc2 	bl	8012738 <sbrk_aligned>
 80127b4:	1c43      	adds	r3, r0, #1
 80127b6:	4604      	mov	r4, r0
 80127b8:	d14d      	bne.n	8012856 <_malloc_r+0xde>
 80127ba:	6834      	ldr	r4, [r6, #0]
 80127bc:	4626      	mov	r6, r4
 80127be:	2e00      	cmp	r6, #0
 80127c0:	d140      	bne.n	8012844 <_malloc_r+0xcc>
 80127c2:	6823      	ldr	r3, [r4, #0]
 80127c4:	4631      	mov	r1, r6
 80127c6:	4638      	mov	r0, r7
 80127c8:	eb04 0803 	add.w	r8, r4, r3
 80127cc:	f000 f850 	bl	8012870 <_sbrk_r>
 80127d0:	4580      	cmp	r8, r0
 80127d2:	d13a      	bne.n	801284a <_malloc_r+0xd2>
 80127d4:	6821      	ldr	r1, [r4, #0]
 80127d6:	3503      	adds	r5, #3
 80127d8:	1a6d      	subs	r5, r5, r1
 80127da:	f025 0503 	bic.w	r5, r5, #3
 80127de:	3508      	adds	r5, #8
 80127e0:	2d0c      	cmp	r5, #12
 80127e2:	bf38      	it	cc
 80127e4:	250c      	movcc	r5, #12
 80127e6:	4629      	mov	r1, r5
 80127e8:	4638      	mov	r0, r7
 80127ea:	f7ff ffa5 	bl	8012738 <sbrk_aligned>
 80127ee:	3001      	adds	r0, #1
 80127f0:	d02b      	beq.n	801284a <_malloc_r+0xd2>
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	442b      	add	r3, r5
 80127f6:	6023      	str	r3, [r4, #0]
 80127f8:	e00e      	b.n	8012818 <_malloc_r+0xa0>
 80127fa:	6822      	ldr	r2, [r4, #0]
 80127fc:	1b52      	subs	r2, r2, r5
 80127fe:	d41e      	bmi.n	801283e <_malloc_r+0xc6>
 8012800:	2a0b      	cmp	r2, #11
 8012802:	d916      	bls.n	8012832 <_malloc_r+0xba>
 8012804:	1961      	adds	r1, r4, r5
 8012806:	42a3      	cmp	r3, r4
 8012808:	6025      	str	r5, [r4, #0]
 801280a:	bf18      	it	ne
 801280c:	6059      	strne	r1, [r3, #4]
 801280e:	6863      	ldr	r3, [r4, #4]
 8012810:	bf08      	it	eq
 8012812:	6031      	streq	r1, [r6, #0]
 8012814:	5162      	str	r2, [r4, r5]
 8012816:	604b      	str	r3, [r1, #4]
 8012818:	4638      	mov	r0, r7
 801281a:	f104 060b 	add.w	r6, r4, #11
 801281e:	f000 f897 	bl	8012950 <__malloc_unlock>
 8012822:	f026 0607 	bic.w	r6, r6, #7
 8012826:	1d23      	adds	r3, r4, #4
 8012828:	1af2      	subs	r2, r6, r3
 801282a:	d0b6      	beq.n	801279a <_malloc_r+0x22>
 801282c:	1b9b      	subs	r3, r3, r6
 801282e:	50a3      	str	r3, [r4, r2]
 8012830:	e7b3      	b.n	801279a <_malloc_r+0x22>
 8012832:	6862      	ldr	r2, [r4, #4]
 8012834:	42a3      	cmp	r3, r4
 8012836:	bf0c      	ite	eq
 8012838:	6032      	streq	r2, [r6, #0]
 801283a:	605a      	strne	r2, [r3, #4]
 801283c:	e7ec      	b.n	8012818 <_malloc_r+0xa0>
 801283e:	4623      	mov	r3, r4
 8012840:	6864      	ldr	r4, [r4, #4]
 8012842:	e7b2      	b.n	80127aa <_malloc_r+0x32>
 8012844:	4634      	mov	r4, r6
 8012846:	6876      	ldr	r6, [r6, #4]
 8012848:	e7b9      	b.n	80127be <_malloc_r+0x46>
 801284a:	230c      	movs	r3, #12
 801284c:	603b      	str	r3, [r7, #0]
 801284e:	4638      	mov	r0, r7
 8012850:	f000 f87e 	bl	8012950 <__malloc_unlock>
 8012854:	e7a1      	b.n	801279a <_malloc_r+0x22>
 8012856:	6025      	str	r5, [r4, #0]
 8012858:	e7de      	b.n	8012818 <_malloc_r+0xa0>
 801285a:	bf00      	nop
 801285c:	24000d38 	.word	0x24000d38

08012860 <nan>:
 8012860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012868 <nan+0x8>
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop
 8012868:	00000000 	.word	0x00000000
 801286c:	7ff80000 	.word	0x7ff80000

08012870 <_sbrk_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4d06      	ldr	r5, [pc, #24]	; (801288c <_sbrk_r+0x1c>)
 8012874:	2300      	movs	r3, #0
 8012876:	4604      	mov	r4, r0
 8012878:	4608      	mov	r0, r1
 801287a:	602b      	str	r3, [r5, #0]
 801287c:	f7f1 fa6a 	bl	8003d54 <_sbrk>
 8012880:	1c43      	adds	r3, r0, #1
 8012882:	d102      	bne.n	801288a <_sbrk_r+0x1a>
 8012884:	682b      	ldr	r3, [r5, #0]
 8012886:	b103      	cbz	r3, 801288a <_sbrk_r+0x1a>
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	bd38      	pop	{r3, r4, r5, pc}
 801288c:	24000d40 	.word	0x24000d40

08012890 <strncmp>:
 8012890:	b510      	push	{r4, lr}
 8012892:	b17a      	cbz	r2, 80128b4 <strncmp+0x24>
 8012894:	4603      	mov	r3, r0
 8012896:	3901      	subs	r1, #1
 8012898:	1884      	adds	r4, r0, r2
 801289a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801289e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80128a2:	4290      	cmp	r0, r2
 80128a4:	d101      	bne.n	80128aa <strncmp+0x1a>
 80128a6:	42a3      	cmp	r3, r4
 80128a8:	d101      	bne.n	80128ae <strncmp+0x1e>
 80128aa:	1a80      	subs	r0, r0, r2
 80128ac:	bd10      	pop	{r4, pc}
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d1f3      	bne.n	801289a <strncmp+0xa>
 80128b2:	e7fa      	b.n	80128aa <strncmp+0x1a>
 80128b4:	4610      	mov	r0, r2
 80128b6:	e7f9      	b.n	80128ac <strncmp+0x1c>

080128b8 <__ascii_wctomb>:
 80128b8:	b149      	cbz	r1, 80128ce <__ascii_wctomb+0x16>
 80128ba:	2aff      	cmp	r2, #255	; 0xff
 80128bc:	bf85      	ittet	hi
 80128be:	238a      	movhi	r3, #138	; 0x8a
 80128c0:	6003      	strhi	r3, [r0, #0]
 80128c2:	700a      	strbls	r2, [r1, #0]
 80128c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80128c8:	bf98      	it	ls
 80128ca:	2001      	movls	r0, #1
 80128cc:	4770      	bx	lr
 80128ce:	4608      	mov	r0, r1
 80128d0:	4770      	bx	lr
	...

080128d4 <__assert_func>:
 80128d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128d6:	4614      	mov	r4, r2
 80128d8:	461a      	mov	r2, r3
 80128da:	4b09      	ldr	r3, [pc, #36]	; (8012900 <__assert_func+0x2c>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	4605      	mov	r5, r0
 80128e0:	68d8      	ldr	r0, [r3, #12]
 80128e2:	b14c      	cbz	r4, 80128f8 <__assert_func+0x24>
 80128e4:	4b07      	ldr	r3, [pc, #28]	; (8012904 <__assert_func+0x30>)
 80128e6:	9100      	str	r1, [sp, #0]
 80128e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128ec:	4906      	ldr	r1, [pc, #24]	; (8012908 <__assert_func+0x34>)
 80128ee:	462b      	mov	r3, r5
 80128f0:	f000 f80e 	bl	8012910 <fiprintf>
 80128f4:	f000 fc2c 	bl	8013150 <abort>
 80128f8:	4b04      	ldr	r3, [pc, #16]	; (801290c <__assert_func+0x38>)
 80128fa:	461c      	mov	r4, r3
 80128fc:	e7f3      	b.n	80128e6 <__assert_func+0x12>
 80128fe:	bf00      	nop
 8012900:	240000f8 	.word	0x240000f8
 8012904:	08014324 	.word	0x08014324
 8012908:	08014331 	.word	0x08014331
 801290c:	0801435f 	.word	0x0801435f

08012910 <fiprintf>:
 8012910:	b40e      	push	{r1, r2, r3}
 8012912:	b503      	push	{r0, r1, lr}
 8012914:	4601      	mov	r1, r0
 8012916:	ab03      	add	r3, sp, #12
 8012918:	4805      	ldr	r0, [pc, #20]	; (8012930 <fiprintf+0x20>)
 801291a:	f853 2b04 	ldr.w	r2, [r3], #4
 801291e:	6800      	ldr	r0, [r0, #0]
 8012920:	9301      	str	r3, [sp, #4]
 8012922:	f000 f891 	bl	8012a48 <_vfiprintf_r>
 8012926:	b002      	add	sp, #8
 8012928:	f85d eb04 	ldr.w	lr, [sp], #4
 801292c:	b003      	add	sp, #12
 801292e:	4770      	bx	lr
 8012930:	240000f8 	.word	0x240000f8

08012934 <malloc>:
 8012934:	4b02      	ldr	r3, [pc, #8]	; (8012940 <malloc+0xc>)
 8012936:	4601      	mov	r1, r0
 8012938:	6818      	ldr	r0, [r3, #0]
 801293a:	f7ff bf1d 	b.w	8012778 <_malloc_r>
 801293e:	bf00      	nop
 8012940:	240000f8 	.word	0x240000f8

08012944 <__malloc_lock>:
 8012944:	4801      	ldr	r0, [pc, #4]	; (801294c <__malloc_lock+0x8>)
 8012946:	f000 bdc3 	b.w	80134d0 <__retarget_lock_acquire_recursive>
 801294a:	bf00      	nop
 801294c:	24000d44 	.word	0x24000d44

08012950 <__malloc_unlock>:
 8012950:	4801      	ldr	r0, [pc, #4]	; (8012958 <__malloc_unlock+0x8>)
 8012952:	f000 bdbe 	b.w	80134d2 <__retarget_lock_release_recursive>
 8012956:	bf00      	nop
 8012958:	24000d44 	.word	0x24000d44

0801295c <_free_r>:
 801295c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801295e:	2900      	cmp	r1, #0
 8012960:	d044      	beq.n	80129ec <_free_r+0x90>
 8012962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012966:	9001      	str	r0, [sp, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f1a1 0404 	sub.w	r4, r1, #4
 801296e:	bfb8      	it	lt
 8012970:	18e4      	addlt	r4, r4, r3
 8012972:	f7ff ffe7 	bl	8012944 <__malloc_lock>
 8012976:	4a1e      	ldr	r2, [pc, #120]	; (80129f0 <_free_r+0x94>)
 8012978:	9801      	ldr	r0, [sp, #4]
 801297a:	6813      	ldr	r3, [r2, #0]
 801297c:	b933      	cbnz	r3, 801298c <_free_r+0x30>
 801297e:	6063      	str	r3, [r4, #4]
 8012980:	6014      	str	r4, [r2, #0]
 8012982:	b003      	add	sp, #12
 8012984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012988:	f7ff bfe2 	b.w	8012950 <__malloc_unlock>
 801298c:	42a3      	cmp	r3, r4
 801298e:	d908      	bls.n	80129a2 <_free_r+0x46>
 8012990:	6825      	ldr	r5, [r4, #0]
 8012992:	1961      	adds	r1, r4, r5
 8012994:	428b      	cmp	r3, r1
 8012996:	bf01      	itttt	eq
 8012998:	6819      	ldreq	r1, [r3, #0]
 801299a:	685b      	ldreq	r3, [r3, #4]
 801299c:	1949      	addeq	r1, r1, r5
 801299e:	6021      	streq	r1, [r4, #0]
 80129a0:	e7ed      	b.n	801297e <_free_r+0x22>
 80129a2:	461a      	mov	r2, r3
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	b10b      	cbz	r3, 80129ac <_free_r+0x50>
 80129a8:	42a3      	cmp	r3, r4
 80129aa:	d9fa      	bls.n	80129a2 <_free_r+0x46>
 80129ac:	6811      	ldr	r1, [r2, #0]
 80129ae:	1855      	adds	r5, r2, r1
 80129b0:	42a5      	cmp	r5, r4
 80129b2:	d10b      	bne.n	80129cc <_free_r+0x70>
 80129b4:	6824      	ldr	r4, [r4, #0]
 80129b6:	4421      	add	r1, r4
 80129b8:	1854      	adds	r4, r2, r1
 80129ba:	42a3      	cmp	r3, r4
 80129bc:	6011      	str	r1, [r2, #0]
 80129be:	d1e0      	bne.n	8012982 <_free_r+0x26>
 80129c0:	681c      	ldr	r4, [r3, #0]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	6053      	str	r3, [r2, #4]
 80129c6:	4421      	add	r1, r4
 80129c8:	6011      	str	r1, [r2, #0]
 80129ca:	e7da      	b.n	8012982 <_free_r+0x26>
 80129cc:	d902      	bls.n	80129d4 <_free_r+0x78>
 80129ce:	230c      	movs	r3, #12
 80129d0:	6003      	str	r3, [r0, #0]
 80129d2:	e7d6      	b.n	8012982 <_free_r+0x26>
 80129d4:	6825      	ldr	r5, [r4, #0]
 80129d6:	1961      	adds	r1, r4, r5
 80129d8:	428b      	cmp	r3, r1
 80129da:	bf04      	itt	eq
 80129dc:	6819      	ldreq	r1, [r3, #0]
 80129de:	685b      	ldreq	r3, [r3, #4]
 80129e0:	6063      	str	r3, [r4, #4]
 80129e2:	bf04      	itt	eq
 80129e4:	1949      	addeq	r1, r1, r5
 80129e6:	6021      	streq	r1, [r4, #0]
 80129e8:	6054      	str	r4, [r2, #4]
 80129ea:	e7ca      	b.n	8012982 <_free_r+0x26>
 80129ec:	b003      	add	sp, #12
 80129ee:	bd30      	pop	{r4, r5, pc}
 80129f0:	24000d38 	.word	0x24000d38

080129f4 <__sfputc_r>:
 80129f4:	6893      	ldr	r3, [r2, #8]
 80129f6:	3b01      	subs	r3, #1
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	b410      	push	{r4}
 80129fc:	6093      	str	r3, [r2, #8]
 80129fe:	da08      	bge.n	8012a12 <__sfputc_r+0x1e>
 8012a00:	6994      	ldr	r4, [r2, #24]
 8012a02:	42a3      	cmp	r3, r4
 8012a04:	db01      	blt.n	8012a0a <__sfputc_r+0x16>
 8012a06:	290a      	cmp	r1, #10
 8012a08:	d103      	bne.n	8012a12 <__sfputc_r+0x1e>
 8012a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a0e:	f000 badf 	b.w	8012fd0 <__swbuf_r>
 8012a12:	6813      	ldr	r3, [r2, #0]
 8012a14:	1c58      	adds	r0, r3, #1
 8012a16:	6010      	str	r0, [r2, #0]
 8012a18:	7019      	strb	r1, [r3, #0]
 8012a1a:	4608      	mov	r0, r1
 8012a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a20:	4770      	bx	lr

08012a22 <__sfputs_r>:
 8012a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a24:	4606      	mov	r6, r0
 8012a26:	460f      	mov	r7, r1
 8012a28:	4614      	mov	r4, r2
 8012a2a:	18d5      	adds	r5, r2, r3
 8012a2c:	42ac      	cmp	r4, r5
 8012a2e:	d101      	bne.n	8012a34 <__sfputs_r+0x12>
 8012a30:	2000      	movs	r0, #0
 8012a32:	e007      	b.n	8012a44 <__sfputs_r+0x22>
 8012a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a38:	463a      	mov	r2, r7
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	f7ff ffda 	bl	80129f4 <__sfputc_r>
 8012a40:	1c43      	adds	r3, r0, #1
 8012a42:	d1f3      	bne.n	8012a2c <__sfputs_r+0xa>
 8012a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a48 <_vfiprintf_r>:
 8012a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4c:	460d      	mov	r5, r1
 8012a4e:	b09d      	sub	sp, #116	; 0x74
 8012a50:	4614      	mov	r4, r2
 8012a52:	4698      	mov	r8, r3
 8012a54:	4606      	mov	r6, r0
 8012a56:	b118      	cbz	r0, 8012a60 <_vfiprintf_r+0x18>
 8012a58:	6983      	ldr	r3, [r0, #24]
 8012a5a:	b90b      	cbnz	r3, 8012a60 <_vfiprintf_r+0x18>
 8012a5c:	f000 fc9a 	bl	8013394 <__sinit>
 8012a60:	4b89      	ldr	r3, [pc, #548]	; (8012c88 <_vfiprintf_r+0x240>)
 8012a62:	429d      	cmp	r5, r3
 8012a64:	d11b      	bne.n	8012a9e <_vfiprintf_r+0x56>
 8012a66:	6875      	ldr	r5, [r6, #4]
 8012a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a6a:	07d9      	lsls	r1, r3, #31
 8012a6c:	d405      	bmi.n	8012a7a <_vfiprintf_r+0x32>
 8012a6e:	89ab      	ldrh	r3, [r5, #12]
 8012a70:	059a      	lsls	r2, r3, #22
 8012a72:	d402      	bmi.n	8012a7a <_vfiprintf_r+0x32>
 8012a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a76:	f000 fd2b 	bl	80134d0 <__retarget_lock_acquire_recursive>
 8012a7a:	89ab      	ldrh	r3, [r5, #12]
 8012a7c:	071b      	lsls	r3, r3, #28
 8012a7e:	d501      	bpl.n	8012a84 <_vfiprintf_r+0x3c>
 8012a80:	692b      	ldr	r3, [r5, #16]
 8012a82:	b9eb      	cbnz	r3, 8012ac0 <_vfiprintf_r+0x78>
 8012a84:	4629      	mov	r1, r5
 8012a86:	4630      	mov	r0, r6
 8012a88:	f000 faf4 	bl	8013074 <__swsetup_r>
 8012a8c:	b1c0      	cbz	r0, 8012ac0 <_vfiprintf_r+0x78>
 8012a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a90:	07dc      	lsls	r4, r3, #31
 8012a92:	d50e      	bpl.n	8012ab2 <_vfiprintf_r+0x6a>
 8012a94:	f04f 30ff 	mov.w	r0, #4294967295
 8012a98:	b01d      	add	sp, #116	; 0x74
 8012a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a9e:	4b7b      	ldr	r3, [pc, #492]	; (8012c8c <_vfiprintf_r+0x244>)
 8012aa0:	429d      	cmp	r5, r3
 8012aa2:	d101      	bne.n	8012aa8 <_vfiprintf_r+0x60>
 8012aa4:	68b5      	ldr	r5, [r6, #8]
 8012aa6:	e7df      	b.n	8012a68 <_vfiprintf_r+0x20>
 8012aa8:	4b79      	ldr	r3, [pc, #484]	; (8012c90 <_vfiprintf_r+0x248>)
 8012aaa:	429d      	cmp	r5, r3
 8012aac:	bf08      	it	eq
 8012aae:	68f5      	ldreq	r5, [r6, #12]
 8012ab0:	e7da      	b.n	8012a68 <_vfiprintf_r+0x20>
 8012ab2:	89ab      	ldrh	r3, [r5, #12]
 8012ab4:	0598      	lsls	r0, r3, #22
 8012ab6:	d4ed      	bmi.n	8012a94 <_vfiprintf_r+0x4c>
 8012ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aba:	f000 fd0a 	bl	80134d2 <__retarget_lock_release_recursive>
 8012abe:	e7e9      	b.n	8012a94 <_vfiprintf_r+0x4c>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac4:	2320      	movs	r3, #32
 8012ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ace:	2330      	movs	r3, #48	; 0x30
 8012ad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c94 <_vfiprintf_r+0x24c>
 8012ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ad8:	f04f 0901 	mov.w	r9, #1
 8012adc:	4623      	mov	r3, r4
 8012ade:	469a      	mov	sl, r3
 8012ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ae4:	b10a      	cbz	r2, 8012aea <_vfiprintf_r+0xa2>
 8012ae6:	2a25      	cmp	r2, #37	; 0x25
 8012ae8:	d1f9      	bne.n	8012ade <_vfiprintf_r+0x96>
 8012aea:	ebba 0b04 	subs.w	fp, sl, r4
 8012aee:	d00b      	beq.n	8012b08 <_vfiprintf_r+0xc0>
 8012af0:	465b      	mov	r3, fp
 8012af2:	4622      	mov	r2, r4
 8012af4:	4629      	mov	r1, r5
 8012af6:	4630      	mov	r0, r6
 8012af8:	f7ff ff93 	bl	8012a22 <__sfputs_r>
 8012afc:	3001      	adds	r0, #1
 8012afe:	f000 80aa 	beq.w	8012c56 <_vfiprintf_r+0x20e>
 8012b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b04:	445a      	add	r2, fp
 8012b06:	9209      	str	r2, [sp, #36]	; 0x24
 8012b08:	f89a 3000 	ldrb.w	r3, [sl]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f000 80a2 	beq.w	8012c56 <_vfiprintf_r+0x20e>
 8012b12:	2300      	movs	r3, #0
 8012b14:	f04f 32ff 	mov.w	r2, #4294967295
 8012b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b1c:	f10a 0a01 	add.w	sl, sl, #1
 8012b20:	9304      	str	r3, [sp, #16]
 8012b22:	9307      	str	r3, [sp, #28]
 8012b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b28:	931a      	str	r3, [sp, #104]	; 0x68
 8012b2a:	4654      	mov	r4, sl
 8012b2c:	2205      	movs	r2, #5
 8012b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b32:	4858      	ldr	r0, [pc, #352]	; (8012c94 <_vfiprintf_r+0x24c>)
 8012b34:	f7ed fbdc 	bl	80002f0 <memchr>
 8012b38:	9a04      	ldr	r2, [sp, #16]
 8012b3a:	b9d8      	cbnz	r0, 8012b74 <_vfiprintf_r+0x12c>
 8012b3c:	06d1      	lsls	r1, r2, #27
 8012b3e:	bf44      	itt	mi
 8012b40:	2320      	movmi	r3, #32
 8012b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b46:	0713      	lsls	r3, r2, #28
 8012b48:	bf44      	itt	mi
 8012b4a:	232b      	movmi	r3, #43	; 0x2b
 8012b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b50:	f89a 3000 	ldrb.w	r3, [sl]
 8012b54:	2b2a      	cmp	r3, #42	; 0x2a
 8012b56:	d015      	beq.n	8012b84 <_vfiprintf_r+0x13c>
 8012b58:	9a07      	ldr	r2, [sp, #28]
 8012b5a:	4654      	mov	r4, sl
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	f04f 0c0a 	mov.w	ip, #10
 8012b62:	4621      	mov	r1, r4
 8012b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b68:	3b30      	subs	r3, #48	; 0x30
 8012b6a:	2b09      	cmp	r3, #9
 8012b6c:	d94e      	bls.n	8012c0c <_vfiprintf_r+0x1c4>
 8012b6e:	b1b0      	cbz	r0, 8012b9e <_vfiprintf_r+0x156>
 8012b70:	9207      	str	r2, [sp, #28]
 8012b72:	e014      	b.n	8012b9e <_vfiprintf_r+0x156>
 8012b74:	eba0 0308 	sub.w	r3, r0, r8
 8012b78:	fa09 f303 	lsl.w	r3, r9, r3
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	9304      	str	r3, [sp, #16]
 8012b80:	46a2      	mov	sl, r4
 8012b82:	e7d2      	b.n	8012b2a <_vfiprintf_r+0xe2>
 8012b84:	9b03      	ldr	r3, [sp, #12]
 8012b86:	1d19      	adds	r1, r3, #4
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	9103      	str	r1, [sp, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	bfbb      	ittet	lt
 8012b90:	425b      	neglt	r3, r3
 8012b92:	f042 0202 	orrlt.w	r2, r2, #2
 8012b96:	9307      	strge	r3, [sp, #28]
 8012b98:	9307      	strlt	r3, [sp, #28]
 8012b9a:	bfb8      	it	lt
 8012b9c:	9204      	strlt	r2, [sp, #16]
 8012b9e:	7823      	ldrb	r3, [r4, #0]
 8012ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8012ba2:	d10c      	bne.n	8012bbe <_vfiprintf_r+0x176>
 8012ba4:	7863      	ldrb	r3, [r4, #1]
 8012ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8012ba8:	d135      	bne.n	8012c16 <_vfiprintf_r+0x1ce>
 8012baa:	9b03      	ldr	r3, [sp, #12]
 8012bac:	1d1a      	adds	r2, r3, #4
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	9203      	str	r2, [sp, #12]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	bfb8      	it	lt
 8012bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bba:	3402      	adds	r4, #2
 8012bbc:	9305      	str	r3, [sp, #20]
 8012bbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ca4 <_vfiprintf_r+0x25c>
 8012bc2:	7821      	ldrb	r1, [r4, #0]
 8012bc4:	2203      	movs	r2, #3
 8012bc6:	4650      	mov	r0, sl
 8012bc8:	f7ed fb92 	bl	80002f0 <memchr>
 8012bcc:	b140      	cbz	r0, 8012be0 <_vfiprintf_r+0x198>
 8012bce:	2340      	movs	r3, #64	; 0x40
 8012bd0:	eba0 000a 	sub.w	r0, r0, sl
 8012bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8012bd8:	9b04      	ldr	r3, [sp, #16]
 8012bda:	4303      	orrs	r3, r0
 8012bdc:	3401      	adds	r4, #1
 8012bde:	9304      	str	r3, [sp, #16]
 8012be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012be4:	482c      	ldr	r0, [pc, #176]	; (8012c98 <_vfiprintf_r+0x250>)
 8012be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bea:	2206      	movs	r2, #6
 8012bec:	f7ed fb80 	bl	80002f0 <memchr>
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d03f      	beq.n	8012c74 <_vfiprintf_r+0x22c>
 8012bf4:	4b29      	ldr	r3, [pc, #164]	; (8012c9c <_vfiprintf_r+0x254>)
 8012bf6:	bb1b      	cbnz	r3, 8012c40 <_vfiprintf_r+0x1f8>
 8012bf8:	9b03      	ldr	r3, [sp, #12]
 8012bfa:	3307      	adds	r3, #7
 8012bfc:	f023 0307 	bic.w	r3, r3, #7
 8012c00:	3308      	adds	r3, #8
 8012c02:	9303      	str	r3, [sp, #12]
 8012c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c06:	443b      	add	r3, r7
 8012c08:	9309      	str	r3, [sp, #36]	; 0x24
 8012c0a:	e767      	b.n	8012adc <_vfiprintf_r+0x94>
 8012c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c10:	460c      	mov	r4, r1
 8012c12:	2001      	movs	r0, #1
 8012c14:	e7a5      	b.n	8012b62 <_vfiprintf_r+0x11a>
 8012c16:	2300      	movs	r3, #0
 8012c18:	3401      	adds	r4, #1
 8012c1a:	9305      	str	r3, [sp, #20]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	f04f 0c0a 	mov.w	ip, #10
 8012c22:	4620      	mov	r0, r4
 8012c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c28:	3a30      	subs	r2, #48	; 0x30
 8012c2a:	2a09      	cmp	r2, #9
 8012c2c:	d903      	bls.n	8012c36 <_vfiprintf_r+0x1ee>
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0c5      	beq.n	8012bbe <_vfiprintf_r+0x176>
 8012c32:	9105      	str	r1, [sp, #20]
 8012c34:	e7c3      	b.n	8012bbe <_vfiprintf_r+0x176>
 8012c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e7f0      	b.n	8012c22 <_vfiprintf_r+0x1da>
 8012c40:	ab03      	add	r3, sp, #12
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	462a      	mov	r2, r5
 8012c46:	4b16      	ldr	r3, [pc, #88]	; (8012ca0 <_vfiprintf_r+0x258>)
 8012c48:	a904      	add	r1, sp, #16
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	f3af 8000 	nop.w
 8012c50:	4607      	mov	r7, r0
 8012c52:	1c78      	adds	r0, r7, #1
 8012c54:	d1d6      	bne.n	8012c04 <_vfiprintf_r+0x1bc>
 8012c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c58:	07d9      	lsls	r1, r3, #31
 8012c5a:	d405      	bmi.n	8012c68 <_vfiprintf_r+0x220>
 8012c5c:	89ab      	ldrh	r3, [r5, #12]
 8012c5e:	059a      	lsls	r2, r3, #22
 8012c60:	d402      	bmi.n	8012c68 <_vfiprintf_r+0x220>
 8012c62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c64:	f000 fc35 	bl	80134d2 <__retarget_lock_release_recursive>
 8012c68:	89ab      	ldrh	r3, [r5, #12]
 8012c6a:	065b      	lsls	r3, r3, #25
 8012c6c:	f53f af12 	bmi.w	8012a94 <_vfiprintf_r+0x4c>
 8012c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c72:	e711      	b.n	8012a98 <_vfiprintf_r+0x50>
 8012c74:	ab03      	add	r3, sp, #12
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	462a      	mov	r2, r5
 8012c7a:	4b09      	ldr	r3, [pc, #36]	; (8012ca0 <_vfiprintf_r+0x258>)
 8012c7c:	a904      	add	r1, sp, #16
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f000 f880 	bl	8012d84 <_printf_i>
 8012c84:	e7e4      	b.n	8012c50 <_vfiprintf_r+0x208>
 8012c86:	bf00      	nop
 8012c88:	080144b4 	.word	0x080144b4
 8012c8c:	080144d4 	.word	0x080144d4
 8012c90:	08014494 	.word	0x08014494
 8012c94:	08014461 	.word	0x08014461
 8012c98:	0801446b 	.word	0x0801446b
 8012c9c:	00000000 	.word	0x00000000
 8012ca0:	08012a23 	.word	0x08012a23
 8012ca4:	08014467 	.word	0x08014467

08012ca8 <_printf_common>:
 8012ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cac:	4616      	mov	r6, r2
 8012cae:	4699      	mov	r9, r3
 8012cb0:	688a      	ldr	r2, [r1, #8]
 8012cb2:	690b      	ldr	r3, [r1, #16]
 8012cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	bfb8      	it	lt
 8012cbc:	4613      	movlt	r3, r2
 8012cbe:	6033      	str	r3, [r6, #0]
 8012cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	b10a      	cbz	r2, 8012cce <_printf_common+0x26>
 8012cca:	3301      	adds	r3, #1
 8012ccc:	6033      	str	r3, [r6, #0]
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	0699      	lsls	r1, r3, #26
 8012cd2:	bf42      	ittt	mi
 8012cd4:	6833      	ldrmi	r3, [r6, #0]
 8012cd6:	3302      	addmi	r3, #2
 8012cd8:	6033      	strmi	r3, [r6, #0]
 8012cda:	6825      	ldr	r5, [r4, #0]
 8012cdc:	f015 0506 	ands.w	r5, r5, #6
 8012ce0:	d106      	bne.n	8012cf0 <_printf_common+0x48>
 8012ce2:	f104 0a19 	add.w	sl, r4, #25
 8012ce6:	68e3      	ldr	r3, [r4, #12]
 8012ce8:	6832      	ldr	r2, [r6, #0]
 8012cea:	1a9b      	subs	r3, r3, r2
 8012cec:	42ab      	cmp	r3, r5
 8012cee:	dc26      	bgt.n	8012d3e <_printf_common+0x96>
 8012cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012cf4:	1e13      	subs	r3, r2, #0
 8012cf6:	6822      	ldr	r2, [r4, #0]
 8012cf8:	bf18      	it	ne
 8012cfa:	2301      	movne	r3, #1
 8012cfc:	0692      	lsls	r2, r2, #26
 8012cfe:	d42b      	bmi.n	8012d58 <_printf_common+0xb0>
 8012d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d04:	4649      	mov	r1, r9
 8012d06:	4638      	mov	r0, r7
 8012d08:	47c0      	blx	r8
 8012d0a:	3001      	adds	r0, #1
 8012d0c:	d01e      	beq.n	8012d4c <_printf_common+0xa4>
 8012d0e:	6823      	ldr	r3, [r4, #0]
 8012d10:	68e5      	ldr	r5, [r4, #12]
 8012d12:	6832      	ldr	r2, [r6, #0]
 8012d14:	f003 0306 	and.w	r3, r3, #6
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	bf08      	it	eq
 8012d1c:	1aad      	subeq	r5, r5, r2
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	6922      	ldr	r2, [r4, #16]
 8012d22:	bf0c      	ite	eq
 8012d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d28:	2500      	movne	r5, #0
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	bfc4      	itt	gt
 8012d2e:	1a9b      	subgt	r3, r3, r2
 8012d30:	18ed      	addgt	r5, r5, r3
 8012d32:	2600      	movs	r6, #0
 8012d34:	341a      	adds	r4, #26
 8012d36:	42b5      	cmp	r5, r6
 8012d38:	d11a      	bne.n	8012d70 <_printf_common+0xc8>
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	e008      	b.n	8012d50 <_printf_common+0xa8>
 8012d3e:	2301      	movs	r3, #1
 8012d40:	4652      	mov	r2, sl
 8012d42:	4649      	mov	r1, r9
 8012d44:	4638      	mov	r0, r7
 8012d46:	47c0      	blx	r8
 8012d48:	3001      	adds	r0, #1
 8012d4a:	d103      	bne.n	8012d54 <_printf_common+0xac>
 8012d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d54:	3501      	adds	r5, #1
 8012d56:	e7c6      	b.n	8012ce6 <_printf_common+0x3e>
 8012d58:	18e1      	adds	r1, r4, r3
 8012d5a:	1c5a      	adds	r2, r3, #1
 8012d5c:	2030      	movs	r0, #48	; 0x30
 8012d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d62:	4422      	add	r2, r4
 8012d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d6c:	3302      	adds	r3, #2
 8012d6e:	e7c7      	b.n	8012d00 <_printf_common+0x58>
 8012d70:	2301      	movs	r3, #1
 8012d72:	4622      	mov	r2, r4
 8012d74:	4649      	mov	r1, r9
 8012d76:	4638      	mov	r0, r7
 8012d78:	47c0      	blx	r8
 8012d7a:	3001      	adds	r0, #1
 8012d7c:	d0e6      	beq.n	8012d4c <_printf_common+0xa4>
 8012d7e:	3601      	adds	r6, #1
 8012d80:	e7d9      	b.n	8012d36 <_printf_common+0x8e>
	...

08012d84 <_printf_i>:
 8012d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	7e0f      	ldrb	r7, [r1, #24]
 8012d8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d8c:	2f78      	cmp	r7, #120	; 0x78
 8012d8e:	4691      	mov	r9, r2
 8012d90:	4680      	mov	r8, r0
 8012d92:	460c      	mov	r4, r1
 8012d94:	469a      	mov	sl, r3
 8012d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d9a:	d807      	bhi.n	8012dac <_printf_i+0x28>
 8012d9c:	2f62      	cmp	r7, #98	; 0x62
 8012d9e:	d80a      	bhi.n	8012db6 <_printf_i+0x32>
 8012da0:	2f00      	cmp	r7, #0
 8012da2:	f000 80d8 	beq.w	8012f56 <_printf_i+0x1d2>
 8012da6:	2f58      	cmp	r7, #88	; 0x58
 8012da8:	f000 80a3 	beq.w	8012ef2 <_printf_i+0x16e>
 8012dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012db4:	e03a      	b.n	8012e2c <_printf_i+0xa8>
 8012db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dba:	2b15      	cmp	r3, #21
 8012dbc:	d8f6      	bhi.n	8012dac <_printf_i+0x28>
 8012dbe:	a101      	add	r1, pc, #4	; (adr r1, 8012dc4 <_printf_i+0x40>)
 8012dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012dc4:	08012e1d 	.word	0x08012e1d
 8012dc8:	08012e31 	.word	0x08012e31
 8012dcc:	08012dad 	.word	0x08012dad
 8012dd0:	08012dad 	.word	0x08012dad
 8012dd4:	08012dad 	.word	0x08012dad
 8012dd8:	08012dad 	.word	0x08012dad
 8012ddc:	08012e31 	.word	0x08012e31
 8012de0:	08012dad 	.word	0x08012dad
 8012de4:	08012dad 	.word	0x08012dad
 8012de8:	08012dad 	.word	0x08012dad
 8012dec:	08012dad 	.word	0x08012dad
 8012df0:	08012f3d 	.word	0x08012f3d
 8012df4:	08012e61 	.word	0x08012e61
 8012df8:	08012f1f 	.word	0x08012f1f
 8012dfc:	08012dad 	.word	0x08012dad
 8012e00:	08012dad 	.word	0x08012dad
 8012e04:	08012f5f 	.word	0x08012f5f
 8012e08:	08012dad 	.word	0x08012dad
 8012e0c:	08012e61 	.word	0x08012e61
 8012e10:	08012dad 	.word	0x08012dad
 8012e14:	08012dad 	.word	0x08012dad
 8012e18:	08012f27 	.word	0x08012f27
 8012e1c:	682b      	ldr	r3, [r5, #0]
 8012e1e:	1d1a      	adds	r2, r3, #4
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	602a      	str	r2, [r5, #0]
 8012e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e0a3      	b.n	8012f78 <_printf_i+0x1f4>
 8012e30:	6820      	ldr	r0, [r4, #0]
 8012e32:	6829      	ldr	r1, [r5, #0]
 8012e34:	0606      	lsls	r6, r0, #24
 8012e36:	f101 0304 	add.w	r3, r1, #4
 8012e3a:	d50a      	bpl.n	8012e52 <_printf_i+0xce>
 8012e3c:	680e      	ldr	r6, [r1, #0]
 8012e3e:	602b      	str	r3, [r5, #0]
 8012e40:	2e00      	cmp	r6, #0
 8012e42:	da03      	bge.n	8012e4c <_printf_i+0xc8>
 8012e44:	232d      	movs	r3, #45	; 0x2d
 8012e46:	4276      	negs	r6, r6
 8012e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e4c:	485e      	ldr	r0, [pc, #376]	; (8012fc8 <_printf_i+0x244>)
 8012e4e:	230a      	movs	r3, #10
 8012e50:	e019      	b.n	8012e86 <_printf_i+0x102>
 8012e52:	680e      	ldr	r6, [r1, #0]
 8012e54:	602b      	str	r3, [r5, #0]
 8012e56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e5a:	bf18      	it	ne
 8012e5c:	b236      	sxthne	r6, r6
 8012e5e:	e7ef      	b.n	8012e40 <_printf_i+0xbc>
 8012e60:	682b      	ldr	r3, [r5, #0]
 8012e62:	6820      	ldr	r0, [r4, #0]
 8012e64:	1d19      	adds	r1, r3, #4
 8012e66:	6029      	str	r1, [r5, #0]
 8012e68:	0601      	lsls	r1, r0, #24
 8012e6a:	d501      	bpl.n	8012e70 <_printf_i+0xec>
 8012e6c:	681e      	ldr	r6, [r3, #0]
 8012e6e:	e002      	b.n	8012e76 <_printf_i+0xf2>
 8012e70:	0646      	lsls	r6, r0, #25
 8012e72:	d5fb      	bpl.n	8012e6c <_printf_i+0xe8>
 8012e74:	881e      	ldrh	r6, [r3, #0]
 8012e76:	4854      	ldr	r0, [pc, #336]	; (8012fc8 <_printf_i+0x244>)
 8012e78:	2f6f      	cmp	r7, #111	; 0x6f
 8012e7a:	bf0c      	ite	eq
 8012e7c:	2308      	moveq	r3, #8
 8012e7e:	230a      	movne	r3, #10
 8012e80:	2100      	movs	r1, #0
 8012e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e86:	6865      	ldr	r5, [r4, #4]
 8012e88:	60a5      	str	r5, [r4, #8]
 8012e8a:	2d00      	cmp	r5, #0
 8012e8c:	bfa2      	ittt	ge
 8012e8e:	6821      	ldrge	r1, [r4, #0]
 8012e90:	f021 0104 	bicge.w	r1, r1, #4
 8012e94:	6021      	strge	r1, [r4, #0]
 8012e96:	b90e      	cbnz	r6, 8012e9c <_printf_i+0x118>
 8012e98:	2d00      	cmp	r5, #0
 8012e9a:	d04d      	beq.n	8012f38 <_printf_i+0x1b4>
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8012ea6:	5dc7      	ldrb	r7, [r0, r7]
 8012ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012eac:	4637      	mov	r7, r6
 8012eae:	42bb      	cmp	r3, r7
 8012eb0:	460e      	mov	r6, r1
 8012eb2:	d9f4      	bls.n	8012e9e <_printf_i+0x11a>
 8012eb4:	2b08      	cmp	r3, #8
 8012eb6:	d10b      	bne.n	8012ed0 <_printf_i+0x14c>
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	07de      	lsls	r6, r3, #31
 8012ebc:	d508      	bpl.n	8012ed0 <_printf_i+0x14c>
 8012ebe:	6923      	ldr	r3, [r4, #16]
 8012ec0:	6861      	ldr	r1, [r4, #4]
 8012ec2:	4299      	cmp	r1, r3
 8012ec4:	bfde      	ittt	le
 8012ec6:	2330      	movle	r3, #48	; 0x30
 8012ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ed0:	1b52      	subs	r2, r2, r5
 8012ed2:	6122      	str	r2, [r4, #16]
 8012ed4:	f8cd a000 	str.w	sl, [sp]
 8012ed8:	464b      	mov	r3, r9
 8012eda:	aa03      	add	r2, sp, #12
 8012edc:	4621      	mov	r1, r4
 8012ede:	4640      	mov	r0, r8
 8012ee0:	f7ff fee2 	bl	8012ca8 <_printf_common>
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	d14c      	bne.n	8012f82 <_printf_i+0x1fe>
 8012ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eec:	b004      	add	sp, #16
 8012eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ef2:	4835      	ldr	r0, [pc, #212]	; (8012fc8 <_printf_i+0x244>)
 8012ef4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ef8:	6829      	ldr	r1, [r5, #0]
 8012efa:	6823      	ldr	r3, [r4, #0]
 8012efc:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f00:	6029      	str	r1, [r5, #0]
 8012f02:	061d      	lsls	r5, r3, #24
 8012f04:	d514      	bpl.n	8012f30 <_printf_i+0x1ac>
 8012f06:	07df      	lsls	r7, r3, #31
 8012f08:	bf44      	itt	mi
 8012f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8012f0e:	6023      	strmi	r3, [r4, #0]
 8012f10:	b91e      	cbnz	r6, 8012f1a <_printf_i+0x196>
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	f023 0320 	bic.w	r3, r3, #32
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	2310      	movs	r3, #16
 8012f1c:	e7b0      	b.n	8012e80 <_printf_i+0xfc>
 8012f1e:	6823      	ldr	r3, [r4, #0]
 8012f20:	f043 0320 	orr.w	r3, r3, #32
 8012f24:	6023      	str	r3, [r4, #0]
 8012f26:	2378      	movs	r3, #120	; 0x78
 8012f28:	4828      	ldr	r0, [pc, #160]	; (8012fcc <_printf_i+0x248>)
 8012f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f2e:	e7e3      	b.n	8012ef8 <_printf_i+0x174>
 8012f30:	0659      	lsls	r1, r3, #25
 8012f32:	bf48      	it	mi
 8012f34:	b2b6      	uxthmi	r6, r6
 8012f36:	e7e6      	b.n	8012f06 <_printf_i+0x182>
 8012f38:	4615      	mov	r5, r2
 8012f3a:	e7bb      	b.n	8012eb4 <_printf_i+0x130>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	6826      	ldr	r6, [r4, #0]
 8012f40:	6961      	ldr	r1, [r4, #20]
 8012f42:	1d18      	adds	r0, r3, #4
 8012f44:	6028      	str	r0, [r5, #0]
 8012f46:	0635      	lsls	r5, r6, #24
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	d501      	bpl.n	8012f50 <_printf_i+0x1cc>
 8012f4c:	6019      	str	r1, [r3, #0]
 8012f4e:	e002      	b.n	8012f56 <_printf_i+0x1d2>
 8012f50:	0670      	lsls	r0, r6, #25
 8012f52:	d5fb      	bpl.n	8012f4c <_printf_i+0x1c8>
 8012f54:	8019      	strh	r1, [r3, #0]
 8012f56:	2300      	movs	r3, #0
 8012f58:	6123      	str	r3, [r4, #16]
 8012f5a:	4615      	mov	r5, r2
 8012f5c:	e7ba      	b.n	8012ed4 <_printf_i+0x150>
 8012f5e:	682b      	ldr	r3, [r5, #0]
 8012f60:	1d1a      	adds	r2, r3, #4
 8012f62:	602a      	str	r2, [r5, #0]
 8012f64:	681d      	ldr	r5, [r3, #0]
 8012f66:	6862      	ldr	r2, [r4, #4]
 8012f68:	2100      	movs	r1, #0
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	f7ed f9c0 	bl	80002f0 <memchr>
 8012f70:	b108      	cbz	r0, 8012f76 <_printf_i+0x1f2>
 8012f72:	1b40      	subs	r0, r0, r5
 8012f74:	6060      	str	r0, [r4, #4]
 8012f76:	6863      	ldr	r3, [r4, #4]
 8012f78:	6123      	str	r3, [r4, #16]
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f80:	e7a8      	b.n	8012ed4 <_printf_i+0x150>
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	462a      	mov	r2, r5
 8012f86:	4649      	mov	r1, r9
 8012f88:	4640      	mov	r0, r8
 8012f8a:	47d0      	blx	sl
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d0ab      	beq.n	8012ee8 <_printf_i+0x164>
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	079b      	lsls	r3, r3, #30
 8012f94:	d413      	bmi.n	8012fbe <_printf_i+0x23a>
 8012f96:	68e0      	ldr	r0, [r4, #12]
 8012f98:	9b03      	ldr	r3, [sp, #12]
 8012f9a:	4298      	cmp	r0, r3
 8012f9c:	bfb8      	it	lt
 8012f9e:	4618      	movlt	r0, r3
 8012fa0:	e7a4      	b.n	8012eec <_printf_i+0x168>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	4632      	mov	r2, r6
 8012fa6:	4649      	mov	r1, r9
 8012fa8:	4640      	mov	r0, r8
 8012faa:	47d0      	blx	sl
 8012fac:	3001      	adds	r0, #1
 8012fae:	d09b      	beq.n	8012ee8 <_printf_i+0x164>
 8012fb0:	3501      	adds	r5, #1
 8012fb2:	68e3      	ldr	r3, [r4, #12]
 8012fb4:	9903      	ldr	r1, [sp, #12]
 8012fb6:	1a5b      	subs	r3, r3, r1
 8012fb8:	42ab      	cmp	r3, r5
 8012fba:	dcf2      	bgt.n	8012fa2 <_printf_i+0x21e>
 8012fbc:	e7eb      	b.n	8012f96 <_printf_i+0x212>
 8012fbe:	2500      	movs	r5, #0
 8012fc0:	f104 0619 	add.w	r6, r4, #25
 8012fc4:	e7f5      	b.n	8012fb2 <_printf_i+0x22e>
 8012fc6:	bf00      	nop
 8012fc8:	08014472 	.word	0x08014472
 8012fcc:	08014483 	.word	0x08014483

08012fd0 <__swbuf_r>:
 8012fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd2:	460e      	mov	r6, r1
 8012fd4:	4614      	mov	r4, r2
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	b118      	cbz	r0, 8012fe2 <__swbuf_r+0x12>
 8012fda:	6983      	ldr	r3, [r0, #24]
 8012fdc:	b90b      	cbnz	r3, 8012fe2 <__swbuf_r+0x12>
 8012fde:	f000 f9d9 	bl	8013394 <__sinit>
 8012fe2:	4b21      	ldr	r3, [pc, #132]	; (8013068 <__swbuf_r+0x98>)
 8012fe4:	429c      	cmp	r4, r3
 8012fe6:	d12b      	bne.n	8013040 <__swbuf_r+0x70>
 8012fe8:	686c      	ldr	r4, [r5, #4]
 8012fea:	69a3      	ldr	r3, [r4, #24]
 8012fec:	60a3      	str	r3, [r4, #8]
 8012fee:	89a3      	ldrh	r3, [r4, #12]
 8012ff0:	071a      	lsls	r2, r3, #28
 8012ff2:	d52f      	bpl.n	8013054 <__swbuf_r+0x84>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	b36b      	cbz	r3, 8013054 <__swbuf_r+0x84>
 8012ff8:	6923      	ldr	r3, [r4, #16]
 8012ffa:	6820      	ldr	r0, [r4, #0]
 8012ffc:	1ac0      	subs	r0, r0, r3
 8012ffe:	6963      	ldr	r3, [r4, #20]
 8013000:	b2f6      	uxtb	r6, r6
 8013002:	4283      	cmp	r3, r0
 8013004:	4637      	mov	r7, r6
 8013006:	dc04      	bgt.n	8013012 <__swbuf_r+0x42>
 8013008:	4621      	mov	r1, r4
 801300a:	4628      	mov	r0, r5
 801300c:	f000 f92e 	bl	801326c <_fflush_r>
 8013010:	bb30      	cbnz	r0, 8013060 <__swbuf_r+0x90>
 8013012:	68a3      	ldr	r3, [r4, #8]
 8013014:	3b01      	subs	r3, #1
 8013016:	60a3      	str	r3, [r4, #8]
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	6022      	str	r2, [r4, #0]
 801301e:	701e      	strb	r6, [r3, #0]
 8013020:	6963      	ldr	r3, [r4, #20]
 8013022:	3001      	adds	r0, #1
 8013024:	4283      	cmp	r3, r0
 8013026:	d004      	beq.n	8013032 <__swbuf_r+0x62>
 8013028:	89a3      	ldrh	r3, [r4, #12]
 801302a:	07db      	lsls	r3, r3, #31
 801302c:	d506      	bpl.n	801303c <__swbuf_r+0x6c>
 801302e:	2e0a      	cmp	r6, #10
 8013030:	d104      	bne.n	801303c <__swbuf_r+0x6c>
 8013032:	4621      	mov	r1, r4
 8013034:	4628      	mov	r0, r5
 8013036:	f000 f919 	bl	801326c <_fflush_r>
 801303a:	b988      	cbnz	r0, 8013060 <__swbuf_r+0x90>
 801303c:	4638      	mov	r0, r7
 801303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013040:	4b0a      	ldr	r3, [pc, #40]	; (801306c <__swbuf_r+0x9c>)
 8013042:	429c      	cmp	r4, r3
 8013044:	d101      	bne.n	801304a <__swbuf_r+0x7a>
 8013046:	68ac      	ldr	r4, [r5, #8]
 8013048:	e7cf      	b.n	8012fea <__swbuf_r+0x1a>
 801304a:	4b09      	ldr	r3, [pc, #36]	; (8013070 <__swbuf_r+0xa0>)
 801304c:	429c      	cmp	r4, r3
 801304e:	bf08      	it	eq
 8013050:	68ec      	ldreq	r4, [r5, #12]
 8013052:	e7ca      	b.n	8012fea <__swbuf_r+0x1a>
 8013054:	4621      	mov	r1, r4
 8013056:	4628      	mov	r0, r5
 8013058:	f000 f80c 	bl	8013074 <__swsetup_r>
 801305c:	2800      	cmp	r0, #0
 801305e:	d0cb      	beq.n	8012ff8 <__swbuf_r+0x28>
 8013060:	f04f 37ff 	mov.w	r7, #4294967295
 8013064:	e7ea      	b.n	801303c <__swbuf_r+0x6c>
 8013066:	bf00      	nop
 8013068:	080144b4 	.word	0x080144b4
 801306c:	080144d4 	.word	0x080144d4
 8013070:	08014494 	.word	0x08014494

08013074 <__swsetup_r>:
 8013074:	4b32      	ldr	r3, [pc, #200]	; (8013140 <__swsetup_r+0xcc>)
 8013076:	b570      	push	{r4, r5, r6, lr}
 8013078:	681d      	ldr	r5, [r3, #0]
 801307a:	4606      	mov	r6, r0
 801307c:	460c      	mov	r4, r1
 801307e:	b125      	cbz	r5, 801308a <__swsetup_r+0x16>
 8013080:	69ab      	ldr	r3, [r5, #24]
 8013082:	b913      	cbnz	r3, 801308a <__swsetup_r+0x16>
 8013084:	4628      	mov	r0, r5
 8013086:	f000 f985 	bl	8013394 <__sinit>
 801308a:	4b2e      	ldr	r3, [pc, #184]	; (8013144 <__swsetup_r+0xd0>)
 801308c:	429c      	cmp	r4, r3
 801308e:	d10f      	bne.n	80130b0 <__swsetup_r+0x3c>
 8013090:	686c      	ldr	r4, [r5, #4]
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013098:	0719      	lsls	r1, r3, #28
 801309a:	d42c      	bmi.n	80130f6 <__swsetup_r+0x82>
 801309c:	06dd      	lsls	r5, r3, #27
 801309e:	d411      	bmi.n	80130c4 <__swsetup_r+0x50>
 80130a0:	2309      	movs	r3, #9
 80130a2:	6033      	str	r3, [r6, #0]
 80130a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80130a8:	81a3      	strh	r3, [r4, #12]
 80130aa:	f04f 30ff 	mov.w	r0, #4294967295
 80130ae:	e03e      	b.n	801312e <__swsetup_r+0xba>
 80130b0:	4b25      	ldr	r3, [pc, #148]	; (8013148 <__swsetup_r+0xd4>)
 80130b2:	429c      	cmp	r4, r3
 80130b4:	d101      	bne.n	80130ba <__swsetup_r+0x46>
 80130b6:	68ac      	ldr	r4, [r5, #8]
 80130b8:	e7eb      	b.n	8013092 <__swsetup_r+0x1e>
 80130ba:	4b24      	ldr	r3, [pc, #144]	; (801314c <__swsetup_r+0xd8>)
 80130bc:	429c      	cmp	r4, r3
 80130be:	bf08      	it	eq
 80130c0:	68ec      	ldreq	r4, [r5, #12]
 80130c2:	e7e6      	b.n	8013092 <__swsetup_r+0x1e>
 80130c4:	0758      	lsls	r0, r3, #29
 80130c6:	d512      	bpl.n	80130ee <__swsetup_r+0x7a>
 80130c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130ca:	b141      	cbz	r1, 80130de <__swsetup_r+0x6a>
 80130cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130d0:	4299      	cmp	r1, r3
 80130d2:	d002      	beq.n	80130da <__swsetup_r+0x66>
 80130d4:	4630      	mov	r0, r6
 80130d6:	f7ff fc41 	bl	801295c <_free_r>
 80130da:	2300      	movs	r3, #0
 80130dc:	6363      	str	r3, [r4, #52]	; 0x34
 80130de:	89a3      	ldrh	r3, [r4, #12]
 80130e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130e4:	81a3      	strh	r3, [r4, #12]
 80130e6:	2300      	movs	r3, #0
 80130e8:	6063      	str	r3, [r4, #4]
 80130ea:	6923      	ldr	r3, [r4, #16]
 80130ec:	6023      	str	r3, [r4, #0]
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	f043 0308 	orr.w	r3, r3, #8
 80130f4:	81a3      	strh	r3, [r4, #12]
 80130f6:	6923      	ldr	r3, [r4, #16]
 80130f8:	b94b      	cbnz	r3, 801310e <__swsetup_r+0x9a>
 80130fa:	89a3      	ldrh	r3, [r4, #12]
 80130fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013104:	d003      	beq.n	801310e <__swsetup_r+0x9a>
 8013106:	4621      	mov	r1, r4
 8013108:	4630      	mov	r0, r6
 801310a:	f000 fa09 	bl	8013520 <__smakebuf_r>
 801310e:	89a0      	ldrh	r0, [r4, #12]
 8013110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013114:	f010 0301 	ands.w	r3, r0, #1
 8013118:	d00a      	beq.n	8013130 <__swsetup_r+0xbc>
 801311a:	2300      	movs	r3, #0
 801311c:	60a3      	str	r3, [r4, #8]
 801311e:	6963      	ldr	r3, [r4, #20]
 8013120:	425b      	negs	r3, r3
 8013122:	61a3      	str	r3, [r4, #24]
 8013124:	6923      	ldr	r3, [r4, #16]
 8013126:	b943      	cbnz	r3, 801313a <__swsetup_r+0xc6>
 8013128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801312c:	d1ba      	bne.n	80130a4 <__swsetup_r+0x30>
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	0781      	lsls	r1, r0, #30
 8013132:	bf58      	it	pl
 8013134:	6963      	ldrpl	r3, [r4, #20]
 8013136:	60a3      	str	r3, [r4, #8]
 8013138:	e7f4      	b.n	8013124 <__swsetup_r+0xb0>
 801313a:	2000      	movs	r0, #0
 801313c:	e7f7      	b.n	801312e <__swsetup_r+0xba>
 801313e:	bf00      	nop
 8013140:	240000f8 	.word	0x240000f8
 8013144:	080144b4 	.word	0x080144b4
 8013148:	080144d4 	.word	0x080144d4
 801314c:	08014494 	.word	0x08014494

08013150 <abort>:
 8013150:	b508      	push	{r3, lr}
 8013152:	2006      	movs	r0, #6
 8013154:	f000 fa4c 	bl	80135f0 <raise>
 8013158:	2001      	movs	r0, #1
 801315a:	f7f0 fd83 	bl	8003c64 <_exit>
	...

08013160 <__sflush_r>:
 8013160:	898a      	ldrh	r2, [r1, #12]
 8013162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013166:	4605      	mov	r5, r0
 8013168:	0710      	lsls	r0, r2, #28
 801316a:	460c      	mov	r4, r1
 801316c:	d458      	bmi.n	8013220 <__sflush_r+0xc0>
 801316e:	684b      	ldr	r3, [r1, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	dc05      	bgt.n	8013180 <__sflush_r+0x20>
 8013174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013176:	2b00      	cmp	r3, #0
 8013178:	dc02      	bgt.n	8013180 <__sflush_r+0x20>
 801317a:	2000      	movs	r0, #0
 801317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013182:	2e00      	cmp	r6, #0
 8013184:	d0f9      	beq.n	801317a <__sflush_r+0x1a>
 8013186:	2300      	movs	r3, #0
 8013188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801318c:	682f      	ldr	r7, [r5, #0]
 801318e:	602b      	str	r3, [r5, #0]
 8013190:	d032      	beq.n	80131f8 <__sflush_r+0x98>
 8013192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013194:	89a3      	ldrh	r3, [r4, #12]
 8013196:	075a      	lsls	r2, r3, #29
 8013198:	d505      	bpl.n	80131a6 <__sflush_r+0x46>
 801319a:	6863      	ldr	r3, [r4, #4]
 801319c:	1ac0      	subs	r0, r0, r3
 801319e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131a0:	b10b      	cbz	r3, 80131a6 <__sflush_r+0x46>
 80131a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131a4:	1ac0      	subs	r0, r0, r3
 80131a6:	2300      	movs	r3, #0
 80131a8:	4602      	mov	r2, r0
 80131aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131ac:	6a21      	ldr	r1, [r4, #32]
 80131ae:	4628      	mov	r0, r5
 80131b0:	47b0      	blx	r6
 80131b2:	1c43      	adds	r3, r0, #1
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	d106      	bne.n	80131c6 <__sflush_r+0x66>
 80131b8:	6829      	ldr	r1, [r5, #0]
 80131ba:	291d      	cmp	r1, #29
 80131bc:	d82c      	bhi.n	8013218 <__sflush_r+0xb8>
 80131be:	4a2a      	ldr	r2, [pc, #168]	; (8013268 <__sflush_r+0x108>)
 80131c0:	40ca      	lsrs	r2, r1
 80131c2:	07d6      	lsls	r6, r2, #31
 80131c4:	d528      	bpl.n	8013218 <__sflush_r+0xb8>
 80131c6:	2200      	movs	r2, #0
 80131c8:	6062      	str	r2, [r4, #4]
 80131ca:	04d9      	lsls	r1, r3, #19
 80131cc:	6922      	ldr	r2, [r4, #16]
 80131ce:	6022      	str	r2, [r4, #0]
 80131d0:	d504      	bpl.n	80131dc <__sflush_r+0x7c>
 80131d2:	1c42      	adds	r2, r0, #1
 80131d4:	d101      	bne.n	80131da <__sflush_r+0x7a>
 80131d6:	682b      	ldr	r3, [r5, #0]
 80131d8:	b903      	cbnz	r3, 80131dc <__sflush_r+0x7c>
 80131da:	6560      	str	r0, [r4, #84]	; 0x54
 80131dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131de:	602f      	str	r7, [r5, #0]
 80131e0:	2900      	cmp	r1, #0
 80131e2:	d0ca      	beq.n	801317a <__sflush_r+0x1a>
 80131e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131e8:	4299      	cmp	r1, r3
 80131ea:	d002      	beq.n	80131f2 <__sflush_r+0x92>
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7ff fbb5 	bl	801295c <_free_r>
 80131f2:	2000      	movs	r0, #0
 80131f4:	6360      	str	r0, [r4, #52]	; 0x34
 80131f6:	e7c1      	b.n	801317c <__sflush_r+0x1c>
 80131f8:	6a21      	ldr	r1, [r4, #32]
 80131fa:	2301      	movs	r3, #1
 80131fc:	4628      	mov	r0, r5
 80131fe:	47b0      	blx	r6
 8013200:	1c41      	adds	r1, r0, #1
 8013202:	d1c7      	bne.n	8013194 <__sflush_r+0x34>
 8013204:	682b      	ldr	r3, [r5, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d0c4      	beq.n	8013194 <__sflush_r+0x34>
 801320a:	2b1d      	cmp	r3, #29
 801320c:	d001      	beq.n	8013212 <__sflush_r+0xb2>
 801320e:	2b16      	cmp	r3, #22
 8013210:	d101      	bne.n	8013216 <__sflush_r+0xb6>
 8013212:	602f      	str	r7, [r5, #0]
 8013214:	e7b1      	b.n	801317a <__sflush_r+0x1a>
 8013216:	89a3      	ldrh	r3, [r4, #12]
 8013218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801321c:	81a3      	strh	r3, [r4, #12]
 801321e:	e7ad      	b.n	801317c <__sflush_r+0x1c>
 8013220:	690f      	ldr	r7, [r1, #16]
 8013222:	2f00      	cmp	r7, #0
 8013224:	d0a9      	beq.n	801317a <__sflush_r+0x1a>
 8013226:	0793      	lsls	r3, r2, #30
 8013228:	680e      	ldr	r6, [r1, #0]
 801322a:	bf08      	it	eq
 801322c:	694b      	ldreq	r3, [r1, #20]
 801322e:	600f      	str	r7, [r1, #0]
 8013230:	bf18      	it	ne
 8013232:	2300      	movne	r3, #0
 8013234:	eba6 0807 	sub.w	r8, r6, r7
 8013238:	608b      	str	r3, [r1, #8]
 801323a:	f1b8 0f00 	cmp.w	r8, #0
 801323e:	dd9c      	ble.n	801317a <__sflush_r+0x1a>
 8013240:	6a21      	ldr	r1, [r4, #32]
 8013242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013244:	4643      	mov	r3, r8
 8013246:	463a      	mov	r2, r7
 8013248:	4628      	mov	r0, r5
 801324a:	47b0      	blx	r6
 801324c:	2800      	cmp	r0, #0
 801324e:	dc06      	bgt.n	801325e <__sflush_r+0xfe>
 8013250:	89a3      	ldrh	r3, [r4, #12]
 8013252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013256:	81a3      	strh	r3, [r4, #12]
 8013258:	f04f 30ff 	mov.w	r0, #4294967295
 801325c:	e78e      	b.n	801317c <__sflush_r+0x1c>
 801325e:	4407      	add	r7, r0
 8013260:	eba8 0800 	sub.w	r8, r8, r0
 8013264:	e7e9      	b.n	801323a <__sflush_r+0xda>
 8013266:	bf00      	nop
 8013268:	20400001 	.word	0x20400001

0801326c <_fflush_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	690b      	ldr	r3, [r1, #16]
 8013270:	4605      	mov	r5, r0
 8013272:	460c      	mov	r4, r1
 8013274:	b913      	cbnz	r3, 801327c <_fflush_r+0x10>
 8013276:	2500      	movs	r5, #0
 8013278:	4628      	mov	r0, r5
 801327a:	bd38      	pop	{r3, r4, r5, pc}
 801327c:	b118      	cbz	r0, 8013286 <_fflush_r+0x1a>
 801327e:	6983      	ldr	r3, [r0, #24]
 8013280:	b90b      	cbnz	r3, 8013286 <_fflush_r+0x1a>
 8013282:	f000 f887 	bl	8013394 <__sinit>
 8013286:	4b14      	ldr	r3, [pc, #80]	; (80132d8 <_fflush_r+0x6c>)
 8013288:	429c      	cmp	r4, r3
 801328a:	d11b      	bne.n	80132c4 <_fflush_r+0x58>
 801328c:	686c      	ldr	r4, [r5, #4]
 801328e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d0ef      	beq.n	8013276 <_fflush_r+0xa>
 8013296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013298:	07d0      	lsls	r0, r2, #31
 801329a:	d404      	bmi.n	80132a6 <_fflush_r+0x3a>
 801329c:	0599      	lsls	r1, r3, #22
 801329e:	d402      	bmi.n	80132a6 <_fflush_r+0x3a>
 80132a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132a2:	f000 f915 	bl	80134d0 <__retarget_lock_acquire_recursive>
 80132a6:	4628      	mov	r0, r5
 80132a8:	4621      	mov	r1, r4
 80132aa:	f7ff ff59 	bl	8013160 <__sflush_r>
 80132ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132b0:	07da      	lsls	r2, r3, #31
 80132b2:	4605      	mov	r5, r0
 80132b4:	d4e0      	bmi.n	8013278 <_fflush_r+0xc>
 80132b6:	89a3      	ldrh	r3, [r4, #12]
 80132b8:	059b      	lsls	r3, r3, #22
 80132ba:	d4dd      	bmi.n	8013278 <_fflush_r+0xc>
 80132bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132be:	f000 f908 	bl	80134d2 <__retarget_lock_release_recursive>
 80132c2:	e7d9      	b.n	8013278 <_fflush_r+0xc>
 80132c4:	4b05      	ldr	r3, [pc, #20]	; (80132dc <_fflush_r+0x70>)
 80132c6:	429c      	cmp	r4, r3
 80132c8:	d101      	bne.n	80132ce <_fflush_r+0x62>
 80132ca:	68ac      	ldr	r4, [r5, #8]
 80132cc:	e7df      	b.n	801328e <_fflush_r+0x22>
 80132ce:	4b04      	ldr	r3, [pc, #16]	; (80132e0 <_fflush_r+0x74>)
 80132d0:	429c      	cmp	r4, r3
 80132d2:	bf08      	it	eq
 80132d4:	68ec      	ldreq	r4, [r5, #12]
 80132d6:	e7da      	b.n	801328e <_fflush_r+0x22>
 80132d8:	080144b4 	.word	0x080144b4
 80132dc:	080144d4 	.word	0x080144d4
 80132e0:	08014494 	.word	0x08014494

080132e4 <std>:
 80132e4:	2300      	movs	r3, #0
 80132e6:	b510      	push	{r4, lr}
 80132e8:	4604      	mov	r4, r0
 80132ea:	e9c0 3300 	strd	r3, r3, [r0]
 80132ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132f2:	6083      	str	r3, [r0, #8]
 80132f4:	8181      	strh	r1, [r0, #12]
 80132f6:	6643      	str	r3, [r0, #100]	; 0x64
 80132f8:	81c2      	strh	r2, [r0, #14]
 80132fa:	6183      	str	r3, [r0, #24]
 80132fc:	4619      	mov	r1, r3
 80132fe:	2208      	movs	r2, #8
 8013300:	305c      	adds	r0, #92	; 0x5c
 8013302:	f7fd fbdf 	bl	8010ac4 <memset>
 8013306:	4b05      	ldr	r3, [pc, #20]	; (801331c <std+0x38>)
 8013308:	6263      	str	r3, [r4, #36]	; 0x24
 801330a:	4b05      	ldr	r3, [pc, #20]	; (8013320 <std+0x3c>)
 801330c:	62a3      	str	r3, [r4, #40]	; 0x28
 801330e:	4b05      	ldr	r3, [pc, #20]	; (8013324 <std+0x40>)
 8013310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013312:	4b05      	ldr	r3, [pc, #20]	; (8013328 <std+0x44>)
 8013314:	6224      	str	r4, [r4, #32]
 8013316:	6323      	str	r3, [r4, #48]	; 0x30
 8013318:	bd10      	pop	{r4, pc}
 801331a:	bf00      	nop
 801331c:	08013629 	.word	0x08013629
 8013320:	0801364b 	.word	0x0801364b
 8013324:	08013683 	.word	0x08013683
 8013328:	080136a7 	.word	0x080136a7

0801332c <_cleanup_r>:
 801332c:	4901      	ldr	r1, [pc, #4]	; (8013334 <_cleanup_r+0x8>)
 801332e:	f000 b8af 	b.w	8013490 <_fwalk_reent>
 8013332:	bf00      	nop
 8013334:	0801326d 	.word	0x0801326d

08013338 <__sfmoreglue>:
 8013338:	b570      	push	{r4, r5, r6, lr}
 801333a:	2268      	movs	r2, #104	; 0x68
 801333c:	1e4d      	subs	r5, r1, #1
 801333e:	4355      	muls	r5, r2
 8013340:	460e      	mov	r6, r1
 8013342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013346:	f7ff fa17 	bl	8012778 <_malloc_r>
 801334a:	4604      	mov	r4, r0
 801334c:	b140      	cbz	r0, 8013360 <__sfmoreglue+0x28>
 801334e:	2100      	movs	r1, #0
 8013350:	e9c0 1600 	strd	r1, r6, [r0]
 8013354:	300c      	adds	r0, #12
 8013356:	60a0      	str	r0, [r4, #8]
 8013358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801335c:	f7fd fbb2 	bl	8010ac4 <memset>
 8013360:	4620      	mov	r0, r4
 8013362:	bd70      	pop	{r4, r5, r6, pc}

08013364 <__sfp_lock_acquire>:
 8013364:	4801      	ldr	r0, [pc, #4]	; (801336c <__sfp_lock_acquire+0x8>)
 8013366:	f000 b8b3 	b.w	80134d0 <__retarget_lock_acquire_recursive>
 801336a:	bf00      	nop
 801336c:	24000d45 	.word	0x24000d45

08013370 <__sfp_lock_release>:
 8013370:	4801      	ldr	r0, [pc, #4]	; (8013378 <__sfp_lock_release+0x8>)
 8013372:	f000 b8ae 	b.w	80134d2 <__retarget_lock_release_recursive>
 8013376:	bf00      	nop
 8013378:	24000d45 	.word	0x24000d45

0801337c <__sinit_lock_acquire>:
 801337c:	4801      	ldr	r0, [pc, #4]	; (8013384 <__sinit_lock_acquire+0x8>)
 801337e:	f000 b8a7 	b.w	80134d0 <__retarget_lock_acquire_recursive>
 8013382:	bf00      	nop
 8013384:	24000d46 	.word	0x24000d46

08013388 <__sinit_lock_release>:
 8013388:	4801      	ldr	r0, [pc, #4]	; (8013390 <__sinit_lock_release+0x8>)
 801338a:	f000 b8a2 	b.w	80134d2 <__retarget_lock_release_recursive>
 801338e:	bf00      	nop
 8013390:	24000d46 	.word	0x24000d46

08013394 <__sinit>:
 8013394:	b510      	push	{r4, lr}
 8013396:	4604      	mov	r4, r0
 8013398:	f7ff fff0 	bl	801337c <__sinit_lock_acquire>
 801339c:	69a3      	ldr	r3, [r4, #24]
 801339e:	b11b      	cbz	r3, 80133a8 <__sinit+0x14>
 80133a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a4:	f7ff bff0 	b.w	8013388 <__sinit_lock_release>
 80133a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80133ac:	6523      	str	r3, [r4, #80]	; 0x50
 80133ae:	4b13      	ldr	r3, [pc, #76]	; (80133fc <__sinit+0x68>)
 80133b0:	4a13      	ldr	r2, [pc, #76]	; (8013400 <__sinit+0x6c>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80133b6:	42a3      	cmp	r3, r4
 80133b8:	bf04      	itt	eq
 80133ba:	2301      	moveq	r3, #1
 80133bc:	61a3      	streq	r3, [r4, #24]
 80133be:	4620      	mov	r0, r4
 80133c0:	f000 f820 	bl	8013404 <__sfp>
 80133c4:	6060      	str	r0, [r4, #4]
 80133c6:	4620      	mov	r0, r4
 80133c8:	f000 f81c 	bl	8013404 <__sfp>
 80133cc:	60a0      	str	r0, [r4, #8]
 80133ce:	4620      	mov	r0, r4
 80133d0:	f000 f818 	bl	8013404 <__sfp>
 80133d4:	2200      	movs	r2, #0
 80133d6:	60e0      	str	r0, [r4, #12]
 80133d8:	2104      	movs	r1, #4
 80133da:	6860      	ldr	r0, [r4, #4]
 80133dc:	f7ff ff82 	bl	80132e4 <std>
 80133e0:	68a0      	ldr	r0, [r4, #8]
 80133e2:	2201      	movs	r2, #1
 80133e4:	2109      	movs	r1, #9
 80133e6:	f7ff ff7d 	bl	80132e4 <std>
 80133ea:	68e0      	ldr	r0, [r4, #12]
 80133ec:	2202      	movs	r2, #2
 80133ee:	2112      	movs	r1, #18
 80133f0:	f7ff ff78 	bl	80132e4 <std>
 80133f4:	2301      	movs	r3, #1
 80133f6:	61a3      	str	r3, [r4, #24]
 80133f8:	e7d2      	b.n	80133a0 <__sinit+0xc>
 80133fa:	bf00      	nop
 80133fc:	080140c8 	.word	0x080140c8
 8013400:	0801332d 	.word	0x0801332d

08013404 <__sfp>:
 8013404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013406:	4607      	mov	r7, r0
 8013408:	f7ff ffac 	bl	8013364 <__sfp_lock_acquire>
 801340c:	4b1e      	ldr	r3, [pc, #120]	; (8013488 <__sfp+0x84>)
 801340e:	681e      	ldr	r6, [r3, #0]
 8013410:	69b3      	ldr	r3, [r6, #24]
 8013412:	b913      	cbnz	r3, 801341a <__sfp+0x16>
 8013414:	4630      	mov	r0, r6
 8013416:	f7ff ffbd 	bl	8013394 <__sinit>
 801341a:	3648      	adds	r6, #72	; 0x48
 801341c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013420:	3b01      	subs	r3, #1
 8013422:	d503      	bpl.n	801342c <__sfp+0x28>
 8013424:	6833      	ldr	r3, [r6, #0]
 8013426:	b30b      	cbz	r3, 801346c <__sfp+0x68>
 8013428:	6836      	ldr	r6, [r6, #0]
 801342a:	e7f7      	b.n	801341c <__sfp+0x18>
 801342c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013430:	b9d5      	cbnz	r5, 8013468 <__sfp+0x64>
 8013432:	4b16      	ldr	r3, [pc, #88]	; (801348c <__sfp+0x88>)
 8013434:	60e3      	str	r3, [r4, #12]
 8013436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801343a:	6665      	str	r5, [r4, #100]	; 0x64
 801343c:	f000 f847 	bl	80134ce <__retarget_lock_init_recursive>
 8013440:	f7ff ff96 	bl	8013370 <__sfp_lock_release>
 8013444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801344c:	6025      	str	r5, [r4, #0]
 801344e:	61a5      	str	r5, [r4, #24]
 8013450:	2208      	movs	r2, #8
 8013452:	4629      	mov	r1, r5
 8013454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013458:	f7fd fb34 	bl	8010ac4 <memset>
 801345c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013464:	4620      	mov	r0, r4
 8013466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013468:	3468      	adds	r4, #104	; 0x68
 801346a:	e7d9      	b.n	8013420 <__sfp+0x1c>
 801346c:	2104      	movs	r1, #4
 801346e:	4638      	mov	r0, r7
 8013470:	f7ff ff62 	bl	8013338 <__sfmoreglue>
 8013474:	4604      	mov	r4, r0
 8013476:	6030      	str	r0, [r6, #0]
 8013478:	2800      	cmp	r0, #0
 801347a:	d1d5      	bne.n	8013428 <__sfp+0x24>
 801347c:	f7ff ff78 	bl	8013370 <__sfp_lock_release>
 8013480:	230c      	movs	r3, #12
 8013482:	603b      	str	r3, [r7, #0]
 8013484:	e7ee      	b.n	8013464 <__sfp+0x60>
 8013486:	bf00      	nop
 8013488:	080140c8 	.word	0x080140c8
 801348c:	ffff0001 	.word	0xffff0001

08013490 <_fwalk_reent>:
 8013490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013494:	4606      	mov	r6, r0
 8013496:	4688      	mov	r8, r1
 8013498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801349c:	2700      	movs	r7, #0
 801349e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134a2:	f1b9 0901 	subs.w	r9, r9, #1
 80134a6:	d505      	bpl.n	80134b4 <_fwalk_reent+0x24>
 80134a8:	6824      	ldr	r4, [r4, #0]
 80134aa:	2c00      	cmp	r4, #0
 80134ac:	d1f7      	bne.n	801349e <_fwalk_reent+0xe>
 80134ae:	4638      	mov	r0, r7
 80134b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b4:	89ab      	ldrh	r3, [r5, #12]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d907      	bls.n	80134ca <_fwalk_reent+0x3a>
 80134ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134be:	3301      	adds	r3, #1
 80134c0:	d003      	beq.n	80134ca <_fwalk_reent+0x3a>
 80134c2:	4629      	mov	r1, r5
 80134c4:	4630      	mov	r0, r6
 80134c6:	47c0      	blx	r8
 80134c8:	4307      	orrs	r7, r0
 80134ca:	3568      	adds	r5, #104	; 0x68
 80134cc:	e7e9      	b.n	80134a2 <_fwalk_reent+0x12>

080134ce <__retarget_lock_init_recursive>:
 80134ce:	4770      	bx	lr

080134d0 <__retarget_lock_acquire_recursive>:
 80134d0:	4770      	bx	lr

080134d2 <__retarget_lock_release_recursive>:
 80134d2:	4770      	bx	lr

080134d4 <__swhatbuf_r>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	460e      	mov	r6, r1
 80134d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134dc:	2900      	cmp	r1, #0
 80134de:	b096      	sub	sp, #88	; 0x58
 80134e0:	4614      	mov	r4, r2
 80134e2:	461d      	mov	r5, r3
 80134e4:	da08      	bge.n	80134f8 <__swhatbuf_r+0x24>
 80134e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	602a      	str	r2, [r5, #0]
 80134ee:	061a      	lsls	r2, r3, #24
 80134f0:	d410      	bmi.n	8013514 <__swhatbuf_r+0x40>
 80134f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134f6:	e00e      	b.n	8013516 <__swhatbuf_r+0x42>
 80134f8:	466a      	mov	r2, sp
 80134fa:	f000 f8fb 	bl	80136f4 <_fstat_r>
 80134fe:	2800      	cmp	r0, #0
 8013500:	dbf1      	blt.n	80134e6 <__swhatbuf_r+0x12>
 8013502:	9a01      	ldr	r2, [sp, #4]
 8013504:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013508:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801350c:	425a      	negs	r2, r3
 801350e:	415a      	adcs	r2, r3
 8013510:	602a      	str	r2, [r5, #0]
 8013512:	e7ee      	b.n	80134f2 <__swhatbuf_r+0x1e>
 8013514:	2340      	movs	r3, #64	; 0x40
 8013516:	2000      	movs	r0, #0
 8013518:	6023      	str	r3, [r4, #0]
 801351a:	b016      	add	sp, #88	; 0x58
 801351c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013520 <__smakebuf_r>:
 8013520:	898b      	ldrh	r3, [r1, #12]
 8013522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013524:	079d      	lsls	r5, r3, #30
 8013526:	4606      	mov	r6, r0
 8013528:	460c      	mov	r4, r1
 801352a:	d507      	bpl.n	801353c <__smakebuf_r+0x1c>
 801352c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013530:	6023      	str	r3, [r4, #0]
 8013532:	6123      	str	r3, [r4, #16]
 8013534:	2301      	movs	r3, #1
 8013536:	6163      	str	r3, [r4, #20]
 8013538:	b002      	add	sp, #8
 801353a:	bd70      	pop	{r4, r5, r6, pc}
 801353c:	ab01      	add	r3, sp, #4
 801353e:	466a      	mov	r2, sp
 8013540:	f7ff ffc8 	bl	80134d4 <__swhatbuf_r>
 8013544:	9900      	ldr	r1, [sp, #0]
 8013546:	4605      	mov	r5, r0
 8013548:	4630      	mov	r0, r6
 801354a:	f7ff f915 	bl	8012778 <_malloc_r>
 801354e:	b948      	cbnz	r0, 8013564 <__smakebuf_r+0x44>
 8013550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013554:	059a      	lsls	r2, r3, #22
 8013556:	d4ef      	bmi.n	8013538 <__smakebuf_r+0x18>
 8013558:	f023 0303 	bic.w	r3, r3, #3
 801355c:	f043 0302 	orr.w	r3, r3, #2
 8013560:	81a3      	strh	r3, [r4, #12]
 8013562:	e7e3      	b.n	801352c <__smakebuf_r+0xc>
 8013564:	4b0d      	ldr	r3, [pc, #52]	; (801359c <__smakebuf_r+0x7c>)
 8013566:	62b3      	str	r3, [r6, #40]	; 0x28
 8013568:	89a3      	ldrh	r3, [r4, #12]
 801356a:	6020      	str	r0, [r4, #0]
 801356c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013570:	81a3      	strh	r3, [r4, #12]
 8013572:	9b00      	ldr	r3, [sp, #0]
 8013574:	6163      	str	r3, [r4, #20]
 8013576:	9b01      	ldr	r3, [sp, #4]
 8013578:	6120      	str	r0, [r4, #16]
 801357a:	b15b      	cbz	r3, 8013594 <__smakebuf_r+0x74>
 801357c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013580:	4630      	mov	r0, r6
 8013582:	f000 f8c9 	bl	8013718 <_isatty_r>
 8013586:	b128      	cbz	r0, 8013594 <__smakebuf_r+0x74>
 8013588:	89a3      	ldrh	r3, [r4, #12]
 801358a:	f023 0303 	bic.w	r3, r3, #3
 801358e:	f043 0301 	orr.w	r3, r3, #1
 8013592:	81a3      	strh	r3, [r4, #12]
 8013594:	89a0      	ldrh	r0, [r4, #12]
 8013596:	4305      	orrs	r5, r0
 8013598:	81a5      	strh	r5, [r4, #12]
 801359a:	e7cd      	b.n	8013538 <__smakebuf_r+0x18>
 801359c:	0801332d 	.word	0x0801332d

080135a0 <_raise_r>:
 80135a0:	291f      	cmp	r1, #31
 80135a2:	b538      	push	{r3, r4, r5, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	460d      	mov	r5, r1
 80135a8:	d904      	bls.n	80135b4 <_raise_r+0x14>
 80135aa:	2316      	movs	r3, #22
 80135ac:	6003      	str	r3, [r0, #0]
 80135ae:	f04f 30ff 	mov.w	r0, #4294967295
 80135b2:	bd38      	pop	{r3, r4, r5, pc}
 80135b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135b6:	b112      	cbz	r2, 80135be <_raise_r+0x1e>
 80135b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135bc:	b94b      	cbnz	r3, 80135d2 <_raise_r+0x32>
 80135be:	4620      	mov	r0, r4
 80135c0:	f000 f830 	bl	8013624 <_getpid_r>
 80135c4:	462a      	mov	r2, r5
 80135c6:	4601      	mov	r1, r0
 80135c8:	4620      	mov	r0, r4
 80135ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ce:	f000 b817 	b.w	8013600 <_kill_r>
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d00a      	beq.n	80135ec <_raise_r+0x4c>
 80135d6:	1c59      	adds	r1, r3, #1
 80135d8:	d103      	bne.n	80135e2 <_raise_r+0x42>
 80135da:	2316      	movs	r3, #22
 80135dc:	6003      	str	r3, [r0, #0]
 80135de:	2001      	movs	r0, #1
 80135e0:	e7e7      	b.n	80135b2 <_raise_r+0x12>
 80135e2:	2400      	movs	r4, #0
 80135e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80135e8:	4628      	mov	r0, r5
 80135ea:	4798      	blx	r3
 80135ec:	2000      	movs	r0, #0
 80135ee:	e7e0      	b.n	80135b2 <_raise_r+0x12>

080135f0 <raise>:
 80135f0:	4b02      	ldr	r3, [pc, #8]	; (80135fc <raise+0xc>)
 80135f2:	4601      	mov	r1, r0
 80135f4:	6818      	ldr	r0, [r3, #0]
 80135f6:	f7ff bfd3 	b.w	80135a0 <_raise_r>
 80135fa:	bf00      	nop
 80135fc:	240000f8 	.word	0x240000f8

08013600 <_kill_r>:
 8013600:	b538      	push	{r3, r4, r5, lr}
 8013602:	4d07      	ldr	r5, [pc, #28]	; (8013620 <_kill_r+0x20>)
 8013604:	2300      	movs	r3, #0
 8013606:	4604      	mov	r4, r0
 8013608:	4608      	mov	r0, r1
 801360a:	4611      	mov	r1, r2
 801360c:	602b      	str	r3, [r5, #0]
 801360e:	f7f0 fb19 	bl	8003c44 <_kill>
 8013612:	1c43      	adds	r3, r0, #1
 8013614:	d102      	bne.n	801361c <_kill_r+0x1c>
 8013616:	682b      	ldr	r3, [r5, #0]
 8013618:	b103      	cbz	r3, 801361c <_kill_r+0x1c>
 801361a:	6023      	str	r3, [r4, #0]
 801361c:	bd38      	pop	{r3, r4, r5, pc}
 801361e:	bf00      	nop
 8013620:	24000d40 	.word	0x24000d40

08013624 <_getpid_r>:
 8013624:	f7f0 bb06 	b.w	8003c34 <_getpid>

08013628 <__sread>:
 8013628:	b510      	push	{r4, lr}
 801362a:	460c      	mov	r4, r1
 801362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013630:	f000 f894 	bl	801375c <_read_r>
 8013634:	2800      	cmp	r0, #0
 8013636:	bfab      	itete	ge
 8013638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801363a:	89a3      	ldrhlt	r3, [r4, #12]
 801363c:	181b      	addge	r3, r3, r0
 801363e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013642:	bfac      	ite	ge
 8013644:	6563      	strge	r3, [r4, #84]	; 0x54
 8013646:	81a3      	strhlt	r3, [r4, #12]
 8013648:	bd10      	pop	{r4, pc}

0801364a <__swrite>:
 801364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364e:	461f      	mov	r7, r3
 8013650:	898b      	ldrh	r3, [r1, #12]
 8013652:	05db      	lsls	r3, r3, #23
 8013654:	4605      	mov	r5, r0
 8013656:	460c      	mov	r4, r1
 8013658:	4616      	mov	r6, r2
 801365a:	d505      	bpl.n	8013668 <__swrite+0x1e>
 801365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013660:	2302      	movs	r3, #2
 8013662:	2200      	movs	r2, #0
 8013664:	f000 f868 	bl	8013738 <_lseek_r>
 8013668:	89a3      	ldrh	r3, [r4, #12]
 801366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801366e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013672:	81a3      	strh	r3, [r4, #12]
 8013674:	4632      	mov	r2, r6
 8013676:	463b      	mov	r3, r7
 8013678:	4628      	mov	r0, r5
 801367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367e:	f000 b817 	b.w	80136b0 <_write_r>

08013682 <__sseek>:
 8013682:	b510      	push	{r4, lr}
 8013684:	460c      	mov	r4, r1
 8013686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801368a:	f000 f855 	bl	8013738 <_lseek_r>
 801368e:	1c43      	adds	r3, r0, #1
 8013690:	89a3      	ldrh	r3, [r4, #12]
 8013692:	bf15      	itete	ne
 8013694:	6560      	strne	r0, [r4, #84]	; 0x54
 8013696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801369a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801369e:	81a3      	strheq	r3, [r4, #12]
 80136a0:	bf18      	it	ne
 80136a2:	81a3      	strhne	r3, [r4, #12]
 80136a4:	bd10      	pop	{r4, pc}

080136a6 <__sclose>:
 80136a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136aa:	f000 b813 	b.w	80136d4 <_close_r>
	...

080136b0 <_write_r>:
 80136b0:	b538      	push	{r3, r4, r5, lr}
 80136b2:	4d07      	ldr	r5, [pc, #28]	; (80136d0 <_write_r+0x20>)
 80136b4:	4604      	mov	r4, r0
 80136b6:	4608      	mov	r0, r1
 80136b8:	4611      	mov	r1, r2
 80136ba:	2200      	movs	r2, #0
 80136bc:	602a      	str	r2, [r5, #0]
 80136be:	461a      	mov	r2, r3
 80136c0:	f7f0 faf7 	bl	8003cb2 <_write>
 80136c4:	1c43      	adds	r3, r0, #1
 80136c6:	d102      	bne.n	80136ce <_write_r+0x1e>
 80136c8:	682b      	ldr	r3, [r5, #0]
 80136ca:	b103      	cbz	r3, 80136ce <_write_r+0x1e>
 80136cc:	6023      	str	r3, [r4, #0]
 80136ce:	bd38      	pop	{r3, r4, r5, pc}
 80136d0:	24000d40 	.word	0x24000d40

080136d4 <_close_r>:
 80136d4:	b538      	push	{r3, r4, r5, lr}
 80136d6:	4d06      	ldr	r5, [pc, #24]	; (80136f0 <_close_r+0x1c>)
 80136d8:	2300      	movs	r3, #0
 80136da:	4604      	mov	r4, r0
 80136dc:	4608      	mov	r0, r1
 80136de:	602b      	str	r3, [r5, #0]
 80136e0:	f7f0 fb03 	bl	8003cea <_close>
 80136e4:	1c43      	adds	r3, r0, #1
 80136e6:	d102      	bne.n	80136ee <_close_r+0x1a>
 80136e8:	682b      	ldr	r3, [r5, #0]
 80136ea:	b103      	cbz	r3, 80136ee <_close_r+0x1a>
 80136ec:	6023      	str	r3, [r4, #0]
 80136ee:	bd38      	pop	{r3, r4, r5, pc}
 80136f0:	24000d40 	.word	0x24000d40

080136f4 <_fstat_r>:
 80136f4:	b538      	push	{r3, r4, r5, lr}
 80136f6:	4d07      	ldr	r5, [pc, #28]	; (8013714 <_fstat_r+0x20>)
 80136f8:	2300      	movs	r3, #0
 80136fa:	4604      	mov	r4, r0
 80136fc:	4608      	mov	r0, r1
 80136fe:	4611      	mov	r1, r2
 8013700:	602b      	str	r3, [r5, #0]
 8013702:	f7f0 fafe 	bl	8003d02 <_fstat>
 8013706:	1c43      	adds	r3, r0, #1
 8013708:	d102      	bne.n	8013710 <_fstat_r+0x1c>
 801370a:	682b      	ldr	r3, [r5, #0]
 801370c:	b103      	cbz	r3, 8013710 <_fstat_r+0x1c>
 801370e:	6023      	str	r3, [r4, #0]
 8013710:	bd38      	pop	{r3, r4, r5, pc}
 8013712:	bf00      	nop
 8013714:	24000d40 	.word	0x24000d40

08013718 <_isatty_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4d06      	ldr	r5, [pc, #24]	; (8013734 <_isatty_r+0x1c>)
 801371c:	2300      	movs	r3, #0
 801371e:	4604      	mov	r4, r0
 8013720:	4608      	mov	r0, r1
 8013722:	602b      	str	r3, [r5, #0]
 8013724:	f7f0 fafd 	bl	8003d22 <_isatty>
 8013728:	1c43      	adds	r3, r0, #1
 801372a:	d102      	bne.n	8013732 <_isatty_r+0x1a>
 801372c:	682b      	ldr	r3, [r5, #0]
 801372e:	b103      	cbz	r3, 8013732 <_isatty_r+0x1a>
 8013730:	6023      	str	r3, [r4, #0]
 8013732:	bd38      	pop	{r3, r4, r5, pc}
 8013734:	24000d40 	.word	0x24000d40

08013738 <_lseek_r>:
 8013738:	b538      	push	{r3, r4, r5, lr}
 801373a:	4d07      	ldr	r5, [pc, #28]	; (8013758 <_lseek_r+0x20>)
 801373c:	4604      	mov	r4, r0
 801373e:	4608      	mov	r0, r1
 8013740:	4611      	mov	r1, r2
 8013742:	2200      	movs	r2, #0
 8013744:	602a      	str	r2, [r5, #0]
 8013746:	461a      	mov	r2, r3
 8013748:	f7f0 faf6 	bl	8003d38 <_lseek>
 801374c:	1c43      	adds	r3, r0, #1
 801374e:	d102      	bne.n	8013756 <_lseek_r+0x1e>
 8013750:	682b      	ldr	r3, [r5, #0]
 8013752:	b103      	cbz	r3, 8013756 <_lseek_r+0x1e>
 8013754:	6023      	str	r3, [r4, #0]
 8013756:	bd38      	pop	{r3, r4, r5, pc}
 8013758:	24000d40 	.word	0x24000d40

0801375c <_read_r>:
 801375c:	b538      	push	{r3, r4, r5, lr}
 801375e:	4d07      	ldr	r5, [pc, #28]	; (801377c <_read_r+0x20>)
 8013760:	4604      	mov	r4, r0
 8013762:	4608      	mov	r0, r1
 8013764:	4611      	mov	r1, r2
 8013766:	2200      	movs	r2, #0
 8013768:	602a      	str	r2, [r5, #0]
 801376a:	461a      	mov	r2, r3
 801376c:	f7f0 fa84 	bl	8003c78 <_read>
 8013770:	1c43      	adds	r3, r0, #1
 8013772:	d102      	bne.n	801377a <_read_r+0x1e>
 8013774:	682b      	ldr	r3, [r5, #0]
 8013776:	b103      	cbz	r3, 801377a <_read_r+0x1e>
 8013778:	6023      	str	r3, [r4, #0]
 801377a:	bd38      	pop	{r3, r4, r5, pc}
 801377c:	24000d40 	.word	0x24000d40

08013780 <checkint>:
 8013780:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013784:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8013788:	429a      	cmp	r2, r3
 801378a:	b570      	push	{r4, r5, r6, lr}
 801378c:	dd2a      	ble.n	80137e4 <checkint+0x64>
 801378e:	f240 4333 	movw	r3, #1075	; 0x433
 8013792:	429a      	cmp	r2, r3
 8013794:	dc24      	bgt.n	80137e0 <checkint+0x60>
 8013796:	1a9b      	subs	r3, r3, r2
 8013798:	f1a3 0620 	sub.w	r6, r3, #32
 801379c:	f04f 32ff 	mov.w	r2, #4294967295
 80137a0:	fa02 f403 	lsl.w	r4, r2, r3
 80137a4:	fa02 f606 	lsl.w	r6, r2, r6
 80137a8:	f1c3 0520 	rsb	r5, r3, #32
 80137ac:	fa22 f505 	lsr.w	r5, r2, r5
 80137b0:	4334      	orrs	r4, r6
 80137b2:	432c      	orrs	r4, r5
 80137b4:	409a      	lsls	r2, r3
 80137b6:	ea20 0202 	bic.w	r2, r0, r2
 80137ba:	ea21 0404 	bic.w	r4, r1, r4
 80137be:	4322      	orrs	r2, r4
 80137c0:	f1a3 0420 	sub.w	r4, r3, #32
 80137c4:	f1c3 0220 	rsb	r2, r3, #32
 80137c8:	d10c      	bne.n	80137e4 <checkint+0x64>
 80137ca:	40d8      	lsrs	r0, r3
 80137cc:	fa01 f302 	lsl.w	r3, r1, r2
 80137d0:	4318      	orrs	r0, r3
 80137d2:	40e1      	lsrs	r1, r4
 80137d4:	4308      	orrs	r0, r1
 80137d6:	f000 0001 	and.w	r0, r0, #1
 80137da:	f1d0 0002 	rsbs	r0, r0, #2
 80137de:	bd70      	pop	{r4, r5, r6, pc}
 80137e0:	2002      	movs	r0, #2
 80137e2:	e7fc      	b.n	80137de <checkint+0x5e>
 80137e4:	2000      	movs	r0, #0
 80137e6:	e7fa      	b.n	80137de <checkint+0x5e>

080137e8 <pow>:
 80137e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	ee10 4a90 	vmov	r4, s1
 80137f0:	ed2d 8b0a 	vpush	{d8-d12}
 80137f4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80137f8:	ee11 7a90 	vmov	r7, s3
 80137fc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8013800:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8013804:	429a      	cmp	r2, r3
 8013806:	ee10 6a10 	vmov	r6, s0
 801380a:	ee11 0a10 	vmov	r0, s2
 801380e:	b086      	sub	sp, #24
 8013810:	46d4      	mov	ip, sl
 8013812:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8013816:	d806      	bhi.n	8013826 <pow+0x3e>
 8013818:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801381c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8013820:	2b7f      	cmp	r3, #127	; 0x7f
 8013822:	f240 8156 	bls.w	8013ad2 <pow+0x2ea>
 8013826:	1802      	adds	r2, r0, r0
 8013828:	eb47 0107 	adc.w	r1, r7, r7
 801382c:	f06f 0e01 	mvn.w	lr, #1
 8013830:	f112 39ff 	adds.w	r9, r2, #4294967295
 8013834:	f141 38ff 	adc.w	r8, r1, #4294967295
 8013838:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801383c:	45ce      	cmp	lr, r9
 801383e:	eb73 0808 	sbcs.w	r8, r3, r8
 8013842:	d23f      	bcs.n	80138c4 <pow+0xdc>
 8013844:	ea52 0301 	orrs.w	r3, r2, r1
 8013848:	f04f 0300 	mov.w	r3, #0
 801384c:	d10c      	bne.n	8013868 <pow+0x80>
 801384e:	19b6      	adds	r6, r6, r6
 8013850:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8013854:	4164      	adcs	r4, r4
 8013856:	42b3      	cmp	r3, r6
 8013858:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801385c:	41a3      	sbcs	r3, r4
 801385e:	f0c0 808c 	bcc.w	801397a <pow+0x192>
 8013862:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013866:	e028      	b.n	80138ba <pow+0xd2>
 8013868:	4da3      	ldr	r5, [pc, #652]	; (8013af8 <pow+0x310>)
 801386a:	42ac      	cmp	r4, r5
 801386c:	bf08      	it	eq
 801386e:	429e      	cmpeq	r6, r3
 8013870:	d107      	bne.n	8013882 <pow+0x9a>
 8013872:	1800      	adds	r0, r0, r0
 8013874:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8013878:	417f      	adcs	r7, r7
 801387a:	4283      	cmp	r3, r0
 801387c:	4b9f      	ldr	r3, [pc, #636]	; (8013afc <pow+0x314>)
 801387e:	41bb      	sbcs	r3, r7
 8013880:	e7ed      	b.n	801385e <pow+0x76>
 8013882:	19b6      	adds	r6, r6, r6
 8013884:	489e      	ldr	r0, [pc, #632]	; (8013b00 <pow+0x318>)
 8013886:	4164      	adcs	r4, r4
 8013888:	42b3      	cmp	r3, r6
 801388a:	eb70 0504 	sbcs.w	r5, r0, r4
 801388e:	d374      	bcc.n	801397a <pow+0x192>
 8013890:	4281      	cmp	r1, r0
 8013892:	bf08      	it	eq
 8013894:	429a      	cmpeq	r2, r3
 8013896:	d170      	bne.n	801397a <pow+0x192>
 8013898:	4a9a      	ldr	r2, [pc, #616]	; (8013b04 <pow+0x31c>)
 801389a:	4294      	cmp	r4, r2
 801389c:	bf08      	it	eq
 801389e:	429e      	cmpeq	r6, r3
 80138a0:	d0df      	beq.n	8013862 <pow+0x7a>
 80138a2:	4294      	cmp	r4, r2
 80138a4:	ea6f 0707 	mvn.w	r7, r7
 80138a8:	bf34      	ite	cc
 80138aa:	2400      	movcc	r4, #0
 80138ac:	2401      	movcs	r4, #1
 80138ae:	0fff      	lsrs	r7, r7, #31
 80138b0:	42bc      	cmp	r4, r7
 80138b2:	f040 81d9 	bne.w	8013c68 <pow+0x480>
 80138b6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80138ba:	b006      	add	sp, #24
 80138bc:	ecbd 8b0a 	vpop	{d8-d12}
 80138c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c4:	eb16 0806 	adds.w	r8, r6, r6
 80138c8:	eb44 0904 	adc.w	r9, r4, r4
 80138cc:	f118 31ff 	adds.w	r1, r8, #4294967295
 80138d0:	f169 0200 	sbc.w	r2, r9, #0
 80138d4:	458e      	cmp	lr, r1
 80138d6:	4193      	sbcs	r3, r2
 80138d8:	d223      	bcs.n	8013922 <pow+0x13a>
 80138da:	ee20 0b00 	vmul.f64	d0, d0, d0
 80138de:	2c00      	cmp	r4, #0
 80138e0:	da12      	bge.n	8013908 <pow+0x120>
 80138e2:	4639      	mov	r1, r7
 80138e4:	f7ff ff4c 	bl	8013780 <checkint>
 80138e8:	2801      	cmp	r0, #1
 80138ea:	d10d      	bne.n	8013908 <pow+0x120>
 80138ec:	eeb1 0b40 	vneg.f64	d0, d0
 80138f0:	ea58 0309 	orrs.w	r3, r8, r9
 80138f4:	d10a      	bne.n	801390c <pow+0x124>
 80138f6:	2f00      	cmp	r7, #0
 80138f8:	dadf      	bge.n	80138ba <pow+0xd2>
 80138fa:	b006      	add	sp, #24
 80138fc:	ecbd 8b0a 	vpop	{d8-d12}
 8013900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013904:	f000 bb50 	b.w	8013fa8 <__math_divzero>
 8013908:	2000      	movs	r0, #0
 801390a:	e7f1      	b.n	80138f0 <pow+0x108>
 801390c:	2f00      	cmp	r7, #0
 801390e:	dad4      	bge.n	80138ba <pow+0xd2>
 8013910:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013914:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013918:	ed8d 7b00 	vstr	d7, [sp]
 801391c:	ed9d 0b00 	vldr	d0, [sp]
 8013920:	e7cb      	b.n	80138ba <pow+0xd2>
 8013922:	2c00      	cmp	r4, #0
 8013924:	da2c      	bge.n	8013980 <pow+0x198>
 8013926:	4639      	mov	r1, r7
 8013928:	f7ff ff2a 	bl	8013780 <checkint>
 801392c:	b930      	cbnz	r0, 801393c <pow+0x154>
 801392e:	b006      	add	sp, #24
 8013930:	ecbd 8b0a 	vpop	{d8-d12}
 8013934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013938:	f000 bb4e 	b.w	8013fd8 <__math_invalid>
 801393c:	2801      	cmp	r0, #1
 801393e:	bf14      	ite	ne
 8013940:	2000      	movne	r0, #0
 8013942:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8013946:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801394a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801394e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8013952:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8013956:	2b7f      	cmp	r3, #127	; 0x7f
 8013958:	d92d      	bls.n	80139b6 <pow+0x1ce>
 801395a:	4b67      	ldr	r3, [pc, #412]	; (8013af8 <pow+0x310>)
 801395c:	2000      	movs	r0, #0
 801395e:	429c      	cmp	r4, r3
 8013960:	bf08      	it	eq
 8013962:	4286      	cmpeq	r6, r0
 8013964:	f43f af7d 	beq.w	8013862 <pow+0x7a>
 8013968:	f240 31bd 	movw	r1, #957	; 0x3bd
 801396c:	428a      	cmp	r2, r1
 801396e:	d80c      	bhi.n	801398a <pow+0x1a2>
 8013970:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013974:	42b0      	cmp	r0, r6
 8013976:	41a3      	sbcs	r3, r4
 8013978:	d204      	bcs.n	8013984 <pow+0x19c>
 801397a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801397e:	e79c      	b.n	80138ba <pow+0xd2>
 8013980:	2000      	movs	r0, #0
 8013982:	e7e4      	b.n	801394e <pow+0x166>
 8013984:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013988:	e797      	b.n	80138ba <pow+0xd2>
 801398a:	2e01      	cmp	r6, #1
 801398c:	eb74 0303 	sbcs.w	r3, r4, r3
 8013990:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013994:	bf34      	ite	cc
 8013996:	2301      	movcc	r3, #1
 8013998:	2300      	movcs	r3, #0
 801399a:	4295      	cmp	r5, r2
 801399c:	bf8c      	ite	hi
 801399e:	2500      	movhi	r5, #0
 80139a0:	2501      	movls	r5, #1
 80139a2:	42ab      	cmp	r3, r5
 80139a4:	f000 809d 	beq.w	8013ae2 <pow+0x2fa>
 80139a8:	b006      	add	sp, #24
 80139aa:	ecbd 8b0a 	vpop	{d8-d12}
 80139ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b2:	f000 baf1 	b.w	8013f98 <__math_oflow>
 80139b6:	f1bc 0f00 	cmp.w	ip, #0
 80139ba:	d10b      	bne.n	80139d4 <pow+0x1ec>
 80139bc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8013af0 <pow+0x308>
 80139c0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80139c4:	ec53 2b17 	vmov	r2, r3, d7
 80139c8:	ee17 6a10 	vmov	r6, s14
 80139cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80139d0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80139d4:	4b4c      	ldr	r3, [pc, #304]	; (8013b08 <pow+0x320>)
 80139d6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80139da:	4423      	add	r3, r4
 80139dc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80139e0:	1519      	asrs	r1, r3, #20
 80139e2:	0d1b      	lsrs	r3, r3, #20
 80139e4:	051b      	lsls	r3, r3, #20
 80139e6:	eba4 0903 	sub.w	r9, r4, r3
 80139ea:	4b48      	ldr	r3, [pc, #288]	; (8013b0c <pow+0x324>)
 80139ec:	ee04 1a10 	vmov	s8, r1
 80139f0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80139f4:	f1b6 0800 	subs.w	r8, r6, #0
 80139f8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80139fc:	ec49 8b15 	vmov	d5, r8, r9
 8013a00:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8013a04:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013a08:	ed93 7b00 	vldr	d7, [r3]
 8013a0c:	ed93 5b02 	vldr	d5, [r3, #8]
 8013a10:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8013a14:	eea4 2b07 	vfma.f64	d2, d4, d7
 8013a18:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8013a1c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8013a20:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8013a24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013a28:	ed93 5b04 	vldr	d5, [r3, #16]
 8013a2c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8013a30:	ee37 7b02 	vadd.f64	d7, d7, d2
 8013a34:	ee26 5b05 	vmul.f64	d5, d6, d5
 8013a38:	ed93 4b08 	vldr	d4, [r3, #32]
 8013a3c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8013a40:	eeb0 9b40 	vmov.f64	d9, d0
 8013a44:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8013a48:	ed93 5b06 	vldr	d5, [r3, #24]
 8013a4c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8013a50:	ee26 bb00 	vmul.f64	d11, d6, d0
 8013a54:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8013a58:	eea6 5b04 	vfma.f64	d5, d6, d4
 8013a5c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8013a60:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8013a64:	ee37 9b09 	vadd.f64	d9, d7, d9
 8013a68:	ee3a ab00 	vadd.f64	d10, d10, d0
 8013a6c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8013a70:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8013a74:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8013a78:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8013a7c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8013a80:	eea0 4b03 	vfma.f64	d4, d0, d3
 8013a84:	eea0 5b04 	vfma.f64	d5, d0, d4
 8013a88:	eeab ab05 	vfma.f64	d10, d11, d5
 8013a8c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8013a90:	ee21 7b06 	vmul.f64	d7, d1, d6
 8013a94:	ee17 3a90 	vmov	r3, s15
 8013a98:	eeb0 5b47 	vmov.f64	d5, d7
 8013a9c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8013aa0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8013aa4:	18b2      	adds	r2, r6, r2
 8013aa6:	2a3e      	cmp	r2, #62	; 0x3e
 8013aa8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8013aac:	ee38 8b46 	vsub.f64	d8, d8, d6
 8013ab0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8013ab4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8013ab8:	d92b      	bls.n	8013b12 <pow+0x32a>
 8013aba:	2a00      	cmp	r2, #0
 8013abc:	da0b      	bge.n	8013ad6 <pow+0x2ee>
 8013abe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013ac2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	f43f aef7 	beq.w	80138ba <pow+0xd2>
 8013acc:	eeb1 0b40 	vneg.f64	d0, d0
 8013ad0:	e6f3      	b.n	80138ba <pow+0xd2>
 8013ad2:	2000      	movs	r0, #0
 8013ad4:	e77e      	b.n	80139d4 <pow+0x1ec>
 8013ad6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8013ada:	d919      	bls.n	8013b10 <pow+0x328>
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f6bf af63 	bge.w	80139a8 <pow+0x1c0>
 8013ae2:	b006      	add	sp, #24
 8013ae4:	ecbd 8b0a 	vpop	{d8-d12}
 8013ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aec:	f000 ba4c 	b.w	8013f88 <__math_uflow>
 8013af0:	00000000 	.word	0x00000000
 8013af4:	43300000 	.word	0x43300000
 8013af8:	3ff00000 	.word	0x3ff00000
 8013afc:	fff00000 	.word	0xfff00000
 8013b00:	ffe00000 	.word	0xffe00000
 8013b04:	7fe00000 	.word	0x7fe00000
 8013b08:	c0196aab 	.word	0xc0196aab
 8013b0c:	080144f8 	.word	0x080144f8
 8013b10:	2600      	movs	r6, #0
 8013b12:	495d      	ldr	r1, [pc, #372]	; (8013c88 <pow+0x4a0>)
 8013b14:	ed91 4b02 	vldr	d4, [r1, #8]
 8013b18:	ed91 3b00 	vldr	d3, [r1]
 8013b1c:	eeb0 6b44 	vmov.f64	d6, d4
 8013b20:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013b24:	ee16 5a10 	vmov	r5, s12
 8013b28:	ee36 6b44 	vsub.f64	d6, d6, d4
 8013b2c:	ed91 4b04 	vldr	d4, [r1, #16]
 8013b30:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013b34:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013b38:	eeb0 0b47 	vmov.f64	d0, d7
 8013b3c:	ed91 7b06 	vldr	d7, [r1, #24]
 8013b40:	18dc      	adds	r4, r3, r3
 8013b42:	f104 030f 	add.w	r3, r4, #15
 8013b46:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8013b4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013b4e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8013b52:	ee35 0b00 	vadd.f64	d0, d5, d0
 8013b56:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013b5a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8013b5e:	ed91 5b08 	vldr	d5, [r1, #32]
 8013b62:	ee30 7b07 	vadd.f64	d7, d0, d7
 8013b66:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013b6a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8013b6e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8013b72:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013b76:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013b7a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8013b7e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8013b82:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8013b86:	eea0 5b04 	vfma.f64	d5, d0, d4
 8013b8a:	1940      	adds	r0, r0, r5
 8013b8c:	2700      	movs	r7, #0
 8013b8e:	eb17 020c 	adds.w	r2, r7, ip
 8013b92:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8013b96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013b9a:	2e00      	cmp	r6, #0
 8013b9c:	d15f      	bne.n	8013c5e <pow+0x476>
 8013b9e:	42bd      	cmp	r5, r7
 8013ba0:	db13      	blt.n	8013bca <pow+0x3e2>
 8013ba2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8013ba6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8013baa:	4610      	mov	r0, r2
 8013bac:	ec41 0b10 	vmov	d0, r0, r1
 8013bb0:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013bb4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013c70 <pow+0x488>
 8013bb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013bbc:	b006      	add	sp, #24
 8013bbe:	ecbd 8b0a 	vpop	{d8-d12}
 8013bc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc6:	f000 ba1f 	b.w	8014008 <__math_check_oflow>
 8013bca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013bce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8013bd2:	4610      	mov	r0, r2
 8013bd4:	ec41 0b15 	vmov	d5, r0, r1
 8013bd8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013bdc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8013be0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8013be4:	eeb0 3bc7 	vabs.f64	d3, d7
 8013be8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8013bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013c78 <pow+0x490>
 8013bf4:	d52a      	bpl.n	8013c4c <pow+0x464>
 8013bf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013bfa:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c02:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8013c06:	ee35 6b06 	vadd.f64	d6, d5, d6
 8013c0a:	bf48      	it	mi
 8013c0c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8013c10:	ee37 3b04 	vadd.f64	d3, d7, d4
 8013c14:	ee34 5b43 	vsub.f64	d5, d4, d3
 8013c18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8013c1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013c20:	ee37 7b03 	vadd.f64	d7, d7, d3
 8013c24:	ee37 7b44 	vsub.f64	d7, d7, d4
 8013c28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c30:	d104      	bne.n	8013c3c <pow+0x454>
 8013c32:	4632      	mov	r2, r6
 8013c34:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8013c38:	ec43 2b17 	vmov	d7, r2, r3
 8013c3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013c40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013c44:	ee26 6b00 	vmul.f64	d6, d6, d0
 8013c48:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013c4c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8013c50:	b006      	add	sp, #24
 8013c52:	ecbd 8b0a 	vpop	{d8-d12}
 8013c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5a:	f000 b9cc 	b.w	8013ff6 <__math_check_uflow>
 8013c5e:	ec43 2b10 	vmov	d0, r2, r3
 8013c62:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013c66:	e628      	b.n	80138ba <pow+0xd2>
 8013c68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013c80 <pow+0x498>
 8013c6c:	e625      	b.n	80138ba <pow+0xd2>
 8013c6e:	bf00      	nop
 8013c70:	00000000 	.word	0x00000000
 8013c74:	7f000000 	.word	0x7f000000
 8013c78:	00000000 	.word	0x00000000
 8013c7c:	00100000 	.word	0x00100000
	...
 8013c88:	08015540 	.word	0x08015540

08013c8c <asin>:
 8013c8c:	b508      	push	{r3, lr}
 8013c8e:	ed2d 8b04 	vpush	{d8-d9}
 8013c92:	eeb0 8b40 	vmov.f64	d8, d0
 8013c96:	f000 f847 	bl	8013d28 <__ieee754_asin>
 8013c9a:	eeb4 8b48 	vcmp.f64	d8, d8
 8013c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca2:	eeb0 9b40 	vmov.f64	d9, d0
 8013ca6:	d615      	bvs.n	8013cd4 <asin+0x48>
 8013ca8:	eeb0 0b48 	vmov.f64	d0, d8
 8013cac:	f000 f9c0 	bl	8014030 <fabs>
 8013cb0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013cb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbc:	dd0a      	ble.n	8013cd4 <asin+0x48>
 8013cbe:	f7fc fec9 	bl	8010a54 <__errno>
 8013cc2:	ecbd 8b04 	vpop	{d8-d9}
 8013cc6:	2321      	movs	r3, #33	; 0x21
 8013cc8:	6003      	str	r3, [r0, #0]
 8013cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013cce:	4804      	ldr	r0, [pc, #16]	; (8013ce0 <asin+0x54>)
 8013cd0:	f7fe bdc6 	b.w	8012860 <nan>
 8013cd4:	eeb0 0b49 	vmov.f64	d0, d9
 8013cd8:	ecbd 8b04 	vpop	{d8-d9}
 8013cdc:	bd08      	pop	{r3, pc}
 8013cde:	bf00      	nop
 8013ce0:	0801435f 	.word	0x0801435f
 8013ce4:	00000000 	.word	0x00000000

08013ce8 <sqrt>:
 8013ce8:	b508      	push	{r3, lr}
 8013cea:	ed2d 8b04 	vpush	{d8-d9}
 8013cee:	eeb0 8b40 	vmov.f64	d8, d0
 8013cf2:	f000 f927 	bl	8013f44 <__ieee754_sqrt>
 8013cf6:	eeb4 8b48 	vcmp.f64	d8, d8
 8013cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfe:	d60c      	bvs.n	8013d1a <sqrt+0x32>
 8013d00:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8013d20 <sqrt+0x38>
 8013d04:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	d505      	bpl.n	8013d1a <sqrt+0x32>
 8013d0e:	f7fc fea1 	bl	8010a54 <__errno>
 8013d12:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013d16:	2321      	movs	r3, #33	; 0x21
 8013d18:	6003      	str	r3, [r0, #0]
 8013d1a:	ecbd 8b04 	vpop	{d8-d9}
 8013d1e:	bd08      	pop	{r3, pc}
	...

08013d28 <__ieee754_asin>:
 8013d28:	b538      	push	{r3, r4, r5, lr}
 8013d2a:	ee10 5a90 	vmov	r5, s1
 8013d2e:	4b82      	ldr	r3, [pc, #520]	; (8013f38 <__ieee754_asin+0x210>)
 8013d30:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013d34:	429c      	cmp	r4, r3
 8013d36:	ed2d 8b06 	vpush	{d8-d10}
 8013d3a:	dd19      	ble.n	8013d70 <__ieee754_asin+0x48>
 8013d3c:	ee10 3a10 	vmov	r3, s0
 8013d40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013d44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013d48:	4323      	orrs	r3, r4
 8013d4a:	d10c      	bne.n	8013d66 <__ieee754_asin+0x3e>
 8013d4c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8013ec0 <__ieee754_asin+0x198>
 8013d50:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8013ec8 <__ieee754_asin+0x1a0>
 8013d54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013d58:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8013d60:	ecbd 8b06 	vpop	{d8-d10}
 8013d64:	bd38      	pop	{r3, r4, r5, pc}
 8013d66:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013d6a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8013d6e:	e7f7      	b.n	8013d60 <__ieee754_asin+0x38>
 8013d70:	4b72      	ldr	r3, [pc, #456]	; (8013f3c <__ieee754_asin+0x214>)
 8013d72:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8013d76:	429c      	cmp	r4, r3
 8013d78:	dc0b      	bgt.n	8013d92 <__ieee754_asin+0x6a>
 8013d7a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8013d7e:	da52      	bge.n	8013e26 <__ieee754_asin+0xfe>
 8013d80:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8013ed0 <__ieee754_asin+0x1a8>
 8013d84:	ee30 7b07 	vadd.f64	d7, d0, d7
 8013d88:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8013d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d90:	dce6      	bgt.n	8013d60 <__ieee754_asin+0x38>
 8013d92:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013d96:	f000 f94b 	bl	8014030 <fabs>
 8013d9a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8013ed8 <__ieee754_asin+0x1b0>
 8013d9e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013da2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013da6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013ee0 <__ieee754_asin+0x1b8>
 8013daa:	eeb0 0b48 	vmov.f64	d0, d8
 8013dae:	eea8 6b07 	vfma.f64	d6, d8, d7
 8013db2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8013ee8 <__ieee754_asin+0x1c0>
 8013db6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8013dba:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8013ef0 <__ieee754_asin+0x1c8>
 8013dbe:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8013ef8 <__ieee754_asin+0x1d0>
 8013dc2:	eea7 6b08 	vfma.f64	d6, d7, d8
 8013dc6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8013f00 <__ieee754_asin+0x1d8>
 8013dca:	eea6 7b08 	vfma.f64	d7, d6, d8
 8013dce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013f08 <__ieee754_asin+0x1e0>
 8013dd2:	eea7 ab08 	vfma.f64	d10, d7, d8
 8013dd6:	ee2a ab08 	vmul.f64	d10, d10, d8
 8013dda:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8013f10 <__ieee754_asin+0x1e8>
 8013dde:	eea8 7b06 	vfma.f64	d7, d8, d6
 8013de2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8013f18 <__ieee754_asin+0x1f0>
 8013de6:	eea7 6b08 	vfma.f64	d6, d7, d8
 8013dea:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8013f20 <__ieee754_asin+0x1f8>
 8013dee:	eea6 7b08 	vfma.f64	d7, d6, d8
 8013df2:	eea7 9b08 	vfma.f64	d9, d7, d8
 8013df6:	f000 f8a5 	bl	8013f44 <__ieee754_sqrt>
 8013dfa:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8013dfe:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8013e02:	4b4f      	ldr	r3, [pc, #316]	; (8013f40 <__ieee754_asin+0x218>)
 8013e04:	429c      	cmp	r4, r3
 8013e06:	dd3d      	ble.n	8013e84 <__ieee754_asin+0x15c>
 8013e08:	eea0 0b05 	vfma.f64	d0, d0, d5
 8013e0c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8013f28 <__ieee754_asin+0x200>
 8013e10:	eea0 7b04 	vfma.f64	d7, d0, d4
 8013e14:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8013ec8 <__ieee754_asin+0x1a0>
 8013e18:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013e1c:	2d00      	cmp	r5, #0
 8013e1e:	bfd8      	it	le
 8013e20:	eeb1 0b40 	vnegle.f64	d0, d0
 8013e24:	e79c      	b.n	8013d60 <__ieee754_asin+0x38>
 8013e26:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013ed8 <__ieee754_asin+0x1b0>
 8013e2a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8013e2e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8013ee0 <__ieee754_asin+0x1b8>
 8013e32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013e36:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013ee8 <__ieee754_asin+0x1c0>
 8013e3a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013e3e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8013ef0 <__ieee754_asin+0x1c8>
 8013e42:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013e46:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8013f00 <__ieee754_asin+0x1d8>
 8013e4a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013e4e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8013ef8 <__ieee754_asin+0x1d0>
 8013e52:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8013f08 <__ieee754_asin+0x1e0>
 8013e56:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013e5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013e5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013f10 <__ieee754_asin+0x1e8>
 8013e62:	eea7 5b04 	vfma.f64	d5, d7, d4
 8013e66:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8013f18 <__ieee754_asin+0x1f0>
 8013e6a:	eea5 4b07 	vfma.f64	d4, d5, d7
 8013e6e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013f20 <__ieee754_asin+0x1f8>
 8013e72:	eea4 5b07 	vfma.f64	d5, d4, d7
 8013e76:	eea5 9b07 	vfma.f64	d9, d5, d7
 8013e7a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8013e7e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8013e82:	e76d      	b.n	8013d60 <__ieee754_asin+0x38>
 8013e84:	ec53 2b10 	vmov	r2, r3, d0
 8013e88:	2200      	movs	r2, #0
 8013e8a:	ec43 2b16 	vmov	d6, r2, r3
 8013e8e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013e92:	eea6 8b46 	vfms.f64	d8, d6, d6
 8013e96:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8013e9a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8013ec0 <__ieee754_asin+0x198>
 8013e9e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013ea2:	eea3 7b44 	vfms.f64	d7, d3, d4
 8013ea6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8013eaa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8013f30 <__ieee754_asin+0x208>
 8013eae:	eeb0 0b45 	vmov.f64	d0, d5
 8013eb2:	eea6 0b44 	vfms.f64	d0, d6, d4
 8013eb6:	ee37 0b40 	vsub.f64	d0, d7, d0
 8013eba:	ee35 0b40 	vsub.f64	d0, d5, d0
 8013ebe:	e7ad      	b.n	8013e1c <__ieee754_asin+0xf4>
 8013ec0:	33145c07 	.word	0x33145c07
 8013ec4:	3c91a626 	.word	0x3c91a626
 8013ec8:	54442d18 	.word	0x54442d18
 8013ecc:	3ff921fb 	.word	0x3ff921fb
 8013ed0:	8800759c 	.word	0x8800759c
 8013ed4:	7e37e43c 	.word	0x7e37e43c
 8013ed8:	0dfdf709 	.word	0x0dfdf709
 8013edc:	3f023de1 	.word	0x3f023de1
 8013ee0:	7501b288 	.word	0x7501b288
 8013ee4:	3f49efe0 	.word	0x3f49efe0
 8013ee8:	b5688f3b 	.word	0xb5688f3b
 8013eec:	bfa48228 	.word	0xbfa48228
 8013ef0:	0e884455 	.word	0x0e884455
 8013ef4:	3fc9c155 	.word	0x3fc9c155
 8013ef8:	55555555 	.word	0x55555555
 8013efc:	3fc55555 	.word	0x3fc55555
 8013f00:	03eb6f7d 	.word	0x03eb6f7d
 8013f04:	bfd4d612 	.word	0xbfd4d612
 8013f08:	b12e9282 	.word	0xb12e9282
 8013f0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013f10:	1b8d0159 	.word	0x1b8d0159
 8013f14:	bfe6066c 	.word	0xbfe6066c
 8013f18:	9c598ac8 	.word	0x9c598ac8
 8013f1c:	40002ae5 	.word	0x40002ae5
 8013f20:	1c8a2d4b 	.word	0x1c8a2d4b
 8013f24:	c0033a27 	.word	0xc0033a27
 8013f28:	33145c07 	.word	0x33145c07
 8013f2c:	bc91a626 	.word	0xbc91a626
 8013f30:	54442d18 	.word	0x54442d18
 8013f34:	3fe921fb 	.word	0x3fe921fb
 8013f38:	3fefffff 	.word	0x3fefffff
 8013f3c:	3fdfffff 	.word	0x3fdfffff
 8013f40:	3fef3332 	.word	0x3fef3332

08013f44 <__ieee754_sqrt>:
 8013f44:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013f48:	4770      	bx	lr

08013f4a <with_errno>:
 8013f4a:	b513      	push	{r0, r1, r4, lr}
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	ed8d 0b00 	vstr	d0, [sp]
 8013f52:	f7fc fd7f 	bl	8010a54 <__errno>
 8013f56:	ed9d 0b00 	vldr	d0, [sp]
 8013f5a:	6004      	str	r4, [r0, #0]
 8013f5c:	b002      	add	sp, #8
 8013f5e:	bd10      	pop	{r4, pc}

08013f60 <xflow>:
 8013f60:	b082      	sub	sp, #8
 8013f62:	b158      	cbz	r0, 8013f7c <xflow+0x1c>
 8013f64:	eeb1 7b40 	vneg.f64	d7, d0
 8013f68:	ed8d 7b00 	vstr	d7, [sp]
 8013f6c:	ed9d 7b00 	vldr	d7, [sp]
 8013f70:	2022      	movs	r0, #34	; 0x22
 8013f72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013f76:	b002      	add	sp, #8
 8013f78:	f7ff bfe7 	b.w	8013f4a <with_errno>
 8013f7c:	eeb0 7b40 	vmov.f64	d7, d0
 8013f80:	e7f2      	b.n	8013f68 <xflow+0x8>
 8013f82:	0000      	movs	r0, r0
 8013f84:	0000      	movs	r0, r0
	...

08013f88 <__math_uflow>:
 8013f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013f90 <__math_uflow+0x8>
 8013f8c:	f7ff bfe8 	b.w	8013f60 <xflow>
 8013f90:	00000000 	.word	0x00000000
 8013f94:	10000000 	.word	0x10000000

08013f98 <__math_oflow>:
 8013f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013fa0 <__math_oflow+0x8>
 8013f9c:	f7ff bfe0 	b.w	8013f60 <xflow>
 8013fa0:	00000000 	.word	0x00000000
 8013fa4:	70000000 	.word	0x70000000

08013fa8 <__math_divzero>:
 8013fa8:	b082      	sub	sp, #8
 8013faa:	2800      	cmp	r0, #0
 8013fac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013fb0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013fb4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013fb8:	ed8d 7b00 	vstr	d7, [sp]
 8013fbc:	ed9d 0b00 	vldr	d0, [sp]
 8013fc0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013fd0 <__math_divzero+0x28>
 8013fc4:	2022      	movs	r0, #34	; 0x22
 8013fc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013fca:	b002      	add	sp, #8
 8013fcc:	f7ff bfbd 	b.w	8013f4a <with_errno>
	...

08013fd8 <__math_invalid>:
 8013fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8013fdc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013fe8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013fec:	d602      	bvs.n	8013ff4 <__math_invalid+0x1c>
 8013fee:	2021      	movs	r0, #33	; 0x21
 8013ff0:	f7ff bfab 	b.w	8013f4a <with_errno>
 8013ff4:	4770      	bx	lr

08013ff6 <__math_check_uflow>:
 8013ff6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffe:	d102      	bne.n	8014006 <__math_check_uflow+0x10>
 8014000:	2022      	movs	r0, #34	; 0x22
 8014002:	f7ff bfa2 	b.w	8013f4a <with_errno>
 8014006:	4770      	bx	lr

08014008 <__math_check_oflow>:
 8014008:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8014028 <__math_check_oflow+0x20>
 801400c:	eeb0 7bc0 	vabs.f64	d7, d0
 8014010:	eeb4 7b46 	vcmp.f64	d7, d6
 8014014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014018:	dd02      	ble.n	8014020 <__math_check_oflow+0x18>
 801401a:	2022      	movs	r0, #34	; 0x22
 801401c:	f7ff bf95 	b.w	8013f4a <with_errno>
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	ffffffff 	.word	0xffffffff
 801402c:	7fefffff 	.word	0x7fefffff

08014030 <fabs>:
 8014030:	ec51 0b10 	vmov	r0, r1, d0
 8014034:	ee10 2a10 	vmov	r2, s0
 8014038:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801403c:	ec43 2b10 	vmov	d0, r2, r3
 8014040:	4770      	bx	lr
	...

08014044 <_init>:
 8014044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014046:	bf00      	nop
 8014048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801404a:	bc08      	pop	{r3}
 801404c:	469e      	mov	lr, r3
 801404e:	4770      	bx	lr

08014050 <_fini>:
 8014050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014052:	bf00      	nop
 8014054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014056:	bc08      	pop	{r3}
 8014058:	469e      	mov	lr, r3
 801405a:	4770      	bx	lr
