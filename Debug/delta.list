
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e10  08012a98  08012a98  00022a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148a8  080148a8  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  080148a8  080148a8  000248a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148b0  080148b0  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148b0  080148b0  000248b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080148b4  080148b4  000248b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  24000000  080148b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  240002e8  08014b9c  000302e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000d38  08014b9c  00030d38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f9c  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003299  00000000  00000000  000482ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0004b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0004c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050ad  00000000  00000000  0004d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d67  00000000  00000000  000529cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161683  00000000  00000000  0006c734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cddb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006078  00000000  00000000  001cde08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e8 	.word	0x240002e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012a7c 	.word	0x08012a7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ec 	.word	0x240002ec
 80002dc:	08012a7c 	.word	0x08012a7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b73      	ldr	r3, [pc, #460]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a71      	ldr	r2, [pc, #452]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b6f      	ldr	r3, [pc, #444]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b6b      	ldr	r3, [pc, #428]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6a      	ldr	r2, [pc, #424]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a62      	ldr	r2, [pc, #392]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b60      	ldr	r3, [pc, #384]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5b      	ldr	r2, [pc, #364]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a53      	ldr	r2, [pc, #332]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <MX_GPIO_Init+0x1e4>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b6a:	483e      	ldr	r0, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b6c:	f007 f952 	bl	8007e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2170      	movs	r1, #112	; 0x70
 8000b74:	483c      	ldr	r0, [pc, #240]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000b76:	f007 f94d 	bl	8007e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin 
 8000b7a:	233f      	movs	r3, #63	; 0x3f
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1f4>)
 8000b8e:	f006 ff79 	bl	8007a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	482f      	ldr	r0, [pc, #188]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ba8:	f006 ff6c 	bl	8007a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000bac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4827      	ldr	r0, [pc, #156]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000bc6:	f006 ff5d 	bl	8007a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000bca:	2370      	movs	r3, #112	; 0x70
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000be2:	f006 ff4f 	bl	8007a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	2006      	movs	r0, #6
 8000bec:	f006 fcc1 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf0:	2006      	movs	r0, #6
 8000bf2:	f006 fcd8 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f006 fcb9 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c00:	2007      	movs	r0, #7
 8000c02:	f006 fcd0 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f006 fcb1 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f006 fcc8 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2009      	movs	r0, #9
 8000c1c:	f006 fca9 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c20:	2009      	movs	r0, #9
 8000c22:	f006 fcc0 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2101      	movs	r1, #1
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f006 fca1 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f006 fcb8 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2017      	movs	r0, #23
 8000c3c:	f006 fc99 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c40:	2017      	movs	r0, #23
 8000c42:	f006 fcb0 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	2028      	movs	r0, #40	; 0x28
 8000c4c:	f006 fc91 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f006 fca8 	bl	80075a6 <HAL_NVIC_EnableIRQ>

}
 8000c56:	bf00      	nop
 8000c58:	3730      	adds	r7, #48	; 0x30
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58020c00 	.word	0x58020c00
 8000c6c:	11210000 	.word	0x11210000
 8000c70:	58021000 	.word	0x58021000
 8000c74:	11110000 	.word	0x11110000

08000c78 <homingAprox>:
#include "homing.h"
uint8_t homeOk;			//Flag de aproximacion de homing
double rpm;


void homingAprox(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	homeOk = 0;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <homingAprox+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8000c84:	2100      	movs	r1, #0
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <homingAprox+0x94>)
 8000c88:	f009 fe4e 	bl	800a928 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4820      	ldr	r0, [pc, #128]	; (8000d10 <homingAprox+0x98>)
 8000c90:	f009 fe4a 	bl	800a928 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8000c94:	2100      	movs	r1, #0
 8000c96:	481f      	ldr	r0, [pc, #124]	; (8000d14 <homingAprox+0x9c>)
 8000c98:	f009 fe46 	bl	800a928 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f006 fc90 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f006 fc8d 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f006 fc8a 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000cae:	2009      	movs	r0, #9
 8000cb0:	f006 fc87 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f006 fc84 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000cba:	2017      	movs	r0, #23
 8000cbc:	f006 fc81 	bl	80075c2 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <homingAprox+0xa0>)
 8000cc8:	f007 f8a4 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <homingAprox+0xa0>)
 8000cd4:	f007 f89e 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <homingAprox+0xa0>)
 8000ce0:	f007 f898 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	f006 fb15 	bl	8007314 <HAL_Delay>
	rpm = 0.1;
 8000cea:	490c      	ldr	r1, [pc, #48]	; (8000d1c <homingAprox+0xa4>)
 8000cec:	a304      	add	r3, pc, #16	; (adr r3, 8000d00 <homingAprox+0x88>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8000cfa:	e18c      	b.n	8001016 <homingAprox+0x39e>
 8000cfc:	f3af 8000 	nop.w
 8000d00:	9999999a 	.word	0x9999999a
 8000d04:	3fb99999 	.word	0x3fb99999
 8000d08:	24000304 	.word	0x24000304
 8000d0c:	2400050c 	.word	0x2400050c
 8000d10:	2400054c 	.word	0x2400054c
 8000d14:	2400058c 	.word	0x2400058c
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	24000308 	.word	0x24000308
		if(rpm<=4){
 8000d20:	4bcb      	ldr	r3, [pc, #812]	; (8001050 <homingAprox+0x3d8>)
 8000d22:	ed93 7b00 	vldr	d7, [r3]
 8000d26:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000d2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	d809      	bhi.n	8000d48 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8000d34:	4bc6      	ldr	r3, [pc, #792]	; (8001050 <homingAprox+0x3d8>)
 8000d36:	ed93 7b00 	vldr	d7, [r3]
 8000d3a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8001038 <homingAprox+0x3c0>
 8000d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d42:	4bc3      	ldr	r3, [pc, #780]	; (8001050 <homingAprox+0x3d8>)
 8000d44:	ed83 7b00 	vstr	d7, [r3]
		//TIM12->CNT=0;




		periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8000d48:	4bc2      	ldr	r3, [pc, #776]	; (8001054 <homingAprox+0x3dc>)
 8000d4a:	ed93 7b00 	vldr	d7, [r3]
 8000d4e:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8001040 <homingAprox+0x3c8>
 8000d52:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d56:	4bc0      	ldr	r3, [pc, #768]	; (8001058 <homingAprox+0x3e0>)
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d66:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d6a:	4bb9      	ldr	r3, [pc, #740]	; (8001050 <homingAprox+0x3d8>)
 8000d6c:	ed93 7b00 	vldr	d7, [r3]
 8000d70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d74:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8001048 <homingAprox+0x3d0>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d90:	4bb2      	ldr	r3, [pc, #712]	; (800105c <homingAprox+0x3e4>)
 8000d92:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8000d96:	4baf      	ldr	r3, [pc, #700]	; (8001054 <homingAprox+0x3dc>)
 8000d98:	ed93 7b00 	vldr	d7, [r3]
 8000d9c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001040 <homingAprox+0x3c8>
 8000da0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000da4:	4bae      	ldr	r3, [pc, #696]	; (8001060 <homingAprox+0x3e8>)
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000db0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000db4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000db8:	4ba5      	ldr	r3, [pc, #660]	; (8001050 <homingAprox+0x3d8>)
 8000dba:	ed93 7b00 	vldr	d7, [r3]
 8000dbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001048 <homingAprox+0x3d0>
 8000dc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dde:	4b9f      	ldr	r3, [pc, #636]	; (800105c <homingAprox+0x3e4>)
 8000de0:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8000de4:	4b9b      	ldr	r3, [pc, #620]	; (8001054 <homingAprox+0x3dc>)
 8000de6:	ed93 7b00 	vldr	d7, [r3]
 8000dea:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8001040 <homingAprox+0x3c8>
 8000dee:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000df2:	4b9c      	ldr	r3, [pc, #624]	; (8001064 <homingAprox+0x3ec>)
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dfe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e02:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e06:	4b92      	ldr	r3, [pc, #584]	; (8001050 <homingAprox+0x3d8>)
 8000e08:	ed93 7b00 	vldr	d7, [r3]
 8000e0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e10:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001048 <homingAprox+0x3d0>
 8000e14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e2c:	4b8b      	ldr	r3, [pc, #556]	; (800105c <homingAprox+0x3e4>)
 8000e2e:	ed83 7b04 	vstr	d7, [r3, #16]


		if (TIM12->CNT > periodoM[0]) {
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <homingAprox+0x3e0>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e3e:	4b87      	ldr	r3, [pc, #540]	; (800105c <homingAprox+0x3e4>)
 8000e40:	ed93 7b00 	vldr	d7, [r3]
 8000e44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	dd0c      	ble.n	8000e68 <homingAprox+0x1f0>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000e4e:	4b83      	ldr	r3, [pc, #524]	; (800105c <homingAprox+0x3e4>)
 8000e50:	ed93 7b00 	vldr	d7, [r3]
 8000e54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e5c:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <homingAprox+0x3e0>)
 8000e5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e62:	ee17 2a90 	vmov	r2, s15
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8000e68:	4b7d      	ldr	r3, [pc, #500]	; (8001060 <homingAprox+0x3e8>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e74:	4b79      	ldr	r3, [pc, #484]	; (800105c <homingAprox+0x3e4>)
 8000e76:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd0c      	ble.n	8000e9e <homingAprox+0x226>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <homingAprox+0x3e4>)
 8000e86:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <homingAprox+0x3e8>)
 8000e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e98:	ee17 2a90 	vmov	r2, s15
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <homingAprox+0x3ec>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eaa:	4b6c      	ldr	r3, [pc, #432]	; (800105c <homingAprox+0x3e4>)
 8000eac:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	dd0c      	ble.n	8000ed4 <homingAprox+0x25c>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <homingAprox+0x3e4>)
 8000ebc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec8:	4b66      	ldr	r3, [pc, #408]	; (8001064 <homingAprox+0x3ec>)
 8000eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ece:	ee17 2a90 	vmov	r2, s15
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8000ed4:	4b61      	ldr	r3, [pc, #388]	; (800105c <homingAprox+0x3e4>)
 8000ed6:	ed93 7b00 	vldr	d7, [r3]
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <homingAprox+0x3e0>)
 8000edc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee0:	ee17 2a90 	vmov	r2, s15
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <homingAprox+0x3e0>)
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ef2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ef6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efa:	4b57      	ldr	r3, [pc, #348]	; (8001058 <homingAprox+0x3e0>)
 8000efc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f00:	ee17 2a90 	vmov	r2, s15
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8000f06:	4b55      	ldr	r3, [pc, #340]	; (800105c <homingAprox+0x3e4>)
 8000f08:	ed93 7b02 	vldr	d7, [r3, #8]
 8000f0c:	4b54      	ldr	r3, [pc, #336]	; (8001060 <homingAprox+0x3e8>)
 8000f0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f12:	ee17 2a90 	vmov	r2, s15
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f18:	4b51      	ldr	r3, [pc, #324]	; (8001060 <homingAprox+0x3e8>)
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <homingAprox+0x3e8>)
 8000f2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f32:	ee17 2a90 	vmov	r2, s15
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <homingAprox+0x3e4>)
 8000f3a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f3e:	4b49      	ldr	r3, [pc, #292]	; (8001064 <homingAprox+0x3ec>)
 8000f40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f44:	ee17 2a90 	vmov	r2, s15
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <homingAprox+0x3ec>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <homingAprox+0x3ec>)
 8000f60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f64:	ee17 2a90 	vmov	r2, s15
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	483e      	ldr	r0, [pc, #248]	; (8001068 <homingAprox+0x3f0>)
 8000f6e:	f006 ff39 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00d      	beq.n	8000f94 <homingAprox+0x31c>
 8000f78:	2104      	movs	r1, #4
 8000f7a:	483b      	ldr	r0, [pc, #236]	; (8001068 <homingAprox+0x3f0>)
 8000f7c:	f006 ff32 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <homingAprox+0x31c>
 8000f86:	2110      	movs	r1, #16
 8000f88:	4837      	ldr	r0, [pc, #220]	; (8001068 <homingAprox+0x3f0>)
 8000f8a:	f006 ff2b 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d126      	bne.n	8000fe2 <homingAprox+0x36a>
			HAL_Delay(30);
 8000f94:	201e      	movs	r0, #30
 8000f96:	f006 f9bd 	bl	8007314 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4832      	ldr	r0, [pc, #200]	; (8001068 <homingAprox+0x3f0>)
 8000f9e:	f006 ff21 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00d      	beq.n	8000fc4 <homingAprox+0x34c>
 8000fa8:	2104      	movs	r1, #4
 8000faa:	482f      	ldr	r0, [pc, #188]	; (8001068 <homingAprox+0x3f0>)
 8000fac:	f006 ff1a 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <homingAprox+0x34c>
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <homingAprox+0x3f0>)
 8000fba:	f006 ff13 	bl	8007de4 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10e      	bne.n	8000fe2 <homingAprox+0x36a>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4829      	ldr	r0, [pc, #164]	; (800106c <homingAprox+0x3f4>)
 8000fc8:	f009 fb9c 	bl	800a704 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <homingAprox+0x3f8>)
 8000fd0:	f009 fb98 	bl	800a704 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4827      	ldr	r0, [pc, #156]	; (8001074 <homingAprox+0x3fc>)
 8000fd8:	f009 fb94 	bl	800a704 <HAL_TIM_PWM_Stop>
				homeOk = 1;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <homingAprox+0x400>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(hom==0){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d113      	bne.n	8001010 <homingAprox+0x398>
			hom=1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, "hola k ace\n\r", 12, 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	220c      	movs	r2, #12
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <homingAprox+0x404>)
 8000ff2:	4823      	ldr	r0, [pc, #140]	; (8001080 <homingAprox+0x408>)
 8000ff4:	f00a ff3a 	bl	800be6c <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <homingAprox+0x3f4>)
 8000ffc:	f009 fb2a 	bl	800a654 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <homingAprox+0x3f8>)
 8001004:	f009 fb26 	bl	800a654 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001008:	2100      	movs	r1, #0
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <homingAprox+0x3fc>)
 800100c:	f009 fb22 	bl	800a654 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f006 f97f 	bl	8007314 <HAL_Delay>
	while (homeOk == 0) {
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <homingAprox+0x400>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f43f ae80 	beq.w	8000d20 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3, "Fin_Aprox\n\r", 11, 100);
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	220b      	movs	r2, #11
 8001024:	4917      	ldr	r1, [pc, #92]	; (8001084 <homingAprox+0x40c>)
 8001026:	4816      	ldr	r0, [pc, #88]	; (8001080 <homingAprox+0x408>)
 8001028:	f00a ff20 	bl	800be6c <HAL_UART_Transmit>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	e029      	b.n	8001088 <homingAprox+0x410>
 8001034:	f3af 8000 	nop.w
 8001038:	d2f1a9fc 	.word	0xd2f1a9fc
 800103c:	3f50624d 	.word	0x3f50624d
 8001040:	00000000 	.word	0x00000000
 8001044:	404e0000 	.word	0x404e0000
 8001048:	00000000 	.word	0x00000000
 800104c:	40c2c000 	.word	0x40c2c000
 8001050:	24000308 	.word	0x24000308
 8001054:	24000000 	.word	0x24000000
 8001058:	40001800 	.word	0x40001800
 800105c:	24000438 	.word	0x24000438
 8001060:	40001c00 	.word	0x40001c00
 8001064:	40002000 	.word	0x40002000
 8001068:	58021000 	.word	0x58021000
 800106c:	2400060c 	.word	0x2400060c
 8001070:	2400064c 	.word	0x2400064c
 8001074:	2400068c 	.word	0x2400068c
 8001078:	24000304 	.word	0x24000304
 800107c:	08012a98 	.word	0x08012a98
 8001080:	24000c98 	.word	0x24000c98
 8001084:	08012aa8 	.word	0x08012aa8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	0000      	movs	r0, r0
	...

08001090 <homingArm1>:

void homingArm1(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	double flagEndStop=0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4862      	ldr	r0, [pc, #392]	; (8001230 <homingArm1+0x1a0>)
 80010a6:	f009 fb2d 	bl	800a704 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80010aa:	4962      	ldr	r1, [pc, #392]	; (8001234 <homingArm1+0x1a4>)
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b61      	ldr	r3, [pc, #388]	; (8001238 <homingArm1+0x1a8>)
 80010b2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = ((Fcl * 60) / (rpm * ((TIM12->PSC) + 1) * 9600)) - 1;
 80010b6:	4b61      	ldr	r3, [pc, #388]	; (800123c <homingArm1+0x1ac>)
 80010b8:	ed93 7b00 	vldr	d7, [r3]
 80010bc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001220 <homingArm1+0x190>
 80010c0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <homingArm1+0x1b0>)
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	3301      	adds	r3, #1
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010d2:	4b58      	ldr	r3, [pc, #352]	; (8001234 <homingArm1+0x1a4>)
 80010d4:	ed93 7b00 	vldr	d7, [r3]
 80010d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010dc:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001228 <homingArm1+0x198>
 80010e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <homingArm1+0x1b0>)
 80010f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <homingArm1+0x1b0>)
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <homingArm1+0x1b0>)
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8001106:	2101      	movs	r1, #1
 8001108:	484e      	ldr	r0, [pc, #312]	; (8001244 <homingArm1+0x1b4>)
 800110a:	f006 fe6b 	bl	8007de4 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d114      	bne.n	800113e <homingArm1+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001114:	e00c      	b.n	8001130 <homingArm1+0xa0>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	484a      	ldr	r0, [pc, #296]	; (8001248 <homingArm1+0x1b8>)
 800111e:	f006 fe79 	bl	8007e14 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001122:	2100      	movs	r1, #0
 8001124:	4842      	ldr	r0, [pc, #264]	; (8001230 <homingArm1+0x1a0>)
 8001126:	f009 fa95 	bl	800a654 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 800112a:	201e      	movs	r0, #30
 800112c:	f006 f8f2 	bl	8007314 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001130:	2101      	movs	r1, #1
 8001132:	4844      	ldr	r0, [pc, #272]	; (8001244 <homingArm1+0x1b4>)
 8001134:	f006 fe56 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0eb      	beq.n	8001116 <homingArm1+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4840      	ldr	r0, [pc, #256]	; (8001248 <homingArm1+0x1b8>)
 8001146:	f006 fe65 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800114a:	2100      	movs	r1, #0
 800114c:	4838      	ldr	r0, [pc, #224]	; (8001230 <homingArm1+0x1a0>)
 800114e:	f009 fa81 	bl	800a654 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <homingArm1+0x1bc>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001158:	e056      	b.n	8001208 <homingArm1+0x178>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 800115a:	ed97 7b00 	vldr	d7, [r7]
 800115e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d121      	bne.n	80011ac <homingArm1+0x11c>
 8001168:	2101      	movs	r1, #1
 800116a:	4836      	ldr	r0, [pc, #216]	; (8001244 <homingArm1+0x1b4>)
 800116c:	f006 fe3a 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11a      	bne.n	80011ac <homingArm1+0x11c>
			HAL_Delay(30);		//Para filtrar transitorio
 8001176:	201e      	movs	r0, #30
 8001178:	f006 f8cc 	bl	8007314 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 800117c:	2101      	movs	r1, #1
 800117e:	4831      	ldr	r0, [pc, #196]	; (8001244 <homingArm1+0x1b4>)
 8001180:	f006 fe30 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d110      	bne.n	80011ac <homingArm1+0x11c>
				HAL_UART_Transmit(&huart3, "EndStop1_Pulsado\n\r", 18, 100);
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2212      	movs	r2, #18
 800118e:	4930      	ldr	r1, [pc, #192]	; (8001250 <homingArm1+0x1c0>)
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <homingArm1+0x1c4>)
 8001192:	f00a fe6b 	bl	800be6c <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482a      	ldr	r0, [pc, #168]	; (8001248 <homingArm1+0x1b8>)
 800119e:	f006 fe39 	bl	8007e14 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <homingArm1+0x1c8>)
 80011a8:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80011ac:	ed97 7b00 	vldr	d7, [r7]
 80011b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d124      	bne.n	8001208 <homingArm1+0x178>
 80011be:	2101      	movs	r1, #1
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <homingArm1+0x1b4>)
 80011c2:	f006 fe0f 	bl	8007de4 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01d      	beq.n	8001208 <homingArm1+0x178>
			HAL_Delay(30);		//Para filtrar transitorio
 80011cc:	201e      	movs	r0, #30
 80011ce:	f006 f8a1 	bl	8007314 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80011d2:	2101      	movs	r1, #1
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <homingArm1+0x1b4>)
 80011d6:	f006 fe05 	bl	8007de4 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <homingArm1+0x178>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80011e0:	2100      	movs	r1, #0
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <homingArm1+0x1a0>)
 80011e4:	f009 fa8e 	bl	800a704 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm1\n\r", 9, 100);
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	2209      	movs	r2, #9
 80011ec:	491b      	ldr	r1, [pc, #108]	; (800125c <homingArm1+0x1cc>)
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <homingArm1+0x1c4>)
 80011f0:	f00a fe3c 	bl	800be6c <HAL_UART_Transmit>
				titha1 = 0;
 80011f4:	491a      	ldr	r1, [pc, #104]	; (8001260 <homingArm1+0x1d0>)
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <homingArm1+0x1bc>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <homingArm1+0x1bc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0a4      	beq.n	800115a <homingArm1+0xca>
			}
		}
	}
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	00000000 	.word	0x00000000
 8001224:	404e0000 	.word	0x404e0000
 8001228:	00000000 	.word	0x00000000
 800122c:	40c2c000 	.word	0x40c2c000
 8001230:	2400060c 	.word	0x2400060c
 8001234:	24000308 	.word	0x24000308
 8001238:	3fe00000 	.word	0x3fe00000
 800123c:	24000000 	.word	0x24000000
 8001240:	40001800 	.word	0x40001800
 8001244:	58021000 	.word	0x58021000
 8001248:	58020800 	.word	0x58020800
 800124c:	24000304 	.word	0x24000304
 8001250:	08012ab4 	.word	0x08012ab4
 8001254:	24000c98 	.word	0x24000c98
 8001258:	3ff00000 	.word	0x3ff00000
 800125c:	08012ac8 	.word	0x08012ac8
 8001260:	24000338 	.word	0x24000338
 8001264:	00000000 	.word	0x00000000

08001268 <homingArm2>:

void homingArm2(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	4874      	ldr	r0, [pc, #464]	; (8001450 <homingArm2+0x1e8>)
 800127e:	f009 fa41 	bl	800a704 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8001282:	4974      	ldr	r1, [pc, #464]	; (8001454 <homingArm2+0x1ec>)
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b73      	ldr	r3, [pc, #460]	; (8001458 <homingArm2+0x1f0>)
 800128a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <homingArm2+0x1f4>)
 8001290:	ed93 7b00 	vldr	d7, [r3]
 8001294:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001440 <homingArm2+0x1d8>
 8001298:	ee27 5b06 	vmul.f64	d5, d7, d6
 800129c:	4b70      	ldr	r3, [pc, #448]	; (8001460 <homingArm2+0x1f8>)
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	3301      	adds	r3, #1
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <homingArm2+0x1ec>)
 80012ac:	ed93 7b00 	vldr	d7, [r3]
 80012b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001448 <homingArm2+0x1e0>
 80012b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012c8:	4b65      	ldr	r3, [pc, #404]	; (8001460 <homingArm2+0x1f8>)
 80012ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012ce:	ee17 2a90 	vmov	r2, s15
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80012d4:	4b62      	ldr	r3, [pc, #392]	; (8001460 <homingArm2+0x1f8>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	4a61      	ldr	r2, [pc, #388]	; (8001460 <homingArm2+0x1f8>)
 80012da:	085b      	lsrs	r3, r3, #1
 80012dc:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80012de:	2104      	movs	r1, #4
 80012e0:	4860      	ldr	r0, [pc, #384]	; (8001464 <homingArm2+0x1fc>)
 80012e2:	f006 fd7f 	bl	8007de4 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d114      	bne.n	8001316 <homingArm2+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80012ec:	e00c      	b.n	8001308 <homingArm2+0xa0>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	485c      	ldr	r0, [pc, #368]	; (8001468 <homingArm2+0x200>)
 80012f6:	f006 fd8d 	bl	8007e14 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4854      	ldr	r0, [pc, #336]	; (8001450 <homingArm2+0x1e8>)
 80012fe:	f009 f9a9 	bl	800a654 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8001302:	201e      	movs	r0, #30
 8001304:	f006 f806 	bl	8007314 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8001308:	2104      	movs	r1, #4
 800130a:	4856      	ldr	r0, [pc, #344]	; (8001464 <homingArm2+0x1fc>)
 800130c:	f006 fd6a 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0eb      	beq.n	80012ee <homingArm2+0x86>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001316:	2100      	movs	r1, #0
 8001318:	484d      	ldr	r0, [pc, #308]	; (8001450 <homingArm2+0x1e8>)
 800131a:	f009 f9f3 	bl	800a704 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800131e:	494d      	ldr	r1, [pc, #308]	; (8001454 <homingArm2+0x1ec>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <homingArm2+0x1f0>)
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <homingArm2+0x1f4>)
 800132c:	ed93 7b00 	vldr	d7, [r3]
 8001330:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8001440 <homingArm2+0x1d8>
 8001334:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <homingArm2+0x1f8>)
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	3301      	adds	r3, #1
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <homingArm2+0x1ec>)
 8001348:	ed93 7b00 	vldr	d7, [r3]
 800134c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001350:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001448 <homingArm2+0x1e0>
 8001354:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001358:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800135c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001360:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <homingArm2+0x1f8>)
 8001366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <homingArm2+0x1f8>)
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <homingArm2+0x1f8>)
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <homingArm2+0x200>)
 8001382:	f006 fd47 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001386:	2100      	movs	r1, #0
 8001388:	4831      	ldr	r0, [pc, #196]	; (8001450 <homingArm2+0x1e8>)
 800138a:	f009 f963 	bl	800a654 <HAL_TIM_PWM_Start>
	homeOk = 0;
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <homingArm2+0x204>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001394:	e049      	b.n	800142a <homingArm2+0x1c2>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 8001396:	2104      	movs	r1, #4
 8001398:	4832      	ldr	r0, [pc, #200]	; (8001464 <homingArm2+0x1fc>)
 800139a:	f006 fd23 	bl	8007de4 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d114      	bne.n	80013ce <homingArm2+0x166>
			HAL_Delay(30);		//Para filtrar transitorio
 80013a4:	201e      	movs	r0, #30
 80013a6:	f005 ffb5 	bl	8007314 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 80013aa:	2104      	movs	r1, #4
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <homingArm2+0x1fc>)
 80013ae:	f006 fd19 	bl	8007de4 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <homingArm2+0x166>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	482a      	ldr	r0, [pc, #168]	; (8001468 <homingArm2+0x200>)
 80013c0:	f006 fd28 	bl	8007e14 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <homingArm2+0x208>)
 80013ca:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80013ce:	ed97 7b00 	vldr	d7, [r7]
 80013d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013d6:	eeb4 7b46 	vcmp.f64	d7, d6
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d124      	bne.n	800142a <homingArm2+0x1c2>
 80013e0:	2104      	movs	r1, #4
 80013e2:	4820      	ldr	r0, [pc, #128]	; (8001464 <homingArm2+0x1fc>)
 80013e4:	f006 fcfe 	bl	8007de4 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01d      	beq.n	800142a <homingArm2+0x1c2>
			HAL_Delay(30);		//Para filtrar transitorio
 80013ee:	201e      	movs	r0, #30
 80013f0:	f005 ff90 	bl	8007314 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80013f4:	2104      	movs	r1, #4
 80013f6:	481b      	ldr	r0, [pc, #108]	; (8001464 <homingArm2+0x1fc>)
 80013f8:	f006 fcf4 	bl	8007de4 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d013      	beq.n	800142a <homingArm2+0x1c2>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <homingArm2+0x1e8>)
 8001406:	f009 f97d 	bl	800a704 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm2\n\r", 9, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2209      	movs	r2, #9
 800140e:	4919      	ldr	r1, [pc, #100]	; (8001474 <homingArm2+0x20c>)
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <homingArm2+0x210>)
 8001412:	f00a fd2b 	bl	800be6c <HAL_UART_Transmit>
				titha2 = 0;
 8001416:	4919      	ldr	r1, [pc, #100]	; (800147c <homingArm2+0x214>)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <homingArm2+0x204>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <homingArm2+0x204>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0b1      	beq.n	8001396 <homingArm2+0x12e>
			}
		}
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	00000000 	.word	0x00000000
 8001444:	404e0000 	.word	0x404e0000
 8001448:	00000000 	.word	0x00000000
 800144c:	40c2c000 	.word	0x40c2c000
 8001450:	2400064c 	.word	0x2400064c
 8001454:	24000308 	.word	0x24000308
 8001458:	3fe00000 	.word	0x3fe00000
 800145c:	24000000 	.word	0x24000000
 8001460:	40001c00 	.word	0x40001c00
 8001464:	58021000 	.word	0x58021000
 8001468:	58020800 	.word	0x58020800
 800146c:	24000304 	.word	0x24000304
 8001470:	3ff00000 	.word	0x3ff00000
 8001474:	08012ad4 	.word	0x08012ad4
 8001478:	24000c98 	.word	0x24000c98
 800147c:	24000340 	.word	0x24000340

08001480 <homingArm3>:

void homingArm3(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	4860      	ldr	r0, [pc, #384]	; (8001618 <homingArm3+0x198>)
 8001496:	f009 f935 	bl	800a704 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800149a:	4960      	ldr	r1, [pc, #384]	; (800161c <homingArm3+0x19c>)
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <homingArm3+0x1a0>)
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = ((Fcl * 60) / (rpm * ((TIM14->PSC) + 1) * 9600)) - 1;
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <homingArm3+0x1a4>)
 80014a8:	ed93 7b00 	vldr	d7, [r3]
 80014ac:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001608 <homingArm3+0x188>
 80014b0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <homingArm3+0x1a8>)
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	3301      	adds	r3, #1
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <homingArm3+0x19c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014cc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001610 <homingArm3+0x190>
 80014d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <homingArm3+0x1a8>)
 80014e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80014ec:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <homingArm3+0x1a8>)
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <homingArm3+0x1a8>)
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80014f6:	2110      	movs	r1, #16
 80014f8:	484c      	ldr	r0, [pc, #304]	; (800162c <homingArm3+0x1ac>)
 80014fa:	f006 fc73 	bl	8007de4 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d114      	bne.n	800152e <homingArm3+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001504:	e00c      	b.n	8001520 <homingArm3+0xa0>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150c:	4848      	ldr	r0, [pc, #288]	; (8001630 <homingArm3+0x1b0>)
 800150e:	f006 fc81 	bl	8007e14 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	4840      	ldr	r0, [pc, #256]	; (8001618 <homingArm3+0x198>)
 8001516:	f009 f89d 	bl	800a654 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 800151a:	201e      	movs	r0, #30
 800151c:	f005 fefa 	bl	8007314 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001520:	2110      	movs	r1, #16
 8001522:	4842      	ldr	r0, [pc, #264]	; (800162c <homingArm3+0x1ac>)
 8001524:	f006 fc5e 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0eb      	beq.n	8001506 <homingArm3+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <homingArm3+0x1b0>)
 8001536:	f006 fc6d 	bl	8007e14 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800153a:	2100      	movs	r1, #0
 800153c:	4836      	ldr	r0, [pc, #216]	; (8001618 <homingArm3+0x198>)
 800153e:	f009 f889 	bl	800a654 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <homingArm3+0x1b4>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001548:	e049      	b.n	80015de <homingArm3+0x15e>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800154a:	2110      	movs	r1, #16
 800154c:	4837      	ldr	r0, [pc, #220]	; (800162c <homingArm3+0x1ac>)
 800154e:	f006 fc49 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d114      	bne.n	8001582 <homingArm3+0x102>
			HAL_Delay(30);		//Para filtrar transitorio
 8001558:	201e      	movs	r0, #30
 800155a:	f005 fedb 	bl	8007314 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800155e:	2110      	movs	r1, #16
 8001560:	4832      	ldr	r0, [pc, #200]	; (800162c <homingArm3+0x1ac>)
 8001562:	f006 fc3f 	bl	8007de4 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <homingArm3+0x102>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001572:	482f      	ldr	r0, [pc, #188]	; (8001630 <homingArm3+0x1b0>)
 8001574:	f006 fc4e 	bl	8007e14 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <homingArm3+0x1b8>)
 800157e:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8001582:	ed97 7b00 	vldr	d7, [r7]
 8001586:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800158a:	eeb4 7b46 	vcmp.f64	d7, d6
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d124      	bne.n	80015de <homingArm3+0x15e>
 8001594:	2110      	movs	r1, #16
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <homingArm3+0x1ac>)
 8001598:	f006 fc24 	bl	8007de4 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01d      	beq.n	80015de <homingArm3+0x15e>
			HAL_Delay(30);		//Para filtrar transitorio
 80015a2:	201e      	movs	r0, #30
 80015a4:	f005 feb6 	bl	8007314 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 80015a8:	2110      	movs	r1, #16
 80015aa:	4820      	ldr	r0, [pc, #128]	; (800162c <homingArm3+0x1ac>)
 80015ac:	f006 fc1a 	bl	8007de4 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <homingArm3+0x15e>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80015b6:	2100      	movs	r1, #0
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <homingArm3+0x198>)
 80015ba:	f009 f8a3 	bl	800a704 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm3\n\r", 9, 100);
 80015be:	2364      	movs	r3, #100	; 0x64
 80015c0:	2209      	movs	r2, #9
 80015c2:	491e      	ldr	r1, [pc, #120]	; (800163c <homingArm3+0x1bc>)
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <homingArm3+0x1c0>)
 80015c6:	f00a fc51 	bl	800be6c <HAL_UART_Transmit>
				titha3 = 0;
 80015ca:	491e      	ldr	r1, [pc, #120]	; (8001644 <homingArm3+0x1c4>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <homingArm3+0x1b4>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <homingArm3+0x1b4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0b1      	beq.n	800154a <homingArm3+0xca>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80015e6:	2100      	movs	r1, #0
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <homingArm3+0x1c8>)
 80015ea:	f009 f92f 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80015ee:	2100      	movs	r1, #0
 80015f0:	4816      	ldr	r0, [pc, #88]	; (800164c <homingArm3+0x1cc>)
 80015f2:	f009 f92b 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80015f6:	2100      	movs	r1, #0
 80015f8:	4815      	ldr	r0, [pc, #84]	; (8001650 <homingArm3+0x1d0>)
 80015fa:	f009 f927 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	00000000 	.word	0x00000000
 800160c:	404e0000 	.word	0x404e0000
 8001610:	00000000 	.word	0x00000000
 8001614:	40c2c000 	.word	0x40c2c000
 8001618:	2400068c 	.word	0x2400068c
 800161c:	24000308 	.word	0x24000308
 8001620:	3fe00000 	.word	0x3fe00000
 8001624:	24000000 	.word	0x24000000
 8001628:	40002000 	.word	0x40002000
 800162c:	58021000 	.word	0x58021000
 8001630:	58020800 	.word	0x58020800
 8001634:	24000304 	.word	0x24000304
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	08012ae0 	.word	0x08012ae0
 8001640:	24000c98 	.word	0x24000c98
 8001644:	24000348 	.word	0x24000348
 8001648:	2400050c 	.word	0x2400050c
 800164c:	2400054c 	.word	0x2400054c
 8001650:	2400058c 	.word	0x2400058c

08001654 <interpretaComando>:


float auxM;
uint8_t auxString[10];

void interpretaComando(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 800165a:	4bb5      	ldr	r3, [pc, #724]	; (8001930 <interpretaComando+0x2dc>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3b48      	subs	r3, #72	; 0x48
 8001660:	2b2a      	cmp	r3, #42	; 0x2a
 8001662:	f200 8230 	bhi.w	8001ac6 <interpretaComando+0x472>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <interpretaComando+0x18>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001a5b 	.word	0x08001a5b
 8001670:	08001ac7 	.word	0x08001ac7
 8001674:	08001ac7 	.word	0x08001ac7
 8001678:	08001ac7 	.word	0x08001ac7
 800167c:	08001ac7 	.word	0x08001ac7
 8001680:	08001719 	.word	0x08001719
 8001684:	08001ac7 	.word	0x08001ac7
 8001688:	08001ac7 	.word	0x08001ac7
 800168c:	08001847 	.word	0x08001847
 8001690:	08001ac7 	.word	0x08001ac7
 8001694:	08001ab9 	.word	0x08001ab9
 8001698:	08001ac7 	.word	0x08001ac7
 800169c:	08001ac7 	.word	0x08001ac7
 80016a0:	08001ac7 	.word	0x08001ac7
 80016a4:	08001ac7 	.word	0x08001ac7
 80016a8:	08001ac7 	.word	0x08001ac7
 80016ac:	08001ac7 	.word	0x08001ac7
 80016b0:	08001ac7 	.word	0x08001ac7
 80016b4:	08001ac7 	.word	0x08001ac7
 80016b8:	08001ac7 	.word	0x08001ac7
 80016bc:	08001ac7 	.word	0x08001ac7
 80016c0:	08001ac7 	.word	0x08001ac7
 80016c4:	08001ac7 	.word	0x08001ac7
 80016c8:	08001ac7 	.word	0x08001ac7
 80016cc:	08001ac7 	.word	0x08001ac7
 80016d0:	08001ac7 	.word	0x08001ac7
 80016d4:	08001ac7 	.word	0x08001ac7
 80016d8:	08001ac7 	.word	0x08001ac7
 80016dc:	08001ac7 	.word	0x08001ac7
 80016e0:	08001ac7 	.word	0x08001ac7
 80016e4:	08001ac7 	.word	0x08001ac7
 80016e8:	08001ac7 	.word	0x08001ac7
 80016ec:	08001a5b 	.word	0x08001a5b
 80016f0:	08001ac7 	.word	0x08001ac7
 80016f4:	08001ac7 	.word	0x08001ac7
 80016f8:	08001ac7 	.word	0x08001ac7
 80016fc:	08001ac7 	.word	0x08001ac7
 8001700:	08001719 	.word	0x08001719
 8001704:	08001ac7 	.word	0x08001ac7
 8001708:	08001ac7 	.word	0x08001ac7
 800170c:	08001847 	.word	0x08001847
 8001710:	08001ac7 	.word	0x08001ac7
 8001714:	08001ab9 	.word	0x08001ab9
	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8001718:	4b85      	ldr	r3, [pc, #532]	; (8001930 <interpretaComando+0x2dc>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b33      	cmp	r3, #51	; 0x33
 800171e:	d062      	beq.n	80017e6 <interpretaComando+0x192>
 8001720:	2b33      	cmp	r3, #51	; 0x33
 8001722:	f300 8088 	bgt.w	8001836 <interpretaComando+0x1e2>
 8001726:	2b31      	cmp	r3, #49	; 0x31
 8001728:	d002      	beq.n	8001730 <interpretaComando+0xdc>
 800172a:	2b32      	cmp	r3, #50	; 0x32
 800172c:	d033      	beq.n	8001796 <interpretaComando+0x142>
 800172e:	e082      	b.n	8001836 <interpretaComando+0x1e2>
		case '1':
			HAL_UART_Transmit(&huart3, "Motor1\n\r", 8, 100);
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	2208      	movs	r2, #8
 8001734:	497f      	ldr	r1, [pc, #508]	; (8001934 <interpretaComando+0x2e0>)
 8001736:	4880      	ldr	r0, [pc, #512]	; (8001938 <interpretaComando+0x2e4>)
 8001738:	f00a fb98 	bl	800be6c <HAL_UART_Transmit>
			auxM =  strtod(&rx_buffer[2], NULL);
 800173c:	2100      	movs	r1, #0
 800173e:	487f      	ldr	r0, [pc, #508]	; (800193c <interpretaComando+0x2e8>)
 8001740:	f00e fcb4 	bl	80100ac <strtod>
 8001744:	eeb0 7b40 	vmov.f64	d7, d0
 8001748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800174c:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <interpretaComando+0x2ec>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
			if(auxM>=0 && auxM<=90){
 8001752:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <interpretaComando+0x2ec>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	db12      	blt.n	8001788 <interpretaComando+0x134>
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <interpretaComando+0x2ec>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001944 <interpretaComando+0x2f0>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d808      	bhi.n	8001788 <interpretaComando+0x134>
				titha1 = auxM;
 8001776:	4b72      	ldr	r3, [pc, #456]	; (8001940 <interpretaComando+0x2ec>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <interpretaComando+0x2f4>)
 8001782:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001786:	e05d      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	220a      	movs	r2, #10
 800178c:	496f      	ldr	r1, [pc, #444]	; (800194c <interpretaComando+0x2f8>)
 800178e:	486a      	ldr	r0, [pc, #424]	; (8001938 <interpretaComando+0x2e4>)
 8001790:	f00a fb6c 	bl	800be6c <HAL_UART_Transmit>
			break;
 8001794:	e056      	b.n	8001844 <interpretaComando+0x1f0>
		case '2':
			HAL_UART_Transmit(&huart3, "Motor2\n\r", 8, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	2208      	movs	r2, #8
 800179a:	496d      	ldr	r1, [pc, #436]	; (8001950 <interpretaComando+0x2fc>)
 800179c:	4866      	ldr	r0, [pc, #408]	; (8001938 <interpretaComando+0x2e4>)
 800179e:	f00a fb65 	bl	800be6c <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <interpretaComando+0x2ec>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	db12      	blt.n	80017d8 <interpretaComando+0x184>
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <interpretaComando+0x2ec>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001944 <interpretaComando+0x2f0>
 80017bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d808      	bhi.n	80017d8 <interpretaComando+0x184>
				titha2 = auxM;
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <interpretaComando+0x2ec>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017d0:	4b60      	ldr	r3, [pc, #384]	; (8001954 <interpretaComando+0x300>)
 80017d2:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 80017d6:	e035      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	220a      	movs	r2, #10
 80017dc:	495b      	ldr	r1, [pc, #364]	; (800194c <interpretaComando+0x2f8>)
 80017de:	4856      	ldr	r0, [pc, #344]	; (8001938 <interpretaComando+0x2e4>)
 80017e0:	f00a fb44 	bl	800be6c <HAL_UART_Transmit>
			break;
 80017e4:	e02e      	b.n	8001844 <interpretaComando+0x1f0>
		case '3':
			HAL_UART_Transmit(&huart3, "Motor3\n\r", 8, 100);
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	2208      	movs	r2, #8
 80017ea:	495b      	ldr	r1, [pc, #364]	; (8001958 <interpretaComando+0x304>)
 80017ec:	4852      	ldr	r0, [pc, #328]	; (8001938 <interpretaComando+0x2e4>)
 80017ee:	f00a fb3d 	bl	800be6c <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <interpretaComando+0x2ec>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	db12      	blt.n	8001828 <interpretaComando+0x1d4>
 8001802:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <interpretaComando+0x2ec>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001944 <interpretaComando+0x2f0>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d808      	bhi.n	8001828 <interpretaComando+0x1d4>
				titha3 = auxM;
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <interpretaComando+0x2ec>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <interpretaComando+0x308>)
 8001822:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001826:	e00d      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	220a      	movs	r2, #10
 800182c:	4947      	ldr	r1, [pc, #284]	; (800194c <interpretaComando+0x2f8>)
 800182e:	4842      	ldr	r0, [pc, #264]	; (8001938 <interpretaComando+0x2e4>)
 8001830:	f00a fb1c 	bl	800be6c <HAL_UART_Transmit>
			break;
 8001834:	e006      	b.n	8001844 <interpretaComando+0x1f0>
		default:
			HAL_UART_Transmit(&huart3, "ErrorMotor\n\r", 12, 100);
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	220c      	movs	r2, #12
 800183a:	4949      	ldr	r1, [pc, #292]	; (8001960 <interpretaComando+0x30c>)
 800183c:	483e      	ldr	r0, [pc, #248]	; (8001938 <interpretaComando+0x2e4>)
 800183e:	f00a fb15 	bl	800be6c <HAL_UART_Transmit>
			break;
 8001842:	bf00      	nop
		}
		break;
 8001844:	e146      	b.n	8001ad4 <interpretaComando+0x480>
	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3, "Punto\n\r", 7, 100);
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2207      	movs	r2, #7
 800184a:	4946      	ldr	r1, [pc, #280]	; (8001964 <interpretaComando+0x310>)
 800184c:	483a      	ldr	r0, [pc, #232]	; (8001938 <interpretaComando+0x2e4>)
 800184e:	f00a fb0d 	bl	800be6c <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8001852:	4945      	ldr	r1, [pc, #276]	; (8001968 <interpretaComando+0x314>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001868:	e0d9      	b.n	8001a1e <interpretaComando+0x3ca>
			if(rx_buffer[i] == 'x'){
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4a30      	ldr	r2, [pc, #192]	; (8001930 <interpretaComando+0x2dc>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	2b78      	cmp	r3, #120	; 0x78
 8001872:	d135      	bne.n	80018e0 <interpretaComando+0x28c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001874:	e00c      	b.n	8001890 <interpretaComando+0x23c>
					auxString[j] = rx_buffer[i+1];
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	7bbb      	ldrb	r3, [r7, #14]
 800187c:	492c      	ldr	r1, [pc, #176]	; (8001930 <interpretaComando+0x2dc>)
 800187e:	5c89      	ldrb	r1, [r1, r2]
 8001880:	4a3a      	ldr	r2, [pc, #232]	; (800196c <interpretaComando+0x318>)
 8001882:	54d1      	strb	r1, [r2, r3]
					j++;
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	3301      	adds	r3, #1
 8001888:	73bb      	strb	r3, [r7, #14]
					i++;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <interpretaComando+0x2dc>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d1ec      	bne.n	8001876 <interpretaComando+0x222>
				}
				Pxfin = strtod(&auxString[0], NULL);
 800189c:	2100      	movs	r1, #0
 800189e:	4833      	ldr	r0, [pc, #204]	; (800196c <interpretaComando+0x318>)
 80018a0:	f00e fc04 	bl	80100ac <strtod>
 80018a4:	eeb0 7b40 	vmov.f64	d7, d0
 80018a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <interpretaComando+0x31c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	e007      	b.n	80018c8 <interpretaComando+0x274>
					auxString[k] = 0;
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <interpretaComando+0x318>)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	ddf4      	ble.n	80018b8 <interpretaComando+0x264>
				}
				j=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoX_ok\n\r", 11, 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	220b      	movs	r2, #11
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <interpretaComando+0x320>)
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <interpretaComando+0x2e4>)
 80018da:	f00a fac7 	bl	800be6c <HAL_UART_Transmit>
 80018de:	e09b      	b.n	8001a18 <interpretaComando+0x3c4>
			}
			else if(rx_buffer[i] == 'y'){
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <interpretaComando+0x2dc>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	2b79      	cmp	r3, #121	; 0x79
 80018e8:	d15c      	bne.n	80019a4 <interpretaComando+0x350>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018ea:	e00c      	b.n	8001906 <interpretaComando+0x2b2>
					auxString[j] = rx_buffer[i+1];
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	490f      	ldr	r1, [pc, #60]	; (8001930 <interpretaComando+0x2dc>)
 80018f4:	5c89      	ldrb	r1, [r1, r2]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <interpretaComando+0x318>)
 80018f8:	54d1      	strb	r1, [r2, r3]
					j++;
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73bb      	strb	r3, [r7, #14]
					i++;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <interpretaComando+0x2dc>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	2b20      	cmp	r3, #32
 8001910:	d1ec      	bne.n	80018ec <interpretaComando+0x298>
				}
				Pyfin = strtod(&auxString[0], NULL);
 8001912:	2100      	movs	r1, #0
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <interpretaComando+0x318>)
 8001916:	f00e fbc9 	bl	80100ac <strtod>
 800191a:	eeb0 7b40 	vmov.f64	d7, d0
 800191e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <interpretaComando+0x324>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	e02e      	b.n	800198c <interpretaComando+0x338>
 800192e:	bf00      	nop
 8001930:	240003cc 	.word	0x240003cc
 8001934:	08012aec 	.word	0x08012aec
 8001938:	24000c98 	.word	0x24000c98
 800193c:	240003ce 	.word	0x240003ce
 8001940:	24000310 	.word	0x24000310
 8001944:	42b40000 	.word	0x42b40000
 8001948:	24000338 	.word	0x24000338
 800194c:	08012af8 	.word	0x08012af8
 8001950:	08012b04 	.word	0x08012b04
 8001954:	24000340 	.word	0x24000340
 8001958:	08012b10 	.word	0x08012b10
 800195c:	24000348 	.word	0x24000348
 8001960:	08012b1c 	.word	0x08012b1c
 8001964:	08012b2c 	.word	0x08012b2c
 8001968:	24000458 	.word	0x24000458
 800196c:	24000314 	.word	0x24000314
 8001970:	2400035c 	.word	0x2400035c
 8001974:	08012b34 	.word	0x08012b34
 8001978:	24000360 	.word	0x24000360
					auxString[k] = 0;
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <interpretaComando+0x488>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0a      	cmp	r3, #10
 8001990:	ddf4      	ble.n	800197c <interpretaComando+0x328>
				}
				j=0;
 8001992:	2300      	movs	r3, #0
 8001994:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoY_ok\n\r", 11, 100);
 8001996:	2364      	movs	r3, #100	; 0x64
 8001998:	220b      	movs	r2, #11
 800199a:	4951      	ldr	r1, [pc, #324]	; (8001ae0 <interpretaComando+0x48c>)
 800199c:	4851      	ldr	r0, [pc, #324]	; (8001ae4 <interpretaComando+0x490>)
 800199e:	f00a fa65 	bl	800be6c <HAL_UART_Transmit>
 80019a2:	e039      	b.n	8001a18 <interpretaComando+0x3c4>
			}
			else if(rx_buffer[i] == 'z'){
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	4a50      	ldr	r2, [pc, #320]	; (8001ae8 <interpretaComando+0x494>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	2b7a      	cmp	r3, #122	; 0x7a
 80019ac:	d134      	bne.n	8001a18 <interpretaComando+0x3c4>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019ae:	e00c      	b.n	80019ca <interpretaComando+0x376>
					auxString[j] = rx_buffer[i+1];
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	494c      	ldr	r1, [pc, #304]	; (8001ae8 <interpretaComando+0x494>)
 80019b8:	5c89      	ldrb	r1, [r1, r2]
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <interpretaComando+0x488>)
 80019bc:	54d1      	strb	r1, [r2, r3]
					j++;
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	3301      	adds	r3, #1
 80019c2:	73bb      	strb	r3, [r7, #14]
					i++;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a46      	ldr	r2, [pc, #280]	; (8001ae8 <interpretaComando+0x494>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d1ec      	bne.n	80019b0 <interpretaComando+0x35c>
				}
				Pzfin = strtod(&auxString[0], NULL);
 80019d6:	2100      	movs	r1, #0
 80019d8:	4840      	ldr	r0, [pc, #256]	; (8001adc <interpretaComando+0x488>)
 80019da:	f00e fb67 	bl	80100ac <strtod>
 80019de:	eeb0 7b40 	vmov.f64	d7, d0
 80019e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <interpretaComando+0x498>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	e007      	b.n	8001a02 <interpretaComando+0x3ae>
					auxString[k] = 0;
 80019f2:	4a3a      	ldr	r2, [pc, #232]	; (8001adc <interpretaComando+0x488>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	ddf4      	ble.n	80019f2 <interpretaComando+0x39e>
				}
				j=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoZ_ok\n\r", 11, 100);
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	220b      	movs	r2, #11
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <interpretaComando+0x49c>)
 8001a12:	4834      	ldr	r0, [pc, #208]	; (8001ae4 <interpretaComando+0x490>)
 8001a14:	f00a fa2a 	bl	800be6c <HAL_UART_Transmit>
			}
			i++;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <interpretaComando+0x494>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f af20 	bne.w	800186a <interpretaComando+0x216>
		}
		cinematicaInversa(Pxfin, Pyfin, Pzfin);
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <interpretaComando+0x4a0>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <interpretaComando+0x4a4>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <interpretaComando+0x498>)
 8001a40:	edd3 5a00 	vldr	s11, [r3]
 8001a44:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001a48:	eeb0 2b45 	vmov.f64	d2, d5
 8001a4c:	eeb0 1b46 	vmov.f64	d1, d6
 8001a50:	eeb0 0b47 	vmov.f64	d0, d7
 8001a54:	f003 f980 	bl	8004d58 <cinematicaInversa>
		break;
 8001a58:	e03c      	b.n	8001ad4 <interpretaComando+0x480>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3, "Homing\n\r", 8, 100);
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	4927      	ldr	r1, [pc, #156]	; (8001afc <interpretaComando+0x4a8>)
 8001a60:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <interpretaComando+0x490>)
 8001a62:	f00a fa03 	bl	800be6c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET); //activo Enable
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4825      	ldr	r0, [pc, #148]	; (8001b00 <interpretaComando+0x4ac>)
 8001a6c:	f006 f9d2 	bl	8007e14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2120      	movs	r1, #32
 8001a74:	4822      	ldr	r0, [pc, #136]	; (8001b00 <interpretaComando+0x4ac>)
 8001a76:	f006 f9cd 	bl	8007e14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2140      	movs	r1, #64	; 0x40
 8001a7e:	4820      	ldr	r0, [pc, #128]	; (8001b00 <interpretaComando+0x4ac>)
 8001a80:	f006 f9c8 	bl	8007e14 <HAL_GPIO_WritePin>
		homingAprox();
 8001a84:	f7ff f8f8 	bl	8000c78 <homingAprox>
		homingArm1();
 8001a88:	f7ff fb02 	bl	8001090 <homingArm1>
		homingArm2();
 8001a8c:	f7ff fbec 	bl	8001268 <homingArm2>
		homingArm3();
 8001a90:	f7ff fcf6 	bl	8001480 <homingArm3>
		Pxini=0;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <interpretaComando+0x4b0>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		Pyini=0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <interpretaComando+0x4b4>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
		Pzini = -0.334658034417224;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <interpretaComando+0x4b8>)
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <interpretaComando+0x4bc>)
 8001aa8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "Fin_Homing\n\r", 12, 100);
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	220c      	movs	r2, #12
 8001aae:	4919      	ldr	r1, [pc, #100]	; (8001b14 <interpretaComando+0x4c0>)
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <interpretaComando+0x490>)
 8001ab2:	f00a f9db 	bl	800be6c <HAL_UART_Transmit>

		break;
 8001ab6:	e00d      	b.n	8001ad4 <interpretaComando+0x480>
	case 'R':			//Set RPM
	case 'r':
		HAL_UART_Transmit(&huart3, "RPM\n\r", 5, 100);
 8001ab8:	2364      	movs	r3, #100	; 0x64
 8001aba:	2205      	movs	r2, #5
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <interpretaComando+0x4c4>)
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <interpretaComando+0x490>)
 8001ac0:	f00a f9d4 	bl	800be6c <HAL_UART_Transmit>
		break;
 8001ac4:	e006      	b.n	8001ad4 <interpretaComando+0x480>
	default:
		HAL_UART_Transmit(&huart3, "Nada\n\r", 6, 100);
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	2206      	movs	r2, #6
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <interpretaComando+0x4c8>)
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <interpretaComando+0x490>)
 8001ace:	f00a f9cd 	bl	800be6c <HAL_UART_Transmit>
		break;
 8001ad2:	bf00      	nop
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000314 	.word	0x24000314
 8001ae0:	08012b40 	.word	0x08012b40
 8001ae4:	24000c98 	.word	0x24000c98
 8001ae8:	240003cc 	.word	0x240003cc
 8001aec:	24000364 	.word	0x24000364
 8001af0:	08012b4c 	.word	0x08012b4c
 8001af4:	2400035c 	.word	0x2400035c
 8001af8:	24000360 	.word	0x24000360
 8001afc:	08012b58 	.word	0x08012b58
 8001b00:	58020c00 	.word	0x58020c00
 8001b04:	24000350 	.word	0x24000350
 8001b08:	24000354 	.word	0x24000354
 8001b0c:	24000358 	.word	0x24000358
 8001b10:	beab584c 	.word	0xbeab584c
 8001b14:	08012b64 	.word	0x08012b64
 8001b18:	08012b74 	.word	0x08012b74
 8001b1c:	08012b7c 	.word	0x08012b7c

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	ed2d 8b02 	vpush	{d8}
 8001b26:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f005 fb66 	bl	80071f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f978 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7fe ffa4 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b34:	f001 fb00 	bl	8003138 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b38:	f001 fb6e 	bl	8003218 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b3c:	f001 fbde 	bl	80032fc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001b40:	f005 fa00 	bl	8006f44 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001b44:	f001 fc9c 	bl	8003480 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001b48:	f001 fcfe 	bl	8003548 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001b4c:	f001 fd4c 	bl	80035e8 <MX_TIM14_Init>
  MX_TIM5_Init();
 8001b50:	f001 fc46 	bl	80033e0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001b54:	f001 fd98 	bl	8003688 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001b58:	f005 f95c 	bl	8006e14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b5c:	f005 f9a6 	bl	8006eac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100);
 8001b60:	2364      	movs	r3, #100	; 0x64
 8001b62:	2207      	movs	r2, #7
 8001b64:	498c      	ldr	r1, [pc, #560]	; (8001d98 <main+0x278>)
 8001b66:	488d      	ldr	r0, [pc, #564]	; (8001d9c <main+0x27c>)
 8001b68:	f00a f980 	bl	800be6c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	498c      	ldr	r1, [pc, #560]	; (8001da0 <main+0x280>)
 8001b70:	488a      	ldr	r0, [pc, #552]	; (8001d9c <main+0x27c>)
 8001b72:	f00a fa11 	bl	800bf98 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8001b76:	488b      	ldr	r0, [pc, #556]	; (8001da4 <main+0x284>)
 8001b78:	f008 fc8c 	bl	800a494 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8001b7c:	488a      	ldr	r0, [pc, #552]	; (8001da8 <main+0x288>)
 8001b7e:	f008 fc89 	bl	800a494 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8001b82:	488a      	ldr	r0, [pc, #552]	; (8001dac <main+0x28c>)
 8001b84:	f008 fc86 	bl	800a494 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4889      	ldr	r0, [pc, #548]	; (8001db0 <main+0x290>)
 8001b8c:	f008 fe5e 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8001b90:	2100      	movs	r1, #0
 8001b92:	4888      	ldr	r0, [pc, #544]	; (8001db4 <main+0x294>)
 8001b94:	f008 fe5a 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4887      	ldr	r0, [pc, #540]	; (8001db8 <main+0x298>)
 8001b9c:	f008 fe56 	bl	800a84c <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, "Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8001ba0:	2364      	movs	r3, #100	; 0x64
 8001ba2:	2218      	movs	r2, #24
 8001ba4:	4985      	ldr	r1, [pc, #532]	; (8001dbc <main+0x29c>)
 8001ba6:	487d      	ldr	r0, [pc, #500]	; (8001d9c <main+0x27c>)
 8001ba8:	f00a f960 	bl	800be6c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <main+0x2a0>)
 8001bae:	ed93 7b00 	vldr	d7, [r3]
 8001bb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bb6:	eeb4 7b46 	vcmp.f64	d7, d6
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d1f5      	bne.n	8001bac <main+0x8c>
			FlagButton = 0;
 8001bc0:	497f      	ldr	r1, [pc, #508]	; (8001dc0 <main+0x2a0>)
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
			distancia = sqrt(pow(Pxfin - Pxini, 2) + pow(Pyfin - Pyini, 2) + pow(Pzfin - Pzini, 2));
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <main+0x2a4>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <main+0x2a8>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001be6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bea:	f010 fb19 	bl	8012220 <pow>
 8001bee:	eeb0 8b40 	vmov.f64	d8, d0
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <main+0x2ac>)
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <main+0x2b0>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c06:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c0a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c0e:	f010 fb07 	bl	8012220 <pow>
 8001c12:	eeb0 7b40 	vmov.f64	d7, d0
 8001c16:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	; (8001dd4 <main+0x2b4>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <main+0x2b8>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c32:	eeb0 0b47 	vmov.f64	d0, d7
 8001c36:	f010 faf3 	bl	8012220 <pow>
 8001c3a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c3e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c42:	eeb0 0b47 	vmov.f64	d0, d7
 8001c46:	f010 fd6b 	bl	8012720 <sqrt>
 8001c4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c52:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <main+0x2bc>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pxfin - Pxini) / distancia;	//Vector director en X
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <main+0x2a4>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <main+0x2a8>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c68:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <main+0x2bc>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <main+0x2c0>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pyfin - Pyini) / distancia;	//Vector director en Y
 8001c78:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <main+0x2ac>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <main+0x2b0>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <main+0x2bc>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <main+0x2c0>)
 8001c94:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pzfin - Pzini) / distancia;	//Vector director en Z
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <main+0x2b4>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <main+0x2b8>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <main+0x2bc>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <main+0x2c0>)
 8001cb4:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <main+0x2c4>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc2:	f000 fbe1 	bl	8002488 <configStepMotor1>
			configStepMotor2(titha2);
 8001cc6:	4b48      	ldr	r3, [pc, #288]	; (8001de8 <main+0x2c8>)
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd0:	f000 fc9a 	bl	8002608 <configStepMotor2>
			configStepMotor3(titha3);
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <main+0x2cc>)
 8001cd6:	ed93 7b00 	vldr	d7, [r3]
 8001cda:	eeb0 0b47 	vmov.f64	d0, d7
 8001cde:	f000 fd53 	bl	8002788 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <main+0x2bc>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cf4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8001d88 <main+0x268>
 8001cf8:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8001d90 <main+0x270>
 8001cfc:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001d90 <main+0x270>
 8001d00:	eeb0 1b47 	vmov.f64	d1, d7
 8001d04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001d90 <main+0x270>
 8001d08:	f001 feea 	bl	8003ae0 <inicializarTrayectoria>
			FlagTiempo = 0;
 8001d0c:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <main+0x2d0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8001d12:	4938      	ldr	r1, [pc, #224]	; (8001df4 <main+0x2d4>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <main+0x2d8>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8001d2e:	4933      	ldr	r1, [pc, #204]	; (8001dfc <main+0x2dc>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8001d3c:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <main+0x2e0>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8001d42:	4930      	ldr	r1, [pc, #192]	; (8001e04 <main+0x2e4>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8001d50:	492d      	ldr	r1, [pc, #180]	; (8001e08 <main+0x2e8>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8001d5e:	492b      	ldr	r1, [pc, #172]	; (8001e0c <main+0x2ec>)
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8001d6c:	4928      	ldr	r1, [pc, #160]	; (8001e10 <main+0x2f0>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <main+0x2f4>)
 8001d74:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8001d78:	4827      	ldr	r0, [pc, #156]	; (8001e18 <main+0x2f8>)
 8001d7a:	f008 fb8b 	bl	800a494 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8001d7e:	4827      	ldr	r0, [pc, #156]	; (8001e1c <main+0x2fc>)
 8001d80:	f008 fbde 	bl	800a540 <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8001d84:	e712      	b.n	8001bac <main+0x8c>
 8001d86:	bf00      	nop
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fd99999 	.word	0x3fd99999
	...
 8001d98:	24000008 	.word	0x24000008
 8001d9c:	24000c98 	.word	0x24000c98
 8001da0:	240003ea 	.word	0x240003ea
 8001da4:	2400060c 	.word	0x2400060c
 8001da8:	2400064c 	.word	0x2400064c
 8001dac:	2400068c 	.word	0x2400068c
 8001db0:	2400050c 	.word	0x2400050c
 8001db4:	2400054c 	.word	0x2400054c
 8001db8:	2400058c 	.word	0x2400058c
 8001dbc:	08012b84 	.word	0x08012b84
 8001dc0:	24000450 	.word	0x24000450
 8001dc4:	2400035c 	.word	0x2400035c
 8001dc8:	24000350 	.word	0x24000350
 8001dcc:	24000360 	.word	0x24000360
 8001dd0:	24000354 	.word	0x24000354
 8001dd4:	24000364 	.word	0x24000364
 8001dd8:	24000358 	.word	0x24000358
 8001ddc:	24000368 	.word	0x24000368
 8001de0:	2400036c 	.word	0x2400036c
 8001de4:	24000338 	.word	0x24000338
 8001de8:	24000340 	.word	0x24000340
 8001dec:	24000348 	.word	0x24000348
 8001df0:	240003ec 	.word	0x240003ec
 8001df4:	24000410 	.word	0x24000410
 8001df8:	24000418 	.word	0x24000418
 8001dfc:	24000010 	.word	0x24000010
 8001e00:	240004a8 	.word	0x240004a8
 8001e04:	24000460 	.word	0x24000460
 8001e08:	24000468 	.word	0x24000468
 8001e0c:	24000470 	.word	0x24000470
 8001e10:	240004b0 	.word	0x240004b0
 8001e14:	3ff00000 	.word	0x3ff00000
 8001e18:	240005cc 	.word	0x240005cc
 8001e1c:	240006cc 	.word	0x240006cc

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0cc      	sub	sp, #304	; 0x130
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e2a:	224c      	movs	r2, #76	; 0x4c
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00d fb64 	bl	800f4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00d fb5d 	bl	800f4fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	23bc      	movs	r3, #188	; 0xbc
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2100      	movs	r1, #0
 8001e52:	f00d fb53 	bl	800f4fc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f006 f810 	bl	8007e7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <SystemClock_Config+0x18c>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <SystemClock_Config+0x18c>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e74:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <SystemClock_Config+0x18c>)
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f003 0201 	and.w	r2, r3, #1
 8001e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <SystemClock_Config+0x190>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e8e:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <SystemClock_Config+0x190>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <SystemClock_Config+0x190>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eb0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001eb2:	bf00      	nop
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <SystemClock_Config+0x190>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec0:	d1f8      	bne.n	8001eb4 <SystemClock_Config+0x94>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001efe:	230c      	movs	r3, #12
 8001f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 ffeb 	bl	8007ef0 <HAL_RCC_OscConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001f20:	f000 faaa 	bl	8002478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	233f      	movs	r3, #63	; 0x3f
 8001f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f36:	2308      	movs	r3, #8
 8001f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f006 fba4 	bl	80086a8 <HAL_RCC_ClockConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001f66:	f000 fa87 	bl	8002478 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8001f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f72:	2203      	movs	r2, #3
 8001f74:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f7e:	2200      	movs	r2, #0
 8001f80:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f006 feee 	bl	8008d74 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0x182>
  {
    Error_Handler();
 8001f9e:	f000 fa6b 	bl	8002478 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	58000400 	.word	0x58000400
 8001fb0:	58024800 	.word	0x58024800

08001fb4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x20>
	case BUTTON_Pin:
		FlagButton = 1;
 8001fc6:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x30>)
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x34>)
 8001fce:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_EXTI_Callback+0x22>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 8001fd4:	bf00      	nop
	}

}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	24000450 	.word	0x24000450
 8001fe8:	3ff00000 	.word	0x3ff00000

08001fec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <HAL_UART_RxCpltCallback+0xb0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d13d      	bne.n	800207a <HAL_UART_RxCpltCallback+0x8e>
		char dato;
		dato = rx_data;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_UART_RxCpltCallback+0xb4>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b3a      	cmp	r3, #58	; 0x3a
 8002008:	d006      	beq.n	8002018 <HAL_UART_RxCpltCallback+0x2c>
 800200a:	2b3a      	cmp	r3, #58	; 0x3a
 800200c:	dc26      	bgt.n	800205c <HAL_UART_RxCpltCallback+0x70>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d009      	beq.n	8002026 <HAL_UART_RxCpltCallback+0x3a>
 8002012:	2b0d      	cmp	r3, #13
 8002014:	d012      	beq.n	800203c <HAL_UART_RxCpltCallback+0x50>
 8002016:	e021      	b.n	800205c <HAL_UART_RxCpltCallback+0x70>
		case ':':
			rx_index = 0;
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_UART_RxCpltCallback+0xbc>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
			break;
 8002024:	e030      	b.n	8002088 <HAL_UART_RxCpltCallback+0x9c>
		case 8:
			if (rx_index > 0) {
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d027      	beq.n	800207e <HAL_UART_RxCpltCallback+0x92>
				rx_index--;
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 8002038:	701a      	strb	r2, [r3, #0]
			}
			break;
 800203a:	e020      	b.n	800207e <HAL_UART_RxCpltCallback+0x92>
		case '\r':
			if (cm0 == 1) {
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_UART_RxCpltCallback+0xbc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11e      	bne.n	8002082 <HAL_UART_RxCpltCallback+0x96>
				rx_buffer[rx_index] = 0;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_UART_RxCpltCallback+0xc0>)
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002050:	f7ff fb00 	bl	8001654 <interpretaComando>
				cm0 = 0;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_UART_RxCpltCallback+0xbc>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
			}
			break;
 800205a:	e012      	b.n	8002082 <HAL_UART_RxCpltCallback+0x96>
		default:
			if (rx_index < 30) {
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b1d      	cmp	r3, #29
 8002062:	d810      	bhi.n	8002086 <HAL_UART_RxCpltCallback+0x9a>
				rx_buffer[rx_index++] = dato;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	b2d1      	uxtb	r1, r2
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_UART_RxCpltCallback+0xb8>)
 800206e:	7011      	strb	r1, [r2, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_UART_RxCpltCallback+0xc0>)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002078:	e005      	b.n	8002086 <HAL_UART_RxCpltCallback+0x9a>
		}
	}
 800207a:	bf00      	nop
 800207c:	e004      	b.n	8002088 <HAL_UART_RxCpltCallback+0x9c>
			break;
 800207e:	bf00      	nop
 8002080:	e002      	b.n	8002088 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8002082:	bf00      	nop
 8002084:	e000      	b.n	8002088 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8002086:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002088:	2201      	movs	r2, #1
 800208a:	4905      	ldr	r1, [pc, #20]	; (80020a0 <HAL_UART_RxCpltCallback+0xb4>)
 800208c:	4808      	ldr	r0, [pc, #32]	; (80020b0 <HAL_UART_RxCpltCallback+0xc4>)
 800208e:	f009 ff83 	bl	800bf98 <HAL_UART_Receive_IT>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40004800 	.word	0x40004800
 80020a0:	240003ea 	.word	0x240003ea
 80020a4:	240003c8 	.word	0x240003c8
 80020a8:	240003eb 	.word	0x240003eb
 80020ac:	240003cc 	.word	0x240003cc
 80020b0:	24000c98 	.word	0x24000c98

080020b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	__NOP();
 80020bc:	bf00      	nop
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d116      	bne.n	800210c <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d10a      	bne.n	8002100 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 80020ea:	2100      	movs	r1, #0
 80020ec:	4827      	ldr	r0, [pc, #156]	; (800218c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80020ee:	f008 fb09 	bl	800a704 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 80020f2:	4927      	ldr	r1, [pc, #156]	; (8002190 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 80020fe:	e03c      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002108:	6013      	str	r3, [r2, #0]
}
 800210a:	e036      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d116      	bne.n	8002144 <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d10a      	bne.n	8002138 <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8002122:	2100      	movs	r1, #0
 8002124:	481f      	ldr	r0, [pc, #124]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002126:	f008 faed 	bl	800a704 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 800212a:	491f      	ldr	r1, [pc, #124]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002132:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002136:	e020      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002140:	6013      	str	r3, [r2, #0]
}
 8002142:	e01a      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <HAL_TIM_IC_CaptureCallback+0xe0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d115      	bne.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d10a      	bne.n	8002170 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 800215a:	2100      	movs	r1, #0
 800215c:	4816      	ldr	r0, [pc, #88]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0xec>)
 800215e:	f008 fad1 	bl	800a704 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800216a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800216e:	e004      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	24000320 	.word	0x24000320
 8002188:	2400032c 	.word	0x2400032c
 800218c:	2400060c 	.word	0x2400060c
 8002190:	24000410 	.word	0x24000410
 8002194:	3ff00000 	.word	0x3ff00000
 8002198:	40000400 	.word	0x40000400
 800219c:	24000324 	.word	0x24000324
 80021a0:	24000330 	.word	0x24000330
 80021a4:	2400064c 	.word	0x2400064c
 80021a8:	24000418 	.word	0x24000418
 80021ac:	40000800 	.word	0x40000800
 80021b0:	24000328 	.word	0x24000328
 80021b4:	24000334 	.word	0x24000334
 80021b8:	2400068c 	.word	0x2400068c
 80021bc:	24000010 	.word	0x24000010

080021c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a91      	ldr	r2, [pc, #580]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8110 	bne.w	80023f2 <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 80021d2:	4b90      	ldr	r3, [pc, #576]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80021d4:	ed93 7b00 	vldr	d7, [r3]
 80021d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80021dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	d12d      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x82>
 80021e6:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80021e8:	ed93 7b00 	vldr	d7, [r3]
 80021ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80021f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d123      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x82>
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80021fc:	ed93 7b00 	vldr	d7, [r3]
 8002200:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002204:	eeb4 7b46 	vcmp.f64	d7, d6
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d119      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x82>
			HAL_TIM_Base_Stop_IT(&htim15);
 800220e:	4880      	ldr	r0, [pc, #512]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002210:	f008 f9c0 	bl	800a594 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8002214:	4882      	ldr	r0, [pc, #520]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002216:	f008 f967 	bl	800a4e8 <HAL_TIM_Base_Stop>
			Pxini = Pxfin;
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a82      	ldr	r2, [pc, #520]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002220:	6013      	str	r3, [r2, #0]
			Pyini = Pyfin;
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a82      	ldr	r2, [pc, #520]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002228:	6013      	str	r3, [r2, #0]
			Pzini = Pzfin;
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a82      	ldr	r2, [pc, #520]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002230:	6013      	str	r3, [r2, #0]
			mandalemecha = 0;
 8002232:	4982      	ldr	r1, [pc, #520]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 8002240:	e0d7      	b.n	80023f2 <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x96>
				FlagTiempo = 1;
 800224a:	4b7d      	ldr	r3, [pc, #500]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 8002250:	4b7c      	ldr	r3, [pc, #496]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 8002256:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	3301      	adds	r3, #1
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002270:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8002400 <HAL_TIM_PeriodElapsedCallback+0x240>
 8002274:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002278:	ee26 7b07 	vmul.f64	d7, d6, d7
 800227c:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800227e:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 8002282:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002284:	ed93 7b00 	vldr	d7, [r3]
 8002288:	eeb0 0b47 	vmov.f64	d0, d7
 800228c:	f002 f9ce 	bl	800462c <obtenerVelCurva>
			Recta3D[0] = Pxini + X * vDirector[0];
 8002290:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800229a:	4b6c      	ldr	r3, [pc, #432]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80022a6:	ed93 7b00 	vldr	d7, [r3]
 80022aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022b2:	4b68      	ldr	r3, [pc, #416]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80022b4:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pyini + X * vDirector[1];
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80022c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80022c8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022cc:	4b60      	ldr	r3, [pc, #384]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80022ce:	ed93 7b00 	vldr	d7, [r3]
 80022d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80022dc:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pzini + X * vDirector[2];
 80022e0:	4b55      	ldr	r3, [pc, #340]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80022ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80022f0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022f4:	4b56      	ldr	r3, [pc, #344]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80022f6:	ed93 7b00 	vldr	d7, [r3]
 80022fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002304:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002314:	ed93 7b00 	vldr	d7, [r3]
 8002318:	ee26 7b07 	vmul.f64	d7, d6, d7
 800231c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002408 <HAL_TIM_PeriodElapsedCallback+0x248>
 8002320:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002324:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002326:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 800232a:	4b48      	ldr	r3, [pc, #288]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800232c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002330:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002336:	ed93 7b00 	vldr	d7, [r3]
 800233a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800233e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002408 <HAL_TIM_PeriodElapsedCallback+0x248>
 8002342:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002348:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800234e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002352:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002358:	ed93 7b00 	vldr	d7, [r3]
 800235c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002360:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002408 <HAL_TIM_PeriodElapsedCallback+0x248>
 8002364:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002368:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800236a:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002370:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002374:	493a      	ldr	r1, [pc, #232]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002376:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800237c:	ed93 7b00 	vldr	d7, [r3]
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002382:	ed93 6b02 	vldr	d6, [r3, #8]
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002388:	ed93 2b04 	vldr	d2, [r3, #16]
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800238e:	ed93 3b00 	vldr	d3, [r3]
 8002392:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002394:	ed93 4b02 	vldr	d4, [r3, #8]
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800239a:	ed93 5b04 	vldr	d5, [r3, #16]
 800239e:	eeb0 1b46 	vmov.f64	d1, d6
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	f003 ff4f 	bl	8006248 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80023ac:	ed93 7b00 	vldr	d7, [r3]
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80023b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80023b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80023bc:	eeb0 2b45 	vmov.f64	d2, d5
 80023c0:	eeb0 1b46 	vmov.f64	d1, d6
 80023c4:	eeb0 0b47 	vmov.f64	d0, d7
 80023c8:	f004 fa66 	bl	8006898 <SetPerfilTimers>
			if(Start==1){
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10e      	bne.n	80023f2 <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 80023da:	2100      	movs	r1, #0
 80023dc:	4823      	ldr	r0, [pc, #140]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80023de:	f008 f939 	bl	800a654 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 80023e2:	2100      	movs	r1, #0
 80023e4:	4822      	ldr	r0, [pc, #136]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80023e6:	f008 f935 	bl	800a654 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 80023ea:	2100      	movs	r1, #0
 80023ec:	4821      	ldr	r0, [pc, #132]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80023ee:	f008 f931 	bl	800a654 <HAL_TIM_PWM_Start>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	00000000 	.word	0x00000000
 8002404:	418e8480 	.word	0x418e8480
	...
 8002410:	240006cc 	.word	0x240006cc
 8002414:	24000410 	.word	0x24000410
 8002418:	24000418 	.word	0x24000418
 800241c:	24000010 	.word	0x24000010
 8002420:	240005cc 	.word	0x240005cc
 8002424:	2400035c 	.word	0x2400035c
 8002428:	24000350 	.word	0x24000350
 800242c:	24000360 	.word	0x24000360
 8002430:	24000354 	.word	0x24000354
 8002434:	24000364 	.word	0x24000364
 8002438:	24000358 	.word	0x24000358
 800243c:	240004b0 	.word	0x240004b0
 8002440:	240003ec 	.word	0x240003ec
 8002444:	40000c00 	.word	0x40000c00
 8002448:	240003f0 	.word	0x240003f0
 800244c:	2400036c 	.word	0x2400036c
 8002450:	240003f8 	.word	0x240003f8
 8002454:	24000378 	.word	0x24000378
 8002458:	24000400 	.word	0x24000400
 800245c:	24000390 	.word	0x24000390
 8002460:	240004b8 	.word	0x240004b8
 8002464:	240003a8 	.word	0x240003a8
 8002468:	240004a8 	.word	0x240004a8
 800246c:	2400060c 	.word	0x2400060c
 8002470:	2400064c 	.word	0x2400064c
 8002474:	2400068c 	.word	0x2400068c

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <configStepMotor1+0x150>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <configStepMotor1+0x154>)
 800249a:	ed93 7b00 	vldr	d7, [r3]
 800249e:	ed97 6b00 	vldr	d6, [r7]
 80024a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	db22      	blt.n	80024f2 <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 80024ac:	2102      	movs	r1, #2
 80024ae:	484c      	ldr	r0, [pc, #304]	; (80025e0 <configStepMotor1+0x158>)
 80024b0:	f005 fc98 	bl	8007de4 <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 80024ba:	494a      	ldr	r1, [pc, #296]	; (80025e4 <configStepMotor1+0x15c>)
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <configStepMotor1+0x160>)
 80024c2:	e9c1 2300 	strd	r2, r3, [r1]
 80024c6:	e036      	b.n	8002536 <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 80024c8:	4b44      	ldr	r3, [pc, #272]	; (80025dc <configStepMotor1+0x154>)
 80024ca:	ed93 7b00 	vldr	d7, [r3]
 80024ce:	ed97 6b00 	vldr	d6, [r7]
 80024d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024d6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 80024da:	4940      	ldr	r1, [pc, #256]	; (80025dc <configStepMotor1+0x154>)
 80024dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ea:	4840      	ldr	r0, [pc, #256]	; (80025ec <configStepMotor1+0x164>)
 80024ec:	f005 fc92 	bl	8007e14 <HAL_GPIO_WritePin>
 80024f0:	e021      	b.n	8002536 <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 80024f2:	2101      	movs	r1, #1
 80024f4:	483a      	ldr	r0, [pc, #232]	; (80025e0 <configStepMotor1+0x158>)
 80024f6:	f005 fc75 	bl	8007de4 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8002500:	4938      	ldr	r1, [pc, #224]	; (80025e4 <configStepMotor1+0x15c>)
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <configStepMotor1+0x160>)
 8002508:	e9c1 2300 	strd	r2, r3, [r1]
 800250c:	e013      	b.n	8002536 <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <configStepMotor1+0x154>)
 8002510:	ed93 6b00 	vldr	d6, [r3]
 8002514:	ed97 7b00 	vldr	d7, [r7]
 8002518:	ee36 7b47 	vsub.f64	d7, d6, d7
 800251c:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8002520:	492e      	ldr	r1, [pc, #184]	; (80025dc <configStepMotor1+0x154>)
 8002522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002530:	482e      	ldr	r0, [pc, #184]	; (80025ec <configStepMotor1+0x164>)
 8002532:	f005 fc6f 	bl	8007e14 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <configStepMotor1+0x168>)
 8002538:	ed93 6b00 	vldr	d6, [r3]
 800253c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002540:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <configStepMotor1+0x16c>)
 8002546:	ed93 7b00 	vldr	d7, [r3]
 800254a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800254e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80025d0 <configStepMotor1+0x148>
 8002552:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <configStepMotor1+0x170>)
 8002558:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <configStepMotor1+0x170>)
 800255e:	ed93 7b00 	vldr	d7, [r3]
 8002562:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002566:	ee17 2a90 	vmov	r2, s15
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <configStepMotor1+0x174>)
 800256c:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <configStepMotor1+0x170>)
 8002570:	ed93 6b00 	vldr	d6, [r3]
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <configStepMotor1+0x174>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002580:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <configStepMotor1+0x178>)
 8002586:	ed93 7b00 	vldr	d7, [r3]
 800258a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <configStepMotor1+0x178>)
 8002590:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <configStepMotor1+0x178>)
 8002596:	ed93 7b00 	vldr	d7, [r3]
 800259a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800259e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	da00      	bge.n	80025aa <configStepMotor1+0x122>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 80025a8:	e00e      	b.n	80025c8 <configStepMotor1+0x140>
		remanente1 = remanente1 - 1;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <configStepMotor1+0x178>)
 80025ac:	ed93 7b00 	vldr	d7, [r3]
 80025b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80025b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <configStepMotor1+0x178>)
 80025ba:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <configStepMotor1+0x174>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <configStepMotor1+0x174>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00000000 	.word	0x00000000
 80025d4:	40768000 	.word	0x40768000
 80025d8:	24000320 	.word	0x24000320
 80025dc:	240004c0 	.word	0x240004c0
 80025e0:	58021000 	.word	0x58021000
 80025e4:	24000458 	.word	0x24000458
 80025e8:	3ff00000 	.word	0x3ff00000
 80025ec:	58020800 	.word	0x58020800
 80025f0:	24000018 	.word	0x24000018
 80025f4:	24000020 	.word	0x24000020
 80025f8:	240004d8 	.word	0x240004d8
 80025fc:	2400032c 	.word	0x2400032c
 8002600:	240004f0 	.word	0x240004f0
 8002604:	00000000 	.word	0x00000000

08002608 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 8002612:	4b51      	ldr	r3, [pc, #324]	; (8002758 <configStepMotor2+0x150>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <configStepMotor2+0x154>)
 800261a:	ed93 7b00 	vldr	d7, [r3]
 800261e:	ed97 6b00 	vldr	d6, [r7]
 8002622:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	db22      	blt.n	8002672 <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 800262c:	2108      	movs	r1, #8
 800262e:	484c      	ldr	r0, [pc, #304]	; (8002760 <configStepMotor2+0x158>)
 8002630:	f005 fbd8 	bl	8007de4 <HAL_GPIO_ReadPin>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 800263a:	494a      	ldr	r1, [pc, #296]	; (8002764 <configStepMotor2+0x15c>)
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <configStepMotor2+0x160>)
 8002642:	e9c1 2300 	strd	r2, r3, [r1]
 8002646:	e036      	b.n	80026b6 <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <configStepMotor2+0x154>)
 800264a:	ed93 7b00 	vldr	d7, [r3]
 800264e:	ed97 6b00 	vldr	d6, [r7]
 8002652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002656:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 800265a:	4940      	ldr	r1, [pc, #256]	; (800275c <configStepMotor2+0x154>)
 800265c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002660:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800266a:	4840      	ldr	r0, [pc, #256]	; (800276c <configStepMotor2+0x164>)
 800266c:	f005 fbd2 	bl	8007e14 <HAL_GPIO_WritePin>
 8002670:	e021      	b.n	80026b6 <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8002672:	2104      	movs	r1, #4
 8002674:	483a      	ldr	r0, [pc, #232]	; (8002760 <configStepMotor2+0x158>)
 8002676:	f005 fbb5 	bl	8007de4 <HAL_GPIO_ReadPin>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 8002680:	4938      	ldr	r1, [pc, #224]	; (8002764 <configStepMotor2+0x15c>)
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <configStepMotor2+0x160>)
 8002688:	e9c1 2300 	strd	r2, r3, [r1]
 800268c:	e013      	b.n	80026b6 <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 800268e:	4b33      	ldr	r3, [pc, #204]	; (800275c <configStepMotor2+0x154>)
 8002690:	ed93 6b00 	vldr	d6, [r3]
 8002694:	ed97 7b00 	vldr	d7, [r7]
 8002698:	ee36 7b47 	vsub.f64	d7, d6, d7
 800269c:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80026a0:	492e      	ldr	r1, [pc, #184]	; (800275c <configStepMotor2+0x154>)
 80026a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a6:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b0:	482e      	ldr	r0, [pc, #184]	; (800276c <configStepMotor2+0x164>)
 80026b2:	f005 fbaf 	bl	8007e14 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <configStepMotor2+0x168>)
 80026b8:	ed93 6b00 	vldr	d6, [r3]
 80026bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80026c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <configStepMotor2+0x16c>)
 80026c6:	ed93 7b00 	vldr	d7, [r3]
 80026ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80026ce:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8002750 <configStepMotor2+0x148>
 80026d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <configStepMotor2+0x170>)
 80026d8:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <configStepMotor2+0x170>)
 80026de:	ed93 7b00 	vldr	d7, [r3]
 80026e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026e6:	ee17 2a90 	vmov	r2, s15
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <configStepMotor2+0x174>)
 80026ec:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <configStepMotor2+0x170>)
 80026f0:	ed93 6b00 	vldr	d6, [r3]
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <configStepMotor2+0x174>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002700:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <configStepMotor2+0x178>)
 8002706:	ed93 7b00 	vldr	d7, [r3]
 800270a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <configStepMotor2+0x178>)
 8002710:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <configStepMotor2+0x178>)
 8002716:	ed93 7b00 	vldr	d7, [r3]
 800271a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800271e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	da00      	bge.n	800272a <configStepMotor2+0x122>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 8002728:	e00e      	b.n	8002748 <configStepMotor2+0x140>
		remanente2 = remanente2 - 1;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <configStepMotor2+0x178>)
 800272c:	ed93 7b00 	vldr	d7, [r3]
 8002730:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002734:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <configStepMotor2+0x178>)
 800273a:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <configStepMotor2+0x174>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <configStepMotor2+0x174>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00000000 	.word	0x00000000
 8002754:	40768000 	.word	0x40768000
 8002758:	24000324 	.word	0x24000324
 800275c:	240004c8 	.word	0x240004c8
 8002760:	58021000 	.word	0x58021000
 8002764:	24000458 	.word	0x24000458
 8002768:	3ff00000 	.word	0x3ff00000
 800276c:	58020800 	.word	0x58020800
 8002770:	24000018 	.word	0x24000018
 8002774:	24000020 	.word	0x24000020
 8002778:	240004e0 	.word	0x240004e0
 800277c:	24000330 	.word	0x24000330
 8002780:	240004f8 	.word	0x240004f8
 8002784:	00000000 	.word	0x00000000

08002788 <configStepMotor3>:

void configStepMotor3(double angulo) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 8002792:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <configStepMotor3+0x150>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <configStepMotor3+0x154>)
 800279a:	ed93 7b00 	vldr	d7, [r3]
 800279e:	ed97 6b00 	vldr	d6, [r7]
 80027a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	db22      	blt.n	80027f2 <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 80027ac:	2120      	movs	r1, #32
 80027ae:	484c      	ldr	r0, [pc, #304]	; (80028e0 <configStepMotor3+0x158>)
 80027b0:	f005 fb18 	bl	8007de4 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 80027ba:	494a      	ldr	r1, [pc, #296]	; (80028e4 <configStepMotor3+0x15c>)
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <configStepMotor3+0x160>)
 80027c2:	e9c1 2300 	strd	r2, r3, [r1]
 80027c6:	e036      	b.n	8002836 <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 80027c8:	4b44      	ldr	r3, [pc, #272]	; (80028dc <configStepMotor3+0x154>)
 80027ca:	ed93 7b00 	vldr	d7, [r3]
 80027ce:	ed97 6b00 	vldr	d6, [r7]
 80027d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027d6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 80027da:	4940      	ldr	r1, [pc, #256]	; (80028dc <configStepMotor3+0x154>)
 80027dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 80027e4:	2201      	movs	r2, #1
 80027e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ea:	4840      	ldr	r0, [pc, #256]	; (80028ec <configStepMotor3+0x164>)
 80027ec:	f005 fb12 	bl	8007e14 <HAL_GPIO_WritePin>
 80027f0:	e021      	b.n	8002836 <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 80027f2:	2120      	movs	r1, #32
 80027f4:	483a      	ldr	r0, [pc, #232]	; (80028e0 <configStepMotor3+0x158>)
 80027f6:	f005 faf5 	bl	8007de4 <HAL_GPIO_ReadPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8002800:	4938      	ldr	r1, [pc, #224]	; (80028e4 <configStepMotor3+0x15c>)
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <configStepMotor3+0x160>)
 8002808:	e9c1 2300 	strd	r2, r3, [r1]
 800280c:	e013      	b.n	8002836 <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 800280e:	4b33      	ldr	r3, [pc, #204]	; (80028dc <configStepMotor3+0x154>)
 8002810:	ed93 6b00 	vldr	d6, [r3]
 8002814:	ed97 7b00 	vldr	d7, [r7]
 8002818:	ee36 7b47 	vsub.f64	d7, d6, d7
 800281c:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8002820:	492e      	ldr	r1, [pc, #184]	; (80028dc <configStepMotor3+0x154>)
 8002822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002830:	482e      	ldr	r0, [pc, #184]	; (80028ec <configStepMotor3+0x164>)
 8002832:	f005 faef 	bl	8007e14 <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <configStepMotor3+0x168>)
 8002838:	ed93 6b00 	vldr	d6, [r3]
 800283c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002840:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <configStepMotor3+0x16c>)
 8002846:	ed93 7b00 	vldr	d7, [r3]
 800284a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800284e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80028d0 <configStepMotor3+0x148>
 8002852:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <configStepMotor3+0x170>)
 8002858:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <configStepMotor3+0x170>)
 800285e:	ed93 7b00 	vldr	d7, [r3]
 8002862:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002866:	ee17 2a90 	vmov	r2, s15
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <configStepMotor3+0x174>)
 800286c:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <configStepMotor3+0x170>)
 8002870:	ed93 6b00 	vldr	d6, [r3]
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <configStepMotor3+0x174>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002880:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <configStepMotor3+0x178>)
 8002886:	ed93 7b00 	vldr	d7, [r3]
 800288a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <configStepMotor3+0x178>)
 8002890:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <configStepMotor3+0x178>)
 8002896:	ed93 7b00 	vldr	d7, [r3]
 800289a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800289e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	da00      	bge.n	80028aa <configStepMotor3+0x122>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 80028a8:	e00e      	b.n	80028c8 <configStepMotor3+0x140>
		remanente3 = remanente3 - 1;
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <configStepMotor3+0x178>)
 80028ac:	ed93 7b00 	vldr	d7, [r3]
 80028b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80028b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <configStepMotor3+0x178>)
 80028ba:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <configStepMotor3+0x174>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <configStepMotor3+0x174>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	00000000 	.word	0x00000000
 80028d4:	40768000 	.word	0x40768000
 80028d8:	24000328 	.word	0x24000328
 80028dc:	240004d0 	.word	0x240004d0
 80028e0:	58021000 	.word	0x58021000
 80028e4:	24000458 	.word	0x24000458
 80028e8:	3ff00000 	.word	0x3ff00000
 80028ec:	58020800 	.word	0x58020800
 80028f0:	24000018 	.word	0x24000018
 80028f4:	24000020 	.word	0x24000020
 80028f8:	240004e8 	.word	0x240004e8
 80028fc:	24000334 	.word	0x24000334
 8002900:	24000500 	.word	0x24000500

08002904 <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b096      	sub	sp, #88	; 0x58
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 800290e:	2300      	movs	r3, #0
 8002910:	657b      	str	r3, [r7, #84]	; 0x54
 8002912:	e024      	b.n	800295e <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8002914:	2300      	movs	r3, #0
 8002916:	653b      	str	r3, [r7, #80]	; 0x50
 8002918:	e01b      	b.n	8002952 <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 800291a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	461a      	mov	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	441a      	add	r2, r3
 800292a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	3358      	adds	r3, #88	; 0x58
 8002944:	443b      	add	r3, r7
 8002946:	3b50      	subs	r3, #80	; 0x50
 8002948:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 800294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294e:	3301      	adds	r3, #1
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
 8002952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002954:	2b02      	cmp	r3, #2
 8002956:	dde0      	ble.n	800291a <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	3301      	adds	r3, #1
 800295c:	657b      	str	r3, [r7, #84]	; 0x54
 800295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002960:	2b02      	cmp	r3, #2
 8002962:	ddd7      	ble.n	8002914 <transpuesta+0x10>
		}
	}
	return MTaux;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	2248      	movs	r2, #72	; 0x48
 800296e:	4619      	mov	r1, r3
 8002970:	f00c fdb6 	bl	800f4e0 <memcpy>
}
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	3758      	adds	r7, #88	; 0x58
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <productDot>:

double productDot(double VectA[], double VectB[]) {
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e016      	b.n	80029c6 <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	ed93 6b00 	vldr	d6, [r3]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	ed93 7b00 	vldr	d7, [r3]
 80029b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80029b4:	ed97 6b04 	vldr	d6, [r7, #16]
 80029b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029bc:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	dde5      	ble.n	8002998 <productDot+0x1c>
	}
	return dotaux;
 80029cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80029d4:	eeb0 0b47 	vmov.f64	d0, d7
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <determinante>:

double determinante(double Maux[3][3]) {
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	ed93 6b00 	vldr	d6, [r3]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3318      	adds	r3, #24
 80029f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80029f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3330      	adds	r3, #48	; 0x30
 8002a00:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a08:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8002a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a10:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a14:	eeb0 0b47 	vmov.f64	d0, d7
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b094      	sub	sp, #80	; 0x50
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	ed93 6b02 	vldr	d6, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3330      	adds	r3, #48	; 0x30
 8002a38:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a3c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3330      	adds	r3, #48	; 0x30
 8002a44:	ed93 5b02 	vldr	d5, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a58:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	ed93 6b00 	vldr	d6, [r3]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	3330      	adds	r3, #48	; 0x30
 8002a68:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	3330      	adds	r3, #48	; 0x30
 8002a74:	ed93 5b00 	vldr	d5, [r3]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a88:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	ed93 6b00 	vldr	d6, [r3]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3330      	adds	r3, #48	; 0x30
 8002a98:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3330      	adds	r3, #48	; 0x30
 8002aa4:	ed93 5b00 	vldr	d5, [r3]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	3318      	adds	r3, #24
 8002aac:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ab0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ab4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ab8:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	3330      	adds	r3, #48	; 0x30
 8002ac6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002aca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3330      	adds	r3, #48	; 0x30
 8002ad2:	ed93 5b02 	vldr	d5, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	ed93 7b04 	vldr	d7, [r3, #16]
 8002adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ae4:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	ed93 6b00 	vldr	d6, [r3]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3330      	adds	r3, #48	; 0x30
 8002af2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002af6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3330      	adds	r3, #48	; 0x30
 8002afe:	ed93 5b00 	vldr	d5, [r3]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b10:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	ed93 6b00 	vldr	d6, [r3]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	3330      	adds	r3, #48	; 0x30
 8002b1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3330      	adds	r3, #48	; 0x30
 8002b2a:	ed93 5b00 	vldr	d5, [r3]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b3c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	ed93 6b02 	vldr	d6, [r3, #8]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3318      	adds	r3, #24
 8002b56:	ed93 5b02 	vldr	d5, [r3, #8]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b68:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	ed93 6b00 	vldr	d6, [r3]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3318      	adds	r3, #24
 8002b76:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	3318      	adds	r3, #24
 8002b82:	ed93 5b00 	vldr	d5, [r3]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b94:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	ed93 6b00 	vldr	d6, [r3]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ba6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3318      	adds	r3, #24
 8002bae:	ed93 5b00 	vldr	d5, [r3]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	ed93 7b02 	vldr	d7, [r3, #8]
 8002bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bc0:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	2248      	movs	r2, #72	; 0x48
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f00c fc86 	bl	800f4e0 <memcpy>
}
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	3750      	adds	r7, #80	; 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <inversa>:

array2D inversa(double A[3][3]) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0bc      	sub	sp, #240	; 0xf0
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002be4:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8002be6:	463b      	mov	r3, r7
 8002be8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff19 	bl	8002a22 <adjunta>
 8002bf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bf4:	4639      	mov	r1, r7
 8002bf6:	2248      	movs	r2, #72	; 0x48
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00c fc71 	bl	800f4e0 <memcpy>
	Maux = transpuesta(Maux.m);
 8002bfe:	463b      	mov	r3, r7
 8002c00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fe7c 	bl	8002904 <transpuesta>
 8002c0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c10:	4639      	mov	r1, r7
 8002c12:	2248      	movs	r2, #72	; 0x48
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00c fc63 	bl	800f4e0 <memcpy>
	det = determinante(A);
 8002c1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c1c:	f7ff fee1 	bl	80029e2 <determinante>
 8002c20:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c2a:	e035      	b.n	8002c98 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c32:	e028      	b.n	8002c86 <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8002c34:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002c38:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8002c3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	33f0      	adds	r3, #240	; 0xf0
 8002c54:	443b      	add	r3, r7
 8002c56:	3ba0      	subs	r3, #160	; 0xa0
 8002c58:	ed93 7b00 	vldr	d7, [r3]
 8002c5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c60:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	33f0      	adds	r3, #240	; 0xf0
 8002c74:	443b      	add	r3, r7
 8002c76:	3b58      	subs	r3, #88	; 0x58
 8002c78:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8002c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c80:	3301      	adds	r3, #1
 8002c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	ddd2      	ble.n	8002c34 <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8002c8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c92:	3301      	adds	r3, #1
 8002c94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	ddc5      	ble.n	8002c2c <inversa+0x50>
		}
	}
	return Minv;
 8002ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ca8:	2248      	movs	r2, #72	; 0x48
 8002caa:	4619      	mov	r1, r3
 8002cac:	f00c fc18 	bl	800f4e0 <memcpy>
}
 8002cb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cb2:	37f0      	adds	r7, #240	; 0xf0
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b09c      	sub	sp, #112	; 0x70
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cc8:	e04b      	b.n	8002d62 <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cce:	e042      	b.n	8002d56 <productMatriz+0x9e>
			double suma = 0;
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce0:	e024      	b.n	8002d2c <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8002ce2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	ed93 6b00 	vldr	d6, [r3]
 8002cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	ed93 7b00 	vldr	d7, [r3]
 8002d16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d1a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8002d1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d22:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	3301      	adds	r3, #1
 8002d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	ddd7      	ble.n	8002ce2 <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8002d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3370      	adds	r3, #112	; 0x70
 8002d42:	443b      	add	r3, r7
 8002d44:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8002d48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8002d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d52:	3301      	adds	r3, #1
 8002d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	ddb9      	ble.n	8002cd0 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	3301      	adds	r3, #1
 8002d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	ddb0      	ble.n	8002cca <productMatriz+0x12>
		}
	}
	return producto;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	2248      	movs	r2, #72	; 0x48
 8002d72:	4619      	mov	r1, r3
 8002d74:	f00c fbb4 	bl	800f4e0 <memcpy>
}
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	3770      	adds	r7, #112	; 0x70
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_MspInit+0x44>)
 8002d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_MspInit+0x44>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_MspInit+0x44>)
 8002d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002da4:	2005      	movs	r0, #5
 8002da6:	f004 fbd9 	bl	800755c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2101      	movs	r1, #1
 8002dae:	2051      	movs	r0, #81	; 0x51
 8002db0:	f004 fbdf 	bl	8007572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002db4:	2051      	movs	r0, #81	; 0x51
 8002db6:	f004 fbf6 	bl	80075a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	58024400 	.word	0x58024400

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f004 fa5a 	bl	80072d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f005 f80c 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002e36:	2002      	movs	r0, #2
 8002e38:	f005 f805 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e44:	2004      	movs	r0, #4
 8002e46:	f004 fffe 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e52:	2008      	movs	r0, #8
 8002e54:	f004 fff7 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e60:	2010      	movs	r0, #16
 8002e62:	f004 fff0 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e6e:	2020      	movs	r0, #32
 8002e70:	f004 ffe9 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <TIM2_IRQHandler+0x10>)
 8002e7e:	f007 fdc3 	bl	800aa08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2400050c 	.word	0x2400050c

08002e8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <TIM3_IRQHandler+0x10>)
 8002e92:	f007 fdb9 	bl	800aa08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2400054c 	.word	0x2400054c

08002ea0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TIM4_IRQHandler+0x10>)
 8002ea6:	f007 fdaf 	bl	800aa08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2400058c 	.word	0x2400058c

08002eb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <USART3_IRQHandler+0x10>)
 8002eba:	f009 f945 	bl	800c148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24000c98 	.word	0x24000c98

08002ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ecc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ed0:	f004 ffb9 	bl	8007e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <TIM15_IRQHandler+0x10>)
 8002eee:	f007 fd8b 	bl	800aa08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	240006cc 	.word	0x240006cc

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_kill>:

int _kill(int pid, int sig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f16:	f00c fab9 	bl	800f48c <__errno>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2216      	movs	r2, #22
 8002f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_exit>:

void _exit (int status)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe7 	bl	8002f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f3e:	e7fe      	b.n	8002f3e <_exit+0x12>

08002f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e00a      	b.n	8002f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f52:	f3af 8000 	nop.w
 8002f56:	4601      	mov	r1, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	60ba      	str	r2, [r7, #8]
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dbf0      	blt.n	8002f52 <_read+0x12>
	}

return len;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e009      	b.n	8002fa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	60ba      	str	r2, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf1      	blt.n	8002f8c <_write+0x12>
	}
	return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_close>:

int _close(int file)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fda:	605a      	str	r2, [r3, #4]
	return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_isatty>:

int _isatty(int file)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	return 0;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <_sbrk+0x50>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <_sbrk+0x16>
		heap_end = &end;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <_sbrk+0x50>)
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <_sbrk+0x54>)
 8003030:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <_sbrk+0x50>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <_sbrk+0x50>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	466a      	mov	r2, sp
 8003042:	4293      	cmp	r3, r2
 8003044:	d907      	bls.n	8003056 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003046:	f00c fa21 	bl	800f48c <__errno>
 800304a:	4603      	mov	r3, r0
 800304c:	220c      	movs	r2, #12
 800304e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	e006      	b.n	8003064 <_sbrk+0x48>
	}

	heap_end += incr;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <_sbrk+0x50>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <_sbrk+0x50>)
 8003060:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	24000508 	.word	0x24000508
 8003070:	24000d38 	.word	0x24000d38

08003074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003078:	4b29      	ldr	r3, [pc, #164]	; (8003120 <SystemInit+0xac>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a28      	ldr	r2, [pc, #160]	; (8003120 <SystemInit+0xac>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <SystemInit+0xb0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <SystemInit+0xb0>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <SystemInit+0xb0>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <SystemInit+0xb0>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4921      	ldr	r1, [pc, #132]	; (8003124 <SystemInit+0xb0>)
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <SystemInit+0xb4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <SystemInit+0xb0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <SystemInit+0xb0>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <SystemInit+0xb0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <SystemInit+0xb0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <SystemInit+0xb0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <SystemInit+0xb0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <SystemInit+0xb0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <SystemInit+0xb0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <SystemInit+0xb0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <SystemInit+0xb0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <SystemInit+0xb0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <SystemInit+0xb0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <SystemInit+0xb0>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <SystemInit+0xb0>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <SystemInit+0xb8>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <SystemInit+0xbc>)
 8003100:	4013      	ands	r3, r2
 8003102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003106:	d202      	bcs.n	800310e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <SystemInit+0xc0>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SystemInit+0xac>)
 8003110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003114:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00
 8003124:	58024400 	.word	0x58024400
 8003128:	eaf6ed7f 	.word	0xeaf6ed7f
 800312c:	5c001000 	.word	0x5c001000
 8003130:	ffff0000 	.word	0xffff0000
 8003134:	51008108 	.word	0x51008108

08003138 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800313e:	f107 0320 	add.w	r3, r7, #32
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <MX_TIM2_Init+0xdc>)
 8003166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800316a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <MX_TIM2_Init+0xdc>)
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MX_TIM2_Init+0xdc>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003178:	4b26      	ldr	r3, [pc, #152]	; (8003214 <MX_TIM2_Init+0xdc>)
 800317a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <MX_TIM2_Init+0xdc>)
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <MX_TIM2_Init+0xdc>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800318c:	4821      	ldr	r0, [pc, #132]	; (8003214 <MX_TIM2_Init+0xdc>)
 800318e:	f007 f955 	bl	800a43c <HAL_TIM_Base_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003198:	f7ff f96e 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800319c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031a2:	f107 0320 	add.w	r3, r7, #32
 80031a6:	4619      	mov	r1, r3
 80031a8:	481a      	ldr	r0, [pc, #104]	; (8003214 <MX_TIM2_Init+0xdc>)
 80031aa:	f007 ff01 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80031b4:	f7ff f960 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80031b8:	4816      	ldr	r0, [pc, #88]	; (8003214 <MX_TIM2_Init+0xdc>)
 80031ba:	f007 fb11 	bl	800a7e0 <HAL_TIM_IC_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80031c4:	f7ff f958 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	480f      	ldr	r0, [pc, #60]	; (8003214 <MX_TIM2_Init+0xdc>)
 80031d8:	f008 fd52 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80031e2:	f7ff f949 	bl	8002478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031ea:	2301      	movs	r3, #1
 80031ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	4619      	mov	r1, r3
 80031fc:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_TIM2_Init+0xdc>)
 80031fe:	f007 fd22 	bl	800ac46 <HAL_TIM_IC_ConfigChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003208:	f7ff f936 	bl	8002478 <Error_Handler>
  }

}
 800320c:	bf00      	nop
 800320e:	3730      	adds	r7, #48	; 0x30
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	2400050c 	.word	0x2400050c

08003218 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <MX_TIM3_Init+0xe0>)
 8003248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <MX_TIM3_Init+0xdc>)
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800325c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800326a:	4822      	ldr	r0, [pc, #136]	; (80032f4 <MX_TIM3_Init+0xdc>)
 800326c:	f007 f8e6 	bl	800a43c <HAL_TIM_Base_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003276:	f7ff f8ff 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	4619      	mov	r1, r3
 8003286:	481b      	ldr	r0, [pc, #108]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003288:	f007 fe92 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003292:	f7ff f8f1 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003296:	4817      	ldr	r0, [pc, #92]	; (80032f4 <MX_TIM3_Init+0xdc>)
 8003298:	f007 faa2 	bl	800a7e0 <HAL_TIM_IC_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80032a2:	f7ff f8e9 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4619      	mov	r1, r3
 80032b4:	480f      	ldr	r0, [pc, #60]	; (80032f4 <MX_TIM3_Init+0xdc>)
 80032b6:	f008 fce3 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80032c0:	f7ff f8da 	bl	8002478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032c8:	2301      	movs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	; (80032f4 <MX_TIM3_Init+0xdc>)
 80032dc:	f007 fcb3 	bl	800ac46 <HAL_TIM_IC_ConfigChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80032e6:	f7ff f8c7 	bl	8002478 <Error_Handler>
  }

}
 80032ea:	bf00      	nop
 80032ec:	3730      	adds	r7, #48	; 0x30
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	2400054c 	.word	0x2400054c
 80032f8:	40000400 	.word	0x40000400

080032fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08c      	sub	sp, #48	; 0x30
 8003300:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003302:	f107 0320 	add.w	r3, r7, #32
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800332a:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <MX_TIM4_Init+0xe0>)
 800332c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <MX_TIM4_Init+0xdc>)
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <MX_TIM4_Init+0xdc>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800333c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003340:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <MX_TIM4_Init+0xdc>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800334e:	4822      	ldr	r0, [pc, #136]	; (80033d8 <MX_TIM4_Init+0xdc>)
 8003350:	f007 f874 	bl	800a43c <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800335a:	f7ff f88d 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003362:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003364:	f107 0320 	add.w	r3, r7, #32
 8003368:	4619      	mov	r1, r3
 800336a:	481b      	ldr	r0, [pc, #108]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800336c:	f007 fe20 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003376:	f7ff f87f 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800337a:	4817      	ldr	r0, [pc, #92]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800337c:	f007 fa30 	bl	800a7e0 <HAL_TIM_IC_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003386:	f7ff f877 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	480f      	ldr	r0, [pc, #60]	; (80033d8 <MX_TIM4_Init+0xdc>)
 800339a:	f008 fc71 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80033a4:	f7ff f868 	bl	8002478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033ac:	2301      	movs	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	4619      	mov	r1, r3
 80033be:	4806      	ldr	r0, [pc, #24]	; (80033d8 <MX_TIM4_Init+0xdc>)
 80033c0:	f007 fc41 	bl	800ac46 <HAL_TIM_IC_ConfigChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80033ca:	f7ff f855 	bl	8002478 <Error_Handler>
  }

}
 80033ce:	bf00      	nop
 80033d0:	3730      	adds	r7, #48	; 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	2400058c 	.word	0x2400058c
 80033dc:	40000800 	.word	0x40000800

080033e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <MX_TIM5_Init+0x98>)
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <MX_TIM5_Init+0x9c>)
 8003402:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <MX_TIM5_Init+0x98>)
 8003406:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800340a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM5_Init+0x98>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <MX_TIM5_Init+0x98>)
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <MX_TIM5_Init+0x98>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM5_Init+0x98>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003426:	4814      	ldr	r0, [pc, #80]	; (8003478 <MX_TIM5_Init+0x98>)
 8003428:	f007 f808 	bl	800a43c <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8003432:	f7ff f821 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4619      	mov	r1, r3
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <MX_TIM5_Init+0x98>)
 8003444:	f007 fdb4 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800344e:	f7ff f813 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <MX_TIM5_Init+0x98>)
 8003460:	f008 fc0e 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800346a:	f7ff f805 	bl	8002478 <Error_Handler>
  }

}
 800346e:	bf00      	nop
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	240005cc 	.word	0x240005cc
 800347c:	40000c00 	.word	0x40000c00

08003480 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	; 0x30
 8003484:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	f107 0320 	add.w	r3, r7, #32
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	615a      	str	r2, [r3, #20]
 80034a4:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <MX_TIM12_Init+0xc4>)
 80034aa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034ae:	f240 12f3 	movw	r2, #499	; 0x1f3
 80034b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034bc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80034c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034d0:	f006 ffb4 	bl	800a43c <HAL_TIM_Base_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80034da:	f7fe ffcd 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80034e4:	f107 0320 	add.w	r3, r7, #32
 80034e8:	4619      	mov	r1, r3
 80034ea:	4815      	ldr	r0, [pc, #84]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034ec:	f007 fd60 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80034f6:	f7fe ffbf 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80034fa:	4811      	ldr	r0, [pc, #68]	; (8003540 <MX_TIM12_Init+0xc0>)
 80034fc:	f007 f875 	bl	800a5ea <HAL_TIM_PWM_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003506:	f7fe ffb7 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350a:	2360      	movs	r3, #96	; 0x60
 800350c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800350e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	2200      	movs	r2, #0
 8003520:	4619      	mov	r1, r3
 8003522:	4807      	ldr	r0, [pc, #28]	; (8003540 <MX_TIM12_Init+0xc0>)
 8003524:	f007 fc2c 	bl	800ad80 <HAL_TIM_PWM_ConfigChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800352e:	f7fe ffa3 	bl	8002478 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8003532:	4803      	ldr	r0, [pc, #12]	; (8003540 <MX_TIM12_Init+0xc0>)
 8003534:	f000 fa44 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8003538:	bf00      	nop
 800353a:	3730      	adds	r7, #48	; 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2400060c 	.word	0x2400060c
 8003544:	40001800 	.word	0x40001800

08003548 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
 800355c:	615a      	str	r2, [r3, #20]
 800355e:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <MX_TIM13_Init+0x98>)
 8003562:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <MX_TIM13_Init+0x9c>)
 8003564:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <MX_TIM13_Init+0x98>)
 8003568:	f240 12f3 	movw	r2, #499	; 0x1f3
 800356c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <MX_TIM13_Init+0x98>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <MX_TIM13_Init+0x98>)
 8003576:	f649 4240 	movw	r2, #40000	; 0x9c40
 800357a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <MX_TIM13_Init+0x98>)
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <MX_TIM13_Init+0x98>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003588:	4815      	ldr	r0, [pc, #84]	; (80035e0 <MX_TIM13_Init+0x98>)
 800358a:	f006 ff57 	bl	800a43c <HAL_TIM_Base_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8003594:	f7fe ff70 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003598:	4811      	ldr	r0, [pc, #68]	; (80035e0 <MX_TIM13_Init+0x98>)
 800359a:	f007 f826 	bl	800a5ea <HAL_TIM_PWM_Init>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80035a4:	f7fe ff68 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a8:	2360      	movs	r3, #96	; 0x60
 80035aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80035ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 80035b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	4619      	mov	r1, r3
 80035c0:	4807      	ldr	r0, [pc, #28]	; (80035e0 <MX_TIM13_Init+0x98>)
 80035c2:	f007 fbdd 	bl	800ad80 <HAL_TIM_PWM_ConfigChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80035cc:	f7fe ff54 	bl	8002478 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 80035d0:	4803      	ldr	r0, [pc, #12]	; (80035e0 <MX_TIM13_Init+0x98>)
 80035d2:	f000 f9f5 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 80035d6:	bf00      	nop
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2400064c 	.word	0x2400064c
 80035e4:	40001c00 	.word	0x40001c00

080035e8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8003600:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <MX_TIM14_Init+0x98>)
 8003602:	4a20      	ldr	r2, [pc, #128]	; (8003684 <MX_TIM14_Init+0x9c>)
 8003604:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <MX_TIM14_Init+0x98>)
 8003608:	f240 12f3 	movw	r2, #499	; 0x1f3
 800360c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <MX_TIM14_Init+0x98>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <MX_TIM14_Init+0x98>)
 8003616:	f649 4240 	movw	r2, #40000	; 0x9c40
 800361a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <MX_TIM14_Init+0x98>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_TIM14_Init+0x98>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003628:	4815      	ldr	r0, [pc, #84]	; (8003680 <MX_TIM14_Init+0x98>)
 800362a:	f006 ff07 	bl	800a43c <HAL_TIM_Base_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8003634:	f7fe ff20 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003638:	4811      	ldr	r0, [pc, #68]	; (8003680 <MX_TIM14_Init+0x98>)
 800363a:	f006 ffd6 	bl	800a5ea <HAL_TIM_PWM_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8003644:	f7fe ff18 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003648:	2360      	movs	r3, #96	; 0x60
 800364a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800364c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2200      	movs	r2, #0
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	; (8003680 <MX_TIM14_Init+0x98>)
 8003662:	f007 fb8d 	bl	800ad80 <HAL_TIM_PWM_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 800366c:	f7fe ff04 	bl	8002478 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <MX_TIM14_Init+0x98>)
 8003672:	f000 f9a5 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8003676:	bf00      	nop
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2400068c 	.word	0x2400068c
 8003684:	40002000 	.word	0x40002000

08003688 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800368e:	f107 0310 	add.w	r3, r7, #16
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <MX_TIM15_Init+0xa0>)
 80036aa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036ba:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80036be:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80036d2:	4814      	ldr	r0, [pc, #80]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036d4:	f006 feb2 	bl	800a43c <HAL_TIM_Base_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80036de:	f7fe fecb 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4619      	mov	r1, r3
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <MX_TIM15_Init+0x9c>)
 80036f0:	f007 fc5e 	bl	800afb0 <HAL_TIM_ConfigClockSource>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80036fa:	f7fe febd 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4806      	ldr	r0, [pc, #24]	; (8003724 <MX_TIM15_Init+0x9c>)
 800370c:	f008 fab8 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8003716:	f7fe feaf 	bl	8002478 <Error_Handler>
  }

}
 800371a:	bf00      	nop
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	240006cc 	.word	0x240006cc
 8003728:	40014000 	.word	0x40014000

0800372c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b092      	sub	sp, #72	; 0x48
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d136      	bne.n	80037bc <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800374e:	4b92      	ldr	r3, [pc, #584]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003754:	4a90      	ldr	r2, [pc, #576]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800375e:	4b8e      	ldr	r3, [pc, #568]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376c:	4b8a      	ldr	r3, [pc, #552]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800376e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003772:	4a89      	ldr	r2, [pc, #548]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800377e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 800378a:	2320      	movs	r3, #32
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003792:	2302      	movs	r3, #2
 8003794:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003796:	2300      	movs	r3, #0
 8003798:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800379a:	2301      	movs	r3, #1
 800379c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 800379e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037a2:	4619      	mov	r1, r3
 80037a4:	487d      	ldr	r0, [pc, #500]	; (800399c <HAL_TIM_Base_MspInit+0x270>)
 80037a6:	f004 f96d 	bl	8007a84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80037aa:	2200      	movs	r2, #0
 80037ac:	2101      	movs	r1, #1
 80037ae:	201c      	movs	r0, #28
 80037b0:	f003 fedf 	bl	8007572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037b4:	201c      	movs	r0, #28
 80037b6:	f003 fef6 	bl	80075a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80037ba:	e0e8      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a77      	ldr	r2, [pc, #476]	; (80039a0 <HAL_TIM_Base_MspInit+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d136      	bne.n	8003834 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037c6:	4b74      	ldr	r3, [pc, #464]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037cc:	4a72      	ldr	r2, [pc, #456]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ea:	4a6b      	ldr	r2, [pc, #428]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f4:	4b68      	ldr	r3, [pc, #416]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80037f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 8003802:	2340      	movs	r3, #64	; 0x40
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800380a:	2302      	movs	r3, #2
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003812:	2302      	movs	r3, #2
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 8003816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800381a:	4619      	mov	r1, r3
 800381c:	485f      	ldr	r0, [pc, #380]	; (800399c <HAL_TIM_Base_MspInit+0x270>)
 800381e:	f004 f931 	bl	8007a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2101      	movs	r1, #1
 8003826:	201d      	movs	r0, #29
 8003828:	f003 fea3 	bl	8007572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800382c:	201d      	movs	r0, #29
 800382e:	f003 feba 	bl	80075a6 <HAL_NVIC_EnableIRQ>
}
 8003832:	e0ac      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5a      	ldr	r2, [pc, #360]	; (80039a4 <HAL_TIM_Base_MspInit+0x278>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d137      	bne.n	80038ae <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003844:	4a54      	ldr	r2, [pc, #336]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003846:	f043 0304 	orr.w	r3, r3, #4
 800384a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384e:	4b52      	ldr	r3, [pc, #328]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800385c:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800385e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003862:	4a4d      	ldr	r2, [pc, #308]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386c:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800386e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 800387a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003884:	2302      	movs	r3, #2
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800388c:	2302      	movs	r3, #2
 800388e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 8003890:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003894:	4619      	mov	r1, r3
 8003896:	4844      	ldr	r0, [pc, #272]	; (80039a8 <HAL_TIM_Base_MspInit+0x27c>)
 8003898:	f004 f8f4 	bl	8007a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2101      	movs	r1, #1
 80038a0:	201e      	movs	r0, #30
 80038a2:	f003 fe66 	bl	8007572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038a6:	201e      	movs	r0, #30
 80038a8:	f003 fe7d 	bl	80075a6 <HAL_NVIC_EnableIRQ>
}
 80038ac:	e06f      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_TIM_Base_MspInit+0x280>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10f      	bne.n	80038d8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038be:	4a36      	ldr	r2, [pc, #216]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038c8:	4b33      	ldr	r3, [pc, #204]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	69bb      	ldr	r3, [r7, #24]
}
 80038d6:	e05a      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a34      	ldr	r2, [pc, #208]	; (80039b0 <HAL_TIM_Base_MspInit+0x284>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10f      	bne.n	8003902 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 80038f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	697b      	ldr	r3, [r7, #20]
}
 8003900:	e045      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <HAL_TIM_Base_MspInit+0x288>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10f      	bne.n	800392c <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800390e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800391c:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800391e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
}
 800392a:	e030      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_TIM_Base_MspInit+0x28c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10f      	bne.n	8003956 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003936:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	e01b      	b.n	800398e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_TIM_Base_MspInit+0x290>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d116      	bne.n	800398e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_TIM_Base_MspInit+0x26c>)
 8003972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2101      	movs	r1, #1
 8003982:	2074      	movs	r0, #116	; 0x74
 8003984:	f003 fdf5 	bl	8007572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003988:	2074      	movs	r0, #116	; 0x74
 800398a:	f003 fe0c 	bl	80075a6 <HAL_NVIC_EnableIRQ>
}
 800398e:	bf00      	nop
 8003990:	3748      	adds	r7, #72	; 0x48
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
 800399c:	58020000 	.word	0x58020000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	58020c00 	.word	0x58020c00
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40001800 	.word	0x40001800
 80039b4:	40001c00 	.word	0x40001c00
 80039b8:	40002000 	.word	0x40002000
 80039bc:	40014000 	.word	0x40014000

080039c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	; (8003ac4 <HAL_TIM_MspPostInit+0x104>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d120      	bne.n	8003a24 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 80039e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e8:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f2:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 80039f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1 
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8003a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003a12:	2302      	movs	r3, #2
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	482b      	ldr	r0, [pc, #172]	; (8003acc <HAL_TIM_MspPostInit+0x10c>)
 8003a1e:	f004 f831 	bl	8007a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003a22:	e04a      	b.n	8003aba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <HAL_TIM_MspPostInit+0x110>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d120      	bne.n	8003a70 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8003a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a56:	2302      	movs	r3, #2
 8003a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003a5e:	2309      	movs	r3, #9
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f107 0314 	add.w	r3, r7, #20
 8003a66:	4619      	mov	r1, r3
 8003a68:	481a      	ldr	r0, [pc, #104]	; (8003ad4 <HAL_TIM_MspPostInit+0x114>)
 8003a6a:	f004 f80b 	bl	8007a84 <HAL_GPIO_Init>
}
 8003a6e:	e024      	b.n	8003aba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_TIM_MspPostInit+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d11f      	bne.n	8003aba <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a82:	f043 0320 	orr.w	r3, r3, #32
 8003a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_TIM_MspPostInit+0x108>)
 8003a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003aaa:	2309      	movs	r3, #9
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <HAL_TIM_MspPostInit+0x114>)
 8003ab6:	f003 ffe5 	bl	8007a84 <HAL_GPIO_Init>
}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	; 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40001800 	.word	0x40001800
 8003ac8:	58024400 	.word	0x58024400
 8003acc:	58020400 	.word	0x58020400
 8003ad0:	40001c00 	.word	0x40001c00
 8003ad4:	58021400 	.word	0x58021400
 8003ad8:	40002000 	.word	0x40002000
 8003adc:	00000000 	.word	0x00000000

08003ae0 <inicializarTrayectoria>:
double Vm, VfHip1, VfHip3;
double tfHip1, tiHip2, tfHip2, tiHip3, tfHip3, tiHip4, TiempoTotX, tfHip4;
double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;


void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {	//(Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	ed2d 8b04 	vpush	{d8-d9}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8003aee:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8003af2:	ed87 2b08 	vstr	d2, [r7, #32]
 8003af6:	ed87 3b06 	vstr	d3, [r7, #24]
 8003afa:	ed87 4b04 	vstr	d4, [r7, #16]
 8003afe:	ed87 5b02 	vstr	d5, [r7, #8]
 8003b02:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8003b06:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003b0a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003b0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d519      	bpl.n	8003b4c <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8003b18:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b1c:	eeb1 7b47 	vneg.f64	d7, d7
 8003b20:	4b7e      	ldr	r3, [pc, #504]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003b22:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8003b26:	497e      	ldr	r1, [pc, #504]	; (8003d20 <inicializarTrayectoria+0x240>)
 8003b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b2c:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8003b30:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b34:	eeb1 7b47 	vneg.f64	d7, d7
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003b3a:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8003b3e:	ed97 7b00 	vldr	d7, [r7]
 8003b42:	eeb1 7b47 	vneg.f64	d7, d7
 8003b46:	ed87 7b00 	vstr	d7, [r7]
 8003b4a:	e019      	b.n	8003b80 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8003b4c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003b50:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003b54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	dd10      	ble.n	8003b80 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8003b5e:	496f      	ldr	r1, [pc, #444]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b64:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8003b68:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b6c:	eeb1 7b47 	vneg.f64	d7, d7
 8003b70:	4b6b      	ldr	r3, [pc, #428]	; (8003d20 <inicializarTrayectoria+0x240>)
 8003b72:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8003b76:	496b      	ldr	r1, [pc, #428]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003b78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b7c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8003b80:	ed97 6b08 	vldr	d6, [r7, #32]
 8003b84:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	dd0b      	ble.n	8003baa <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8003b92:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b96:	eeb1 7b47 	vneg.f64	d7, d7
 8003b9a:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003b9c:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8003ba0:	495f      	ldr	r1, [pc, #380]	; (8003d20 <inicializarTrayectoria+0x240>)
 8003ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8003baa:	ed97 6b06 	vldr	d6, [r7, #24]
 8003bae:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	dd0b      	ble.n	8003bd4 <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8003bbc:	4957      	ldr	r1, [pc, #348]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc2:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8003bc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8003bca:	eeb1 7b47 	vneg.f64	d7, d7
 8003bce:	4b54      	ldr	r3, [pc, #336]	; (8003d20 <inicializarTrayectoria+0x240>)
 8003bd0:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003bda:	f000 bd05 	b.w	80045e8 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8003bde:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003be0:	ed93 6b00 	vldr	d6, [r3]
 8003be4:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003be6:	ed93 7b00 	vldr	d7, [r3]
 8003bea:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003bee:	ed97 7b00 	vldr	d7, [r7]
 8003bf2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003bf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003bfa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <inicializarTrayectoria+0x248>)
 8003c00:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8003c04:	4b48      	ldr	r3, [pc, #288]	; (8003d28 <inicializarTrayectoria+0x248>)
 8003c06:	ed93 7b00 	vldr	d7, [r3]
 8003c0a:	eeb0 6bc7 	vabs.f64	d6, d7
 8003c0e:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003c10:	ed93 5b00 	vldr	d5, [r3]
 8003c14:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003c1c:	eeb0 7bc7 	vabs.f64	d7, d7
 8003c20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	dd35      	ble.n	8003c96 <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003c2c:	ed93 6b00 	vldr	d6, [r3]
 8003c30:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d029      	beq.n	8003c96 <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003c44:	ed93 6b00 	vldr	d6, [r3]
 8003c48:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003c4a:	ed93 7b00 	vldr	d7, [r3]
 8003c4e:	eeb0 7bc7 	vabs.f64	d7, d7
 8003c52:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003c58:	ed93 6b00 	vldr	d6, [r3]
 8003c5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c64:	eeb0 6bc7 	vabs.f64	d6, d7
 8003c68:	ed97 7b00 	vldr	d7, [r7]
 8003c6c:	eeb0 7bc7 	vabs.f64	d7, d7
 8003c70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c74:	eeb0 0b47 	vmov.f64	d0, d7
 8003c78:	f00e fd52 	bl	8012720 <sqrt>
 8003c7c:	eeb0 7b40 	vmov.f64	d7, d0
 8003c80:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <inicializarTrayectoria+0x24c>)
 8003c86:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <inicializarTrayectoria+0x24c>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	4922      	ldr	r1, [pc, #136]	; (8003d1c <inicializarTrayectoria+0x23c>)
 8003c92:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8003c96:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <inicializarTrayectoria+0x244>)
 8003c98:	ed93 6b00 	vldr	d6, [r3]
 8003c9c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003ca0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ca4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	d150      	bne.n	8003d50 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8003cae:	4920      	ldr	r1, [pc, #128]	; (8003d30 <inicializarTrayectoria+0x250>)
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8003cbc:	491d      	ldr	r1, [pc, #116]	; (8003d34 <inicializarTrayectoria+0x254>)
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <inicializarTrayectoria+0x258>)
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8003cd8:	4918      	ldr	r1, [pc, #96]	; (8003d3c <inicializarTrayectoria+0x25c>)
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8003ce6:	4916      	ldr	r1, [pc, #88]	; (8003d40 <inicializarTrayectoria+0x260>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8003cf4:	4913      	ldr	r1, [pc, #76]	; (8003d44 <inicializarTrayectoria+0x264>)
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8003d02:	4911      	ldr	r1, [pc, #68]	; (8003d48 <inicializarTrayectoria+0x268>)
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <inicializarTrayectoria+0x26c>)
 8003d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d16:	e9c1 2300 	strd	r2, r3, [r1]
 8003d1a:	e195      	b.n	8004048 <inicializarTrayectoria+0x568>
 8003d1c:	24000a40 	.word	0x24000a40
 8003d20:	24000a48 	.word	0x24000a48
 8003d24:	24000af0 	.word	0x24000af0
 8003d28:	24000b48 	.word	0x24000b48
 8003d2c:	24000b50 	.word	0x24000b50
 8003d30:	24000a68 	.word	0x24000a68
 8003d34:	24000a60 	.word	0x24000a60
 8003d38:	24000a58 	.word	0x24000a58
 8003d3c:	24000a50 	.word	0x24000a50
 8003d40:	24000b08 	.word	0x24000b08
 8003d44:	24000b10 	.word	0x24000b10
 8003d48:	24000b18 	.word	0x24000b18
 8003d4c:	24000ad8 	.word	0x24000ad8
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8003d50:	ed97 6b00 	vldr	d6, [r7]
 8003d54:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003d58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d5c:	4bcf      	ldr	r3, [pc, #828]	; (800409c <inicializarTrayectoria+0x5bc>)
 8003d5e:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8003d62:	49cf      	ldr	r1, [pc, #828]	; (80040a0 <inicializarTrayectoria+0x5c0>)
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8003d70:	4bcc      	ldr	r3, [pc, #816]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003d72:	ed93 5b00 	vldr	d5, [r3]
 8003d76:	4bc9      	ldr	r3, [pc, #804]	; (800409c <inicializarTrayectoria+0x5bc>)
 8003d78:	ed93 7b00 	vldr	d7, [r3]
 8003d7c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8003d80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003d84:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d88:	4bc7      	ldr	r3, [pc, #796]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003d8a:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8003d8e:	49c7      	ldr	r1, [pc, #796]	; (80040ac <inicializarTrayectoria+0x5cc>)
 8003d90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d94:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8003d98:	4bc1      	ldr	r3, [pc, #772]	; (80040a0 <inicializarTrayectoria+0x5c0>)
 8003d9a:	ed93 7b00 	vldr	d7, [r3]
 8003d9e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003da2:	4bc1      	ldr	r3, [pc, #772]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003da4:	ed93 7b00 	vldr	d7, [r3]
 8003da8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003dac:	4bbf      	ldr	r3, [pc, #764]	; (80040ac <inicializarTrayectoria+0x5cc>)
 8003dae:	ed93 7b00 	vldr	d7, [r3]
 8003db2:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8003db6:	4bb9      	ldr	r3, [pc, #740]	; (800409c <inicializarTrayectoria+0x5bc>)
 8003db8:	ed93 7b00 	vldr	d7, [r3]
 8003dbc:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003dc0:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003dc4:	4bb8      	ldr	r3, [pc, #736]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003dc6:	ed93 7b00 	vldr	d7, [r3]
 8003dca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003dce:	eeb0 0b47 	vmov.f64	d0, d7
 8003dd2:	f00e fa25 	bl	8012220 <pow>
 8003dd6:	eeb0 7b40 	vmov.f64	d7, d0
 8003dda:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003dde:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8003de2:	4bb3      	ldr	r3, [pc, #716]	; (80040b0 <inicializarTrayectoria+0x5d0>)
 8003de4:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8003de8:	49b2      	ldr	r1, [pc, #712]	; (80040b4 <inicializarTrayectoria+0x5d4>)
 8003dea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dee:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8003df2:	4bae      	ldr	r3, [pc, #696]	; (80040ac <inicializarTrayectoria+0x5cc>)
 8003df4:	ed93 6b00 	vldr	d6, [r3]
 8003df8:	4bab      	ldr	r3, [pc, #684]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003dfa:	ed93 7b00 	vldr	d7, [r3]
 8003dfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003e02:	4bac      	ldr	r3, [pc, #688]	; (80040b4 <inicializarTrayectoria+0x5d4>)
 8003e04:	ed93 7b00 	vldr	d7, [r3]
 8003e08:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003e0c:	4ba6      	ldr	r3, [pc, #664]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003e0e:	ed93 7b00 	vldr	d7, [r3]
 8003e12:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003e16:	eeb0 0b47 	vmov.f64	d0, d7
 8003e1a:	f00e fa01 	bl	8012220 <pow>
 8003e1e:	eeb0 6b40 	vmov.f64	d6, d0
 8003e22:	4b9f      	ldr	r3, [pc, #636]	; (80040a0 <inicializarTrayectoria+0x5c0>)
 8003e24:	ed93 7b00 	vldr	d7, [r3]
 8003e28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e2c:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8003e30:	4b9d      	ldr	r3, [pc, #628]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003e32:	ed93 7b00 	vldr	d7, [r3]
 8003e36:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003e3a:	eeb0 0b47 	vmov.f64	d0, d7
 8003e3e:	f00e f9ef 	bl	8012220 <pow>
 8003e42:	eeb0 6b40 	vmov.f64	d6, d0
 8003e46:	4b95      	ldr	r3, [pc, #596]	; (800409c <inicializarTrayectoria+0x5bc>)
 8003e48:	ed93 7b00 	vldr	d7, [r3]
 8003e4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e50:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8003e54:	4b98      	ldr	r3, [pc, #608]	; (80040b8 <inicializarTrayectoria+0x5d8>)
 8003e56:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8003e5a:	ed97 7b00 	vldr	d7, [r7]
 8003e5e:	eeb1 6b47 	vneg.f64	d6, d7
 8003e62:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003e66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e6a:	4b94      	ldr	r3, [pc, #592]	; (80040bc <inicializarTrayectoria+0x5dc>)
 8003e6c:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8003e70:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003e72:	ed93 6b00 	vldr	d6, [r3]
 8003e76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003e7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e7e:	4b90      	ldr	r3, [pc, #576]	; (80040c0 <inicializarTrayectoria+0x5e0>)
 8003e80:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8003e84:	4b8f      	ldr	r3, [pc, #572]	; (80040c4 <inicializarTrayectoria+0x5e4>)
 8003e86:	ed93 6b00 	vldr	d6, [r3]
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	; (80040c0 <inicializarTrayectoria+0x5e0>)
 8003e8c:	ed93 7b00 	vldr	d7, [r3]
 8003e90:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003e94:	4b83      	ldr	r3, [pc, #524]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003e96:	ed93 3b00 	vldr	d3, [r3]
 8003e9a:	ed97 4b00 	vldr	d4, [r7]
 8003e9e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003ea2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ea6:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8003eaa:	4b84      	ldr	r3, [pc, #528]	; (80040bc <inicializarTrayectoria+0x5dc>)
 8003eac:	ed93 7b00 	vldr	d7, [r3]
 8003eb0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003eb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003eb8:	4b7a      	ldr	r3, [pc, #488]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003eba:	ed93 3b00 	vldr	d3, [r3]
 8003ebe:	ed97 4b00 	vldr	d4, [r7]
 8003ec2:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003ec6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003eca:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003ecc:	ed93 3b00 	vldr	d3, [r3]
 8003ed0:	ed97 4b00 	vldr	d4, [r7]
 8003ed4:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003ed8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003edc:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8003ee0:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <inicializarTrayectoria+0x5e8>)
 8003ee2:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8003ee6:	4b78      	ldr	r3, [pc, #480]	; (80040c8 <inicializarTrayectoria+0x5e8>)
 8003ee8:	ed93 6b00 	vldr	d6, [r3]
 8003eec:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <inicializarTrayectoria+0x5d0>)
 8003eee:	ed93 7b00 	vldr	d7, [r3]
 8003ef2:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003ef8:	ed93 7b00 	vldr	d7, [r3]
 8003efc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003f00:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <inicializarTrayectoria+0x5c8>)
 8003f02:	ed93 7b00 	vldr	d7, [r3]
 8003f06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f0a:	4b70      	ldr	r3, [pc, #448]	; (80040cc <inicializarTrayectoria+0x5ec>)
 8003f0c:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003f10:	4b64      	ldr	r3, [pc, #400]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003f12:	ed93 7b00 	vldr	d7, [r3]
 8003f16:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8003f1a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <inicializarTrayectoria+0x5e8>)
 8003f20:	ed93 6b00 	vldr	d6, [r3]
 8003f24:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <inicializarTrayectoria+0x5d0>)
 8003f26:	ed93 7b00 	vldr	d7, [r3]
 8003f2a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003f30:	ed93 7b00 	vldr	d7, [r3]
 8003f34:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003f38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003f3c:	eeb0 0b45 	vmov.f64	d0, d5
 8003f40:	f00e f96e 	bl	8012220 <pow>
 8003f44:	eeb0 7b40 	vmov.f64	d7, d0
 8003f48:	ee28 6b07 	vmul.f64	d6, d8, d7
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <inicializarTrayectoria+0x5d8>)
 8003f4e:	ed93 7b00 	vldr	d7, [r3]
 8003f52:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 8003f56:	4b5c      	ldr	r3, [pc, #368]	; (80040c8 <inicializarTrayectoria+0x5e8>)
 8003f58:	ed93 5b00 	vldr	d5, [r3]
 8003f5c:	4b54      	ldr	r3, [pc, #336]	; (80040b0 <inicializarTrayectoria+0x5d0>)
 8003f5e:	ed93 7b00 	vldr	d7, [r3]
 8003f62:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003f66:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003f68:	ed93 7b00 	vldr	d7, [r3]
 8003f6c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003f70:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <inicializarTrayectoria+0x5d0>)
 8003f72:	ed93 7b00 	vldr	d7, [r3]
 8003f76:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f7a:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003f7e:	4b54      	ldr	r3, [pc, #336]	; (80040d0 <inicializarTrayectoria+0x5f0>)
 8003f80:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 8003f84:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <inicializarTrayectoria+0x5c4>)
 8003f86:	ed93 7b00 	vldr	d7, [r3]
 8003f8a:	eeb1 5b47 	vneg.f64	d5, d7
 8003f8e:	ed97 6b00 	vldr	d6, [r7]
 8003f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003f96:	eeb0 6bc7 	vabs.f64	d6, d7
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	; (80040cc <inicializarTrayectoria+0x5ec>)
 8003f9c:	ed93 7b00 	vldr	d7, [r3]
 8003fa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <inicializarTrayectoria+0x5f4>)
 8003fa6:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <inicializarTrayectoria+0x5e8>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	4949      	ldr	r1, [pc, #292]	; (80040d8 <inicializarTrayectoria+0x5f8>)
 8003fb2:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8003fb6:	4b46      	ldr	r3, [pc, #280]	; (80040d0 <inicializarTrayectoria+0x5f0>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	4947      	ldr	r1, [pc, #284]	; (80040dc <inicializarTrayectoria+0x5fc>)
 8003fbe:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <inicializarTrayectoria+0x5f4>)
 8003fc4:	ed93 6b00 	vldr	d6, [r3]
 8003fc8:	4b40      	ldr	r3, [pc, #256]	; (80040cc <inicializarTrayectoria+0x5ec>)
 8003fca:	ed93 7b00 	vldr	d7, [r3]
 8003fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003fd2:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <inicializarTrayectoria+0x5f8>)
 8003fd4:	ed93 7b00 	vldr	d7, [r3]
 8003fd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003fdc:	4b3f      	ldr	r3, [pc, #252]	; (80040dc <inicializarTrayectoria+0x5fc>)
 8003fde:	ed93 7b00 	vldr	d7, [r3]
 8003fe2:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <inicializarTrayectoria+0x5f4>)
 8003fe8:	ed93 6b00 	vldr	d6, [r3]
 8003fec:	4b37      	ldr	r3, [pc, #220]	; (80040cc <inicializarTrayectoria+0x5ec>)
 8003fee:	ed93 7b00 	vldr	d7, [r3]
 8003ff2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ff6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003ffa:	eeb0 0b47 	vmov.f64	d0, d7
 8003ffe:	f00e f90f 	bl	8012220 <pow>
 8004002:	eeb0 6b40 	vmov.f64	d6, d0
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <inicializarTrayectoria+0x5e0>)
 8004008:	ed93 7b00 	vldr	d7, [r3]
 800400c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004010:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8004014:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <inicializarTrayectoria+0x5f4>)
 8004016:	ed93 6b00 	vldr	d6, [r3]
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <inicializarTrayectoria+0x5ec>)
 800401c:	ed93 7b00 	vldr	d7, [r3]
 8004020:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004024:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004028:	eeb0 0b47 	vmov.f64	d0, d7
 800402c:	f00e f8f8 	bl	8012220 <pow>
 8004030:	eeb0 6b40 	vmov.f64	d6, d0
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <inicializarTrayectoria+0x5dc>)
 8004036:	ed93 7b00 	vldr	d7, [r3]
 800403a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800403e:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <inicializarTrayectoria+0x600>)
 8004044:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 8004048:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <inicializarTrayectoria+0x604>)
 800404a:	ed93 7b00 	vldr	d7, [r3]
 800404e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004052:	eeb0 0b47 	vmov.f64	d0, d7
 8004056:	f00e f8e3 	bl	8012220 <pow>
 800405a:	eeb0 5b40 	vmov.f64	d5, d0
 800405e:	ed97 7b00 	vldr	d7, [r7]
 8004062:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004066:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800406a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <inicializarTrayectoria+0x608>)
 8004070:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <inicializarTrayectoria+0x608>)
 8004076:	ed93 7b00 	vldr	d7, [r3]
 800407a:	eeb0 6bc7 	vabs.f64	d6, d7
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <inicializarTrayectoria+0x5e4>)
 8004080:	ed93 5b00 	vldr	d5, [r3]
 8004084:	ed97 7b06 	vldr	d7, [r7, #24]
 8004088:	ee35 7b47 	vsub.f64	d7, d5, d7
 800408c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	dd5e      	ble.n	8004158 <inicializarTrayectoria+0x678>
 800409a:	e027      	b.n	80040ec <inicializarTrayectoria+0x60c>
 800409c:	24000a68 	.word	0x24000a68
 80040a0:	24000a60 	.word	0x24000a60
 80040a4:	24000a40 	.word	0x24000a40
 80040a8:	24000b08 	.word	0x24000b08
 80040ac:	24000a58 	.word	0x24000a58
 80040b0:	24000af8 	.word	0x24000af8
 80040b4:	24000a50 	.word	0x24000a50
 80040b8:	24000ad0 	.word	0x24000ad0
 80040bc:	24000a88 	.word	0x24000a88
 80040c0:	24000a80 	.word	0x24000a80
 80040c4:	24000af0 	.word	0x24000af0
 80040c8:	24000b58 	.word	0x24000b58
 80040cc:	24000b10 	.word	0x24000b10
 80040d0:	24000b60 	.word	0x24000b60
 80040d4:	24000b18 	.word	0x24000b18
 80040d8:	24000a78 	.word	0x24000a78
 80040dc:	24000a70 	.word	0x24000a70
 80040e0:	24000ad8 	.word	0x24000ad8
 80040e4:	24000a48 	.word	0x24000a48
 80040e8:	24000b48 	.word	0x24000b48
			if (fabs(Vm - Vf) != 0) {
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <inicializarTrayectoria+0x6e0>)
 80040ee:	ed93 6b00 	vldr	d6, [r3]
 80040f2:	ed97 7b06 	vldr	d7, [r7, #24]
 80040f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80040fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80040fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004102:	d029      	beq.n	8004158 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <inicializarTrayectoria+0x6e4>)
 8004106:	ed93 6b00 	vldr	d6, [r3]
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <inicializarTrayectoria+0x6e4>)
 800410c:	ed93 7b00 	vldr	d7, [r3]
 8004110:	eeb0 7bc7 	vabs.f64	d7, d7
 8004114:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <inicializarTrayectoria+0x6e0>)
 800411a:	ed93 6b00 	vldr	d6, [r3]
 800411e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004122:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004126:	eeb0 6bc7 	vabs.f64	d6, d7
 800412a:	ed97 7b00 	vldr	d7, [r7]
 800412e:	eeb0 7bc7 	vabs.f64	d7, d7
 8004132:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004136:	eeb0 0b47 	vmov.f64	d0, d7
 800413a:	f00e faf1 	bl	8012720 <sqrt>
 800413e:	eeb0 7b40 	vmov.f64	d7, d0
 8004142:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <inicializarTrayectoria+0x6e8>)
 8004148:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <inicializarTrayectoria+0x6e8>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	491c      	ldr	r1, [pc, #112]	; (80041c4 <inicializarTrayectoria+0x6e4>)
 8004154:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <inicializarTrayectoria+0x6e0>)
 800415a:	ed93 6b00 	vldr	d6, [r3]
 800415e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004162:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004166:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	d139      	bne.n	80041e4 <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <inicializarTrayectoria+0x6ec>)
 8004172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004176:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 800417a:	4915      	ldr	r1, [pc, #84]	; (80041d0 <inicializarTrayectoria+0x6f0>)
 800417c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004180:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <inicializarTrayectoria+0x6f0>)
 8004186:	ed93 6b00 	vldr	d6, [r3]
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <inicializarTrayectoria+0x6f4>)
 800418c:	ed93 7b00 	vldr	d7, [r3]
 8004190:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <inicializarTrayectoria+0x6e0>)
 8004196:	ed93 6b00 	vldr	d6, [r3]
 800419a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800419e:	eeb0 6bc7 	vabs.f64	d6, d7
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <inicializarTrayectoria+0x6f8>)
 80041a4:	ed93 7b00 	vldr	d7, [r3]
 80041a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <inicializarTrayectoria+0x6fc>)
 80041ae:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <inicializarTrayectoria+0x6fc>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	4909      	ldr	r1, [pc, #36]	; (80041e0 <inicializarTrayectoria+0x700>)
 80041ba:	e9c1 2300 	strd	r2, r3, [r1]
 80041be:	e18b      	b.n	80044d8 <inicializarTrayectoria+0x9f8>
 80041c0:	24000af0 	.word	0x24000af0
 80041c4:	24000a48 	.word	0x24000a48
 80041c8:	24000b68 	.word	0x24000b68
 80041cc:	24000b00 	.word	0x24000b00
 80041d0:	24000ae8 	.word	0x24000ae8
 80041d4:	24000ad8 	.word	0x24000ad8
 80041d8:	24000b18 	.word	0x24000b18
 80041dc:	24000b20 	.word	0x24000b20
 80041e0:	24000b38 	.word	0x24000b38
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 80041e4:	4bc7      	ldr	r3, [pc, #796]	; (8004504 <inicializarTrayectoria+0xa24>)
 80041e6:	ed93 7b00 	vldr	d7, [r3]
 80041ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80041ee:	eeb0 0b47 	vmov.f64	d0, d7
 80041f2:	f00e f815 	bl	8012220 <pow>
 80041f6:	eeb0 5b40 	vmov.f64	d5, d0
 80041fa:	ed97 7b00 	vldr	d7, [r7]
 80041fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004202:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004206:	ed97 7b06 	vldr	d7, [r7, #24]
 800420a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800420e:	4bbe      	ldr	r3, [pc, #760]	; (8004508 <inicializarTrayectoria+0xa28>)
 8004210:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8004214:	4bbb      	ldr	r3, [pc, #748]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004216:	ed93 7b00 	vldr	d7, [r3]
 800421a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800421e:	eeb0 0b47 	vmov.f64	d0, d7
 8004222:	f00d fffd 	bl	8012220 <pow>
 8004226:	eeb0 8b40 	vmov.f64	d8, d0
 800422a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800422e:	ed97 0b00 	vldr	d0, [r7]
 8004232:	f00d fff5 	bl	8012220 <pow>
 8004236:	eeb0 7b40 	vmov.f64	d7, d0
 800423a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800423e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004242:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8004246:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 800424a:	4baf      	ldr	r3, [pc, #700]	; (8004508 <inicializarTrayectoria+0xa28>)
 800424c:	ed93 4b00 	vldr	d4, [r3]
 8004250:	4bad      	ldr	r3, [pc, #692]	; (8004508 <inicializarTrayectoria+0xa28>)
 8004252:	ed93 7b00 	vldr	d7, [r3]
 8004256:	eeb0 5bc7 	vabs.f64	d5, d7
 800425a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800425e:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 8004262:	4ba8      	ldr	r3, [pc, #672]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004264:	ed93 4b00 	vldr	d4, [r3]
 8004268:	ed97 5b00 	vldr	d5, [r7]
 800426c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004270:	eeb0 5bc7 	vabs.f64	d5, d7
 8004274:	ed97 7b06 	vldr	d7, [r7, #24]
 8004278:	ee25 7b07 	vmul.f64	d7, d5, d7
 800427c:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8004280:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004284:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 8004288:	4ba0      	ldr	r3, [pc, #640]	; (800450c <inicializarTrayectoria+0xa2c>)
 800428a:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 800428e:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <inicializarTrayectoria+0xa30>)
 8004290:	ed93 8b00 	vldr	d8, [r3]
 8004294:	4b9b      	ldr	r3, [pc, #620]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004296:	ed93 7b00 	vldr	d7, [r3]
 800429a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800429e:	eeb0 0b47 	vmov.f64	d0, d7
 80042a2:	f00d ffbd 	bl	8012220 <pow>
 80042a6:	eeb0 5b40 	vmov.f64	d5, d0
 80042aa:	ed97 7b00 	vldr	d7, [r7]
 80042ae:	ee37 6b07 	vadd.f64	d6, d7, d7
 80042b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80042b6:	ee38 7b47 	vsub.f64	d7, d8, d7
 80042ba:	4b96      	ldr	r3, [pc, #600]	; (8004514 <inicializarTrayectoria+0xa34>)
 80042bc:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80042c0:	4b92      	ldr	r3, [pc, #584]	; (800450c <inicializarTrayectoria+0xa2c>)
 80042c2:	ed93 8b00 	vldr	d8, [r3]
 80042c6:	4b90      	ldr	r3, [pc, #576]	; (8004508 <inicializarTrayectoria+0xa28>)
 80042c8:	ed93 5b00 	vldr	d5, [r3]
 80042cc:	4b8e      	ldr	r3, [pc, #568]	; (8004508 <inicializarTrayectoria+0xa28>)
 80042ce:	ed93 7b00 	vldr	d7, [r3]
 80042d2:	eeb0 7bc7 	vabs.f64	d7, d7
 80042d6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80042da:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <inicializarTrayectoria+0xa24>)
 80042dc:	ed93 7b00 	vldr	d7, [r3]
 80042e0:	eeb0 5bc7 	vabs.f64	d5, d7
 80042e4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80042e8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80042ec:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 80042f0:	4b85      	ldr	r3, [pc, #532]	; (8004508 <inicializarTrayectoria+0xa28>)
 80042f2:	ed93 6b00 	vldr	d6, [r3]
 80042f6:	4b87      	ldr	r3, [pc, #540]	; (8004514 <inicializarTrayectoria+0xa34>)
 80042f8:	ed93 7b00 	vldr	d7, [r3]
 80042fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004300:	4b80      	ldr	r3, [pc, #512]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004302:	ed93 7b00 	vldr	d7, [r3]
 8004306:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800430a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800430e:	eeb0 0b45 	vmov.f64	d0, d5
 8004312:	f00d ff85 	bl	8012220 <pow>
 8004316:	eeb0 7b40 	vmov.f64	d7, d0
 800431a:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 800431e:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <inicializarTrayectoria+0xa28>)
 8004320:	ed93 5b00 	vldr	d5, [r3]
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <inicializarTrayectoria+0xa34>)
 8004326:	ed93 7b00 	vldr	d7, [r3]
 800432a:	ee35 4b47 	vsub.f64	d4, d5, d7
 800432e:	4b75      	ldr	r3, [pc, #468]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004330:	ed93 7b00 	vldr	d7, [r3]
 8004334:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8004338:	4b73      	ldr	r3, [pc, #460]	; (8004508 <inicializarTrayectoria+0xa28>)
 800433a:	ed93 7b00 	vldr	d7, [r3]
 800433e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004342:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8004346:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 800434a:	4b73      	ldr	r3, [pc, #460]	; (8004518 <inicializarTrayectoria+0xa38>)
 800434c:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004352:	ed93 5b00 	vldr	d5, [r3]
 8004356:	ed97 7b00 	vldr	d7, [r7]
 800435a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800435e:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <inicializarTrayectoria+0xa30>)
 8004360:	ed93 7b00 	vldr	d7, [r3]
 8004364:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004368:	4b6b      	ldr	r3, [pc, #428]	; (8004518 <inicializarTrayectoria+0xa38>)
 800436a:	ed93 7b00 	vldr	d7, [r3]
 800436e:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 8004372:	4b64      	ldr	r3, [pc, #400]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004374:	ed93 7b00 	vldr	d7, [r3]
 8004378:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800437c:	eeb0 0b47 	vmov.f64	d0, d7
 8004380:	f00d ff4e 	bl	8012220 <pow>
 8004384:	eeb0 9b40 	vmov.f64	d9, d0
 8004388:	ed97 7b00 	vldr	d7, [r7]
 800438c:	eeb1 7b47 	vneg.f64	d7, d7
 8004390:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004394:	eeb0 0b47 	vmov.f64	d0, d7
 8004398:	f00d ff42 	bl	8012220 <pow>
 800439c:	eeb0 7b40 	vmov.f64	d7, d0
 80043a0:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80043a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80043a8:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80043ac:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80043b0:	4b5a      	ldr	r3, [pc, #360]	; (800451c <inicializarTrayectoria+0xa3c>)
 80043b2:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80043b6:	4b59      	ldr	r3, [pc, #356]	; (800451c <inicializarTrayectoria+0xa3c>)
 80043b8:	ed93 6b00 	vldr	d6, [r3]
 80043bc:	4b58      	ldr	r3, [pc, #352]	; (8004520 <inicializarTrayectoria+0xa40>)
 80043be:	ed93 7b00 	vldr	d7, [r3]
 80043c2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80043c6:	4b52      	ldr	r3, [pc, #328]	; (8004510 <inicializarTrayectoria+0xa30>)
 80043c8:	ed93 6b00 	vldr	d6, [r3]
 80043cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80043d0:	eeb0 6bc7 	vabs.f64	d6, d7
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <inicializarTrayectoria+0xa44>)
 80043d6:	ed93 7b00 	vldr	d7, [r3]
 80043da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043de:	4b52      	ldr	r3, [pc, #328]	; (8004528 <inicializarTrayectoria+0xa48>)
 80043e0:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 80043e4:	ed97 7b00 	vldr	d7, [r7]
 80043e8:	eeb1 6b47 	vneg.f64	d6, d7
 80043ec:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80043f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <inicializarTrayectoria+0xa4c>)
 80043f6:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 80043fa:	494d      	ldr	r1, [pc, #308]	; (8004530 <inicializarTrayectoria+0xa50>)
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <inicializarTrayectoria+0xa24>)
 800440a:	ed93 7b00 	vldr	d7, [r3]
 800440e:	eeb1 5b47 	vneg.f64	d5, d7
 8004412:	ed97 7b00 	vldr	d7, [r7]
 8004416:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800441a:	4b43      	ldr	r3, [pc, #268]	; (8004528 <inicializarTrayectoria+0xa48>)
 800441c:	ed93 7b00 	vldr	d7, [r3]
 8004420:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <inicializarTrayectoria+0xa54>)
 8004426:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <inicializarTrayectoria+0xa30>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	4941      	ldr	r1, [pc, #260]	; (8004538 <inicializarTrayectoria+0xa58>)
 8004432:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <inicializarTrayectoria+0xa3c>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	493f      	ldr	r1, [pc, #252]	; (800453c <inicializarTrayectoria+0xa5c>)
 800443e:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <inicializarTrayectoria+0xa28>)
 8004444:	ed93 6b00 	vldr	d6, [r3]
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <inicializarTrayectoria+0xa34>)
 800444a:	ed93 7b00 	vldr	d7, [r3]
 800444e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004454:	ed93 7b00 	vldr	d7, [r3]
 8004458:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <inicializarTrayectoria+0xa54>)
 800445e:	ed93 7b00 	vldr	d7, [r3]
 8004462:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <inicializarTrayectoria+0xa60>)
 8004468:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 800446c:	ed97 6b00 	vldr	d6, [r7]
 8004470:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <inicializarTrayectoria+0xa64>)
 800447a:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004480:	ed93 6b00 	vldr	d6, [r3]
 8004484:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004488:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <inicializarTrayectoria+0xa68>)
 800448e:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <inicializarTrayectoria+0xa24>)
 8004494:	ed93 5b00 	vldr	d5, [r3]
 8004498:	ed97 6b00 	vldr	d6, [r7]
 800449c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80044a0:	eeb0 6bc7 	vabs.f64	d6, d7
 80044a4:	4b26      	ldr	r3, [pc, #152]	; (8004540 <inicializarTrayectoria+0xa60>)
 80044a6:	ed93 7b00 	vldr	d7, [r3]
 80044aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <inicializarTrayectoria+0xa6c>)
 80044b0:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <inicializarTrayectoria+0xa28>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	4925      	ldr	r1, [pc, #148]	; (8004550 <inicializarTrayectoria+0xa70>)
 80044bc:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <inicializarTrayectoria+0xa2c>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	4923      	ldr	r1, [pc, #140]	; (8004554 <inicializarTrayectoria+0xa74>)
 80044c8:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 80044cc:	4b1f      	ldr	r3, [pc, #124]	; (800454c <inicializarTrayectoria+0xa6c>)
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	4921      	ldr	r1, [pc, #132]	; (8004558 <inicializarTrayectoria+0xa78>)
 80044d4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 80044d8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80044dc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80044e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	d553      	bpl.n	8004592 <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <inicializarTrayectoria+0xa3c>)
 80044ec:	ed93 6b00 	vldr	d6, [r3]
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <inicializarTrayectoria+0xa40>)
 80044f2:	ed93 7b00 	vldr	d7, [r3]
 80044f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fe:	d42d      	bmi.n	800455c <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8004500:	e077      	b.n	80045f2 <inicializarTrayectoria+0xb12>
 8004502:	bf00      	nop
 8004504:	24000a48 	.word	0x24000a48
 8004508:	24000b70 	.word	0x24000b70
 800450c:	24000b78 	.word	0x24000b78
 8004510:	24000af0 	.word	0x24000af0
 8004514:	24000b00 	.word	0x24000b00
 8004518:	24000ae0 	.word	0x24000ae0
 800451c:	24000ae8 	.word	0x24000ae8
 8004520:	24000ad8 	.word	0x24000ad8
 8004524:	24000b18 	.word	0x24000b18
 8004528:	24000b20 	.word	0x24000b20
 800452c:	24000aa8 	.word	0x24000aa8
 8004530:	24000aa0 	.word	0x24000aa0
 8004534:	24000b28 	.word	0x24000b28
 8004538:	24000a98 	.word	0x24000a98
 800453c:	24000a90 	.word	0x24000a90
 8004540:	24000b30 	.word	0x24000b30
 8004544:	24000ac8 	.word	0x24000ac8
 8004548:	24000ac0 	.word	0x24000ac0
 800454c:	24000b40 	.word	0x24000b40
 8004550:	24000ab8 	.word	0x24000ab8
 8004554:	24000ab0 	.word	0x24000ab0
 8004558:	24000b38 	.word	0x24000b38
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 800455c:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <inicializarTrayectoria+0xb38>)
 800455e:	ed93 6b00 	vldr	d6, [r3]
 8004562:	ed97 7b04 	vldr	d7, [r7, #16]
 8004566:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004610 <inicializarTrayectoria+0xb30>
 800456a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <inicializarTrayectoria+0xb38>)
 8004570:	ed93 3b00 	vldr	d3, [r3]
 8004574:	4b28      	ldr	r3, [pc, #160]	; (8004618 <inicializarTrayectoria+0xb38>)
 8004576:	ed93 7b00 	vldr	d7, [r3]
 800457a:	eeb0 4bc7 	vabs.f64	d4, d7
 800457e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004582:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004586:	ee36 7b47 	vsub.f64	d7, d6, d7
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <inicializarTrayectoria+0xb38>)
 800458c:	ed83 7b00 	vstr	d7, [r3]
 8004590:	e025      	b.n	80045de <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <inicializarTrayectoria+0xb3c>)
 8004594:	ed93 6b00 	vldr	d6, [r3]
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <inicializarTrayectoria+0xb40>)
 800459a:	ed93 7b00 	vldr	d7, [r3]
 800459e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a6:	dc00      	bgt.n	80045aa <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 80045a8:	e023      	b.n	80045f2 <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80045aa:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <inicializarTrayectoria+0xb38>)
 80045ac:	ed93 6b00 	vldr	d6, [r3]
 80045b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80045b4:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8004610 <inicializarTrayectoria+0xb30>
 80045b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <inicializarTrayectoria+0xb38>)
 80045be:	ed93 3b00 	vldr	d3, [r3]
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <inicializarTrayectoria+0xb38>)
 80045c4:	ed93 7b00 	vldr	d7, [r3]
 80045c8:	eeb0 4bc7 	vabs.f64	d4, d7
 80045cc:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80045d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80045d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <inicializarTrayectoria+0xb38>)
 80045da:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 80045de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045e2:	3301      	adds	r3, #1
 80045e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80045e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ec:	2b63      	cmp	r3, #99	; 0x63
 80045ee:	f67f aaf6 	bls.w	8003bde <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <inicializarTrayectoria+0xb44>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	490b      	ldr	r1, [pc, #44]	; (8004628 <inicializarTrayectoria+0xb48>)
 80045fa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80045fe:	bf00      	nop
 8004600:	3740      	adds	r7, #64	; 0x40
 8004602:	46bd      	mov	sp, r7
 8004604:	ecbd 8b04 	vpop	{d8-d9}
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w
 8004610:	47ae147b 	.word	0x47ae147b
 8004614:	3f847ae1 	.word	0x3f847ae1
 8004618:	24000af0 	.word	0x24000af0
 800461c:	24000ae8 	.word	0x24000ae8
 8004620:	24000ad8 	.word	0x24000ad8
 8004624:	24000b40 	.word	0x24000b40
 8004628:	240003c0 	.word	0x240003c0

0800462c <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 800462c:	b580      	push	{r7, lr}
 800462e:	ed2d 8b04 	vpush	{d8-d9}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 800463a:	4bc3      	ldr	r3, [pc, #780]	; (8004948 <obtenerVelCurva+0x31c>)
 800463c:	ed93 7b00 	vldr	d7, [r3]
 8004640:	ed97 6b00 	vldr	d6, [r7]
 8004644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464c:	d866      	bhi.n	800471c <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 800464e:	4bbf      	ldr	r3, [pc, #764]	; (800494c <obtenerVelCurva+0x320>)
 8004650:	ed93 6b00 	vldr	d6, [r3]
 8004654:	ed97 7b00 	vldr	d7, [r7]
 8004658:	ee26 6b07 	vmul.f64	d6, d6, d7
 800465c:	4bbc      	ldr	r3, [pc, #752]	; (8004950 <obtenerVelCurva+0x324>)
 800465e:	ed93 7b00 	vldr	d7, [r3]
 8004662:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004666:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800466a:	ed97 0b00 	vldr	d0, [r7]
 800466e:	f00d fdd7 	bl	8012220 <pow>
 8004672:	eeb0 6b40 	vmov.f64	d6, d0
 8004676:	4bb7      	ldr	r3, [pc, #732]	; (8004954 <obtenerVelCurva+0x328>)
 8004678:	ed93 7b00 	vldr	d7, [r3]
 800467c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004680:	ee38 8b07 	vadd.f64	d8, d8, d7
 8004684:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004688:	ed97 0b00 	vldr	d0, [r7]
 800468c:	f00d fdc8 	bl	8012220 <pow>
 8004690:	eeb0 6b40 	vmov.f64	d6, d0
 8004694:	4bb0      	ldr	r3, [pc, #704]	; (8004958 <obtenerVelCurva+0x32c>)
 8004696:	ed93 7b00 	vldr	d7, [r3]
 800469a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800469e:	ee38 7b07 	vadd.f64	d7, d8, d7
 80046a2:	4bae      	ldr	r3, [pc, #696]	; (800495c <obtenerVelCurva+0x330>)
 80046a4:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 80046a8:	4baa      	ldr	r3, [pc, #680]	; (8004954 <obtenerVelCurva+0x328>)
 80046aa:	ed93 7b00 	vldr	d7, [r3]
 80046ae:	ee37 6b07 	vadd.f64	d6, d7, d7
 80046b2:	ed97 7b00 	vldr	d7, [r7]
 80046b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80046ba:	4ba4      	ldr	r3, [pc, #656]	; (800494c <obtenerVelCurva+0x320>)
 80046bc:	ed93 7b00 	vldr	d7, [r3]
 80046c0:	ee36 8b07 	vadd.f64	d8, d6, d7
 80046c4:	4ba4      	ldr	r3, [pc, #656]	; (8004958 <obtenerVelCurva+0x32c>)
 80046c6:	ed93 7b00 	vldr	d7, [r3]
 80046ca:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80046ce:	ee27 9b06 	vmul.f64	d9, d7, d6
 80046d2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80046d6:	ed97 0b00 	vldr	d0, [r7]
 80046da:	f00d fda1 	bl	8012220 <pow>
 80046de:	eeb0 7b40 	vmov.f64	d7, d0
 80046e2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80046e6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80046ea:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <obtenerVelCurva+0x334>)
 80046ec:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 80046f0:	4b98      	ldr	r3, [pc, #608]	; (8004954 <obtenerVelCurva+0x328>)
 80046f2:	ed93 7b00 	vldr	d7, [r3]
 80046f6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80046fa:	4b97      	ldr	r3, [pc, #604]	; (8004958 <obtenerVelCurva+0x32c>)
 80046fc:	ed93 7b00 	vldr	d7, [r3]
 8004700:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004704:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004708:	ed97 7b00 	vldr	d7, [r7]
 800470c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004710:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004714:	4b93      	ldr	r3, [pc, #588]	; (8004964 <obtenerVelCurva+0x338>)
 8004716:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 800471a:	e30e      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 800471c:	4b92      	ldr	r3, [pc, #584]	; (8004968 <obtenerVelCurva+0x33c>)
 800471e:	ed93 7b00 	vldr	d7, [r3]
 8004722:	ed97 6b00 	vldr	d6, [r7]
 8004726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472e:	d848      	bhi.n	80047c2 <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8004730:	4b8e      	ldr	r3, [pc, #568]	; (800496c <obtenerVelCurva+0x340>)
 8004732:	ed93 7b00 	vldr	d7, [r3]
 8004736:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800473a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800473e:	4b82      	ldr	r3, [pc, #520]	; (8004948 <obtenerVelCurva+0x31c>)
 8004740:	ed93 7b00 	vldr	d7, [r3]
 8004744:	ed97 6b00 	vldr	d6, [r7]
 8004748:	ee36 7b47 	vsub.f64	d7, d6, d7
 800474c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004750:	eeb0 0b47 	vmov.f64	d0, d7
 8004754:	f00d fd64 	bl	8012220 <pow>
 8004758:	eeb0 7b40 	vmov.f64	d7, d0
 800475c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004760:	4b79      	ldr	r3, [pc, #484]	; (8004948 <obtenerVelCurva+0x31c>)
 8004762:	ed93 7b00 	vldr	d7, [r3]
 8004766:	ed97 5b00 	vldr	d5, [r7]
 800476a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800476e:	4b80      	ldr	r3, [pc, #512]	; (8004970 <obtenerVelCurva+0x344>)
 8004770:	ed93 7b00 	vldr	d7, [r3]
 8004774:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004778:	ee36 6b07 	vadd.f64	d6, d6, d7
 800477c:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <obtenerVelCurva+0x348>)
 800477e:	ed93 7b00 	vldr	d7, [r3]
 8004782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004786:	4b75      	ldr	r3, [pc, #468]	; (800495c <obtenerVelCurva+0x330>)
 8004788:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 800478c:	4b6e      	ldr	r3, [pc, #440]	; (8004948 <obtenerVelCurva+0x31c>)
 800478e:	ed93 7b00 	vldr	d7, [r3]
 8004792:	ed97 6b00 	vldr	d6, [r7]
 8004796:	ee36 6b47 	vsub.f64	d6, d6, d7
 800479a:	4b74      	ldr	r3, [pc, #464]	; (800496c <obtenerVelCurva+0x340>)
 800479c:	ed93 7b00 	vldr	d7, [r3]
 80047a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047a4:	4b72      	ldr	r3, [pc, #456]	; (8004970 <obtenerVelCurva+0x344>)
 80047a6:	ed93 7b00 	vldr	d7, [r3]
 80047aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047ae:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <obtenerVelCurva+0x334>)
 80047b0:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 80047b4:	4b6d      	ldr	r3, [pc, #436]	; (800496c <obtenerVelCurva+0x340>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	496a      	ldr	r1, [pc, #424]	; (8004964 <obtenerVelCurva+0x338>)
 80047bc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80047c0:	e2bb      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 80047c2:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <obtenerVelCurva+0x34c>)
 80047c4:	ed93 7b00 	vldr	d7, [r3]
 80047c8:	ed97 6b00 	vldr	d6, [r7]
 80047cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	f200 808b 	bhi.w	80048ee <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80047d8:	4b63      	ldr	r3, [pc, #396]	; (8004968 <obtenerVelCurva+0x33c>)
 80047da:	ed93 7b00 	vldr	d7, [r3]
 80047de:	ed97 6b00 	vldr	d6, [r7]
 80047e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <obtenerVelCurva+0x350>)
 80047e8:	ed93 7b00 	vldr	d7, [r3]
 80047ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047f0:	4b63      	ldr	r3, [pc, #396]	; (8004980 <obtenerVelCurva+0x354>)
 80047f2:	ed93 7b00 	vldr	d7, [r3]
 80047f6:	ee36 8b07 	vadd.f64	d8, d6, d7
 80047fa:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <obtenerVelCurva+0x33c>)
 80047fc:	ed93 7b00 	vldr	d7, [r3]
 8004800:	ed97 6b00 	vldr	d6, [r7]
 8004804:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004808:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800480c:	eeb0 0b47 	vmov.f64	d0, d7
 8004810:	f00d fd06 	bl	8012220 <pow>
 8004814:	eeb0 6b40 	vmov.f64	d6, d0
 8004818:	4b5a      	ldr	r3, [pc, #360]	; (8004984 <obtenerVelCurva+0x358>)
 800481a:	ed93 7b00 	vldr	d7, [r3]
 800481e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004822:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 8004826:	4b50      	ldr	r3, [pc, #320]	; (8004968 <obtenerVelCurva+0x33c>)
 8004828:	ed93 7b00 	vldr	d7, [r3]
 800482c:	ed97 6b00 	vldr	d6, [r7]
 8004830:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004834:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004838:	eeb0 0b47 	vmov.f64	d0, d7
 800483c:	f00d fcf0 	bl	8012220 <pow>
 8004840:	eeb0 6b40 	vmov.f64	d6, d0
 8004844:	4b50      	ldr	r3, [pc, #320]	; (8004988 <obtenerVelCurva+0x35c>)
 8004846:	ed93 7b00 	vldr	d7, [r3]
 800484a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800484e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8004852:	4b42      	ldr	r3, [pc, #264]	; (800495c <obtenerVelCurva+0x330>)
 8004854:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <obtenerVelCurva+0x358>)
 800485a:	ed93 7b00 	vldr	d7, [r3]
 800485e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <obtenerVelCurva+0x33c>)
 8004864:	ed93 7b00 	vldr	d7, [r3]
 8004868:	ed97 5b00 	vldr	d5, [r7]
 800486c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004870:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004874:	4b41      	ldr	r3, [pc, #260]	; (800497c <obtenerVelCurva+0x350>)
 8004876:	ed93 7b00 	vldr	d7, [r3]
 800487a:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 800487e:	4b42      	ldr	r3, [pc, #264]	; (8004988 <obtenerVelCurva+0x35c>)
 8004880:	ed93 7b00 	vldr	d7, [r3]
 8004884:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004888:	ee27 9b06 	vmul.f64	d9, d7, d6
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <obtenerVelCurva+0x33c>)
 800488e:	ed93 7b00 	vldr	d7, [r3]
 8004892:	ed97 6b00 	vldr	d6, [r7]
 8004896:	ee36 7b47 	vsub.f64	d7, d6, d7
 800489a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800489e:	eeb0 0b47 	vmov.f64	d0, d7
 80048a2:	f00d fcbd 	bl	8012220 <pow>
 80048a6:	eeb0 7b40 	vmov.f64	d7, d0
 80048aa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80048ae:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <obtenerVelCurva+0x334>)
 80048b4:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <obtenerVelCurva+0x358>)
 80048ba:	ed93 7b00 	vldr	d7, [r3]
 80048be:	ee37 6b07 	vadd.f64	d6, d7, d7
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <obtenerVelCurva+0x35c>)
 80048c4:	ed93 7b00 	vldr	d7, [r3]
 80048c8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80048cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <obtenerVelCurva+0x33c>)
 80048d2:	ed93 7b00 	vldr	d7, [r3]
 80048d6:	ed97 4b00 	vldr	d4, [r7]
 80048da:	ee34 7b47 	vsub.f64	d7, d4, d7
 80048de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80048e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048e6:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <obtenerVelCurva+0x338>)
 80048e8:	ed83 7b00 	vstr	d7, [r3]
}
 80048ec:	e225      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <obtenerVelCurva+0x360>)
 80048f0:	ed93 7b00 	vldr	d7, [r3]
 80048f4:	ed97 6b00 	vldr	d6, [r7]
 80048f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004900:	d84a      	bhi.n	8004998 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <obtenerVelCurva+0x34c>)
 8004904:	ed93 7b00 	vldr	d7, [r3]
 8004908:	ed97 6b00 	vldr	d6, [r7]
 800490c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <obtenerVelCurva+0x364>)
 8004912:	ed93 7b00 	vldr	d7, [r3]
 8004916:	ee26 6b07 	vmul.f64	d6, d6, d7
 800491a:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <obtenerVelCurva+0x368>)
 800491c:	ed93 7b00 	vldr	d7, [r3]
 8004920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004924:	4b0d      	ldr	r3, [pc, #52]	; (800495c <obtenerVelCurva+0x330>)
 8004926:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <obtenerVelCurva+0x364>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	490b      	ldr	r1, [pc, #44]	; (8004960 <obtenerVelCurva+0x334>)
 8004932:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8004936:	490b      	ldr	r1, [pc, #44]	; (8004964 <obtenerVelCurva+0x338>)
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004944:	e1f9      	b.n	8004d3a <obtenerVelCurva+0x70e>
 8004946:	bf00      	nop
 8004948:	24000b08 	.word	0x24000b08
 800494c:	24000a58 	.word	0x24000a58
 8004950:	24000a50 	.word	0x24000a50
 8004954:	24000a60 	.word	0x24000a60
 8004958:	24000a68 	.word	0x24000a68
 800495c:	240003f8 	.word	0x240003f8
 8004960:	24000400 	.word	0x24000400
 8004964:	24000408 	.word	0x24000408
 8004968:	24000b10 	.word	0x24000b10
 800496c:	24000a40 	.word	0x24000a40
 8004970:	24000af8 	.word	0x24000af8
 8004974:	24000ad0 	.word	0x24000ad0
 8004978:	24000b18 	.word	0x24000b18
 800497c:	24000a78 	.word	0x24000a78
 8004980:	24000a70 	.word	0x24000a70
 8004984:	24000a80 	.word	0x24000a80
 8004988:	24000a88 	.word	0x24000a88
 800498c:	24000b20 	.word	0x24000b20
 8004990:	24000af0 	.word	0x24000af0
 8004994:	24000ad8 	.word	0x24000ad8
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8004998:	4bcb      	ldr	r3, [pc, #812]	; (8004cc8 <obtenerVelCurva+0x69c>)
 800499a:	ed93 7b00 	vldr	d7, [r3]
 800499e:	ed97 6b00 	vldr	d6, [r7]
 80049a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	f200 808b 	bhi.w	8004ac4 <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 80049ae:	4bc7      	ldr	r3, [pc, #796]	; (8004ccc <obtenerVelCurva+0x6a0>)
 80049b0:	ed93 7b00 	vldr	d7, [r3]
 80049b4:	ed97 6b00 	vldr	d6, [r7]
 80049b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80049bc:	4bc4      	ldr	r3, [pc, #784]	; (8004cd0 <obtenerVelCurva+0x6a4>)
 80049be:	ed93 7b00 	vldr	d7, [r3]
 80049c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049c6:	4bc3      	ldr	r3, [pc, #780]	; (8004cd4 <obtenerVelCurva+0x6a8>)
 80049c8:	ed93 7b00 	vldr	d7, [r3]
 80049cc:	ee36 8b07 	vadd.f64	d8, d6, d7
 80049d0:	4bbe      	ldr	r3, [pc, #760]	; (8004ccc <obtenerVelCurva+0x6a0>)
 80049d2:	ed93 7b00 	vldr	d7, [r3]
 80049d6:	ed97 6b00 	vldr	d6, [r7]
 80049da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049e2:	eeb0 0b47 	vmov.f64	d0, d7
 80049e6:	f00d fc1b 	bl	8012220 <pow>
 80049ea:	eeb0 6b40 	vmov.f64	d6, d0
 80049ee:	4bba      	ldr	r3, [pc, #744]	; (8004cd8 <obtenerVelCurva+0x6ac>)
 80049f0:	ed93 7b00 	vldr	d7, [r3]
 80049f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049f8:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 80049fc:	4bb3      	ldr	r3, [pc, #716]	; (8004ccc <obtenerVelCurva+0x6a0>)
 80049fe:	ed93 7b00 	vldr	d7, [r3]
 8004a02:	ed97 6b00 	vldr	d6, [r7]
 8004a06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a0a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004a0e:	eeb0 0b47 	vmov.f64	d0, d7
 8004a12:	f00d fc05 	bl	8012220 <pow>
 8004a16:	eeb0 6b40 	vmov.f64	d6, d0
 8004a1a:	4bb0      	ldr	r3, [pc, #704]	; (8004cdc <obtenerVelCurva+0x6b0>)
 8004a1c:	ed93 7b00 	vldr	d7, [r3]
 8004a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a24:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8004a28:	4bad      	ldr	r3, [pc, #692]	; (8004ce0 <obtenerVelCurva+0x6b4>)
 8004a2a:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8004a2e:	4baa      	ldr	r3, [pc, #680]	; (8004cd8 <obtenerVelCurva+0x6ac>)
 8004a30:	ed93 7b00 	vldr	d7, [r3]
 8004a34:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004a38:	4ba4      	ldr	r3, [pc, #656]	; (8004ccc <obtenerVelCurva+0x6a0>)
 8004a3a:	ed93 7b00 	vldr	d7, [r3]
 8004a3e:	ed97 5b00 	vldr	d5, [r7]
 8004a42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004a46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a4a:	4ba1      	ldr	r3, [pc, #644]	; (8004cd0 <obtenerVelCurva+0x6a4>)
 8004a4c:	ed93 7b00 	vldr	d7, [r3]
 8004a50:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8004a54:	4ba1      	ldr	r3, [pc, #644]	; (8004cdc <obtenerVelCurva+0x6b0>)
 8004a56:	ed93 7b00 	vldr	d7, [r3]
 8004a5a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004a5e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004a62:	4b9a      	ldr	r3, [pc, #616]	; (8004ccc <obtenerVelCurva+0x6a0>)
 8004a64:	ed93 7b00 	vldr	d7, [r3]
 8004a68:	ed97 6b00 	vldr	d6, [r7]
 8004a6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a74:	eeb0 0b47 	vmov.f64	d0, d7
 8004a78:	f00d fbd2 	bl	8012220 <pow>
 8004a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8004a80:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004a84:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8004a88:	4b96      	ldr	r3, [pc, #600]	; (8004ce4 <obtenerVelCurva+0x6b8>)
 8004a8a:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 8004a8e:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <obtenerVelCurva+0x6ac>)
 8004a90:	ed93 7b00 	vldr	d7, [r3]
 8004a94:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004a98:	4b90      	ldr	r3, [pc, #576]	; (8004cdc <obtenerVelCurva+0x6b0>)
 8004a9a:	ed93 7b00 	vldr	d7, [r3]
 8004a9e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004aa2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004aa6:	4b89      	ldr	r3, [pc, #548]	; (8004ccc <obtenerVelCurva+0x6a0>)
 8004aa8:	ed93 7b00 	vldr	d7, [r3]
 8004aac:	ed97 4b00 	vldr	d4, [r7]
 8004ab0:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004ab4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ab8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004abc:	4b8a      	ldr	r3, [pc, #552]	; (8004ce8 <obtenerVelCurva+0x6bc>)
 8004abe:	ed83 7b00 	vstr	d7, [r3]
}
 8004ac2:	e13a      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 8004ac4:	4b89      	ldr	r3, [pc, #548]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004ac6:	ed93 7b00 	vldr	d7, [r3]
 8004aca:	ed97 6b00 	vldr	d6, [r7]
 8004ace:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	d848      	bhi.n	8004b6a <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8004ad8:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <obtenerVelCurva+0x6c4>)
 8004ada:	ed93 7b00 	vldr	d7, [r3]
 8004ade:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8004ae2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8004ae6:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <obtenerVelCurva+0x69c>)
 8004ae8:	ed93 7b00 	vldr	d7, [r3]
 8004aec:	ed97 6b00 	vldr	d6, [r7]
 8004af0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004af4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004af8:	eeb0 0b47 	vmov.f64	d0, d7
 8004afc:	f00d fb90 	bl	8012220 <pow>
 8004b00:	eeb0 7b40 	vmov.f64	d7, d0
 8004b04:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004b08:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <obtenerVelCurva+0x69c>)
 8004b0a:	ed93 7b00 	vldr	d7, [r3]
 8004b0e:	ed97 5b00 	vldr	d5, [r7]
 8004b12:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004b16:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <obtenerVelCurva+0x6c8>)
 8004b18:	ed93 7b00 	vldr	d7, [r3]
 8004b1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004b24:	4b74      	ldr	r3, [pc, #464]	; (8004cf8 <obtenerVelCurva+0x6cc>)
 8004b26:	ed93 7b00 	vldr	d7, [r3]
 8004b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b2e:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <obtenerVelCurva+0x6b4>)
 8004b30:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <obtenerVelCurva+0x69c>)
 8004b36:	ed93 7b00 	vldr	d7, [r3]
 8004b3a:	ed97 6b00 	vldr	d6, [r7]
 8004b3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b42:	4b6b      	ldr	r3, [pc, #428]	; (8004cf0 <obtenerVelCurva+0x6c4>)
 8004b44:	ed93 7b00 	vldr	d7, [r3]
 8004b48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b4c:	4b69      	ldr	r3, [pc, #420]	; (8004cf4 <obtenerVelCurva+0x6c8>)
 8004b4e:	ed93 7b00 	vldr	d7, [r3]
 8004b52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b56:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <obtenerVelCurva+0x6b8>)
 8004b58:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8004b5c:	4b64      	ldr	r3, [pc, #400]	; (8004cf0 <obtenerVelCurva+0x6c4>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	4961      	ldr	r1, [pc, #388]	; (8004ce8 <obtenerVelCurva+0x6bc>)
 8004b64:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b68:	e0e7      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8004b6a:	4b64      	ldr	r3, [pc, #400]	; (8004cfc <obtenerVelCurva+0x6d0>)
 8004b6c:	ed93 7b00 	vldr	d7, [r3]
 8004b70:	ed97 6b00 	vldr	d6, [r7]
 8004b74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	f200 808b 	bhi.w	8004c96 <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004b80:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004b82:	ed93 7b00 	vldr	d7, [r3]
 8004b86:	ed97 6b00 	vldr	d6, [r7]
 8004b8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	; (8004d00 <obtenerVelCurva+0x6d4>)
 8004b90:	ed93 7b00 	vldr	d7, [r3]
 8004b94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b98:	4b5a      	ldr	r3, [pc, #360]	; (8004d04 <obtenerVelCurva+0x6d8>)
 8004b9a:	ed93 7b00 	vldr	d7, [r3]
 8004b9e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004ba2:	4b52      	ldr	r3, [pc, #328]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004ba4:	ed93 7b00 	vldr	d7, [r3]
 8004ba8:	ed97 6b00 	vldr	d6, [r7]
 8004bac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bb0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004bb4:	eeb0 0b47 	vmov.f64	d0, d7
 8004bb8:	f00d fb32 	bl	8012220 <pow>
 8004bbc:	eeb0 6b40 	vmov.f64	d6, d0
 8004bc0:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <obtenerVelCurva+0x6dc>)
 8004bc2:	ed93 7b00 	vldr	d7, [r3]
 8004bc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bca:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004bd0:	ed93 7b00 	vldr	d7, [r3]
 8004bd4:	ed97 6b00 	vldr	d6, [r7]
 8004bd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bdc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004be0:	eeb0 0b47 	vmov.f64	d0, d7
 8004be4:	f00d fb1c 	bl	8012220 <pow>
 8004be8:	eeb0 6b40 	vmov.f64	d6, d0
 8004bec:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <obtenerVelCurva+0x6e0>)
 8004bee:	ed93 7b00 	vldr	d7, [r3]
 8004bf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bf6:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <obtenerVelCurva+0x6b4>)
 8004bfc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <obtenerVelCurva+0x6dc>)
 8004c02:	ed93 7b00 	vldr	d7, [r3]
 8004c06:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004c0a:	4b38      	ldr	r3, [pc, #224]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004c0c:	ed93 7b00 	vldr	d7, [r3]
 8004c10:	ed97 5b00 	vldr	d5, [r7]
 8004c14:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004c1c:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <obtenerVelCurva+0x6d4>)
 8004c1e:	ed93 7b00 	vldr	d7, [r3]
 8004c22:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8004c26:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <obtenerVelCurva+0x6e0>)
 8004c28:	ed93 7b00 	vldr	d7, [r3]
 8004c2c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004c30:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004c36:	ed93 7b00 	vldr	d7, [r3]
 8004c3a:	ed97 6b00 	vldr	d6, [r7]
 8004c3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c42:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c46:	eeb0 0b47 	vmov.f64	d0, d7
 8004c4a:	f00d fae9 	bl	8012220 <pow>
 8004c4e:	eeb0 7b40 	vmov.f64	d7, d0
 8004c52:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004c56:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <obtenerVelCurva+0x6b8>)
 8004c5c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8004c60:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <obtenerVelCurva+0x6dc>)
 8004c62:	ed93 7b00 	vldr	d7, [r3]
 8004c66:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <obtenerVelCurva+0x6e0>)
 8004c6c:	ed93 7b00 	vldr	d7, [r3]
 8004c70:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004c74:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <obtenerVelCurva+0x6c0>)
 8004c7a:	ed93 7b00 	vldr	d7, [r3]
 8004c7e:	ed97 4b00 	vldr	d4, [r7]
 8004c82:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004c86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <obtenerVelCurva+0x6bc>)
 8004c90:	ed83 7b00 	vstr	d7, [r3]
}
 8004c94:	e051      	b.n	8004d3a <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8004c96:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <obtenerVelCurva+0x6d0>)
 8004c98:	ed93 7b00 	vldr	d7, [r3]
 8004c9c:	ed97 6b00 	vldr	d6, [r7]
 8004ca0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	dd32      	ble.n	8004d10 <obtenerVelCurva+0x6e4>
		DX = 0;
 8004caa:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <obtenerVelCurva+0x6b8>)
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8004cb8:	490b      	ldr	r1, [pc, #44]	; (8004ce8 <obtenerVelCurva+0x6bc>)
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004cc6:	e038      	b.n	8004d3a <obtenerVelCurva+0x70e>
 8004cc8:	24000b28 	.word	0x24000b28
 8004ccc:	24000b20 	.word	0x24000b20
 8004cd0:	24000a98 	.word	0x24000a98
 8004cd4:	24000a90 	.word	0x24000a90
 8004cd8:	24000aa0 	.word	0x24000aa0
 8004cdc:	24000aa8 	.word	0x24000aa8
 8004ce0:	240003f8 	.word	0x240003f8
 8004ce4:	24000400 	.word	0x24000400
 8004ce8:	24000408 	.word	0x24000408
 8004cec:	24000b30 	.word	0x24000b30
 8004cf0:	24000a48 	.word	0x24000a48
 8004cf4:	24000b00 	.word	0x24000b00
 8004cf8:	24000ae0 	.word	0x24000ae0
 8004cfc:	24000b38 	.word	0x24000b38
 8004d00:	24000ab8 	.word	0x24000ab8
 8004d04:	24000ab0 	.word	0x24000ab0
 8004d08:	24000ac0 	.word	0x24000ac0
 8004d0c:	24000ac8 	.word	0x24000ac8
		X = 0;
 8004d10:	490d      	ldr	r1, [pc, #52]	; (8004d48 <obtenerVelCurva+0x71c>)
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8004d1e:	490b      	ldr	r1, [pc, #44]	; (8004d4c <obtenerVelCurva+0x720>)
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8004d2c:	4908      	ldr	r1, [pc, #32]	; (8004d50 <obtenerVelCurva+0x724>)
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	ecbd 8b04 	vpop	{d8-d9}
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	240003f8 	.word	0x240003f8
 8004d4c:	24000400 	.word	0x24000400
 8004d50:	24000408 	.word	0x24000408
 8004d54:	00000000 	.word	0x00000000

08004d58 <cinematicaInversa>:

void cinematicaInversa(double Pxaux, double Pyaux, double Pzaux) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	ed2d 8b06 	vpush	{d8-d10}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d66:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d6a:	ed87 2b00 	vstr	d2, [r7]

	A1 = 1.0 + pow(((-2.0  * (R + (Pyaux - r))) / (2 * Pzaux)), 2);
 8004d6e:	4be6      	ldr	r3, [pc, #920]	; (8005108 <cinematicaInversa+0x3b0>)
 8004d70:	ed93 7b00 	vldr	d7, [r3]
 8004d74:	ed97 6b02 	vldr	d6, [r7, #8]
 8004d78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d7c:	4be3      	ldr	r3, [pc, #908]	; (800510c <cinematicaInversa+0x3b4>)
 8004d7e:	ed93 7b00 	vldr	d7, [r3]
 8004d82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d86:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004d8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004d8e:	ed97 7b00 	vldr	d7, [r7]
 8004d92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d96:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004d9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d9e:	eeb0 0b45 	vmov.f64	d0, d5
 8004da2:	f00d fa3d 	bl	8012220 <pow>
 8004da6:	eeb0 7b40 	vmov.f64	d7, d0
 8004daa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004db2:	4bd7      	ldr	r3, [pc, #860]	; (8005110 <cinematicaInversa+0x3b8>)
 8004db4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * c30 + 2.0 * R * s30 - 2.0 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30)) / (2.0 * Pzaux)), 2.0);
 8004db8:	4bd4      	ldr	r3, [pc, #848]	; (800510c <cinematicaInversa+0x3b4>)
 8004dba:	ed93 7b00 	vldr	d7, [r3]
 8004dbe:	ed9f 6bce 	vldr	d6, [pc, #824]	; 80050f8 <cinematicaInversa+0x3a0>
 8004dc2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004dc6:	4bd3      	ldr	r3, [pc, #844]	; (8005114 <cinematicaInversa+0x3bc>)
 8004dc8:	ed93 7b00 	vldr	d7, [r3]
 8004dcc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004dd0:	4bce      	ldr	r3, [pc, #824]	; (800510c <cinematicaInversa+0x3b4>)
 8004dd2:	ed93 7b00 	vldr	d7, [r3]
 8004dd6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004dda:	4bcf      	ldr	r3, [pc, #828]	; (8005118 <cinematicaInversa+0x3c0>)
 8004ddc:	ed93 7b00 	vldr	d7, [r3]
 8004de0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004de8:	4bc7      	ldr	r3, [pc, #796]	; (8005108 <cinematicaInversa+0x3b0>)
 8004dea:	ed93 5b00 	vldr	d5, [r3]
 8004dee:	4bc9      	ldr	r3, [pc, #804]	; (8005114 <cinematicaInversa+0x3bc>)
 8004df0:	ed93 7b00 	vldr	d7, [r3]
 8004df4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004df8:	ed97 7b04 	vldr	d7, [r7, #16]
 8004dfc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e00:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 80050f8 <cinematicaInversa+0x3a0>
 8004e04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004e08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e0c:	4bbe      	ldr	r3, [pc, #760]	; (8005108 <cinematicaInversa+0x3b0>)
 8004e0e:	ed93 5b00 	vldr	d5, [r3]
 8004e12:	4bc1      	ldr	r3, [pc, #772]	; (8005118 <cinematicaInversa+0x3c0>)
 8004e14:	ed93 7b00 	vldr	d7, [r3]
 8004e18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004e1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e20:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e24:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e28:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e2c:	ed97 7b00 	vldr	d7, [r7]
 8004e30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e34:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004e38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e3c:	eeb0 0b45 	vmov.f64	d0, d5
 8004e40:	f00d f9ee 	bl	8012220 <pow>
 8004e44:	eeb0 7b40 	vmov.f64	d7, d0
 8004e48:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004e4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e50:	4bb2      	ldr	r3, [pc, #712]	; (800511c <cinematicaInversa+0x3c4>)
 8004e52:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)), 2.0);
 8004e56:	4bac      	ldr	r3, [pc, #688]	; (8005108 <cinematicaInversa+0x3b0>)
 8004e58:	ed93 6b00 	vldr	d6, [r3]
 8004e5c:	4bb0      	ldr	r3, [pc, #704]	; (8005120 <cinematicaInversa+0x3c8>)
 8004e5e:	ed93 7b00 	vldr	d7, [r3]
 8004e62:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004e66:	ed97 7b04 	vldr	d7, [r7, #16]
 8004e6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e6e:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80050f8 <cinematicaInversa+0x3a0>
 8004e72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004e76:	4ba4      	ldr	r3, [pc, #656]	; (8005108 <cinematicaInversa+0x3b0>)
 8004e78:	ed93 5b00 	vldr	d5, [r3]
 8004e7c:	4ba9      	ldr	r3, [pc, #676]	; (8005124 <cinematicaInversa+0x3cc>)
 8004e7e:	ed93 7b00 	vldr	d7, [r3]
 8004e82:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004e86:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e8a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e96:	4b9d      	ldr	r3, [pc, #628]	; (800510c <cinematicaInversa+0x3b4>)
 8004e98:	ed93 7b00 	vldr	d7, [r3]
 8004e9c:	ed9f 5b96 	vldr	d5, [pc, #600]	; 80050f8 <cinematicaInversa+0x3a0>
 8004ea0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004ea4:	4b9e      	ldr	r3, [pc, #632]	; (8005120 <cinematicaInversa+0x3c8>)
 8004ea6:	ed93 7b00 	vldr	d7, [r3]
 8004eaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004eae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004eb2:	4b96      	ldr	r3, [pc, #600]	; (800510c <cinematicaInversa+0x3b4>)
 8004eb4:	ed93 7b00 	vldr	d7, [r3]
 8004eb8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004ebc:	4b99      	ldr	r3, [pc, #612]	; (8005124 <cinematicaInversa+0x3cc>)
 8004ebe:	ed93 7b00 	vldr	d7, [r3]
 8004ec2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ec6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004eca:	ed97 7b00 	vldr	d7, [r7]
 8004ece:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ed2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004ed6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004eda:	eeb0 0b45 	vmov.f64	d0, d5
 8004ede:	f00d f99f 	bl	8012220 <pow>
 8004ee2:	eeb0 7b40 	vmov.f64	d7, d0
 8004ee6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004eea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004eee:	4b8e      	ldr	r3, [pc, #568]	; (8005128 <cinematicaInversa+0x3d0>)
 8004ef0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (Pyaux - r))) / (2.0 * Pzaux)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((Pyaux - r), 2.0) + pow(Pzaux, 2.0) - pow(L2, 2.0) + pow(Pxaux, 2)) / (2 * Pzaux)));
 8004ef4:	4b85      	ldr	r3, [pc, #532]	; (800510c <cinematicaInversa+0x3b4>)
 8004ef6:	ed93 7b00 	vldr	d7, [r3]
 8004efa:	ee37 8b07 	vadd.f64	d8, d7, d7
 8004efe:	4b82      	ldr	r3, [pc, #520]	; (8005108 <cinematicaInversa+0x3b0>)
 8004f00:	ed93 7b00 	vldr	d7, [r3]
 8004f04:	ed97 6b02 	vldr	d6, [r7, #8]
 8004f08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f0c:	4b7f      	ldr	r3, [pc, #508]	; (800510c <cinematicaInversa+0x3b4>)
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f16:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004f1a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004f1e:	ed97 7b00 	vldr	d7, [r7]
 8004f22:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f2a:	ee37 9b07 	vadd.f64	d9, d7, d7
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	; (800512c <cinematicaInversa+0x3d4>)
 8004f30:	ed93 7b00 	vldr	d7, [r3]
 8004f34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f38:	eeb0 0b47 	vmov.f64	d0, d7
 8004f3c:	f00d f970 	bl	8012220 <pow>
 8004f40:	eeb0 ab40 	vmov.f64	d10, d0
 8004f44:	4b71      	ldr	r3, [pc, #452]	; (800510c <cinematicaInversa+0x3b4>)
 8004f46:	ed93 7b00 	vldr	d7, [r3]
 8004f4a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f4e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f52:	f00d f965 	bl	8012220 <pow>
 8004f56:	eeb0 7b40 	vmov.f64	d7, d0
 8004f5a:	ee3a ab47 	vsub.f64	d10, d10, d7
 8004f5e:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <cinematicaInversa+0x3b0>)
 8004f60:	ed93 7b00 	vldr	d7, [r3]
 8004f64:	ed97 6b02 	vldr	d6, [r7, #8]
 8004f68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f70:	eeb0 0b47 	vmov.f64	d0, d7
 8004f74:	f00d f954 	bl	8012220 <pow>
 8004f78:	eeb0 7b40 	vmov.f64	d7, d0
 8004f7c:	ee3a ab07 	vadd.f64	d10, d10, d7
 8004f80:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f84:	ed97 0b00 	vldr	d0, [r7]
 8004f88:	f00d f94a 	bl	8012220 <pow>
 8004f8c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f90:	ee3a ab07 	vadd.f64	d10, d10, d7
 8004f94:	4b66      	ldr	r3, [pc, #408]	; (8005130 <cinematicaInversa+0x3d8>)
 8004f96:	ed93 7b00 	vldr	d7, [r3]
 8004f9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa2:	f00d f93d 	bl	8012220 <pow>
 8004fa6:	eeb0 7b40 	vmov.f64	d7, d0
 8004faa:	ee3a ab47 	vsub.f64	d10, d10, d7
 8004fae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fb2:	ed97 0b04 	vldr	d0, [r7, #16]
 8004fb6:	f00d f933 	bl	8012220 <pow>
 8004fba:	eeb0 7b40 	vmov.f64	d7, d0
 8004fbe:	ee3a 5b07 	vadd.f64	d5, d10, d7
 8004fc2:	ed97 7b00 	vldr	d7, [r7]
 8004fc6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004fca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004fce:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004fd2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004fd6:	4b57      	ldr	r3, [pc, #348]	; (8005134 <cinematicaInversa+0x3dc>)
 8004fd8:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * c30 - 2.0 * R * s30 + 2.0 * (((2.0 * sqrt(3) * R * c30 + 2.0 * R * s30)	+ (-2 * sqrt(3) * (Pxaux + r * c30)	- 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) * ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <cinematicaInversa+0x3b4>)
 8004fde:	ed93 7b00 	vldr	d7, [r3]
 8004fe2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8005100 <cinematicaInversa+0x3a8>
 8004fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004fea:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <cinematicaInversa+0x3bc>)
 8004fec:	ed93 7b00 	vldr	d7, [r3]
 8004ff0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ff4:	4b45      	ldr	r3, [pc, #276]	; (800510c <cinematicaInversa+0x3b4>)
 8004ff6:	ed93 7b00 	vldr	d7, [r3]
 8004ffa:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <cinematicaInversa+0x3c0>)
 8005000:	ed93 7b00 	vldr	d7, [r3]
 8005004:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005008:	ee36 8b47 	vsub.f64	d8, d6, d7
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <cinematicaInversa+0x3b4>)
 800500e:	ed93 7b00 	vldr	d7, [r3]
 8005012:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80050f8 <cinematicaInversa+0x3a0>
 8005016:	ee27 6b06 	vmul.f64	d6, d7, d6
 800501a:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <cinematicaInversa+0x3bc>)
 800501c:	ed93 7b00 	vldr	d7, [r3]
 8005020:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <cinematicaInversa+0x3b4>)
 8005026:	ed93 7b00 	vldr	d7, [r3]
 800502a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800502e:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <cinematicaInversa+0x3c0>)
 8005030:	ed93 7b00 	vldr	d7, [r3]
 8005034:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005038:	ee36 6b07 	vadd.f64	d6, d6, d7
 800503c:	4b32      	ldr	r3, [pc, #200]	; (8005108 <cinematicaInversa+0x3b0>)
 800503e:	ed93 5b00 	vldr	d5, [r3]
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <cinematicaInversa+0x3bc>)
 8005044:	ed93 7b00 	vldr	d7, [r3]
 8005048:	ee25 5b07 	vmul.f64	d5, d5, d7
 800504c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005050:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005054:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005100 <cinematicaInversa+0x3a8>
 8005058:	ee27 5b05 	vmul.f64	d5, d7, d5
 800505c:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <cinematicaInversa+0x3b0>)
 800505e:	ed93 4b00 	vldr	d4, [r3]
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <cinematicaInversa+0x3c0>)
 8005064:	ed93 7b00 	vldr	d7, [r3]
 8005068:	ee24 4b07 	vmul.f64	d4, d4, d7
 800506c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005070:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005074:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005078:	ee35 7b47 	vsub.f64	d7, d5, d7
 800507c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8005080:	ed97 7b00 	vldr	d7, [r7]
 8005084:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005088:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800508c:	ee37 9b07 	vadd.f64	d9, d7, d7
 8005090:	4b26      	ldr	r3, [pc, #152]	; (800512c <cinematicaInversa+0x3d4>)
 8005092:	ed93 7b00 	vldr	d7, [r3]
 8005096:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800509a:	eeb0 0b47 	vmov.f64	d0, d7
 800509e:	f00d f8bf 	bl	8012220 <pow>
 80050a2:	eeb0 ab40 	vmov.f64	d10, d0
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <cinematicaInversa+0x3b4>)
 80050a8:	ed93 7b00 	vldr	d7, [r3]
 80050ac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050b0:	eeb0 0b47 	vmov.f64	d0, d7
 80050b4:	f00d f8b4 	bl	8012220 <pow>
 80050b8:	eeb0 7b40 	vmov.f64	d7, d0
 80050bc:	ee3a ab47 	vsub.f64	d10, d10, d7
 80050c0:	4b11      	ldr	r3, [pc, #68]	; (8005108 <cinematicaInversa+0x3b0>)
 80050c2:	ed93 6b00 	vldr	d6, [r3]
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <cinematicaInversa+0x3bc>)
 80050c8:	ed93 7b00 	vldr	d7, [r3]
 80050cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80050d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80050d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050dc:	eeb0 0b47 	vmov.f64	d0, d7
 80050e0:	f00d f89e 	bl	8012220 <pow>
 80050e4:	eeb0 7b40 	vmov.f64	d7, d0
 80050e8:	ee3a ab07 	vadd.f64	d10, d10, d7
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <cinematicaInversa+0x3b0>)
 80050ee:	ed93 6b00 	vldr	d6, [r3]
 80050f2:	e021      	b.n	8005138 <cinematicaInversa+0x3e0>
 80050f4:	f3af 8000 	nop.w
 80050f8:	e8584caa 	.word	0xe8584caa
 80050fc:	400bb67a 	.word	0x400bb67a
 8005100:	e8584caa 	.word	0xe8584caa
 8005104:	c00bb67a 	.word	0xc00bb67a
 8005108:	24000048 	.word	0x24000048
 800510c:	24000040 	.word	0x24000040
 8005110:	24000710 	.word	0x24000710
 8005114:	240000e0 	.word	0x240000e0
 8005118:	240000e8 	.word	0x240000e8
 800511c:	24000758 	.word	0x24000758
 8005120:	240000f0 	.word	0x240000f0
 8005124:	240000f8 	.word	0x240000f8
 8005128:	240007a0 	.word	0x240007a0
 800512c:	24000030 	.word	0x24000030
 8005130:	24000038 	.word	0x24000038
 8005134:	24000718 	.word	0x24000718
 8005138:	4beb      	ldr	r3, [pc, #940]	; (80054e8 <cinematicaInversa+0x790>)
 800513a:	ed93 7b00 	vldr	d7, [r3]
 800513e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005142:	ed97 7b02 	vldr	d7, [r7, #8]
 8005146:	ee36 7b07 	vadd.f64	d7, d6, d7
 800514a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800514e:	eeb0 0b47 	vmov.f64	d0, d7
 8005152:	f00d f865 	bl	8012220 <pow>
 8005156:	eeb0 7b40 	vmov.f64	d7, d0
 800515a:	ee3a ab07 	vadd.f64	d10, d10, d7
 800515e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005162:	ed97 0b00 	vldr	d0, [r7]
 8005166:	f00d f85b 	bl	8012220 <pow>
 800516a:	eeb0 7b40 	vmov.f64	d7, d0
 800516e:	ee3a ab07 	vadd.f64	d10, d10, d7
 8005172:	4bde      	ldr	r3, [pc, #888]	; (80054ec <cinematicaInversa+0x794>)
 8005174:	ed93 7b00 	vldr	d7, [r3]
 8005178:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800517c:	eeb0 0b47 	vmov.f64	d0, d7
 8005180:	f00d f84e 	bl	8012220 <pow>
 8005184:	eeb0 7b40 	vmov.f64	d7, d0
 8005188:	ee3a 5b47 	vsub.f64	d5, d10, d7
 800518c:	ed97 7b00 	vldr	d7, [r7]
 8005190:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005194:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005198:	ee29 7b07 	vmul.f64	d7, d9, d7
 800519c:	ee38 7b07 	vadd.f64	d7, d8, d7
 80051a0:	4bd3      	ldr	r3, [pc, #844]	; (80054f0 <cinematicaInversa+0x798>)
 80051a2:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * c150 - 2.0 * R * s150 + 2.0 * ((2.0 * sqrt(3) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2 * Pzaux)) * ((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 80051a6:	4bd3      	ldr	r3, [pc, #844]	; (80054f4 <cinematicaInversa+0x79c>)
 80051a8:	ed93 7b00 	vldr	d7, [r3]
 80051ac:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 80054e0 <cinematicaInversa+0x788>
 80051b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80051b4:	4bd0      	ldr	r3, [pc, #832]	; (80054f8 <cinematicaInversa+0x7a0>)
 80051b6:	ed93 7b00 	vldr	d7, [r3]
 80051ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051be:	4bcd      	ldr	r3, [pc, #820]	; (80054f4 <cinematicaInversa+0x79c>)
 80051c0:	ed93 7b00 	vldr	d7, [r3]
 80051c4:	ee37 5b07 	vadd.f64	d5, d7, d7
 80051c8:	4bcc      	ldr	r3, [pc, #816]	; (80054fc <cinematicaInversa+0x7a4>)
 80051ca:	ed93 7b00 	vldr	d7, [r3]
 80051ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051d2:	ee36 8b47 	vsub.f64	d8, d6, d7
 80051d6:	4bca      	ldr	r3, [pc, #808]	; (8005500 <cinematicaInversa+0x7a8>)
 80051d8:	ed93 6b00 	vldr	d6, [r3]
 80051dc:	4bc6      	ldr	r3, [pc, #792]	; (80054f8 <cinematicaInversa+0x7a0>)
 80051de:	ed93 7b00 	vldr	d7, [r3]
 80051e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80051ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ee:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 80054e0 <cinematicaInversa+0x788>
 80051f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80051f6:	4bc2      	ldr	r3, [pc, #776]	; (8005500 <cinematicaInversa+0x7a8>)
 80051f8:	ed93 5b00 	vldr	d5, [r3]
 80051fc:	4bbf      	ldr	r3, [pc, #764]	; (80054fc <cinematicaInversa+0x7a4>)
 80051fe:	ed93 7b00 	vldr	d7, [r3]
 8005202:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005206:	ed97 7b02 	vldr	d7, [r7, #8]
 800520a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800520e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005212:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005216:	4bb7      	ldr	r3, [pc, #732]	; (80054f4 <cinematicaInversa+0x79c>)
 8005218:	ed93 7b00 	vldr	d7, [r3]
 800521c:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 80054e0 <cinematicaInversa+0x788>
 8005220:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005224:	4bb4      	ldr	r3, [pc, #720]	; (80054f8 <cinematicaInversa+0x7a0>)
 8005226:	ed93 7b00 	vldr	d7, [r3]
 800522a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800522e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005232:	4bb0      	ldr	r3, [pc, #704]	; (80054f4 <cinematicaInversa+0x79c>)
 8005234:	ed93 7b00 	vldr	d7, [r3]
 8005238:	ee37 5b07 	vadd.f64	d5, d7, d7
 800523c:	4baf      	ldr	r3, [pc, #700]	; (80054fc <cinematicaInversa+0x7a4>)
 800523e:	ed93 7b00 	vldr	d7, [r3]
 8005242:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005246:	ee36 5b07 	vadd.f64	d5, d6, d7
 800524a:	ed97 7b00 	vldr	d7, [r7]
 800524e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005252:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005256:	ee37 9b07 	vadd.f64	d9, d7, d7
 800525a:	4ba9      	ldr	r3, [pc, #676]	; (8005500 <cinematicaInversa+0x7a8>)
 800525c:	ed93 6b00 	vldr	d6, [r3]
 8005260:	4ba5      	ldr	r3, [pc, #660]	; (80054f8 <cinematicaInversa+0x7a0>)
 8005262:	ed93 7b00 	vldr	d7, [r3]
 8005266:	ee26 6b07 	vmul.f64	d6, d6, d7
 800526a:	ed97 7b04 	vldr	d7, [r7, #16]
 800526e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005272:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005276:	eeb0 0b47 	vmov.f64	d0, d7
 800527a:	f00c ffd1 	bl	8012220 <pow>
 800527e:	eeb0 ab40 	vmov.f64	d10, d0
 8005282:	4b9f      	ldr	r3, [pc, #636]	; (8005500 <cinematicaInversa+0x7a8>)
 8005284:	ed93 6b00 	vldr	d6, [r3]
 8005288:	4b9c      	ldr	r3, [pc, #624]	; (80054fc <cinematicaInversa+0x7a4>)
 800528a:	ed93 7b00 	vldr	d7, [r3]
 800528e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005292:	ed97 7b02 	vldr	d7, [r7, #8]
 8005296:	ee36 7b07 	vadd.f64	d7, d6, d7
 800529a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800529e:	eeb0 0b47 	vmov.f64	d0, d7
 80052a2:	f00c ffbd 	bl	8012220 <pow>
 80052a6:	eeb0 7b40 	vmov.f64	d7, d0
 80052aa:	ee3a ab07 	vadd.f64	d10, d10, d7
 80052ae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052b2:	ed97 0b00 	vldr	d0, [r7]
 80052b6:	f00c ffb3 	bl	8012220 <pow>
 80052ba:	eeb0 7b40 	vmov.f64	d7, d0
 80052be:	ee3a ab07 	vadd.f64	d10, d10, d7
 80052c2:	4b8a      	ldr	r3, [pc, #552]	; (80054ec <cinematicaInversa+0x794>)
 80052c4:	ed93 7b00 	vldr	d7, [r3]
 80052c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052cc:	eeb0 0b47 	vmov.f64	d0, d7
 80052d0:	f00c ffa6 	bl	8012220 <pow>
 80052d4:	eeb0 7b40 	vmov.f64	d7, d0
 80052d8:	ee3a ab47 	vsub.f64	d10, d10, d7
 80052dc:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <cinematicaInversa+0x79c>)
 80052de:	ed93 7b00 	vldr	d7, [r3]
 80052e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052e6:	eeb0 0b47 	vmov.f64	d0, d7
 80052ea:	f00c ff99 	bl	8012220 <pow>
 80052ee:	eeb0 7b40 	vmov.f64	d7, d0
 80052f2:	ee3a ab47 	vsub.f64	d10, d10, d7
 80052f6:	4b83      	ldr	r3, [pc, #524]	; (8005504 <cinematicaInversa+0x7ac>)
 80052f8:	ed93 7b00 	vldr	d7, [r3]
 80052fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005300:	eeb0 0b47 	vmov.f64	d0, d7
 8005304:	f00c ff8c 	bl	8012220 <pow>
 8005308:	eeb0 7b40 	vmov.f64	d7, d0
 800530c:	ee3a 5b07 	vadd.f64	d5, d10, d7
 8005310:	ed97 7b00 	vldr	d7, [r7]
 8005314:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005318:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800531c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005320:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005324:	4b78      	ldr	r3, [pc, #480]	; (8005508 <cinematicaInversa+0x7b0>)
 8005326:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)), 2) - pow(L1, 2) + pow(R, 2));
 800532a:	4b75      	ldr	r3, [pc, #468]	; (8005500 <cinematicaInversa+0x7a8>)
 800532c:	ed93 7b00 	vldr	d7, [r3]
 8005330:	ed97 6b02 	vldr	d6, [r7, #8]
 8005334:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005338:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800533c:	eeb0 0b47 	vmov.f64	d0, d7
 8005340:	f00c ff6e 	bl	8012220 <pow>
 8005344:	eeb0 8b40 	vmov.f64	d8, d0
 8005348:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800534c:	ed97 0b00 	vldr	d0, [r7]
 8005350:	f00c ff66 	bl	8012220 <pow>
 8005354:	eeb0 7b40 	vmov.f64	d7, d0
 8005358:	ee38 8b07 	vadd.f64	d8, d8, d7
 800535c:	4b63      	ldr	r3, [pc, #396]	; (80054ec <cinematicaInversa+0x794>)
 800535e:	ed93 7b00 	vldr	d7, [r3]
 8005362:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005366:	eeb0 0b47 	vmov.f64	d0, d7
 800536a:	f00c ff59 	bl	8012220 <pow>
 800536e:	eeb0 7b40 	vmov.f64	d7, d0
 8005372:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005376:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800537a:	ed97 0b04 	vldr	d0, [r7, #16]
 800537e:	f00c ff4f 	bl	8012220 <pow>
 8005382:	eeb0 7b40 	vmov.f64	d7, d0
 8005386:	ee38 8b07 	vadd.f64	d8, d8, d7
 800538a:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <cinematicaInversa+0x79c>)
 800538c:	ed93 7b00 	vldr	d7, [r3]
 8005390:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005394:	eeb0 0b47 	vmov.f64	d0, d7
 8005398:	f00c ff42 	bl	8012220 <pow>
 800539c:	eeb0 7b40 	vmov.f64	d7, d0
 80053a0:	ee38 8b47 	vsub.f64	d8, d8, d7
 80053a4:	4b57      	ldr	r3, [pc, #348]	; (8005504 <cinematicaInversa+0x7ac>)
 80053a6:	ed93 7b00 	vldr	d7, [r3]
 80053aa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053ae:	eeb0 0b47 	vmov.f64	d0, d7
 80053b2:	f00c ff35 	bl	8012220 <pow>
 80053b6:	eeb0 7b40 	vmov.f64	d7, d0
 80053ba:	ee38 6b07 	vadd.f64	d6, d8, d7
 80053be:	ed97 7b00 	vldr	d7, [r7]
 80053c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80053c6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80053ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053ce:	eeb0 0b45 	vmov.f64	d0, d5
 80053d2:	f00c ff25 	bl	8012220 <pow>
 80053d6:	eeb0 8b40 	vmov.f64	d8, d0
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <cinematicaInversa+0x7ac>)
 80053dc:	ed93 7b00 	vldr	d7, [r3]
 80053e0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053e4:	eeb0 0b47 	vmov.f64	d0, d7
 80053e8:	f00c ff1a 	bl	8012220 <pow>
 80053ec:	eeb0 7b40 	vmov.f64	d7, d0
 80053f0:	ee38 8b47 	vsub.f64	d8, d8, d7
 80053f4:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <cinematicaInversa+0x79c>)
 80053f6:	ed93 7b00 	vldr	d7, [r3]
 80053fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053fe:	eeb0 0b47 	vmov.f64	d0, d7
 8005402:	f00c ff0d 	bl	8012220 <pow>
 8005406:	eeb0 7b40 	vmov.f64	d7, d0
 800540a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <cinematicaInversa+0x7b4>)
 8005410:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2.0 * Pzaux)), 2.0);
 8005414:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <cinematicaInversa+0x79c>)
 8005416:	ed93 7b00 	vldr	d7, [r3]
 800541a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800541e:	eeb0 0b47 	vmov.f64	d0, d7
 8005422:	f00c fefd 	bl	8012220 <pow>
 8005426:	eeb0 8b40 	vmov.f64	d8, d0
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <cinematicaInversa+0x7ac>)
 800542c:	ed93 7b00 	vldr	d7, [r3]
 8005430:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005434:	eeb0 0b47 	vmov.f64	d0, d7
 8005438:	f00c fef2 	bl	8012220 <pow>
 800543c:	eeb0 7b40 	vmov.f64	d7, d0
 8005440:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <cinematicaInversa+0x7ac>)
 8005446:	ed93 7b00 	vldr	d7, [r3]
 800544a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800544e:	eeb0 0b47 	vmov.f64	d0, d7
 8005452:	f00c fee5 	bl	8012220 <pow>
 8005456:	eeb0 9b40 	vmov.f64	d9, d0
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <cinematicaInversa+0x79c>)
 800545c:	ed93 7b00 	vldr	d7, [r3]
 8005460:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005464:	eeb0 0b47 	vmov.f64	d0, d7
 8005468:	f00c feda 	bl	8012220 <pow>
 800546c:	eeb0 7b40 	vmov.f64	d7, d0
 8005470:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <cinematicaInversa+0x7a8>)
 8005476:	ed93 6b00 	vldr	d6, [r3]
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <cinematicaInversa+0x7b8>)
 800547c:	ed93 7b00 	vldr	d7, [r3]
 8005480:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005484:	ed97 7b04 	vldr	d7, [r7, #16]
 8005488:	ee36 7b07 	vadd.f64	d7, d6, d7
 800548c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005490:	eeb0 0b47 	vmov.f64	d0, d7
 8005494:	f00c fec4 	bl	8012220 <pow>
 8005498:	eeb0 7b40 	vmov.f64	d7, d0
 800549c:	ee39 9b07 	vadd.f64	d9, d9, d7
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <cinematicaInversa+0x7a8>)
 80054a2:	ed93 6b00 	vldr	d6, [r3]
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <cinematicaInversa+0x790>)
 80054a8:	ed93 7b00 	vldr	d7, [r3]
 80054ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80054b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054bc:	eeb0 0b47 	vmov.f64	d0, d7
 80054c0:	f00c feae 	bl	8012220 <pow>
 80054c4:	eeb0 7b40 	vmov.f64	d7, d0
 80054c8:	ee39 9b07 	vadd.f64	d9, d9, d7
 80054cc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054d0:	ed97 0b00 	vldr	d0, [r7]
 80054d4:	f00c fea4 	bl	8012220 <pow>
 80054d8:	e01c      	b.n	8005514 <cinematicaInversa+0x7bc>
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w
 80054e0:	e8584caa 	.word	0xe8584caa
 80054e4:	400bb67a 	.word	0x400bb67a
 80054e8:	240000e8 	.word	0x240000e8
 80054ec:	24000038 	.word	0x24000038
 80054f0:	24000760 	.word	0x24000760
 80054f4:	24000040 	.word	0x24000040
 80054f8:	240000f0 	.word	0x240000f0
 80054fc:	240000f8 	.word	0x240000f8
 8005500:	24000048 	.word	0x24000048
 8005504:	24000030 	.word	0x24000030
 8005508:	240007a8 	.word	0x240007a8
 800550c:	24000720 	.word	0x24000720
 8005510:	240000e0 	.word	0x240000e0
 8005514:	eeb0 7b40 	vmov.f64	d7, d0
 8005518:	ee39 9b07 	vadd.f64	d9, d9, d7
 800551c:	4be3      	ldr	r3, [pc, #908]	; (80058ac <cinematicaInversa+0xb54>)
 800551e:	ed93 7b00 	vldr	d7, [r3]
 8005522:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005526:	eeb0 0b47 	vmov.f64	d0, d7
 800552a:	f00c fe79 	bl	8012220 <pow>
 800552e:	eeb0 7b40 	vmov.f64	d7, d0
 8005532:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005536:	ed97 7b00 	vldr	d7, [r7]
 800553a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800553e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005542:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005546:	eeb0 0b45 	vmov.f64	d0, d5
 800554a:	f00c fe69 	bl	8012220 <pow>
 800554e:	eeb0 7b40 	vmov.f64	d7, d0
 8005552:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005556:	4bd6      	ldr	r3, [pc, #856]	; (80058b0 <cinematicaInversa+0xb58>)
 8005558:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * Pzaux)), 2.0);
 800555c:	4bd5      	ldr	r3, [pc, #852]	; (80058b4 <cinematicaInversa+0xb5c>)
 800555e:	ed93 7b00 	vldr	d7, [r3]
 8005562:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005566:	eeb0 0b47 	vmov.f64	d0, d7
 800556a:	f00c fe59 	bl	8012220 <pow>
 800556e:	eeb0 8b40 	vmov.f64	d8, d0
 8005572:	4bd1      	ldr	r3, [pc, #836]	; (80058b8 <cinematicaInversa+0xb60>)
 8005574:	ed93 7b00 	vldr	d7, [r3]
 8005578:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800557c:	eeb0 0b47 	vmov.f64	d0, d7
 8005580:	f00c fe4e 	bl	8012220 <pow>
 8005584:	eeb0 7b40 	vmov.f64	d7, d0
 8005588:	ee38 8b47 	vsub.f64	d8, d8, d7
 800558c:	4bcb      	ldr	r3, [pc, #812]	; (80058bc <cinematicaInversa+0xb64>)
 800558e:	ed93 6b00 	vldr	d6, [r3]
 8005592:	4bcb      	ldr	r3, [pc, #812]	; (80058c0 <cinematicaInversa+0xb68>)
 8005594:	ed93 7b00 	vldr	d7, [r3]
 8005598:	ee26 6b07 	vmul.f64	d6, d6, d7
 800559c:	ed97 7b04 	vldr	d7, [r7, #16]
 80055a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055a4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055a8:	eeb0 0b47 	vmov.f64	d0, d7
 80055ac:	f00c fe38 	bl	8012220 <pow>
 80055b0:	eeb0 9b40 	vmov.f64	d9, d0
 80055b4:	4bc1      	ldr	r3, [pc, #772]	; (80058bc <cinematicaInversa+0xb64>)
 80055b6:	ed93 6b00 	vldr	d6, [r3]
 80055ba:	4bc2      	ldr	r3, [pc, #776]	; (80058c4 <cinematicaInversa+0xb6c>)
 80055bc:	ed93 7b00 	vldr	d7, [r3]
 80055c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80055c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055cc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055d0:	eeb0 0b47 	vmov.f64	d0, d7
 80055d4:	f00c fe24 	bl	8012220 <pow>
 80055d8:	eeb0 7b40 	vmov.f64	d7, d0
 80055dc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80055e0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055e4:	ed97 0b00 	vldr	d0, [r7]
 80055e8:	f00c fe1a 	bl	8012220 <pow>
 80055ec:	eeb0 7b40 	vmov.f64	d7, d0
 80055f0:	ee39 9b07 	vadd.f64	d9, d9, d7
 80055f4:	4bad      	ldr	r3, [pc, #692]	; (80058ac <cinematicaInversa+0xb54>)
 80055f6:	ed93 7b00 	vldr	d7, [r3]
 80055fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055fe:	eeb0 0b47 	vmov.f64	d0, d7
 8005602:	f00c fe0d 	bl	8012220 <pow>
 8005606:	eeb0 7b40 	vmov.f64	d7, d0
 800560a:	ee39 9b47 	vsub.f64	d9, d9, d7
 800560e:	4ba9      	ldr	r3, [pc, #676]	; (80058b4 <cinematicaInversa+0xb5c>)
 8005610:	ed93 7b00 	vldr	d7, [r3]
 8005614:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005618:	eeb0 0b47 	vmov.f64	d0, d7
 800561c:	f00c fe00 	bl	8012220 <pow>
 8005620:	eeb0 7b40 	vmov.f64	d7, d0
 8005624:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005628:	4ba3      	ldr	r3, [pc, #652]	; (80058b8 <cinematicaInversa+0xb60>)
 800562a:	ed93 7b00 	vldr	d7, [r3]
 800562e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005632:	eeb0 0b47 	vmov.f64	d0, d7
 8005636:	f00c fdf3 	bl	8012220 <pow>
 800563a:	eeb0 7b40 	vmov.f64	d7, d0
 800563e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005642:	ed97 7b00 	vldr	d7, [r7]
 8005646:	ee37 7b07 	vadd.f64	d7, d7, d7
 800564a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800564e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005652:	eeb0 0b45 	vmov.f64	d0, d5
 8005656:	f00c fde3 	bl	8012220 <pow>
 800565a:	eeb0 7b40 	vmov.f64	d7, d0
 800565e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005662:	4b99      	ldr	r3, [pc, #612]	; (80058c8 <cinematicaInversa+0xb70>)
 8005664:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8005668:	4b98      	ldr	r3, [pc, #608]	; (80058cc <cinematicaInversa+0xb74>)
 800566a:	ed93 7b00 	vldr	d7, [r3]
 800566e:	eeb1 8b47 	vneg.f64	d8, d7
 8005672:	4b96      	ldr	r3, [pc, #600]	; (80058cc <cinematicaInversa+0xb74>)
 8005674:	ed93 7b00 	vldr	d7, [r3]
 8005678:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800567c:	eeb0 0b47 	vmov.f64	d0, d7
 8005680:	f00c fdce 	bl	8012220 <pow>
 8005684:	eeb0 5b40 	vmov.f64	d5, d0
 8005688:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <cinematicaInversa+0xb78>)
 800568a:	ed93 7b00 	vldr	d7, [r3]
 800568e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005692:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005696:	4b8f      	ldr	r3, [pc, #572]	; (80058d4 <cinematicaInversa+0xb7c>)
 8005698:	ed93 7b00 	vldr	d7, [r3]
 800569c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80056a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80056a4:	eeb0 0b47 	vmov.f64	d0, d7
 80056a8:	f00d f83a 	bl	8012720 <sqrt>
 80056ac:	eeb0 7b40 	vmov.f64	d7, d0
 80056b0:	ee38 5b47 	vsub.f64	d5, d8, d7
 80056b4:	4b86      	ldr	r3, [pc, #536]	; (80058d0 <cinematicaInversa+0xb78>)
 80056b6:	ed93 7b00 	vldr	d7, [r3]
 80056ba:	ee37 6b07 	vadd.f64	d6, d7, d7
 80056be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80056c2:	4b85      	ldr	r3, [pc, #532]	; (80058d8 <cinematicaInversa+0xb80>)
 80056c4:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80056c8:	4b80      	ldr	r3, [pc, #512]	; (80058cc <cinematicaInversa+0xb74>)
 80056ca:	ed93 7b00 	vldr	d7, [r3]
 80056ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056d2:	eeb0 0b47 	vmov.f64	d0, d7
 80056d6:	f00c fda3 	bl	8012220 <pow>
 80056da:	eeb0 5b40 	vmov.f64	d5, d0
 80056de:	4b7c      	ldr	r3, [pc, #496]	; (80058d0 <cinematicaInversa+0xb78>)
 80056e0:	ed93 7b00 	vldr	d7, [r3]
 80056e4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80056e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80056ec:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <cinematicaInversa+0xb7c>)
 80056ee:	ed93 7b00 	vldr	d7, [r3]
 80056f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80056f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80056fa:	eeb0 0b47 	vmov.f64	d0, d7
 80056fe:	f00d f80f 	bl	8012720 <sqrt>
 8005702:	eeb0 6b40 	vmov.f64	d6, d0
 8005706:	4b71      	ldr	r3, [pc, #452]	; (80058cc <cinematicaInversa+0xb74>)
 8005708:	ed93 7b00 	vldr	d7, [r3]
 800570c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005710:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <cinematicaInversa+0xb78>)
 8005712:	ed93 7b00 	vldr	d7, [r3]
 8005716:	ee37 6b07 	vadd.f64	d6, d7, d7
 800571a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800571e:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <cinematicaInversa+0xb84>)
 8005720:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8005724:	4b6e      	ldr	r3, [pc, #440]	; (80058e0 <cinematicaInversa+0xb88>)
 8005726:	ed93 7b00 	vldr	d7, [r3]
 800572a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800572e:	eeb0 0b47 	vmov.f64	d0, d7
 8005732:	f00c fd75 	bl	8012220 <pow>
 8005736:	eeb0 5b40 	vmov.f64	d5, d0
 800573a:	4b6a      	ldr	r3, [pc, #424]	; (80058e4 <cinematicaInversa+0xb8c>)
 800573c:	ed93 7b00 	vldr	d7, [r3]
 8005740:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005748:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <cinematicaInversa+0xb58>)
 800574a:	ed93 7b00 	vldr	d7, [r3]
 800574e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005752:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005756:	eeb0 0b47 	vmov.f64	d0, d7
 800575a:	f00c ffe1 	bl	8012720 <sqrt>
 800575e:	eeb0 6b40 	vmov.f64	d6, d0
 8005762:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <cinematicaInversa+0xb88>)
 8005764:	ed93 7b00 	vldr	d7, [r3]
 8005768:	ee36 5b47 	vsub.f64	d5, d6, d7
 800576c:	4b5d      	ldr	r3, [pc, #372]	; (80058e4 <cinematicaInversa+0xb8c>)
 800576e:	ed93 7b00 	vldr	d7, [r3]
 8005772:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005776:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800577a:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <cinematicaInversa+0xb90>)
 800577c:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8005780:	4b57      	ldr	r3, [pc, #348]	; (80058e0 <cinematicaInversa+0xb88>)
 8005782:	ed93 7b00 	vldr	d7, [r3]
 8005786:	eeb1 8b47 	vneg.f64	d8, d7
 800578a:	4b55      	ldr	r3, [pc, #340]	; (80058e0 <cinematicaInversa+0xb88>)
 800578c:	ed93 7b00 	vldr	d7, [r3]
 8005790:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005794:	eeb0 0b47 	vmov.f64	d0, d7
 8005798:	f00c fd42 	bl	8012220 <pow>
 800579c:	eeb0 5b40 	vmov.f64	d5, d0
 80057a0:	4b50      	ldr	r3, [pc, #320]	; (80058e4 <cinematicaInversa+0xb8c>)
 80057a2:	ed93 7b00 	vldr	d7, [r3]
 80057a6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80057aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80057ae:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <cinematicaInversa+0xb58>)
 80057b0:	ed93 7b00 	vldr	d7, [r3]
 80057b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80057b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80057bc:	eeb0 0b47 	vmov.f64	d0, d7
 80057c0:	f00c ffae 	bl	8012720 <sqrt>
 80057c4:	eeb0 7b40 	vmov.f64	d7, d0
 80057c8:	ee38 5b47 	vsub.f64	d5, d8, d7
 80057cc:	4b45      	ldr	r3, [pc, #276]	; (80058e4 <cinematicaInversa+0xb8c>)
 80057ce:	ed93 7b00 	vldr	d7, [r3]
 80057d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057da:	4b44      	ldr	r3, [pc, #272]	; (80058ec <cinematicaInversa+0xb94>)
 80057dc:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80057e0:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <cinematicaInversa+0xb98>)
 80057e2:	ed93 7b00 	vldr	d7, [r3]
 80057e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057ea:	eeb0 0b47 	vmov.f64	d0, d7
 80057ee:	f00c fd17 	bl	8012220 <pow>
 80057f2:	eeb0 5b40 	vmov.f64	d5, d0
 80057f6:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <cinematicaInversa+0xb9c>)
 80057f8:	ed93 7b00 	vldr	d7, [r3]
 80057fc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005800:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005804:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <cinematicaInversa+0xb70>)
 8005806:	ed93 7b00 	vldr	d7, [r3]
 800580a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800580e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005812:	eeb0 0b47 	vmov.f64	d0, d7
 8005816:	f00c ff83 	bl	8012720 <sqrt>
 800581a:	eeb0 6b40 	vmov.f64	d6, d0
 800581e:	4b34      	ldr	r3, [pc, #208]	; (80058f0 <cinematicaInversa+0xb98>)
 8005820:	ed93 7b00 	vldr	d7, [r3]
 8005824:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005828:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <cinematicaInversa+0xb9c>)
 800582a:	ed93 7b00 	vldr	d7, [r3]
 800582e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005832:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005836:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <cinematicaInversa+0xba0>)
 8005838:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 800583c:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <cinematicaInversa+0xb98>)
 800583e:	ed93 7b00 	vldr	d7, [r3]
 8005842:	eeb1 8b47 	vneg.f64	d8, d7
 8005846:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <cinematicaInversa+0xb98>)
 8005848:	ed93 7b00 	vldr	d7, [r3]
 800584c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005850:	eeb0 0b47 	vmov.f64	d0, d7
 8005854:	f00c fce4 	bl	8012220 <pow>
 8005858:	eeb0 5b40 	vmov.f64	d5, d0
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <cinematicaInversa+0xb9c>)
 800585e:	ed93 7b00 	vldr	d7, [r3]
 8005862:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005866:	ee27 6b06 	vmul.f64	d6, d7, d6
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <cinematicaInversa+0xb70>)
 800586c:	ed93 7b00 	vldr	d7, [r3]
 8005870:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005874:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005878:	eeb0 0b47 	vmov.f64	d0, d7
 800587c:	f00c ff50 	bl	8012720 <sqrt>
 8005880:	eeb0 7b40 	vmov.f64	d7, d0
 8005884:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <cinematicaInversa+0xb9c>)
 800588a:	ed93 7b00 	vldr	d7, [r3]
 800588e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005896:	4b19      	ldr	r3, [pc, #100]	; (80058fc <cinematicaInversa+0xba4>)
 8005898:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800589c:	4918      	ldr	r1, [pc, #96]	; (8005900 <cinematicaInversa+0xba8>)
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9c1 2300 	strd	r2, r3, [r1]
 80058aa:	e02b      	b.n	8005904 <cinematicaInversa+0xbac>
 80058ac:	24000038 	.word	0x24000038
 80058b0:	24000768 	.word	0x24000768
 80058b4:	24000040 	.word	0x24000040
 80058b8:	24000030 	.word	0x24000030
 80058bc:	24000048 	.word	0x24000048
 80058c0:	240000f0 	.word	0x240000f0
 80058c4:	240000f8 	.word	0x240000f8
 80058c8:	240007b0 	.word	0x240007b0
 80058cc:	24000718 	.word	0x24000718
 80058d0:	24000710 	.word	0x24000710
 80058d4:	24000720 	.word	0x24000720
 80058d8:	24000738 	.word	0x24000738
 80058dc:	24000740 	.word	0x24000740
 80058e0:	24000760 	.word	0x24000760
 80058e4:	24000758 	.word	0x24000758
 80058e8:	24000780 	.word	0x24000780
 80058ec:	24000788 	.word	0x24000788
 80058f0:	240007a8 	.word	0x240007a8
 80058f4:	240007a0 	.word	0x240007a0
 80058f8:	240007c8 	.word	0x240007c8
 80058fc:	240007d0 	.word	0x240007d0
 8005900:	24000728 	.word	0x24000728
	XJ1_2 = 0;
 8005904:	49e6      	ldr	r1, [pc, #920]	; (8005ca0 <cinematicaInversa+0xf48>)
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8005912:	4be4      	ldr	r3, [pc, #912]	; (8005ca4 <cinematicaInversa+0xf4c>)
 8005914:	ed93 7b00 	vldr	d7, [r3]
 8005918:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8005c80 <cinematicaInversa+0xf28>
 800591c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005920:	4be1      	ldr	r3, [pc, #900]	; (8005ca8 <cinematicaInversa+0xf50>)
 8005922:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8005926:	4be1      	ldr	r3, [pc, #900]	; (8005cac <cinematicaInversa+0xf54>)
 8005928:	ed93 7b00 	vldr	d7, [r3]
 800592c:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8005c80 <cinematicaInversa+0xf28>
 8005930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005934:	4bde      	ldr	r3, [pc, #888]	; (8005cb0 <cinematicaInversa+0xf58>)
 8005936:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 800593a:	4bde      	ldr	r3, [pc, #888]	; (8005cb4 <cinematicaInversa+0xf5c>)
 800593c:	ed93 7b00 	vldr	d7, [r3]
 8005940:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8005c88 <cinematicaInversa+0xf30>
 8005944:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005948:	4bdb      	ldr	r3, [pc, #876]	; (8005cb8 <cinematicaInversa+0xf60>)
 800594a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 800594e:	4bdb      	ldr	r3, [pc, #876]	; (8005cbc <cinematicaInversa+0xf64>)
 8005950:	ed93 7b00 	vldr	d7, [r3]
 8005954:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8005c88 <cinematicaInversa+0xf30>
 8005958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800595c:	4bd8      	ldr	r3, [pc, #864]	; (8005cc0 <cinematicaInversa+0xf68>)
 800595e:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 8005962:	4bd8      	ldr	r3, [pc, #864]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005964:	ed93 7b00 	vldr	d7, [r3]
 8005968:	ed97 6b02 	vldr	d6, [r7, #8]
 800596c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005970:	4bd5      	ldr	r3, [pc, #852]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005972:	ed93 7b00 	vldr	d7, [r3]
 8005976:	ee36 7b07 	vadd.f64	d7, d6, d7
 800597a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800597e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005982:	ed97 7b00 	vldr	d7, [r7]
 8005986:	ee37 7b07 	vadd.f64	d7, d7, d7
 800598a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800598e:	4bcf      	ldr	r3, [pc, #828]	; (8005ccc <cinematicaInversa+0xf74>)
 8005990:	ed93 7b00 	vldr	d7, [r3]
 8005994:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005998:	4bca      	ldr	r3, [pc, #808]	; (8005cc4 <cinematicaInversa+0xf6c>)
 800599a:	ed93 7b00 	vldr	d7, [r3]
 800599e:	ed97 6b02 	vldr	d6, [r7, #8]
 80059a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059aa:	eeb0 0b47 	vmov.f64	d0, d7
 80059ae:	f00c fc37 	bl	8012220 <pow>
 80059b2:	eeb0 9b40 	vmov.f64	d9, d0
 80059b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059ba:	ed97 0b00 	vldr	d0, [r7]
 80059be:	f00c fc2f 	bl	8012220 <pow>
 80059c2:	eeb0 7b40 	vmov.f64	d7, d0
 80059c6:	ee39 9b07 	vadd.f64	d9, d9, d7
 80059ca:	4bc1      	ldr	r3, [pc, #772]	; (8005cd0 <cinematicaInversa+0xf78>)
 80059cc:	ed93 7b00 	vldr	d7, [r3]
 80059d0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059d4:	eeb0 0b47 	vmov.f64	d0, d7
 80059d8:	f00c fc22 	bl	8012220 <pow>
 80059dc:	eeb0 7b40 	vmov.f64	d7, d0
 80059e0:	ee39 9b47 	vsub.f64	d9, d9, d7
 80059e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059e8:	ed97 0b04 	vldr	d0, [r7, #16]
 80059ec:	f00c fc18 	bl	8012220 <pow>
 80059f0:	eeb0 7b40 	vmov.f64	d7, d0
 80059f4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80059f8:	4bb3      	ldr	r3, [pc, #716]	; (8005cc8 <cinematicaInversa+0xf70>)
 80059fa:	ed93 7b00 	vldr	d7, [r3]
 80059fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a02:	eeb0 0b47 	vmov.f64	d0, d7
 8005a06:	f00c fc0b 	bl	8012220 <pow>
 8005a0a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a0e:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005a12:	4bb0      	ldr	r3, [pc, #704]	; (8005cd4 <cinematicaInversa+0xf7c>)
 8005a14:	ed93 7b00 	vldr	d7, [r3]
 8005a18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005a20:	f00c fbfe 	bl	8012220 <pow>
 8005a24:	eeb0 7b40 	vmov.f64	d7, d0
 8005a28:	ee39 5b07 	vadd.f64	d5, d9, d7
 8005a2c:	ed97 7b00 	vldr	d7, [r7]
 8005a30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a38:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005a3c:	4ba6      	ldr	r3, [pc, #664]	; (8005cd8 <cinematicaInversa+0xf80>)
 8005a3e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 8005a42:	4ba0      	ldr	r3, [pc, #640]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005a44:	ed93 7b00 	vldr	d7, [r3]
 8005a48:	ed97 6b02 	vldr	d6, [r7, #8]
 8005a4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a50:	4b9d      	ldr	r3, [pc, #628]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005a52:	ed93 7b00 	vldr	d7, [r3]
 8005a56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a5a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8005a5e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005a62:	ed97 7b00 	vldr	d7, [r7]
 8005a66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a6a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005a6e:	4b9b      	ldr	r3, [pc, #620]	; (8005cdc <cinematicaInversa+0xf84>)
 8005a70:	ed93 7b00 	vldr	d7, [r3]
 8005a74:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005a78:	4b92      	ldr	r3, [pc, #584]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005a7a:	ed93 7b00 	vldr	d7, [r3]
 8005a7e:	ed97 6b02 	vldr	d6, [r7, #8]
 8005a82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005a8e:	f00c fbc7 	bl	8012220 <pow>
 8005a92:	eeb0 9b40 	vmov.f64	d9, d0
 8005a96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a9a:	ed97 0b00 	vldr	d0, [r7]
 8005a9e:	f00c fbbf 	bl	8012220 <pow>
 8005aa2:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa6:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005aaa:	4b89      	ldr	r3, [pc, #548]	; (8005cd0 <cinematicaInversa+0xf78>)
 8005aac:	ed93 7b00 	vldr	d7, [r3]
 8005ab0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ab4:	eeb0 0b47 	vmov.f64	d0, d7
 8005ab8:	f00c fbb2 	bl	8012220 <pow>
 8005abc:	eeb0 7b40 	vmov.f64	d7, d0
 8005ac0:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005ac4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ac8:	ed97 0b04 	vldr	d0, [r7, #16]
 8005acc:	f00c fba8 	bl	8012220 <pow>
 8005ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8005ad4:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005ad8:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005ada:	ed93 7b00 	vldr	d7, [r3]
 8005ade:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ae2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ae6:	f00c fb9b 	bl	8012220 <pow>
 8005aea:	eeb0 7b40 	vmov.f64	d7, d0
 8005aee:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005af2:	4b78      	ldr	r3, [pc, #480]	; (8005cd4 <cinematicaInversa+0xf7c>)
 8005af4:	ed93 7b00 	vldr	d7, [r3]
 8005af8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005afc:	eeb0 0b47 	vmov.f64	d0, d7
 8005b00:	f00c fb8e 	bl	8012220 <pow>
 8005b04:	eeb0 7b40 	vmov.f64	d7, d0
 8005b08:	ee39 5b07 	vadd.f64	d5, d9, d7
 8005b0c:	ed97 7b00 	vldr	d7, [r7]
 8005b10:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b18:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005b1c:	4b70      	ldr	r3, [pc, #448]	; (8005ce0 <cinematicaInversa+0xf88>)
 8005b1e:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8005b22:	4b69      	ldr	r3, [pc, #420]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005b24:	ed93 7b00 	vldr	d7, [r3]
 8005b28:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8005c90 <cinematicaInversa+0xf38>
 8005b2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b30:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <cinematicaInversa+0xf8c>)
 8005b32:	ed93 7b00 	vldr	d7, [r3]
 8005b36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b3a:	4b63      	ldr	r3, [pc, #396]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005b3c:	ed93 7b00 	vldr	d7, [r3]
 8005b40:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005b44:	4b68      	ldr	r3, [pc, #416]	; (8005ce8 <cinematicaInversa+0xf90>)
 8005b46:	ed93 7b00 	vldr	d7, [r3]
 8005b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005b4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b52:	4b5c      	ldr	r3, [pc, #368]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005b54:	ed93 5b00 	vldr	d5, [r3]
 8005b58:	4b62      	ldr	r3, [pc, #392]	; (8005ce4 <cinematicaInversa+0xf8c>)
 8005b5a:	ed93 7b00 	vldr	d7, [r3]
 8005b5e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005b62:	ed97 7b04 	vldr	d7, [r7, #16]
 8005b66:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005b6a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8005c98 <cinematicaInversa+0xf40>
 8005b6e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005b72:	4b54      	ldr	r3, [pc, #336]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005b74:	ed93 4b00 	vldr	d4, [r3]
 8005b78:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <cinematicaInversa+0xf90>)
 8005b7a:	ed93 7b00 	vldr	d7, [r3]
 8005b7e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8005b82:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b86:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005b8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005b92:	ee36 5b07 	vadd.f64	d5, d6, d7
 8005b96:	ed97 7b00 	vldr	d7, [r7]
 8005b9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b9e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ba2:	4b40      	ldr	r3, [pc, #256]	; (8005ca4 <cinematicaInversa+0xf4c>)
 8005ba4:	ed93 7b00 	vldr	d7, [r3]
 8005ba8:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005bac:	4b49      	ldr	r3, [pc, #292]	; (8005cd4 <cinematicaInversa+0xf7c>)
 8005bae:	ed93 7b00 	vldr	d7, [r3]
 8005bb2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8005bba:	f00c fb31 	bl	8012220 <pow>
 8005bbe:	eeb0 9b40 	vmov.f64	d9, d0
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005bc4:	ed93 7b00 	vldr	d7, [r3]
 8005bc8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bcc:	eeb0 0b47 	vmov.f64	d0, d7
 8005bd0:	f00c fb26 	bl	8012220 <pow>
 8005bd4:	eeb0 7b40 	vmov.f64	d7, d0
 8005bd8:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005bdc:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005bde:	ed93 6b00 	vldr	d6, [r3]
 8005be2:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <cinematicaInversa+0xf8c>)
 8005be4:	ed93 7b00 	vldr	d7, [r3]
 8005be8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bec:	ed97 7b04 	vldr	d7, [r7, #16]
 8005bf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bf4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bf8:	eeb0 0b47 	vmov.f64	d0, d7
 8005bfc:	f00c fb10 	bl	8012220 <pow>
 8005c00:	eeb0 7b40 	vmov.f64	d7, d0
 8005c04:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <cinematicaInversa+0xf6c>)
 8005c0a:	ed93 6b00 	vldr	d6, [r3]
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <cinematicaInversa+0xf90>)
 8005c10:	ed93 7b00 	vldr	d7, [r3]
 8005c14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c18:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c20:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c24:	eeb0 0b47 	vmov.f64	d0, d7
 8005c28:	f00c fafa 	bl	8012220 <pow>
 8005c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8005c30:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005c34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c38:	ed97 0b00 	vldr	d0, [r7]
 8005c3c:	f00c faf0 	bl	8012220 <pow>
 8005c40:	eeb0 7b40 	vmov.f64	d7, d0
 8005c44:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005c48:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <cinematicaInversa+0xf78>)
 8005c4a:	ed93 7b00 	vldr	d7, [r3]
 8005c4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c52:	eeb0 0b47 	vmov.f64	d0, d7
 8005c56:	f00c fae3 	bl	8012220 <pow>
 8005c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8005c5e:	ee39 5b47 	vsub.f64	d5, d9, d7
 8005c62:	ed97 7b00 	vldr	d7, [r7]
 8005c66:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005c6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c6e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005c72:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <cinematicaInversa+0xf94>)
 8005c74:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <cinematicaInversa+0xf70>)
 8005c7a:	ed93 7b00 	vldr	d7, [r3]
 8005c7e:	e037      	b.n	8005cf0 <cinematicaInversa+0xf98>
 8005c80:	e8584caa 	.word	0xe8584caa
 8005c84:	3ffbb67a 	.word	0x3ffbb67a
 8005c88:	e8584caa 	.word	0xe8584caa
 8005c8c:	bffbb67a 	.word	0xbffbb67a
 8005c90:	e8584caa 	.word	0xe8584caa
 8005c94:	400bb67a 	.word	0x400bb67a
 8005c98:	e8584caa 	.word	0xe8584caa
 8005c9c:	c00bb67a 	.word	0xc00bb67a
 8005ca0:	24000730 	.word	0x24000730
 8005ca4:	24000780 	.word	0x24000780
 8005ca8:	24000770 	.word	0x24000770
 8005cac:	24000788 	.word	0x24000788
 8005cb0:	24000778 	.word	0x24000778
 8005cb4:	240007c8 	.word	0x240007c8
 8005cb8:	240007b8 	.word	0x240007b8
 8005cbc:	240007d0 	.word	0x240007d0
 8005cc0:	240007c0 	.word	0x240007c0
 8005cc4:	24000048 	.word	0x24000048
 8005cc8:	24000040 	.word	0x24000040
 8005ccc:	24000738 	.word	0x24000738
 8005cd0:	24000038 	.word	0x24000038
 8005cd4:	24000030 	.word	0x24000030
 8005cd8:	24000748 	.word	0x24000748
 8005cdc:	24000740 	.word	0x24000740
 8005ce0:	24000750 	.word	0x24000750
 8005ce4:	240000e0 	.word	0x240000e0
 8005ce8:	240000e8 	.word	0x240000e8
 8005cec:	24000790 	.word	0x24000790
 8005cf0:	ed9f 6be5 	vldr	d6, [pc, #916]	; 8006088 <cinematicaInversa+0x1330>
 8005cf4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005cf8:	4be7      	ldr	r3, [pc, #924]	; (8006098 <cinematicaInversa+0x1340>)
 8005cfa:	ed93 7b00 	vldr	d7, [r3]
 8005cfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d02:	4be6      	ldr	r3, [pc, #920]	; (800609c <cinematicaInversa+0x1344>)
 8005d04:	ed93 7b00 	vldr	d7, [r3]
 8005d08:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005d0c:	4be4      	ldr	r3, [pc, #912]	; (80060a0 <cinematicaInversa+0x1348>)
 8005d0e:	ed93 7b00 	vldr	d7, [r3]
 8005d12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005d16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005d1a:	4be2      	ldr	r3, [pc, #904]	; (80060a4 <cinematicaInversa+0x134c>)
 8005d1c:	ed93 5b00 	vldr	d5, [r3]
 8005d20:	4bdd      	ldr	r3, [pc, #884]	; (8006098 <cinematicaInversa+0x1340>)
 8005d22:	ed93 7b00 	vldr	d7, [r3]
 8005d26:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005d2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8005d2e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005d32:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8006090 <cinematicaInversa+0x1338>
 8005d36:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d3a:	4bda      	ldr	r3, [pc, #872]	; (80060a4 <cinematicaInversa+0x134c>)
 8005d3c:	ed93 4b00 	vldr	d4, [r3]
 8005d40:	4bd7      	ldr	r3, [pc, #860]	; (80060a0 <cinematicaInversa+0x1348>)
 8005d42:	ed93 7b00 	vldr	d7, [r3]
 8005d46:	ee24 4b07 	vmul.f64	d4, d4, d7
 8005d4a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d4e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005d52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d5a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8005d5e:	ed97 7b00 	vldr	d7, [r7]
 8005d62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d66:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d6a:	4bcf      	ldr	r3, [pc, #828]	; (80060a8 <cinematicaInversa+0x1350>)
 8005d6c:	ed93 7b00 	vldr	d7, [r3]
 8005d70:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005d74:	4bcd      	ldr	r3, [pc, #820]	; (80060ac <cinematicaInversa+0x1354>)
 8005d76:	ed93 7b00 	vldr	d7, [r3]
 8005d7a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d7e:	eeb0 0b47 	vmov.f64	d0, d7
 8005d82:	f00c fa4d 	bl	8012220 <pow>
 8005d86:	eeb0 9b40 	vmov.f64	d9, d0
 8005d8a:	4bc4      	ldr	r3, [pc, #784]	; (800609c <cinematicaInversa+0x1344>)
 8005d8c:	ed93 7b00 	vldr	d7, [r3]
 8005d90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d94:	eeb0 0b47 	vmov.f64	d0, d7
 8005d98:	f00c fa42 	bl	8012220 <pow>
 8005d9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005da0:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005da4:	4bbf      	ldr	r3, [pc, #764]	; (80060a4 <cinematicaInversa+0x134c>)
 8005da6:	ed93 6b00 	vldr	d6, [r3]
 8005daa:	4bbb      	ldr	r3, [pc, #748]	; (8006098 <cinematicaInversa+0x1340>)
 8005dac:	ed93 7b00 	vldr	d7, [r3]
 8005db0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005db4:	ed97 7b04 	vldr	d7, [r7, #16]
 8005db8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dbc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8005dc4:	f00c fa2c 	bl	8012220 <pow>
 8005dc8:	eeb0 7b40 	vmov.f64	d7, d0
 8005dcc:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005dd0:	4bb4      	ldr	r3, [pc, #720]	; (80060a4 <cinematicaInversa+0x134c>)
 8005dd2:	ed93 6b00 	vldr	d6, [r3]
 8005dd6:	4bb2      	ldr	r3, [pc, #712]	; (80060a0 <cinematicaInversa+0x1348>)
 8005dd8:	ed93 7b00 	vldr	d7, [r3]
 8005ddc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005de0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005de4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005de8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005dec:	eeb0 0b47 	vmov.f64	d0, d7
 8005df0:	f00c fa16 	bl	8012220 <pow>
 8005df4:	eeb0 7b40 	vmov.f64	d7, d0
 8005df8:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005dfc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005e00:	ed97 0b00 	vldr	d0, [r7]
 8005e04:	f00c fa0c 	bl	8012220 <pow>
 8005e08:	eeb0 7b40 	vmov.f64	d7, d0
 8005e0c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005e10:	4ba7      	ldr	r3, [pc, #668]	; (80060b0 <cinematicaInversa+0x1358>)
 8005e12:	ed93 7b00 	vldr	d7, [r3]
 8005e16:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8005e1e:	f00c f9ff 	bl	8012220 <pow>
 8005e22:	eeb0 7b40 	vmov.f64	d7, d0
 8005e26:	ee39 5b47 	vsub.f64	d5, d9, d7
 8005e2a:	ed97 7b00 	vldr	d7, [r7]
 8005e2e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005e32:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005e36:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005e3a:	4b9e      	ldr	r3, [pc, #632]	; (80060b4 <cinematicaInversa+0x135c>)
 8005e3c:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 8005e40:	4b98      	ldr	r3, [pc, #608]	; (80060a4 <cinematicaInversa+0x134c>)
 8005e42:	ed93 6b00 	vldr	d6, [r3]
 8005e46:	4b9c      	ldr	r3, [pc, #624]	; (80060b8 <cinematicaInversa+0x1360>)
 8005e48:	ed93 7b00 	vldr	d7, [r3]
 8005e4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e50:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e58:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8006088 <cinematicaInversa+0x1330>
 8005e5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005e60:	4b90      	ldr	r3, [pc, #576]	; (80060a4 <cinematicaInversa+0x134c>)
 8005e62:	ed93 5b00 	vldr	d5, [r3]
 8005e66:	4b95      	ldr	r3, [pc, #596]	; (80060bc <cinematicaInversa+0x1364>)
 8005e68:	ed93 7b00 	vldr	d7, [r3]
 8005e6c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005e70:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e74:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005e78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e80:	4b86      	ldr	r3, [pc, #536]	; (800609c <cinematicaInversa+0x1344>)
 8005e82:	ed93 7b00 	vldr	d7, [r3]
 8005e86:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8006088 <cinematicaInversa+0x1330>
 8005e8a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005e8e:	4b8a      	ldr	r3, [pc, #552]	; (80060b8 <cinematicaInversa+0x1360>)
 8005e90:	ed93 7b00 	vldr	d7, [r3]
 8005e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e98:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e9c:	4b7f      	ldr	r3, [pc, #508]	; (800609c <cinematicaInversa+0x1344>)
 8005e9e:	ed93 7b00 	vldr	d7, [r3]
 8005ea2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005ea6:	4b85      	ldr	r3, [pc, #532]	; (80060bc <cinematicaInversa+0x1364>)
 8005ea8:	ed93 7b00 	vldr	d7, [r3]
 8005eac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005eb0:	ee36 5b07 	vadd.f64	d5, d6, d7
 8005eb4:	ed97 7b00 	vldr	d7, [r7]
 8005eb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ebc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ec0:	4b7f      	ldr	r3, [pc, #508]	; (80060c0 <cinematicaInversa+0x1368>)
 8005ec2:	ed93 7b00 	vldr	d7, [r3]
 8005ec6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005eca:	4b76      	ldr	r3, [pc, #472]	; (80060a4 <cinematicaInversa+0x134c>)
 8005ecc:	ed93 6b00 	vldr	d6, [r3]
 8005ed0:	4b79      	ldr	r3, [pc, #484]	; (80060b8 <cinematicaInversa+0x1360>)
 8005ed2:	ed93 7b00 	vldr	d7, [r3]
 8005ed6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005eda:	ed97 7b04 	vldr	d7, [r7, #16]
 8005ede:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ee2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ee6:	eeb0 0b47 	vmov.f64	d0, d7
 8005eea:	f00c f999 	bl	8012220 <pow>
 8005eee:	eeb0 9b40 	vmov.f64	d9, d0
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <cinematicaInversa+0x134c>)
 8005ef4:	ed93 6b00 	vldr	d6, [r3]
 8005ef8:	4b70      	ldr	r3, [pc, #448]	; (80060bc <cinematicaInversa+0x1364>)
 8005efa:	ed93 7b00 	vldr	d7, [r3]
 8005efe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f02:	ed97 7b02 	vldr	d7, [r7, #8]
 8005f06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f0a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f0e:	eeb0 0b47 	vmov.f64	d0, d7
 8005f12:	f00c f985 	bl	8012220 <pow>
 8005f16:	eeb0 7b40 	vmov.f64	d7, d0
 8005f1a:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005f1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f22:	ed97 0b00 	vldr	d0, [r7]
 8005f26:	f00c f97b 	bl	8012220 <pow>
 8005f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8005f2e:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005f32:	4b5f      	ldr	r3, [pc, #380]	; (80060b0 <cinematicaInversa+0x1358>)
 8005f34:	ed93 7b00 	vldr	d7, [r3]
 8005f38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8005f40:	f00c f96e 	bl	8012220 <pow>
 8005f44:	eeb0 7b40 	vmov.f64	d7, d0
 8005f48:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005f4c:	4b53      	ldr	r3, [pc, #332]	; (800609c <cinematicaInversa+0x1344>)
 8005f4e:	ed93 7b00 	vldr	d7, [r3]
 8005f52:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f56:	eeb0 0b47 	vmov.f64	d0, d7
 8005f5a:	f00c f961 	bl	8012220 <pow>
 8005f5e:	eeb0 7b40 	vmov.f64	d7, d0
 8005f62:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005f66:	4b51      	ldr	r3, [pc, #324]	; (80060ac <cinematicaInversa+0x1354>)
 8005f68:	ed93 7b00 	vldr	d7, [r3]
 8005f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f70:	eeb0 0b47 	vmov.f64	d0, d7
 8005f74:	f00c f954 	bl	8012220 <pow>
 8005f78:	eeb0 7b40 	vmov.f64	d7, d0
 8005f7c:	ee39 5b07 	vadd.f64	d5, d9, d7
 8005f80:	ed97 7b00 	vldr	d7, [r7]
 8005f84:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005f88:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005f8c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005f90:	4b4c      	ldr	r3, [pc, #304]	; (80060c4 <cinematicaInversa+0x136c>)
 8005f92:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 8005f96:	4b43      	ldr	r3, [pc, #268]	; (80060a4 <cinematicaInversa+0x134c>)
 8005f98:	ed93 6b00 	vldr	d6, [r3]
 8005f9c:	4b46      	ldr	r3, [pc, #280]	; (80060b8 <cinematicaInversa+0x1360>)
 8005f9e:	ed93 7b00 	vldr	d7, [r3]
 8005fa2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fa6:	ed97 7b04 	vldr	d7, [r7, #16]
 8005faa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005fae:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8006088 <cinematicaInversa+0x1330>
 8005fb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <cinematicaInversa+0x134c>)
 8005fb8:	ed93 5b00 	vldr	d5, [r3]
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <cinematicaInversa+0x1364>)
 8005fbe:	ed93 7b00 	vldr	d7, [r3]
 8005fc2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005fc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005fca:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005fce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005fd2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005fd6:	4b31      	ldr	r3, [pc, #196]	; (800609c <cinematicaInversa+0x1344>)
 8005fd8:	ed93 7b00 	vldr	d7, [r3]
 8005fdc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006088 <cinematicaInversa+0x1330>
 8005fe0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005fe4:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <cinematicaInversa+0x1360>)
 8005fe6:	ed93 7b00 	vldr	d7, [r3]
 8005fea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005fee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005ff2:	4b2a      	ldr	r3, [pc, #168]	; (800609c <cinematicaInversa+0x1344>)
 8005ff4:	ed93 7b00 	vldr	d7, [r3]
 8005ff8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <cinematicaInversa+0x1364>)
 8005ffe:	ed93 7b00 	vldr	d7, [r3]
 8006002:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006006:	ee36 5b07 	vadd.f64	d5, d6, d7
 800600a:	ed97 7b00 	vldr	d7, [r7]
 800600e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006012:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006016:	4b2c      	ldr	r3, [pc, #176]	; (80060c8 <cinematicaInversa+0x1370>)
 8006018:	ed93 7b00 	vldr	d7, [r3]
 800601c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8006020:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <cinematicaInversa+0x134c>)
 8006022:	ed93 6b00 	vldr	d6, [r3]
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <cinematicaInversa+0x1360>)
 8006028:	ed93 7b00 	vldr	d7, [r3]
 800602c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006030:	ed97 7b04 	vldr	d7, [r7, #16]
 8006034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006038:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800603c:	eeb0 0b47 	vmov.f64	d0, d7
 8006040:	f00c f8ee 	bl	8012220 <pow>
 8006044:	eeb0 9b40 	vmov.f64	d9, d0
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <cinematicaInversa+0x134c>)
 800604a:	ed93 6b00 	vldr	d6, [r3]
 800604e:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <cinematicaInversa+0x1364>)
 8006050:	ed93 7b00 	vldr	d7, [r3]
 8006054:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006058:	ed97 7b02 	vldr	d7, [r7, #8]
 800605c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006060:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006064:	eeb0 0b47 	vmov.f64	d0, d7
 8006068:	f00c f8da 	bl	8012220 <pow>
 800606c:	eeb0 7b40 	vmov.f64	d7, d0
 8006070:	ee39 9b07 	vadd.f64	d9, d9, d7
 8006074:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006078:	ed97 0b00 	vldr	d0, [r7]
 800607c:	f00c f8d0 	bl	8012220 <pow>
 8006080:	e024      	b.n	80060cc <cinematicaInversa+0x1374>
 8006082:	bf00      	nop
 8006084:	f3af 8000 	nop.w
 8006088:	e8584caa 	.word	0xe8584caa
 800608c:	400bb67a 	.word	0x400bb67a
 8006090:	e8584caa 	.word	0xe8584caa
 8006094:	c00bb67a 	.word	0xc00bb67a
 8006098:	240000e0 	.word	0x240000e0
 800609c:	24000040 	.word	0x24000040
 80060a0:	240000e8 	.word	0x240000e8
 80060a4:	24000048 	.word	0x24000048
 80060a8:	24000788 	.word	0x24000788
 80060ac:	24000030 	.word	0x24000030
 80060b0:	24000038 	.word	0x24000038
 80060b4:	24000798 	.word	0x24000798
 80060b8:	240000f0 	.word	0x240000f0
 80060bc:	240000f8 	.word	0x240000f8
 80060c0:	240007c8 	.word	0x240007c8
 80060c4:	240007d8 	.word	0x240007d8
 80060c8:	240007d0 	.word	0x240007d0
 80060cc:	eeb0 7b40 	vmov.f64	d7, d0
 80060d0:	ee39 9b07 	vadd.f64	d9, d9, d7
 80060d4:	4b50      	ldr	r3, [pc, #320]	; (8006218 <cinematicaInversa+0x14c0>)
 80060d6:	ed93 7b00 	vldr	d7, [r3]
 80060da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80060de:	eeb0 0b47 	vmov.f64	d0, d7
 80060e2:	f00c f89d 	bl	8012220 <pow>
 80060e6:	eeb0 7b40 	vmov.f64	d7, d0
 80060ea:	ee39 9b47 	vsub.f64	d9, d9, d7
 80060ee:	4b4b      	ldr	r3, [pc, #300]	; (800621c <cinematicaInversa+0x14c4>)
 80060f0:	ed93 7b00 	vldr	d7, [r3]
 80060f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80060f8:	eeb0 0b47 	vmov.f64	d0, d7
 80060fc:	f00c f890 	bl	8012220 <pow>
 8006100:	eeb0 7b40 	vmov.f64	d7, d0
 8006104:	ee39 9b47 	vsub.f64	d9, d9, d7
 8006108:	4b45      	ldr	r3, [pc, #276]	; (8006220 <cinematicaInversa+0x14c8>)
 800610a:	ed93 7b00 	vldr	d7, [r3]
 800610e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006112:	eeb0 0b47 	vmov.f64	d0, d7
 8006116:	f00c f883 	bl	8012220 <pow>
 800611a:	eeb0 7b40 	vmov.f64	d7, d0
 800611e:	ee39 5b07 	vadd.f64	d5, d9, d7
 8006122:	ed97 7b00 	vldr	d7, [r7]
 8006126:	ee37 6b07 	vadd.f64	d6, d7, d7
 800612a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800612e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006132:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <cinematicaInversa+0x14cc>)
 8006134:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 8006138:	4b3b      	ldr	r3, [pc, #236]	; (8006228 <cinematicaInversa+0x14d0>)
 800613a:	ed93 6b00 	vldr	d6, [r3]
 800613e:	4b38      	ldr	r3, [pc, #224]	; (8006220 <cinematicaInversa+0x14c8>)
 8006140:	ed93 7b00 	vldr	d7, [r3]
 8006144:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8006148:	eeb0 0b45 	vmov.f64	d0, d5
 800614c:	f00c faba 	bl	80126c4 <asin>
 8006150:	eeb0 7b40 	vmov.f64	d7, d0
 8006154:	eeb1 7b47 	vneg.f64	d7, d7
 8006158:	4b34      	ldr	r3, [pc, #208]	; (800622c <cinematicaInversa+0x14d4>)
 800615a:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * (180.0 / pi);
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <cinematicaInversa+0x14d8>)
 8006160:	ed93 7b00 	vldr	d7, [r3]
 8006164:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006210 <cinematicaInversa+0x14b8>
 8006168:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800616c:	4b2f      	ldr	r3, [pc, #188]	; (800622c <cinematicaInversa+0x14d4>)
 800616e:	ed93 7b00 	vldr	d7, [r3]
 8006172:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006176:	4b2d      	ldr	r3, [pc, #180]	; (800622c <cinematicaInversa+0x14d4>)
 8006178:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 800617c:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <cinematicaInversa+0x14dc>)
 800617e:	ed93 6b00 	vldr	d6, [r3]
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <cinematicaInversa+0x14c8>)
 8006184:	ed93 7b00 	vldr	d7, [r3]
 8006188:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800618c:	eeb0 0b45 	vmov.f64	d0, d5
 8006190:	f00c fa98 	bl	80126c4 <asin>
 8006194:	eeb0 7b40 	vmov.f64	d7, d0
 8006198:	eeb1 7b47 	vneg.f64	d7, d7
 800619c:	4b26      	ldr	r3, [pc, #152]	; (8006238 <cinematicaInversa+0x14e0>)
 800619e:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * (180.0 / pi);
 80061a2:	4b23      	ldr	r3, [pc, #140]	; (8006230 <cinematicaInversa+0x14d8>)
 80061a4:	ed93 7b00 	vldr	d7, [r3]
 80061a8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8006210 <cinematicaInversa+0x14b8>
 80061ac:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80061b0:	4b21      	ldr	r3, [pc, #132]	; (8006238 <cinematicaInversa+0x14e0>)
 80061b2:	ed93 7b00 	vldr	d7, [r3]
 80061b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <cinematicaInversa+0x14e0>)
 80061bc:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 80061c0:	4b1e      	ldr	r3, [pc, #120]	; (800623c <cinematicaInversa+0x14e4>)
 80061c2:	ed93 6b00 	vldr	d6, [r3]
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <cinematicaInversa+0x14c8>)
 80061c8:	ed93 7b00 	vldr	d7, [r3]
 80061cc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80061d0:	eeb0 0b45 	vmov.f64	d0, d5
 80061d4:	f00c fa76 	bl	80126c4 <asin>
 80061d8:	eeb0 7b40 	vmov.f64	d7, d0
 80061dc:	eeb1 7b47 	vneg.f64	d7, d7
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <cinematicaInversa+0x14e8>)
 80061e2:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * (180.0 / pi);
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <cinematicaInversa+0x14d8>)
 80061e8:	ed93 7b00 	vldr	d7, [r3]
 80061ec:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8006210 <cinematicaInversa+0x14b8>
 80061f0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80061f4:	4b12      	ldr	r3, [pc, #72]	; (8006240 <cinematicaInversa+0x14e8>)
 80061f6:	ed93 7b00 	vldr	d7, [r3]
 80061fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <cinematicaInversa+0x14e8>)
 8006200:	ed83 7b00 	vstr	d7, [r3]
}
 8006204:	bf00      	nop
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	ecbd 8b06 	vpop	{d8-d10}
 800620e:	bd80      	pop	{r7, pc}
 8006210:	00000000 	.word	0x00000000
 8006214:	40668000 	.word	0x40668000
 8006218:	24000038 	.word	0x24000038
 800621c:	24000040 	.word	0x24000040
 8006220:	24000030 	.word	0x24000030
 8006224:	240007e0 	.word	0x240007e0
 8006228:	24000748 	.word	0x24000748
 800622c:	24000338 	.word	0x24000338
 8006230:	24000100 	.word	0x24000100
 8006234:	24000790 	.word	0x24000790
 8006238:	24000340 	.word	0x24000340
 800623c:	240007d8 	.word	0x240007d8
 8006240:	24000348 	.word	0x24000348
 8006244:	00000000 	.word	0x00000000

08006248 <jacobianoInverso>:


void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b0ad      	sub	sp, #180	; 0xb4
 800624c:	af00      	add	r7, sp, #0
 800624e:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8006252:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8006256:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 800625a:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 800625e:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8006262:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8006266:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800626a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800626e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006272:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8006276:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800627a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 800627e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006282:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8006590 <jacobianoInverso+0x348>
 8006286:	ee37 7b06 	vadd.f64	d7, d7, d6
 800628a:	4bc9      	ldr	r3, [pc, #804]	; (80065b0 <jacobianoInverso+0x368>)
 800628c:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8006290:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006294:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8006598 <jacobianoInverso+0x350>
 8006298:	ee37 7b46 	vsub.f64	d7, d7, d6
 800629c:	4bc4      	ldr	r3, [pc, #784]	; (80065b0 <jacobianoInverso+0x368>)
 800629e:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 80062a2:	49c3      	ldr	r1, [pc, #780]	; (80065b0 <jacobianoInverso+0x368>)
 80062a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 80062ac:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80062b0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 80065a0 <jacobianoInverso+0x358>
 80062b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062b8:	4bbe      	ldr	r3, [pc, #760]	; (80065b4 <jacobianoInverso+0x36c>)
 80062ba:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 80062be:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80062c2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80065a8 <jacobianoInverso+0x360>
 80062c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062ca:	4bba      	ldr	r3, [pc, #744]	; (80065b4 <jacobianoInverso+0x36c>)
 80062cc:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 80062d0:	49b8      	ldr	r1, [pc, #736]	; (80065b4 <jacobianoInverso+0x36c>)
 80062d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 80062da:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80062de:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 80065a0 <jacobianoInverso+0x358>
 80062e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80062e6:	4bb4      	ldr	r3, [pc, #720]	; (80065b8 <jacobianoInverso+0x370>)
 80062e8:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 80062ec:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80062f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80065a8 <jacobianoInverso+0x360>
 80062f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062f8:	4baf      	ldr	r3, [pc, #700]	; (80065b8 <jacobianoInverso+0x370>)
 80062fa:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 80062fe:	49ae      	ldr	r1, [pc, #696]	; (80065b8 <jacobianoInverso+0x370>)
 8006300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006304:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8006308:	4bac      	ldr	r3, [pc, #688]	; (80065bc <jacobianoInverso+0x374>)
 800630a:	ed93 6b00 	vldr	d6, [r3]
 800630e:	4bac      	ldr	r3, [pc, #688]	; (80065c0 <jacobianoInverso+0x378>)
 8006310:	ed93 7b00 	vldr	d7, [r3]
 8006314:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006318:	4baa      	ldr	r3, [pc, #680]	; (80065c4 <jacobianoInverso+0x37c>)
 800631a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 800631e:	4baa      	ldr	r3, [pc, #680]	; (80065c8 <jacobianoInverso+0x380>)
 8006320:	ed93 6b00 	vldr	d6, [r3]
 8006324:	4ba6      	ldr	r3, [pc, #664]	; (80065c0 <jacobianoInverso+0x378>)
 8006326:	ed93 7b02 	vldr	d7, [r3, #8]
 800632a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800632e:	4ba5      	ldr	r3, [pc, #660]	; (80065c4 <jacobianoInverso+0x37c>)
 8006330:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8006334:	4ba5      	ldr	r3, [pc, #660]	; (80065cc <jacobianoInverso+0x384>)
 8006336:	ed93 6b00 	vldr	d6, [r3]
 800633a:	4ba1      	ldr	r3, [pc, #644]	; (80065c0 <jacobianoInverso+0x378>)
 800633c:	ed93 7b04 	vldr	d7, [r3, #16]
 8006340:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006344:	4b9f      	ldr	r3, [pc, #636]	; (80065c4 <jacobianoInverso+0x37c>)
 8006346:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 800634a:	4ba1      	ldr	r3, [pc, #644]	; (80065d0 <jacobianoInverso+0x388>)
 800634c:	ed93 6b00 	vldr	d6, [r3]
 8006350:	4ba0      	ldr	r3, [pc, #640]	; (80065d4 <jacobianoInverso+0x38c>)
 8006352:	ed93 7b00 	vldr	d7, [r3]
 8006356:	ee36 7b47 	vsub.f64	d7, d6, d7
 800635a:	4b9a      	ldr	r3, [pc, #616]	; (80065c4 <jacobianoInverso+0x37c>)
 800635c:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8006360:	4b9d      	ldr	r3, [pc, #628]	; (80065d8 <jacobianoInverso+0x390>)
 8006362:	ed93 6b00 	vldr	d6, [r3]
 8006366:	4b9b      	ldr	r3, [pc, #620]	; (80065d4 <jacobianoInverso+0x38c>)
 8006368:	ed93 7b02 	vldr	d7, [r3, #8]
 800636c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006370:	4b94      	ldr	r3, [pc, #592]	; (80065c4 <jacobianoInverso+0x37c>)
 8006372:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8006376:	4b99      	ldr	r3, [pc, #612]	; (80065dc <jacobianoInverso+0x394>)
 8006378:	ed93 6b00 	vldr	d6, [r3]
 800637c:	4b95      	ldr	r3, [pc, #596]	; (80065d4 <jacobianoInverso+0x38c>)
 800637e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006382:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006386:	4b8f      	ldr	r3, [pc, #572]	; (80065c4 <jacobianoInverso+0x37c>)
 8006388:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 800638c:	4b94      	ldr	r3, [pc, #592]	; (80065e0 <jacobianoInverso+0x398>)
 800638e:	ed93 6b00 	vldr	d6, [r3]
 8006392:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <jacobianoInverso+0x39c>)
 8006394:	ed93 7b00 	vldr	d7, [r3]
 8006398:	ee36 7b47 	vsub.f64	d7, d6, d7
 800639c:	4b89      	ldr	r3, [pc, #548]	; (80065c4 <jacobianoInverso+0x37c>)
 800639e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 80063a2:	4b91      	ldr	r3, [pc, #580]	; (80065e8 <jacobianoInverso+0x3a0>)
 80063a4:	ed93 6b00 	vldr	d6, [r3]
 80063a8:	4b8e      	ldr	r3, [pc, #568]	; (80065e4 <jacobianoInverso+0x39c>)
 80063aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80063ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063b2:	4b84      	ldr	r3, [pc, #528]	; (80065c4 <jacobianoInverso+0x37c>)
 80063b4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 80063b8:	4b8c      	ldr	r3, [pc, #560]	; (80065ec <jacobianoInverso+0x3a4>)
 80063ba:	ed93 6b00 	vldr	d6, [r3]
 80063be:	4b89      	ldr	r3, [pc, #548]	; (80065e4 <jacobianoInverso+0x39c>)
 80063c0:	ed93 7b04 	vldr	d7, [r3, #16]
 80063c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063c8:	4b7e      	ldr	r3, [pc, #504]	; (80065c4 <jacobianoInverso+0x37c>)
 80063ca:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 80063ce:	4b78      	ldr	r3, [pc, #480]	; (80065b0 <jacobianoInverso+0x368>)
 80063d0:	ed93 6b00 	vldr	d6, [r3]
 80063d4:	4b79      	ldr	r3, [pc, #484]	; (80065bc <jacobianoInverso+0x374>)
 80063d6:	ed93 7b00 	vldr	d7, [r3]
 80063da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063de:	4b84      	ldr	r3, [pc, #528]	; (80065f0 <jacobianoInverso+0x3a8>)
 80063e0:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 80063e4:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <jacobianoInverso+0x368>)
 80063e6:	ed93 6b02 	vldr	d6, [r3, #8]
 80063ea:	4b77      	ldr	r3, [pc, #476]	; (80065c8 <jacobianoInverso+0x380>)
 80063ec:	ed93 7b00 	vldr	d7, [r3]
 80063f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063f4:	4b7e      	ldr	r3, [pc, #504]	; (80065f0 <jacobianoInverso+0x3a8>)
 80063f6:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 80063fa:	4b6d      	ldr	r3, [pc, #436]	; (80065b0 <jacobianoInverso+0x368>)
 80063fc:	ed93 6b04 	vldr	d6, [r3, #16]
 8006400:	4b72      	ldr	r3, [pc, #456]	; (80065cc <jacobianoInverso+0x384>)
 8006402:	ed93 7b00 	vldr	d7, [r3]
 8006406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800640a:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <jacobianoInverso+0x3a8>)
 800640c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8006410:	4b68      	ldr	r3, [pc, #416]	; (80065b4 <jacobianoInverso+0x36c>)
 8006412:	ed93 6b00 	vldr	d6, [r3]
 8006416:	4b6e      	ldr	r3, [pc, #440]	; (80065d0 <jacobianoInverso+0x388>)
 8006418:	ed93 7b00 	vldr	d7, [r3]
 800641c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006420:	4b73      	ldr	r3, [pc, #460]	; (80065f0 <jacobianoInverso+0x3a8>)
 8006422:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8006426:	4b63      	ldr	r3, [pc, #396]	; (80065b4 <jacobianoInverso+0x36c>)
 8006428:	ed93 6b02 	vldr	d6, [r3, #8]
 800642c:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <jacobianoInverso+0x390>)
 800642e:	ed93 7b00 	vldr	d7, [r3]
 8006432:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006436:	4b6e      	ldr	r3, [pc, #440]	; (80065f0 <jacobianoInverso+0x3a8>)
 8006438:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 800643c:	4b5d      	ldr	r3, [pc, #372]	; (80065b4 <jacobianoInverso+0x36c>)
 800643e:	ed93 6b04 	vldr	d6, [r3, #16]
 8006442:	4b66      	ldr	r3, [pc, #408]	; (80065dc <jacobianoInverso+0x394>)
 8006444:	ed93 7b00 	vldr	d7, [r3]
 8006448:	ee36 7b47 	vsub.f64	d7, d6, d7
 800644c:	4b68      	ldr	r3, [pc, #416]	; (80065f0 <jacobianoInverso+0x3a8>)
 800644e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <jacobianoInverso+0x370>)
 8006454:	ed93 6b00 	vldr	d6, [r3]
 8006458:	4b61      	ldr	r3, [pc, #388]	; (80065e0 <jacobianoInverso+0x398>)
 800645a:	ed93 7b00 	vldr	d7, [r3]
 800645e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006462:	4b63      	ldr	r3, [pc, #396]	; (80065f0 <jacobianoInverso+0x3a8>)
 8006464:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8006468:	4b53      	ldr	r3, [pc, #332]	; (80065b8 <jacobianoInverso+0x370>)
 800646a:	ed93 6b02 	vldr	d6, [r3, #8]
 800646e:	4b5e      	ldr	r3, [pc, #376]	; (80065e8 <jacobianoInverso+0x3a0>)
 8006470:	ed93 7b00 	vldr	d7, [r3]
 8006474:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006478:	4b5d      	ldr	r3, [pc, #372]	; (80065f0 <jacobianoInverso+0x3a8>)
 800647a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 800647e:	4b4e      	ldr	r3, [pc, #312]	; (80065b8 <jacobianoInverso+0x370>)
 8006480:	ed93 6b04 	vldr	d6, [r3, #16]
 8006484:	4b59      	ldr	r3, [pc, #356]	; (80065ec <jacobianoInverso+0x3a4>)
 8006486:	ed93 7b00 	vldr	d7, [r3]
 800648a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800648e:	4b58      	ldr	r3, [pc, #352]	; (80065f0 <jacobianoInverso+0x3a8>)
 8006490:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8006494:	4c57      	ldr	r4, [pc, #348]	; (80065f4 <jacobianoInverso+0x3ac>)
 8006496:	463b      	mov	r3, r7
 8006498:	4955      	ldr	r1, [pc, #340]	; (80065f0 <jacobianoInverso+0x3a8>)
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc fa32 	bl	8002904 <transpuesta>
 80064a0:	4620      	mov	r0, r4
 80064a2:	463b      	mov	r3, r7
 80064a4:	2248      	movs	r2, #72	; 0x48
 80064a6:	4619      	mov	r1, r3
 80064a8:	f009 f81a 	bl	800f4e0 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 80064ac:	4b52      	ldr	r3, [pc, #328]	; (80065f8 <jacobianoInverso+0x3b0>)
 80064ae:	ed93 6b02 	vldr	d6, [r3, #8]
 80064b2:	4b44      	ldr	r3, [pc, #272]	; (80065c4 <jacobianoInverso+0x37c>)
 80064b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80064b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80064bc:	4b4e      	ldr	r3, [pc, #312]	; (80065f8 <jacobianoInverso+0x3b0>)
 80064be:	ed93 5b04 	vldr	d5, [r3, #16]
 80064c2:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <jacobianoInverso+0x37c>)
 80064c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80064c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80064cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064d0:	4b4a      	ldr	r3, [pc, #296]	; (80065fc <jacobianoInverso+0x3b4>)
 80064d2:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 80064d6:	4b48      	ldr	r3, [pc, #288]	; (80065f8 <jacobianoInverso+0x3b0>)
 80064d8:	ed93 6b04 	vldr	d6, [r3, #16]
 80064dc:	4b39      	ldr	r3, [pc, #228]	; (80065c4 <jacobianoInverso+0x37c>)
 80064de:	ed93 7b00 	vldr	d7, [r3]
 80064e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80064e6:	4b44      	ldr	r3, [pc, #272]	; (80065f8 <jacobianoInverso+0x3b0>)
 80064e8:	ed93 5b00 	vldr	d5, [r3]
 80064ec:	4b35      	ldr	r3, [pc, #212]	; (80065c4 <jacobianoInverso+0x37c>)
 80064ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80064f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80064f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064fa:	4b40      	ldr	r3, [pc, #256]	; (80065fc <jacobianoInverso+0x3b4>)
 80064fc:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8006500:	4b3d      	ldr	r3, [pc, #244]	; (80065f8 <jacobianoInverso+0x3b0>)
 8006502:	ed93 6b00 	vldr	d6, [r3]
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <jacobianoInverso+0x37c>)
 8006508:	ed93 7b02 	vldr	d7, [r3, #8]
 800650c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006510:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <jacobianoInverso+0x3b0>)
 8006512:	ed93 5b02 	vldr	d5, [r3, #8]
 8006516:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <jacobianoInverso+0x37c>)
 8006518:	ed93 7b00 	vldr	d7, [r3]
 800651c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006520:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006524:	4b35      	ldr	r3, [pc, #212]	; (80065fc <jacobianoInverso+0x3b4>)
 8006526:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 800652a:	4b35      	ldr	r3, [pc, #212]	; (8006600 <jacobianoInverso+0x3b8>)
 800652c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006530:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <jacobianoInverso+0x37c>)
 8006532:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006536:	ee26 6b07 	vmul.f64	d6, d6, d7
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <jacobianoInverso+0x3b8>)
 800653c:	ed93 5b04 	vldr	d5, [r3, #16]
 8006540:	4b20      	ldr	r3, [pc, #128]	; (80065c4 <jacobianoInverso+0x37c>)
 8006542:	ed93 7b08 	vldr	d7, [r3, #32]
 8006546:	ee25 7b07 	vmul.f64	d7, d5, d7
 800654a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800654e:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <jacobianoInverso+0x3bc>)
 8006550:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8006554:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <jacobianoInverso+0x3b8>)
 8006556:	ed93 6b04 	vldr	d6, [r3, #16]
 800655a:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <jacobianoInverso+0x37c>)
 800655c:	ed93 7b06 	vldr	d7, [r3, #24]
 8006560:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006564:	4b26      	ldr	r3, [pc, #152]	; (8006600 <jacobianoInverso+0x3b8>)
 8006566:	ed93 5b00 	vldr	d5, [r3]
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <jacobianoInverso+0x37c>)
 800656c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006570:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006574:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006578:	4b22      	ldr	r3, [pc, #136]	; (8006604 <jacobianoInverso+0x3bc>)
 800657a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <jacobianoInverso+0x3b8>)
 8006580:	ed93 6b00 	vldr	d6, [r3]
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <jacobianoInverso+0x37c>)
 8006586:	ed93 7b08 	vldr	d7, [r3, #32]
 800658a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800658e:	e03b      	b.n	8006608 <jacobianoInverso+0x3c0>
	...
 8006598:	1eb851ec 	.word	0x1eb851ec
 800659c:	3fb1eb85 	.word	0x3fb1eb85
 80065a0:	562574c0 	.word	0x562574c0
 80065a4:	3faf09d1 	.word	0x3faf09d1
 80065a8:	1eb851ec 	.word	0x1eb851ec
 80065ac:	3fa1eb85 	.word	0x3fa1eb85
 80065b0:	240007e8 	.word	0x240007e8
 80065b4:	24000800 	.word	0x24000800
 80065b8:	24000818 	.word	0x24000818
 80065bc:	24000728 	.word	0x24000728
 80065c0:	24000050 	.word	0x24000050
 80065c4:	24000830 	.word	0x24000830
 80065c8:	24000738 	.word	0x24000738
 80065cc:	24000748 	.word	0x24000748
 80065d0:	24000770 	.word	0x24000770
 80065d4:	24000068 	.word	0x24000068
 80065d8:	24000780 	.word	0x24000780
 80065dc:	24000790 	.word	0x24000790
 80065e0:	240007b8 	.word	0x240007b8
 80065e4:	24000080 	.word	0x24000080
 80065e8:	240007c8 	.word	0x240007c8
 80065ec:	240007d8 	.word	0x240007d8
 80065f0:	24000878 	.word	0x24000878
 80065f4:	240008c0 	.word	0x240008c0
 80065f8:	24000098 	.word	0x24000098
 80065fc:	240009e0 	.word	0x240009e0
 8006600:	240000b0 	.word	0x240000b0
 8006604:	240009f8 	.word	0x240009f8
 8006608:	4b92      	ldr	r3, [pc, #584]	; (8006854 <jacobianoInverso+0x60c>)
 800660a:	ed93 5b02 	vldr	d5, [r3, #8]
 800660e:	4b92      	ldr	r3, [pc, #584]	; (8006858 <jacobianoInverso+0x610>)
 8006610:	ed93 7b06 	vldr	d7, [r3, #24]
 8006614:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006618:	ee36 7b47 	vsub.f64	d7, d6, d7
 800661c:	4b8f      	ldr	r3, [pc, #572]	; (800685c <jacobianoInverso+0x614>)
 800661e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8006622:	4b8f      	ldr	r3, [pc, #572]	; (8006860 <jacobianoInverso+0x618>)
 8006624:	ed93 6b02 	vldr	d6, [r3, #8]
 8006628:	4b8b      	ldr	r3, [pc, #556]	; (8006858 <jacobianoInverso+0x610>)
 800662a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800662e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006632:	4b8b      	ldr	r3, [pc, #556]	; (8006860 <jacobianoInverso+0x618>)
 8006634:	ed93 5b04 	vldr	d5, [r3, #16]
 8006638:	4b87      	ldr	r3, [pc, #540]	; (8006858 <jacobianoInverso+0x610>)
 800663a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800663e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006642:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006646:	4b87      	ldr	r3, [pc, #540]	; (8006864 <jacobianoInverso+0x61c>)
 8006648:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 800664c:	4b84      	ldr	r3, [pc, #528]	; (8006860 <jacobianoInverso+0x618>)
 800664e:	ed93 6b04 	vldr	d6, [r3, #16]
 8006652:	4b81      	ldr	r3, [pc, #516]	; (8006858 <jacobianoInverso+0x610>)
 8006654:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006658:	ee26 6b07 	vmul.f64	d6, d6, d7
 800665c:	4b80      	ldr	r3, [pc, #512]	; (8006860 <jacobianoInverso+0x618>)
 800665e:	ed93 5b00 	vldr	d5, [r3]
 8006662:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <jacobianoInverso+0x610>)
 8006664:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006668:	ee25 7b07 	vmul.f64	d7, d5, d7
 800666c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006670:	4b7c      	ldr	r3, [pc, #496]	; (8006864 <jacobianoInverso+0x61c>)
 8006672:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8006676:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <jacobianoInverso+0x618>)
 8006678:	ed93 6b00 	vldr	d6, [r3]
 800667c:	4b76      	ldr	r3, [pc, #472]	; (8006858 <jacobianoInverso+0x610>)
 800667e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8006682:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006686:	4b76      	ldr	r3, [pc, #472]	; (8006860 <jacobianoInverso+0x618>)
 8006688:	ed93 5b02 	vldr	d5, [r3, #8]
 800668c:	4b72      	ldr	r3, [pc, #456]	; (8006858 <jacobianoInverso+0x610>)
 800668e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006692:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006696:	ee36 7b47 	vsub.f64	d7, d6, d7
 800669a:	4b72      	ldr	r3, [pc, #456]	; (8006864 <jacobianoInverso+0x61c>)
 800669c:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 80066a0:	4971      	ldr	r1, [pc, #452]	; (8006868 <jacobianoInverso+0x620>)
 80066a2:	4872      	ldr	r0, [pc, #456]	; (800686c <jacobianoInverso+0x624>)
 80066a4:	f7fc f96a 	bl	800297c <productDot>
 80066a8:	eeb0 7b40 	vmov.f64	d7, d0
 80066ac:	4b70      	ldr	r3, [pc, #448]	; (8006870 <jacobianoInverso+0x628>)
 80066ae:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 80066b2:	4970      	ldr	r1, [pc, #448]	; (8006874 <jacobianoInverso+0x62c>)
 80066b4:	4869      	ldr	r0, [pc, #420]	; (800685c <jacobianoInverso+0x614>)
 80066b6:	f7fc f961 	bl	800297c <productDot>
 80066ba:	eeb0 7b40 	vmov.f64	d7, d0
 80066be:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <jacobianoInverso+0x628>)
 80066c0:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 80066c4:	496c      	ldr	r1, [pc, #432]	; (8006878 <jacobianoInverso+0x630>)
 80066c6:	4867      	ldr	r0, [pc, #412]	; (8006864 <jacobianoInverso+0x61c>)
 80066c8:	f7fc f958 	bl	800297c <productDot>
 80066cc:	eeb0 7b40 	vmov.f64	d7, d0
 80066d0:	4b67      	ldr	r3, [pc, #412]	; (8006870 <jacobianoInverso+0x628>)
 80066d2:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80066d6:	2300      	movs	r3, #0
 80066d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066dc:	e03d      	b.n	800675a <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 80066de:	2300      	movs	r3, #0
 80066e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066e4:	e030      	b.n	8006748 <jacobianoInverso+0x500>
			if (i == j) {
 80066e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d114      	bne.n	800671c <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 80066f2:	4a5f      	ldr	r2, [pc, #380]	; (8006870 <jacobianoInverso+0x628>)
 80066f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006700:	4c5e      	ldr	r4, [pc, #376]	; (800687c <jacobianoInverso+0x634>)
 8006702:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4423      	add	r3, r4
 8006716:	e9c3 0100 	strd	r0, r1, [r3]
 800671a:	e010      	b.n	800673e <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 800671c:	4957      	ldr	r1, [pc, #348]	; (800687c <jacobianoInverso+0x634>)
 800671e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4419      	add	r1, r3
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 800673e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800674c:	2b02      	cmp	r3, #2
 800674e:	ddca      	ble.n	80066e6 <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006754:	3301      	adds	r3, #1
 8006756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800675a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800675e:	2b02      	cmp	r3, #2
 8006760:	ddbd      	ble.n	80066de <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 8006762:	4c47      	ldr	r4, [pc, #284]	; (8006880 <jacobianoInverso+0x638>)
 8006764:	463b      	mov	r3, r7
 8006766:	4945      	ldr	r1, [pc, #276]	; (800687c <jacobianoInverso+0x634>)
 8006768:	4618      	mov	r0, r3
 800676a:	f7fc fa37 	bl	8002bdc <inversa>
 800676e:	4620      	mov	r0, r4
 8006770:	463b      	mov	r3, r7
 8006772:	2248      	movs	r2, #72	; 0x48
 8006774:	4619      	mov	r1, r3
 8006776:	f008 feb3 	bl	800f4e0 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 800677a:	4c42      	ldr	r4, [pc, #264]	; (8006884 <jacobianoInverso+0x63c>)
 800677c:	463b      	mov	r3, r7
 800677e:	4a40      	ldr	r2, [pc, #256]	; (8006880 <jacobianoInverso+0x638>)
 8006780:	4939      	ldr	r1, [pc, #228]	; (8006868 <jacobianoInverso+0x620>)
 8006782:	4618      	mov	r0, r3
 8006784:	f7fc fa98 	bl	8002cb8 <productMatriz>
 8006788:	4620      	mov	r0, r4
 800678a:	463b      	mov	r3, r7
 800678c:	2248      	movs	r2, #72	; 0x48
 800678e:	4619      	mov	r1, r3
 8006790:	f008 fea6 	bl	800f4e0 <memcpy>

	for (int i = 0; i < 3; ++i) {
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800679a:	e041      	b.n	8006820 <jacobianoInverso+0x5d8>
		double sum = 0;
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ae:	e025      	b.n	80067fc <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 80067b0:	4934      	ldr	r1, [pc, #208]	; (8006884 <jacobianoInverso+0x63c>)
 80067b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	440b      	add	r3, r1
 80067c6:	ed93 6b00 	vldr	d6, [r3]
 80067ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	33b0      	adds	r3, #176	; 0xb0
 80067d2:	443b      	add	r3, r7
 80067d4:	3b38      	subs	r3, #56	; 0x38
 80067d6:	ed93 7b00 	vldr	d7, [r3]
 80067da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80067de:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80067e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80067e6:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 80067ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80067ee:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80067f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067f6:	3301      	adds	r3, #1
 80067f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006800:	2b02      	cmp	r3, #2
 8006802:	ddd5      	ble.n	80067b0 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <jacobianoInverso+0x640>)
 8006806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	18d1      	adds	r1, r2, r3
 800680e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006812:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8006816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800681a:	3301      	adds	r3, #1
 800681c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006824:	2b02      	cmp	r3, #2
 8006826:	ddb9      	ble.n	800679c <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <jacobianoInverso+0x640>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	4917      	ldr	r1, [pc, #92]	; (800688c <jacobianoInverso+0x644>)
 8006830:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 8006834:	4b14      	ldr	r3, [pc, #80]	; (8006888 <jacobianoInverso+0x640>)
 8006836:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800683a:	4915      	ldr	r1, [pc, #84]	; (8006890 <jacobianoInverso+0x648>)
 800683c:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <jacobianoInverso+0x640>)
 8006842:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006846:	4913      	ldr	r1, [pc, #76]	; (8006894 <jacobianoInverso+0x64c>)
 8006848:	e9c1 2300 	strd	r2, r3, [r1]

}
 800684c:	bf00      	nop
 800684e:	37b4      	adds	r7, #180	; 0xb4
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}
 8006854:	240000b0 	.word	0x240000b0
 8006858:	24000830 	.word	0x24000830
 800685c:	240009f8 	.word	0x240009f8
 8006860:	240000c8 	.word	0x240000c8
 8006864:	24000a10 	.word	0x24000a10
 8006868:	240008c0 	.word	0x240008c0
 800686c:	240009e0 	.word	0x240009e0
 8006870:	24000a28 	.word	0x24000a28
 8006874:	240008d8 	.word	0x240008d8
 8006878:	240008f0 	.word	0x240008f0
 800687c:	24000908 	.word	0x24000908
 8006880:	24000950 	.word	0x24000950
 8006884:	24000998 	.word	0x24000998
 8006888:	240003a8 	.word	0x240003a8
 800688c:	24000420 	.word	0x24000420
 8006890:	24000428 	.word	0x24000428
 8006894:	24000430 	.word	0x24000430

08006898 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	ed87 0b04 	vstr	d0, [r7, #16]
 80068a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80068a6:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 80068aa:	4ba5      	ldr	r3, [pc, #660]	; (8006b40 <SetPerfilTimers+0x2a8>)
 80068ac:	ed93 7b00 	vldr	d7, [r3]
 80068b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80068b4:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8006b28 <SetPerfilTimers+0x290>
 80068b8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80068bc:	ed97 7b04 	vldr	d7, [r7, #16]
 80068c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068c4:	4b9f      	ldr	r3, [pc, #636]	; (8006b44 <SetPerfilTimers+0x2ac>)
 80068c6:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 80068ca:	4b9d      	ldr	r3, [pc, #628]	; (8006b40 <SetPerfilTimers+0x2a8>)
 80068cc:	ed93 7b00 	vldr	d7, [r3]
 80068d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80068d4:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8006b28 <SetPerfilTimers+0x290>
 80068d8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80068dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80068e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068e4:	4b98      	ldr	r3, [pc, #608]	; (8006b48 <SetPerfilTimers+0x2b0>)
 80068e6:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 80068ea:	4b95      	ldr	r3, [pc, #596]	; (8006b40 <SetPerfilTimers+0x2a8>)
 80068ec:	ed93 7b00 	vldr	d7, [r3]
 80068f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80068f4:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8006b28 <SetPerfilTimers+0x290>
 80068f8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80068fc:	ed97 7b00 	vldr	d7, [r7]
 8006900:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006904:	4b91      	ldr	r3, [pc, #580]	; (8006b4c <SetPerfilTimers+0x2b4>)
 8006906:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 800690a:	4b8e      	ldr	r3, [pc, #568]	; (8006b44 <SetPerfilTimers+0x2ac>)
 800690c:	ed93 7b00 	vldr	d7, [r3]
 8006910:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006b30 <SetPerfilTimers+0x298>
 8006914:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691c:	d805      	bhi.n	800692a <SetPerfilTimers+0x92>
			rpm1=0.1;
 800691e:	4989      	ldr	r1, [pc, #548]	; (8006b44 <SetPerfilTimers+0x2ac>)
 8006920:	a383      	add	r3, pc, #524	; (adr r3, 8006b30 <SetPerfilTimers+0x298>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 800692a:	4b87      	ldr	r3, [pc, #540]	; (8006b48 <SetPerfilTimers+0x2b0>)
 800692c:	ed93 7b00 	vldr	d7, [r3]
 8006930:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8006b30 <SetPerfilTimers+0x298>
 8006934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693c:	d805      	bhi.n	800694a <SetPerfilTimers+0xb2>
			rpm2=0.1;
 800693e:	4982      	ldr	r1, [pc, #520]	; (8006b48 <SetPerfilTimers+0x2b0>)
 8006940:	a37b      	add	r3, pc, #492	; (adr r3, 8006b30 <SetPerfilTimers+0x298>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 800694a:	4b80      	ldr	r3, [pc, #512]	; (8006b4c <SetPerfilTimers+0x2b4>)
 800694c:	ed93 7b00 	vldr	d7, [r3]
 8006950:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006b30 <SetPerfilTimers+0x298>
 8006954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695c:	d805      	bhi.n	800696a <SetPerfilTimers+0xd2>
			rpm3=0.1;
 800695e:	497b      	ldr	r1, [pc, #492]	; (8006b4c <SetPerfilTimers+0x2b4>)
 8006960:	a373      	add	r3, pc, #460	; (adr r3, 8006b30 <SetPerfilTimers+0x298>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((Fcl * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 800696a:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <SetPerfilTimers+0x2b8>)
 800696c:	ed93 7b00 	vldr	d7, [r3]
 8006970:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006b28 <SetPerfilTimers+0x290>
 8006974:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006978:	4b76      	ldr	r3, [pc, #472]	; (8006b54 <SetPerfilTimers+0x2bc>)
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006984:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006988:	ee37 6b06 	vadd.f64	d6, d7, d6
 800698c:	4b6d      	ldr	r3, [pc, #436]	; (8006b44 <SetPerfilTimers+0x2ac>)
 800698e:	ed93 7b00 	vldr	d7, [r3]
 8006992:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006996:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8006b38 <SetPerfilTimers+0x2a0>
 800699a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800699e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80069a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80069a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069aa:	4b6b      	ldr	r3, [pc, #428]	; (8006b58 <SetPerfilTimers+0x2c0>)
 80069ac:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((Fcl * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80069b0:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <SetPerfilTimers+0x2b8>)
 80069b2:	ed93 7b00 	vldr	d7, [r3]
 80069b6:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8006b28 <SetPerfilTimers+0x290>
 80069ba:	ee27 5b06 	vmul.f64	d5, d7, d6
 80069be:	4b67      	ldr	r3, [pc, #412]	; (8006b5c <SetPerfilTimers+0x2c4>)
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80069ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80069ce:	ee37 6b06 	vadd.f64	d6, d7, d6
 80069d2:	4b5d      	ldr	r3, [pc, #372]	; (8006b48 <SetPerfilTimers+0x2b0>)
 80069d4:	ed93 7b00 	vldr	d7, [r3]
 80069d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80069dc:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8006b38 <SetPerfilTimers+0x2a0>
 80069e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80069e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80069ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069f0:	4b59      	ldr	r3, [pc, #356]	; (8006b58 <SetPerfilTimers+0x2c0>)
 80069f2:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((Fcl * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 80069f6:	4b56      	ldr	r3, [pc, #344]	; (8006b50 <SetPerfilTimers+0x2b8>)
 80069f8:	ed93 7b00 	vldr	d7, [r3]
 80069fc:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8006b28 <SetPerfilTimers+0x290>
 8006a00:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006a04:	4b56      	ldr	r3, [pc, #344]	; (8006b60 <SetPerfilTimers+0x2c8>)
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	ee07 3a90 	vmov	s15, r3
 8006a0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006a10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a14:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006a18:	4b4c      	ldr	r3, [pc, #304]	; (8006b4c <SetPerfilTimers+0x2b4>)
 8006a1a:	ed93 7b00 	vldr	d7, [r3]
 8006a1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a22:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8006b38 <SetPerfilTimers+0x2a0>
 8006a26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006a2e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006a36:	4b48      	ldr	r3, [pc, #288]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006a38:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e0ad      	b.n	8006b9e <SetPerfilTimers+0x306>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 8006a42:	4a45      	ldr	r2, [pc, #276]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4413      	add	r3, r2
 8006a4a:	ed93 6b00 	vldr	d6, [r3]
 8006a4e:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4413      	add	r3, r2
 8006a56:	ed93 7b00 	vldr	d7, [r3]
 8006a5a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006a5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <SetPerfilTimers+0x2cc>)
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 8006a72:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <SetPerfilTimers+0x2d0>)
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	ed93 6b00 	vldr	d6, [r3]
 8006a7e:	4a39      	ldr	r2, [pc, #228]	; (8006b64 <SetPerfilTimers+0x2cc>)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	ed93 7b00 	vldr	d7, [r3]
 8006a8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a8e:	4a36      	ldr	r2, [pc, #216]	; (8006b68 <SetPerfilTimers+0x2d0>)
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 8006a9a:	4a33      	ldr	r2, [pc, #204]	; (8006b68 <SetPerfilTimers+0x2d0>)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	ed93 7b00 	vldr	d7, [r3]
 8006aa6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	dd1f      	ble.n	8006af4 <SetPerfilTimers+0x25c>
				periodoM[i] = periodoM[i] + 1;
 8006ab4:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4413      	add	r3, r2
 8006abc:	ed93 7b00 	vldr	d7, [r3]
 8006ac0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 8006ad4:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <SetPerfilTimers+0x2d0>)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	ed93 7b00 	vldr	d7, [r3]
 8006ae0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006ae4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <SetPerfilTimers+0x2d0>)
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4413      	add	r3, r2
 8006af0:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 8006af4:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	ed93 7b00 	vldr	d7, [r3]
 8006b00:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8006b04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0c:	d52e      	bpl.n	8006b6c <SetPerfilTimers+0x2d4>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <SetPerfilTimers+0x2c0>)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	18d1      	adds	r1, r2, r3
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	e9c1 2300 	strd	r2, r3, [r1]
 8006b22:	e039      	b.n	8006b98 <SetPerfilTimers+0x300>
 8006b24:	f3af 8000 	nop.w
 8006b28:	00000000 	.word	0x00000000
 8006b2c:	404e0000 	.word	0x404e0000
 8006b30:	9999999a 	.word	0x9999999a
 8006b34:	3fb99999 	.word	0x3fb99999
 8006b38:	00000000 	.word	0x00000000
 8006b3c:	40c2c000 	.word	0x40c2c000
 8006b40:	24000100 	.word	0x24000100
 8006b44:	24000460 	.word	0x24000460
 8006b48:	24000468 	.word	0x24000468
 8006b4c:	24000470 	.word	0x24000470
 8006b50:	24000000 	.word	0x24000000
 8006b54:	40001800 	.word	0x40001800
 8006b58:	24000438 	.word	0x24000438
 8006b5c:	40001c00 	.word	0x40001c00
 8006b60:	40002000 	.word	0x40002000
 8006b64:	24000478 	.word	0x24000478
 8006b68:	24000490 	.word	0x24000490
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 8006b6c:	4aa0      	ldr	r2, [pc, #640]	; (8006df0 <SetPerfilTimers+0x558>)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	4413      	add	r3, r2
 8006b74:	ed93 7b00 	vldr	d7, [r3]
 8006b78:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006dd8 <SetPerfilTimers+0x540>
 8006b7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b84:	dd08      	ble.n	8006b98 <SetPerfilTimers+0x300>
				periodoM[i] = pow(2, 16);
 8006b86:	4a9a      	ldr	r2, [pc, #616]	; (8006df0 <SetPerfilTimers+0x558>)
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	18d1      	adds	r1, r2, r3
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	4b98      	ldr	r3, [pc, #608]	; (8006df4 <SetPerfilTimers+0x55c>)
 8006b94:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f77f af4e 	ble.w	8006a42 <SetPerfilTimers+0x1aa>
			}
		}

			periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8006ba6:	4b94      	ldr	r3, [pc, #592]	; (8006df8 <SetPerfilTimers+0x560>)
 8006ba8:	ed93 7b00 	vldr	d7, [r3]
 8006bac:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006de0 <SetPerfilTimers+0x548>
 8006bb0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006bb4:	4b91      	ldr	r3, [pc, #580]	; (8006dfc <SetPerfilTimers+0x564>)
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006bc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006bc4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006bc8:	4b8d      	ldr	r3, [pc, #564]	; (8006e00 <SetPerfilTimers+0x568>)
 8006bca:	ed93 7b00 	vldr	d7, [r3]
 8006bce:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006bd2:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8006de8 <SetPerfilTimers+0x550>
 8006bd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006bda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006bde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006be2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006be6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006bee:	4b80      	ldr	r3, [pc, #512]	; (8006df0 <SetPerfilTimers+0x558>)
 8006bf0:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006bf4:	4b80      	ldr	r3, [pc, #512]	; (8006df8 <SetPerfilTimers+0x560>)
 8006bf6:	ed93 7b00 	vldr	d7, [r3]
 8006bfa:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8006de0 <SetPerfilTimers+0x548>
 8006bfe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006c02:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006c0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c12:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006c16:	4b7c      	ldr	r3, [pc, #496]	; (8006e08 <SetPerfilTimers+0x570>)
 8006c18:	ed93 7b00 	vldr	d7, [r3]
 8006c1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c20:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8006de8 <SetPerfilTimers+0x550>
 8006c24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006c3c:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <SetPerfilTimers+0x558>)
 8006c3e:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8006c42:	4b6d      	ldr	r3, [pc, #436]	; (8006df8 <SetPerfilTimers+0x560>)
 8006c44:	ed93 7b00 	vldr	d7, [r3]
 8006c48:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8006de0 <SetPerfilTimers+0x548>
 8006c4c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006c50:	4b6e      	ldr	r3, [pc, #440]	; (8006e0c <SetPerfilTimers+0x574>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006c5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c60:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006c64:	4b6a      	ldr	r3, [pc, #424]	; (8006e10 <SetPerfilTimers+0x578>)
 8006c66:	ed93 7b00 	vldr	d7, [r3]
 8006c6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c6e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8006de8 <SetPerfilTimers+0x550>
 8006c72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006c8a:	4b59      	ldr	r3, [pc, #356]	; (8006df0 <SetPerfilTimers+0x558>)
 8006c8c:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 8006c90:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <SetPerfilTimers+0x564>)
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006c9c:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <SetPerfilTimers+0x558>)
 8006c9e:	ed93 7b00 	vldr	d7, [r3]
 8006ca2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006caa:	dd0c      	ble.n	8006cc6 <SetPerfilTimers+0x42e>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006cac:	4b50      	ldr	r3, [pc, #320]	; (8006df0 <SetPerfilTimers+0x558>)
 8006cae:	ed93 7b00 	vldr	d7, [r3]
 8006cb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006cb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006cba:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <SetPerfilTimers+0x564>)
 8006cbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cc0:	ee17 2a90 	vmov	r2, s15
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 8006cc6:	4b4f      	ldr	r3, [pc, #316]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006cd2:	4b47      	ldr	r3, [pc, #284]	; (8006df0 <SetPerfilTimers+0x558>)
 8006cd4:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce0:	dd0c      	ble.n	8006cfc <SetPerfilTimers+0x464>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006ce2:	4b43      	ldr	r3, [pc, #268]	; (8006df0 <SetPerfilTimers+0x558>)
 8006ce4:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ce8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006cec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006cf0:	4b44      	ldr	r3, [pc, #272]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006cf2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cf6:	ee17 2a90 	vmov	r2, s15
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 8006cfc:	4b43      	ldr	r3, [pc, #268]	; (8006e0c <SetPerfilTimers+0x574>)
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006d08:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <SetPerfilTimers+0x558>)
 8006d0a:	ed93 7b04 	vldr	d7, [r3, #16]
 8006d0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d16:	dd0c      	ble.n	8006d32 <SetPerfilTimers+0x49a>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <SetPerfilTimers+0x558>)
 8006d1a:	ed93 7b04 	vldr	d7, [r3, #16]
 8006d1e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006d22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d26:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <SetPerfilTimers+0x574>)
 8006d28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 8006d32:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <SetPerfilTimers+0x558>)
 8006d34:	ed93 7b00 	vldr	d7, [r3]
 8006d38:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <SetPerfilTimers+0x564>)
 8006d3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d3e:	ee17 2a90 	vmov	r2, s15
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006d44:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <SetPerfilTimers+0x564>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006d50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d58:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <SetPerfilTimers+0x564>)
 8006d5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d5e:	ee17 2a90 	vmov	r2, s15
 8006d62:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <SetPerfilTimers+0x558>)
 8006d66:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d6a:	4b26      	ldr	r3, [pc, #152]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006d6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d70:	ee17 2a90 	vmov	r2, s15
 8006d74:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006d76:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006d82:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d8a:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <SetPerfilTimers+0x56c>)
 8006d8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d90:	ee17 2a90 	vmov	r2, s15
 8006d94:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <SetPerfilTimers+0x558>)
 8006d98:	ed93 7b04 	vldr	d7, [r3, #16]
 8006d9c:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <SetPerfilTimers+0x574>)
 8006d9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8006da8:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <SetPerfilTimers+0x574>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006db4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <SetPerfilTimers+0x574>)
 8006dbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006dc2:	ee17 2a90 	vmov	r2, s15
 8006dc6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 8006dc8:	bf00      	nop
 8006dca:	3724      	adds	r7, #36	; 0x24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	40f00000 	.word	0x40f00000
 8006de0:	00000000 	.word	0x00000000
 8006de4:	404e0000 	.word	0x404e0000
 8006de8:	00000000 	.word	0x00000000
 8006dec:	40c2c000 	.word	0x40c2c000
 8006df0:	24000438 	.word	0x24000438
 8006df4:	40f00000 	.word	0x40f00000
 8006df8:	24000000 	.word	0x24000000
 8006dfc:	40001800 	.word	0x40001800
 8006e00:	24000460 	.word	0x24000460
 8006e04:	40001c00 	.word	0x40001c00
 8006e08:	24000468 	.word	0x24000468
 8006e0c:	40002000 	.word	0x40002000
 8006e10:	24000470 	.word	0x24000470

08006e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e1a:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <MX_USART1_UART_Init+0x94>)
 8006e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006e1e:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e26:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e3a:	220c      	movs	r2, #12
 8006e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e3e:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e44:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e4a:	4b16      	ldr	r3, [pc, #88]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e50:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e56:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e5c:	4811      	ldr	r0, [pc, #68]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e5e:	f004 ffb5 	bl	800bdcc <HAL_UART_Init>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006e68:	f7fb fb06 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	480d      	ldr	r0, [pc, #52]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e70:	f008 fa2b 	bl	800f2ca <HAL_UARTEx_SetTxFifoThreshold>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006e7a:	f7fb fafd 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4808      	ldr	r0, [pc, #32]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e82:	f008 fa60 	bl	800f346 <HAL_UARTEx_SetRxFifoThreshold>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006e8c:	f7fb faf4 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006e90:	4804      	ldr	r0, [pc, #16]	; (8006ea4 <MX_USART1_UART_Init+0x90>)
 8006e92:	f008 f9e1 	bl	800f258 <HAL_UARTEx_DisableFifoMode>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006e9c:	f7fb faec 	bl	8002478 <Error_Handler>
  }

}
 8006ea0:	bf00      	nop
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	24000b80 	.word	0x24000b80
 8006ea8:	40011000 	.word	0x40011000

08006eac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006eb0:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <MX_USART2_UART_Init+0x94>)
 8006eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006eb6:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006eb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006eca:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ed0:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ed2:	220c      	movs	r2, #12
 8006ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ed6:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006edc:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ee2:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ee8:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ef4:	4811      	ldr	r0, [pc, #68]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006ef6:	f004 ff69 	bl	800bdcc <HAL_UART_Init>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006f00:	f7fb faba 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f04:	2100      	movs	r1, #0
 8006f06:	480d      	ldr	r0, [pc, #52]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006f08:	f008 f9df 	bl	800f2ca <HAL_UARTEx_SetTxFifoThreshold>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006f12:	f7fb fab1 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f16:	2100      	movs	r1, #0
 8006f18:	4808      	ldr	r0, [pc, #32]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006f1a:	f008 fa14 	bl	800f346 <HAL_UARTEx_SetRxFifoThreshold>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006f24:	f7fb faa8 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006f28:	4804      	ldr	r0, [pc, #16]	; (8006f3c <MX_USART2_UART_Init+0x90>)
 8006f2a:	f008 f995 	bl	800f258 <HAL_UARTEx_DisableFifoMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006f34:	f7fb faa0 	bl	8002478 <Error_Handler>
  }

}
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	24000c0c 	.word	0x24000c0c
 8006f40:	40004400 	.word	0x40004400

08006f44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006f48:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f4a:	4a23      	ldr	r2, [pc, #140]	; (8006fd8 <MX_USART3_UART_Init+0x94>)
 8006f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f6a:	220c      	movs	r2, #12
 8006f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f74:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f80:	4b14      	ldr	r3, [pc, #80]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f86:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006f8c:	4811      	ldr	r0, [pc, #68]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006f8e:	f004 ff1d 	bl	800bdcc <HAL_UART_Init>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006f98:	f7fb fa6e 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	480d      	ldr	r0, [pc, #52]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006fa0:	f008 f993 	bl	800f2ca <HAL_UARTEx_SetTxFifoThreshold>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006faa:	f7fb fa65 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4808      	ldr	r0, [pc, #32]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006fb2:	f008 f9c8 	bl	800f346 <HAL_UARTEx_SetRxFifoThreshold>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006fbc:	f7fb fa5c 	bl	8002478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006fc0:	4804      	ldr	r0, [pc, #16]	; (8006fd4 <MX_USART3_UART_Init+0x90>)
 8006fc2:	f008 f949 	bl	800f258 <HAL_UARTEx_DisableFifoMode>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006fcc:	f7fb fa54 	bl	8002478 <Error_Handler>
  }

}
 8006fd0:	bf00      	nop
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	24000c98 	.word	0x24000c98
 8006fd8:	40004800 	.word	0x40004800

08006fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	; 0x38
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	605a      	str	r2, [r3, #4]
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	60da      	str	r2, [r3, #12]
 8006ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a63      	ldr	r2, [pc, #396]	; (8007188 <HAL_UART_MspInit+0x1ac>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d14f      	bne.n	800709e <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ffe:	4b63      	ldr	r3, [pc, #396]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007004:	4a61      	ldr	r2, [pc, #388]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007006:	f043 0310 	orr.w	r3, r3, #16
 800700a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800700e:	4b5f      	ldr	r3, [pc, #380]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	623b      	str	r3, [r7, #32]
 800701a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800701c:	4b5b      	ldr	r3, [pc, #364]	; (800718c <HAL_UART_MspInit+0x1b0>)
 800701e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007022:	4a5a      	ldr	r2, [pc, #360]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800702c:	4b57      	ldr	r3, [pc, #348]	; (800718c <HAL_UART_MspInit+0x1b0>)
 800702e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703a:	4b54      	ldr	r3, [pc, #336]	; (800718c <HAL_UART_MspInit+0x1b0>)
 800703c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007040:	4a52      	ldr	r2, [pc, #328]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800704a:	4b50      	ldr	r3, [pc, #320]	; (800718c <HAL_UART_MspInit+0x1b0>)
 800704c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8007058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705e:	2302      	movs	r3, #2
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007062:	2300      	movs	r3, #0
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007066:	2300      	movs	r3, #0
 8007068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800706a:	2304      	movs	r3, #4
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 800706e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007072:	4619      	mov	r1, r3
 8007074:	4846      	ldr	r0, [pc, #280]	; (8007190 <HAL_UART_MspInit+0x1b4>)
 8007076:	f000 fd05 	bl	8007a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 800707a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007080:	2302      	movs	r3, #2
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007084:	2300      	movs	r3, #0
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007088:	2300      	movs	r3, #0
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800708c:	2307      	movs	r3, #7
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8007090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007094:	4619      	mov	r1, r3
 8007096:	483f      	ldr	r0, [pc, #252]	; (8007194 <HAL_UART_MspInit+0x1b8>)
 8007098:	f000 fcf4 	bl	8007a84 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800709c:	e06f      	b.n	800717e <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART2)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3d      	ldr	r2, [pc, #244]	; (8007198 <HAL_UART_MspInit+0x1bc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d12e      	bne.n	8007106 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80070a8:	4b38      	ldr	r3, [pc, #224]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070ae:	4a37      	ldr	r2, [pc, #220]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80070b8:	4b34      	ldr	r3, [pc, #208]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c6:	4b31      	ldr	r3, [pc, #196]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070cc:	4a2f      	ldr	r2, [pc, #188]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070d6:	4b2d      	ldr	r3, [pc, #180]	; (800718c <HAL_UART_MspInit+0x1b0>)
 80070d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 80070e4:	230c      	movs	r3, #12
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e8:	2302      	movs	r3, #2
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070f0:	2300      	movs	r3, #0
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070f4:	2307      	movs	r3, #7
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070fc:	4619      	mov	r1, r3
 80070fe:	4825      	ldr	r0, [pc, #148]	; (8007194 <HAL_UART_MspInit+0x1b8>)
 8007100:	f000 fcc0 	bl	8007a84 <HAL_GPIO_Init>
}
 8007104:	e03b      	b.n	800717e <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART3)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a24      	ldr	r2, [pc, #144]	; (800719c <HAL_UART_MspInit+0x1c0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d136      	bne.n	800717e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007116:	4a1d      	ldr	r2, [pc, #116]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800711c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007134:	4a15      	ldr	r2, [pc, #84]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007136:	f043 0308 	orr.w	r3, r3, #8
 800713a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <HAL_UART_MspInit+0x1b0>)
 8007140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800714c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007152:	2302      	movs	r3, #2
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007156:	2300      	movs	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715a:	2300      	movs	r3, #0
 800715c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800715e:	2307      	movs	r3, #7
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007166:	4619      	mov	r1, r3
 8007168:	480d      	ldr	r0, [pc, #52]	; (80071a0 <HAL_UART_MspInit+0x1c4>)
 800716a:	f000 fc8b 	bl	8007a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 800716e:	2201      	movs	r2, #1
 8007170:	2101      	movs	r1, #1
 8007172:	2027      	movs	r0, #39	; 0x27
 8007174:	f000 f9fd 	bl	8007572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007178:	2027      	movs	r0, #39	; 0x27
 800717a:	f000 fa14 	bl	80075a6 <HAL_NVIC_EnableIRQ>
}
 800717e:	bf00      	nop
 8007180:	3738      	adds	r7, #56	; 0x38
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	58024400 	.word	0x58024400
 8007190:	58020400 	.word	0x58020400
 8007194:	58020000 	.word	0x58020000
 8007198:	40004400 	.word	0x40004400
 800719c:	40004800 	.word	0x40004800
 80071a0:	58020c00 	.word	0x58020c00

080071a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80071a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80071a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071aa:	e003      	b.n	80071b4 <LoopCopyDataInit>

080071ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80071ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071b2:	3104      	adds	r1, #4

080071b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80071b4:	480b      	ldr	r0, [pc, #44]	; (80071e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80071b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071bc:	d3f6      	bcc.n	80071ac <CopyDataInit>
  ldr  r2, =_sbss
 80071be:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80071c0:	e002      	b.n	80071c8 <LoopFillZerobss>

080071c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80071c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071c4:	f842 3b04 	str.w	r3, [r2], #4

080071c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071cc:	d3f9      	bcc.n	80071c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80071ce:	f7fb ff51 	bl	8003074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071d2:	f008 f961 	bl	800f498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071d6:	f7fa fca3 	bl	8001b20 <main>
  bx  lr    
 80071da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80071dc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80071e0:	080148b8 	.word	0x080148b8
  ldr  r0, =_sdata
 80071e4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80071e8:	240002e4 	.word	0x240002e4
  ldr  r2, =_sbss
 80071ec:	240002e8 	.word	0x240002e8
  ldr  r3, = _ebss
 80071f0:	24000d38 	.word	0x24000d38

080071f4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071f4:	e7fe      	b.n	80071f4 <ADC3_IRQHandler>
	...

080071f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071fc:	2003      	movs	r0, #3
 80071fe:	f000 f9ad 	bl	800755c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007202:	f001 fbf5 	bl	80089f0 <HAL_RCC_GetSysClockFreq>
 8007206:	4602      	mov	r2, r0
 8007208:	4b13      	ldr	r3, [pc, #76]	; (8007258 <HAL_Init+0x60>)
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	4912      	ldr	r1, [pc, #72]	; (800725c <HAL_Init+0x64>)
 8007214:	5ccb      	ldrb	r3, [r1, r3]
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	fa22 f303 	lsr.w	r3, r2, r3
 800721e:	4a10      	ldr	r2, [pc, #64]	; (8007260 <HAL_Init+0x68>)
 8007220:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <HAL_Init+0x68>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <HAL_Init+0x60>)
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	490b      	ldr	r1, [pc, #44]	; (800725c <HAL_Init+0x64>)
 8007230:	5ccb      	ldrb	r3, [r1, r3]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	fa22 f303 	lsr.w	r3, r2, r3
 800723a:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <HAL_Init+0x6c>)
 800723c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800723e:	2000      	movs	r0, #0
 8007240:	f000 f812 	bl	8007268 <HAL_InitTick>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e002      	b.n	8007254 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800724e:	f7fb fd97 	bl	8002d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	58024400 	.word	0x58024400
 800725c:	08012bb0 	.word	0x08012bb0
 8007260:	24000028 	.word	0x24000028
 8007264:	2400002c 	.word	0x2400002c

08007268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007270:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <HAL_InitTick+0x60>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e021      	b.n	80072c0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800727c:	4b13      	ldr	r3, [pc, #76]	; (80072cc <HAL_InitTick+0x64>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_InitTick+0x60>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800728a:	fbb3 f3f1 	udiv	r3, r3, r1
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f9a3 	bl	80075de <HAL_SYSTICK_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e00e      	b.n	80072c0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b0f      	cmp	r3, #15
 80072a6:	d80a      	bhi.n	80072be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072a8:	2200      	movs	r2, #0
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	f000 f95f 	bl	8007572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072b4:	4a06      	ldr	r2, [pc, #24]	; (80072d0 <HAL_InitTick+0x68>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e000      	b.n	80072c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	2400010c 	.word	0x2400010c
 80072cc:	24000028 	.word	0x24000028
 80072d0:	24000108 	.word	0x24000108

080072d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80072d8:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_IncTick+0x20>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <HAL_IncTick+0x24>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4413      	add	r3, r2
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <HAL_IncTick+0x24>)
 80072e6:	6013      	str	r3, [r2, #0]
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	2400010c 	.word	0x2400010c
 80072f8:	24000d24 	.word	0x24000d24

080072fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007300:	4b03      	ldr	r3, [pc, #12]	; (8007310 <HAL_GetTick+0x14>)
 8007302:	681b      	ldr	r3, [r3, #0]
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	24000d24 	.word	0x24000d24

08007314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800731c:	f7ff ffee 	bl	80072fc <HAL_GetTick>
 8007320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d005      	beq.n	800733a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <HAL_Delay+0x44>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800733a:	bf00      	nop
 800733c:	f7ff ffde 	bl	80072fc <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	429a      	cmp	r2, r3
 800734a:	d8f7      	bhi.n	800733c <HAL_Delay+0x28>
  {
  }
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	2400010c 	.word	0x2400010c

0800735c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007360:	4b03      	ldr	r3, [pc, #12]	; (8007370 <HAL_GetREVID+0x14>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0c1b      	lsrs	r3, r3, #16
}
 8007366:	4618      	mov	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	5c001000 	.word	0x5c001000

08007374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007384:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <__NVIC_SetPriorityGrouping+0x40>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007390:	4013      	ands	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800739c:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <__NVIC_SetPriorityGrouping+0x44>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073a2:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <__NVIC_SetPriorityGrouping+0x40>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	60d3      	str	r3, [r2, #12]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000ed00 	.word	0xe000ed00
 80073b8:	05fa0000 	.word	0x05fa0000

080073bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <__NVIC_GetPriorityGrouping+0x18>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	f003 0307 	and.w	r3, r3, #7
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	e000ed00 	.word	0xe000ed00

080073d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	db0b      	blt.n	8007402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f003 021f 	and.w	r2, r3, #31
 80073f0:	4907      	ldr	r1, [pc, #28]	; (8007410 <__NVIC_EnableIRQ+0x38>)
 80073f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	2001      	movs	r0, #1
 80073fa:	fa00 f202 	lsl.w	r2, r0, r2
 80073fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	e000e100 	.word	0xe000e100

08007414 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800741e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007422:	2b00      	cmp	r3, #0
 8007424:	db12      	blt.n	800744c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	f003 021f 	and.w	r2, r3, #31
 800742c:	490a      	ldr	r1, [pc, #40]	; (8007458 <__NVIC_DisableIRQ+0x44>)
 800742e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2001      	movs	r0, #1
 8007436:	fa00 f202 	lsl.w	r2, r0, r2
 800743a:	3320      	adds	r3, #32
 800743c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007440:	f3bf 8f4f 	dsb	sy
}
 8007444:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007446:	f3bf 8f6f 	isb	sy
}
 800744a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	e000e100 	.word	0xe000e100

0800745c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800746c:	2b00      	cmp	r3, #0
 800746e:	db0a      	blt.n	8007486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b2da      	uxtb	r2, r3
 8007474:	490c      	ldr	r1, [pc, #48]	; (80074a8 <__NVIC_SetPriority+0x4c>)
 8007476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800747a:	0112      	lsls	r2, r2, #4
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	440b      	add	r3, r1
 8007480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007484:	e00a      	b.n	800749c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4908      	ldr	r1, [pc, #32]	; (80074ac <__NVIC_SetPriority+0x50>)
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	3b04      	subs	r3, #4
 8007494:	0112      	lsls	r2, r2, #4
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	440b      	add	r3, r1
 800749a:	761a      	strb	r2, [r3, #24]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	e000e100 	.word	0xe000e100
 80074ac:	e000ed00 	.word	0xe000ed00

080074b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f1c3 0307 	rsb	r3, r3, #7
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	bf28      	it	cs
 80074ce:	2304      	movcs	r3, #4
 80074d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3304      	adds	r3, #4
 80074d6:	2b06      	cmp	r3, #6
 80074d8:	d902      	bls.n	80074e0 <NVIC_EncodePriority+0x30>
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	3b03      	subs	r3, #3
 80074de:	e000      	b.n	80074e2 <NVIC_EncodePriority+0x32>
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	43da      	mvns	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	401a      	ands	r2, r3
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074f8:	f04f 31ff 	mov.w	r1, #4294967295
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007502:	43d9      	mvns	r1, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007508:	4313      	orrs	r3, r2
         );
}
 800750a:	4618      	mov	r0, r3
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3b01      	subs	r3, #1
 8007524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007528:	d301      	bcc.n	800752e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800752a:	2301      	movs	r3, #1
 800752c:	e00f      	b.n	800754e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <SysTick_Config+0x40>)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3b01      	subs	r3, #1
 8007534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007536:	210f      	movs	r1, #15
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	f7ff ff8e 	bl	800745c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <SysTick_Config+0x40>)
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <SysTick_Config+0x40>)
 8007548:	2207      	movs	r2, #7
 800754a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	e000e010 	.word	0xe000e010

0800755c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ff05 	bl	8007374 <__NVIC_SetPriorityGrouping>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	4603      	mov	r3, r0
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007580:	f7ff ff1c 	bl	80073bc <__NVIC_GetPriorityGrouping>
 8007584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	6978      	ldr	r0, [r7, #20]
 800758c:	f7ff ff90 	bl	80074b0 <NVIC_EncodePriority>
 8007590:	4602      	mov	r2, r0
 8007592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff ff5f 	bl	800745c <__NVIC_SetPriority>
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	4603      	mov	r3, r0
 80075ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff ff0f 	bl	80073d8 <__NVIC_EnableIRQ>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	4603      	mov	r3, r0
 80075ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80075cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff1f 	bl	8007414 <__NVIC_DisableIRQ>
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff ff96 	bl	8007518 <SysTick_Config>
 80075ec:	4603      	mov	r3, r0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e237      	b.n	8007a7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d004      	beq.n	8007620 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2280      	movs	r2, #128	; 0x80
 800761a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e22c      	b.n	8007a7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a5c      	ldr	r2, [pc, #368]	; (8007798 <HAL_DMA_Abort_IT+0x1a0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04a      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a5b      	ldr	r2, [pc, #364]	; (800779c <HAL_DMA_Abort_IT+0x1a4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d045      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a59      	ldr	r2, [pc, #356]	; (80077a0 <HAL_DMA_Abort_IT+0x1a8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d040      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a58      	ldr	r2, [pc, #352]	; (80077a4 <HAL_DMA_Abort_IT+0x1ac>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d03b      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a56      	ldr	r2, [pc, #344]	; (80077a8 <HAL_DMA_Abort_IT+0x1b0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d036      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a55      	ldr	r2, [pc, #340]	; (80077ac <HAL_DMA_Abort_IT+0x1b4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d031      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a53      	ldr	r2, [pc, #332]	; (80077b0 <HAL_DMA_Abort_IT+0x1b8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d02c      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a52      	ldr	r2, [pc, #328]	; (80077b4 <HAL_DMA_Abort_IT+0x1bc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a50      	ldr	r2, [pc, #320]	; (80077b8 <HAL_DMA_Abort_IT+0x1c0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a4f      	ldr	r2, [pc, #316]	; (80077bc <HAL_DMA_Abort_IT+0x1c4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d01d      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a4d      	ldr	r2, [pc, #308]	; (80077c0 <HAL_DMA_Abort_IT+0x1c8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a4c      	ldr	r2, [pc, #304]	; (80077c4 <HAL_DMA_Abort_IT+0x1cc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a4a      	ldr	r2, [pc, #296]	; (80077c8 <HAL_DMA_Abort_IT+0x1d0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a49      	ldr	r2, [pc, #292]	; (80077cc <HAL_DMA_Abort_IT+0x1d4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a47      	ldr	r2, [pc, #284]	; (80077d0 <HAL_DMA_Abort_IT+0x1d8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_DMA_Abort_IT+0xc8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <HAL_DMA_Abort_IT+0x1dc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d101      	bne.n	80076c4 <HAL_DMA_Abort_IT+0xcc>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_DMA_Abort_IT+0xce>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8086 	beq.w	80077d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2f      	ldr	r2, [pc, #188]	; (8007798 <HAL_DMA_Abort_IT+0x1a0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d04a      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2e      	ldr	r2, [pc, #184]	; (800779c <HAL_DMA_Abort_IT+0x1a4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d045      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <HAL_DMA_Abort_IT+0x1a8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d040      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2b      	ldr	r2, [pc, #172]	; (80077a4 <HAL_DMA_Abort_IT+0x1ac>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d03b      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <HAL_DMA_Abort_IT+0x1b0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d036      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a28      	ldr	r2, [pc, #160]	; (80077ac <HAL_DMA_Abort_IT+0x1b4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d031      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <HAL_DMA_Abort_IT+0x1b8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d02c      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a25      	ldr	r2, [pc, #148]	; (80077b4 <HAL_DMA_Abort_IT+0x1bc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d027      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a23      	ldr	r2, [pc, #140]	; (80077b8 <HAL_DMA_Abort_IT+0x1c0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d022      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a22      	ldr	r2, [pc, #136]	; (80077bc <HAL_DMA_Abort_IT+0x1c4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01d      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a20      	ldr	r2, [pc, #128]	; (80077c0 <HAL_DMA_Abort_IT+0x1c8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d018      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <HAL_DMA_Abort_IT+0x1cc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d013      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <HAL_DMA_Abort_IT+0x1d0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00e      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <HAL_DMA_Abort_IT+0x1d4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d009      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1a      	ldr	r2, [pc, #104]	; (80077d0 <HAL_DMA_Abort_IT+0x1d8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_DMA_Abort_IT+0x17c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a19      	ldr	r2, [pc, #100]	; (80077d4 <HAL_DMA_Abort_IT+0x1dc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d108      	bne.n	8007786 <HAL_DMA_Abort_IT+0x18e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e178      	b.n	8007a78 <HAL_DMA_Abort_IT+0x480>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e16f      	b.n	8007a78 <HAL_DMA_Abort_IT+0x480>
 8007798:	40020010 	.word	0x40020010
 800779c:	40020028 	.word	0x40020028
 80077a0:	40020040 	.word	0x40020040
 80077a4:	40020058 	.word	0x40020058
 80077a8:	40020070 	.word	0x40020070
 80077ac:	40020088 	.word	0x40020088
 80077b0:	400200a0 	.word	0x400200a0
 80077b4:	400200b8 	.word	0x400200b8
 80077b8:	40020410 	.word	0x40020410
 80077bc:	40020428 	.word	0x40020428
 80077c0:	40020440 	.word	0x40020440
 80077c4:	40020458 	.word	0x40020458
 80077c8:	40020470 	.word	0x40020470
 80077cc:	40020488 	.word	0x40020488
 80077d0:	400204a0 	.word	0x400204a0
 80077d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 020e 	bic.w	r2, r2, #14
 80077e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a6c      	ldr	r2, [pc, #432]	; (80079a0 <HAL_DMA_Abort_IT+0x3a8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d04a      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a6b      	ldr	r2, [pc, #428]	; (80079a4 <HAL_DMA_Abort_IT+0x3ac>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d045      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a69      	ldr	r2, [pc, #420]	; (80079a8 <HAL_DMA_Abort_IT+0x3b0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d040      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a68      	ldr	r2, [pc, #416]	; (80079ac <HAL_DMA_Abort_IT+0x3b4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d03b      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a66      	ldr	r2, [pc, #408]	; (80079b0 <HAL_DMA_Abort_IT+0x3b8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d036      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a65      	ldr	r2, [pc, #404]	; (80079b4 <HAL_DMA_Abort_IT+0x3bc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d031      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a63      	ldr	r2, [pc, #396]	; (80079b8 <HAL_DMA_Abort_IT+0x3c0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d02c      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a62      	ldr	r2, [pc, #392]	; (80079bc <HAL_DMA_Abort_IT+0x3c4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d027      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a60      	ldr	r2, [pc, #384]	; (80079c0 <HAL_DMA_Abort_IT+0x3c8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d022      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a5f      	ldr	r2, [pc, #380]	; (80079c4 <HAL_DMA_Abort_IT+0x3cc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d01d      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a5d      	ldr	r2, [pc, #372]	; (80079c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d018      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a5c      	ldr	r2, [pc, #368]	; (80079cc <HAL_DMA_Abort_IT+0x3d4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5a      	ldr	r2, [pc, #360]	; (80079d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00e      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a59      	ldr	r2, [pc, #356]	; (80079d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d009      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a57      	ldr	r2, [pc, #348]	; (80079d8 <HAL_DMA_Abort_IT+0x3e0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_DMA_Abort_IT+0x290>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a56      	ldr	r2, [pc, #344]	; (80079dc <HAL_DMA_Abort_IT+0x3e4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d108      	bne.n	800789a <HAL_DMA_Abort_IT+0x2a2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	e007      	b.n	80078aa <HAL_DMA_Abort_IT+0x2b2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0201 	bic.w	r2, r2, #1
 80078a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a3c      	ldr	r2, [pc, #240]	; (80079a0 <HAL_DMA_Abort_IT+0x3a8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d072      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a3a      	ldr	r2, [pc, #232]	; (80079a4 <HAL_DMA_Abort_IT+0x3ac>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d06d      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a39      	ldr	r2, [pc, #228]	; (80079a8 <HAL_DMA_Abort_IT+0x3b0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d068      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a37      	ldr	r2, [pc, #220]	; (80079ac <HAL_DMA_Abort_IT+0x3b4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d063      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a36      	ldr	r2, [pc, #216]	; (80079b0 <HAL_DMA_Abort_IT+0x3b8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d05e      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <HAL_DMA_Abort_IT+0x3bc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d059      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a33      	ldr	r2, [pc, #204]	; (80079b8 <HAL_DMA_Abort_IT+0x3c0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d054      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a31      	ldr	r2, [pc, #196]	; (80079bc <HAL_DMA_Abort_IT+0x3c4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d04f      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a30      	ldr	r2, [pc, #192]	; (80079c0 <HAL_DMA_Abort_IT+0x3c8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d04a      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2e      	ldr	r2, [pc, #184]	; (80079c4 <HAL_DMA_Abort_IT+0x3cc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d045      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2d      	ldr	r2, [pc, #180]	; (80079c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d040      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <HAL_DMA_Abort_IT+0x3d4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d03b      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d036      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a28      	ldr	r2, [pc, #160]	; (80079d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d031      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <HAL_DMA_Abort_IT+0x3e0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d02c      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a25      	ldr	r2, [pc, #148]	; (80079dc <HAL_DMA_Abort_IT+0x3e4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d027      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <HAL_DMA_Abort_IT+0x3e8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d022      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <HAL_DMA_Abort_IT+0x3ec>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01d      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a21      	ldr	r2, [pc, #132]	; (80079e8 <HAL_DMA_Abort_IT+0x3f0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <HAL_DMA_Abort_IT+0x3f4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <HAL_DMA_Abort_IT+0x3f8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00e      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <HAL_DMA_Abort_IT+0x3fc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d009      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1b      	ldr	r2, [pc, #108]	; (80079f8 <HAL_DMA_Abort_IT+0x400>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_DMA_Abort_IT+0x3a2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a19      	ldr	r2, [pc, #100]	; (80079fc <HAL_DMA_Abort_IT+0x404>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d132      	bne.n	8007a00 <HAL_DMA_Abort_IT+0x408>
 800799a:	2301      	movs	r3, #1
 800799c:	e031      	b.n	8007a02 <HAL_DMA_Abort_IT+0x40a>
 800799e:	bf00      	nop
 80079a0:	40020010 	.word	0x40020010
 80079a4:	40020028 	.word	0x40020028
 80079a8:	40020040 	.word	0x40020040
 80079ac:	40020058 	.word	0x40020058
 80079b0:	40020070 	.word	0x40020070
 80079b4:	40020088 	.word	0x40020088
 80079b8:	400200a0 	.word	0x400200a0
 80079bc:	400200b8 	.word	0x400200b8
 80079c0:	40020410 	.word	0x40020410
 80079c4:	40020428 	.word	0x40020428
 80079c8:	40020440 	.word	0x40020440
 80079cc:	40020458 	.word	0x40020458
 80079d0:	40020470 	.word	0x40020470
 80079d4:	40020488 	.word	0x40020488
 80079d8:	400204a0 	.word	0x400204a0
 80079dc:	400204b8 	.word	0x400204b8
 80079e0:	58025408 	.word	0x58025408
 80079e4:	5802541c 	.word	0x5802541c
 80079e8:	58025430 	.word	0x58025430
 80079ec:	58025444 	.word	0x58025444
 80079f0:	58025458 	.word	0x58025458
 80079f4:	5802546c 	.word	0x5802546c
 80079f8:	58025480 	.word	0x58025480
 80079fc:	58025494 	.word	0x58025494
 8007a00:	2300      	movs	r3, #0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d028      	beq.n	8007a58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	2201      	movs	r2, #1
 8007a26:	409a      	lsls	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop

08007a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b089      	sub	sp, #36	; 0x24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a92:	4b89      	ldr	r3, [pc, #548]	; (8007cb8 <HAL_GPIO_Init+0x234>)
 8007a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a96:	e194      	b.n	8007dc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8186 	beq.w	8007dbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d003      	beq.n	8007ac0 <HAL_GPIO_Init+0x3c>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b12      	cmp	r3, #18
 8007abe:	d123      	bne.n	8007b08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	08da      	lsrs	r2, r3, #3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3208      	adds	r2, #8
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	220f      	movs	r2, #15
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	08da      	lsrs	r2, r3, #3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3208      	adds	r2, #8
 8007b02:	69b9      	ldr	r1, [r7, #24]
 8007b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	2203      	movs	r2, #3
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 0203 	and.w	r2, r3, #3
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d00b      	beq.n	8007b5c <HAL_GPIO_Init+0xd8>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d007      	beq.n	8007b5c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b50:	2b11      	cmp	r3, #17
 8007b52:	d003      	beq.n	8007b5c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b12      	cmp	r3, #18
 8007b5a:	d130      	bne.n	8007bbe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	2203      	movs	r2, #3
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4013      	ands	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b92:	2201      	movs	r2, #1
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0201 	and.w	r2, r3, #1
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	2203      	movs	r2, #3
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	fa02 f303 	lsl.w	r3, r2, r3
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80e0 	beq.w	8007dbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <HAL_GPIO_Init+0x238>)
 8007bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c02:	4a2e      	ldr	r2, [pc, #184]	; (8007cbc <HAL_GPIO_Init+0x238>)
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c0c:	4b2b      	ldr	r3, [pc, #172]	; (8007cbc <HAL_GPIO_Init+0x238>)
 8007c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c1a:	4a29      	ldr	r2, [pc, #164]	; (8007cc0 <HAL_GPIO_Init+0x23c>)
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	3302      	adds	r3, #2
 8007c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	220f      	movs	r2, #15
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	43db      	mvns	r3, r3
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <HAL_GPIO_Init+0x240>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d052      	beq.n	8007cec <HAL_GPIO_Init+0x268>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1f      	ldr	r2, [pc, #124]	; (8007cc8 <HAL_GPIO_Init+0x244>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d031      	beq.n	8007cb2 <HAL_GPIO_Init+0x22e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <HAL_GPIO_Init+0x248>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d02b      	beq.n	8007cae <HAL_GPIO_Init+0x22a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <HAL_GPIO_Init+0x24c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d025      	beq.n	8007caa <HAL_GPIO_Init+0x226>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <HAL_GPIO_Init+0x250>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01f      	beq.n	8007ca6 <HAL_GPIO_Init+0x222>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_GPIO_Init+0x254>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d019      	beq.n	8007ca2 <HAL_GPIO_Init+0x21e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <HAL_GPIO_Init+0x258>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <HAL_GPIO_Init+0x21a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <HAL_GPIO_Init+0x25c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00d      	beq.n	8007c9a <HAL_GPIO_Init+0x216>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <HAL_GPIO_Init+0x260>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <HAL_GPIO_Init+0x212>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <HAL_GPIO_Init+0x264>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d101      	bne.n	8007c92 <HAL_GPIO_Init+0x20e>
 8007c8e:	2309      	movs	r3, #9
 8007c90:	e02d      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007c92:	230a      	movs	r3, #10
 8007c94:	e02b      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007c96:	2308      	movs	r3, #8
 8007c98:	e029      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007c9a:	2307      	movs	r3, #7
 8007c9c:	e027      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007c9e:	2306      	movs	r3, #6
 8007ca0:	e025      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007ca2:	2305      	movs	r3, #5
 8007ca4:	e023      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	e021      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007caa:	2303      	movs	r3, #3
 8007cac:	e01f      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e01d      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e01b      	b.n	8007cee <HAL_GPIO_Init+0x26a>
 8007cb6:	bf00      	nop
 8007cb8:	58000080 	.word	0x58000080
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	58000400 	.word	0x58000400
 8007cc4:	58020000 	.word	0x58020000
 8007cc8:	58020400 	.word	0x58020400
 8007ccc:	58020800 	.word	0x58020800
 8007cd0:	58020c00 	.word	0x58020c00
 8007cd4:	58021000 	.word	0x58021000
 8007cd8:	58021400 	.word	0x58021400
 8007cdc:	58021800 	.word	0x58021800
 8007ce0:	58021c00 	.word	0x58021c00
 8007ce4:	58022000 	.word	0x58022000
 8007ce8:	58022400 	.word	0x58022400
 8007cec:	2300      	movs	r3, #0
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	f002 0203 	and.w	r2, r2, #3
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	4093      	lsls	r3, r2
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cfe:	4938      	ldr	r1, [pc, #224]	; (8007de0 <HAL_GPIO_Init+0x35c>)
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	089b      	lsrs	r3, r3, #2
 8007d04:	3302      	adds	r3, #2
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	43db      	mvns	r3, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f ae63 	bne.w	8007a98 <HAL_GPIO_Init+0x14>
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	3724      	adds	r7, #36	; 0x24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	58000400 	.word	0x58000400

08007de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	887b      	ldrh	r3, [r7, #2]
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
 8007e00:	e001      	b.n	8007e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	807b      	strh	r3, [r7, #2]
 8007e20:	4613      	mov	r3, r2
 8007e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e24:	787b      	ldrb	r3, [r7, #1]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e2a:	887a      	ldrh	r2, [r7, #2]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e30:	e003      	b.n	8007e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	041a      	lsls	r2, r3, #16
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	619a      	str	r2, [r3, #24]
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fa f8a1 	bl	8001fb4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_PWREx_ConfigSupply+0x70>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d00a      	beq.n	8007ea6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e90:	4b16      	ldr	r3, [pc, #88]	; (8007eec <HAL_PWREx_ConfigSupply+0x70>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d001      	beq.n	8007ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e01f      	b.n	8007ee2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e01d      	b.n	8007ee2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ea6:	4b11      	ldr	r3, [pc, #68]	; (8007eec <HAL_PWREx_ConfigSupply+0x70>)
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f023 0207 	bic.w	r2, r3, #7
 8007eae:	490f      	ldr	r1, [pc, #60]	; (8007eec <HAL_PWREx_ConfigSupply+0x70>)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007eb6:	f7ff fa21 	bl	80072fc <HAL_GetTick>
 8007eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ebc:	e009      	b.n	8007ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ebe:	f7ff fa1d 	bl	80072fc <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ecc:	d901      	bls.n	8007ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e007      	b.n	8007ee2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <HAL_PWREx_ConfigSupply+0x70>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ede:	d1ee      	bne.n	8007ebe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	58024800 	.word	0x58024800

08007ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	; 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e3cb      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8087 	beq.w	800801e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f10:	4b8c      	ldr	r3, [pc, #560]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f1a:	4b8a      	ldr	r3, [pc, #552]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d007      	beq.n	8007f36 <HAL_RCC_OscConfig+0x46>
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	2b18      	cmp	r3, #24
 8007f2a:	d110      	bne.n	8007f4e <HAL_RCC_OscConfig+0x5e>
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d10b      	bne.n	8007f4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f36:	4b83      	ldr	r3, [pc, #524]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d06c      	beq.n	800801c <HAL_RCC_OscConfig+0x12c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d168      	bne.n	800801c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e3a5      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f56:	d106      	bne.n	8007f66 <HAL_RCC_OscConfig+0x76>
 8007f58:	4b7a      	ldr	r3, [pc, #488]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a79      	ldr	r2, [pc, #484]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	e02e      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCC_OscConfig+0x98>
 8007f6e:	4b75      	ldr	r3, [pc, #468]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a74      	ldr	r2, [pc, #464]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	4b72      	ldr	r3, [pc, #456]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a71      	ldr	r2, [pc, #452]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e01d      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f90:	d10c      	bne.n	8007fac <HAL_RCC_OscConfig+0xbc>
 8007f92:	4b6c      	ldr	r3, [pc, #432]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a6b      	ldr	r2, [pc, #428]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	4b69      	ldr	r3, [pc, #420]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a68      	ldr	r2, [pc, #416]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	e00b      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007fac:	4b65      	ldr	r3, [pc, #404]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a64      	ldr	r2, [pc, #400]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	4b62      	ldr	r3, [pc, #392]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a61      	ldr	r2, [pc, #388]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d013      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fcc:	f7ff f996 	bl	80072fc <HAL_GetTick>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fd4:	f7ff f992 	bl	80072fc <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b64      	cmp	r3, #100	; 0x64
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e359      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fe6:	4b57      	ldr	r3, [pc, #348]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0xe4>
 8007ff2:	e014      	b.n	800801e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7ff f982 	bl	80072fc <HAL_GetTick>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ffc:	f7ff f97e 	bl	80072fc <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b64      	cmp	r3, #100	; 0x64
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e345      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800800e:	4b4d      	ldr	r3, [pc, #308]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f0      	bne.n	8007ffc <HAL_RCC_OscConfig+0x10c>
 800801a:	e000      	b.n	800801e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800801c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 8094 	beq.w	8008154 <HAL_RCC_OscConfig+0x264>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800802c:	4b45      	ldr	r3, [pc, #276]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008034:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008036:	4b43      	ldr	r3, [pc, #268]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_RCC_OscConfig+0x162>
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	2b18      	cmp	r3, #24
 8008046:	d12d      	bne.n	80080a4 <HAL_RCC_OscConfig+0x1b4>
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d128      	bne.n	80080a4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008052:	4b3c      	ldr	r3, [pc, #240]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_RCC_OscConfig+0x17a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e317      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800806a:	f7ff f977 	bl	800735c <HAL_GetREVID>
 800806e:	4603      	mov	r3, r0
 8008070:	f241 0203 	movw	r2, #4099	; 0x1003
 8008074:	4293      	cmp	r3, r2
 8008076:	d80a      	bhi.n	800808e <HAL_RCC_OscConfig+0x19e>
 8008078:	4b32      	ldr	r3, [pc, #200]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	031b      	lsls	r3, r3, #12
 8008086:	492f      	ldr	r1, [pc, #188]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008088:	4313      	orrs	r3, r2
 800808a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800808c:	e062      	b.n	8008154 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808e:	4b2d      	ldr	r3, [pc, #180]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	4929      	ldr	r1, [pc, #164]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080a2:	e057      	b.n	8008154 <HAL_RCC_OscConfig+0x264>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d038      	beq.n	800811e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080ac:	4b25      	ldr	r3, [pc, #148]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f023 0219 	bic.w	r2, r3, #25
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4922      	ldr	r1, [pc, #136]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080be:	f7ff f91d 	bl	80072fc <HAL_GetTick>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c6:	f7ff f919 	bl	80072fc <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e2e0      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080d8:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f0      	beq.n	80080c6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e4:	f7ff f93a 	bl	800735c <HAL_GetREVID>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d80a      	bhi.n	8008108 <HAL_RCC_OscConfig+0x218>
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	031b      	lsls	r3, r3, #12
 8008100:	4910      	ldr	r1, [pc, #64]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008102:	4313      	orrs	r3, r2
 8008104:	604b      	str	r3, [r1, #4]
 8008106:	e025      	b.n	8008154 <HAL_RCC_OscConfig+0x264>
 8008108:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	490b      	ldr	r1, [pc, #44]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008118:	4313      	orrs	r3, r2
 800811a:	604b      	str	r3, [r1, #4]
 800811c:	e01a      	b.n	8008154 <HAL_RCC_OscConfig+0x264>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <HAL_RCC_OscConfig+0x254>)
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812a:	f7ff f8e7 	bl	80072fc <HAL_GetTick>
 800812e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008130:	e00a      	b.n	8008148 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008132:	f7ff f8e3 	bl	80072fc <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d903      	bls.n	8008148 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e2aa      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
 8008144:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008148:	4b97      	ldr	r3, [pc, #604]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1ee      	bne.n	8008132 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 808f 	beq.w	8008280 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008162:	4b91      	ldr	r3, [pc, #580]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800816c:	4b8e      	ldr	r3, [pc, #568]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b08      	cmp	r3, #8
 8008176:	d007      	beq.n	8008188 <HAL_RCC_OscConfig+0x298>
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b18      	cmp	r3, #24
 800817c:	d12d      	bne.n	80081da <HAL_RCC_OscConfig+0x2ea>
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d128      	bne.n	80081da <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008188:	4b87      	ldr	r3, [pc, #540]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <HAL_RCC_OscConfig+0x2b0>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e27c      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081a0:	f7ff f8dc 	bl	800735c <HAL_GetREVID>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d80a      	bhi.n	80081c4 <HAL_RCC_OscConfig+0x2d4>
 80081ae:	4b7e      	ldr	r3, [pc, #504]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	069b      	lsls	r3, r3, #26
 80081bc:	497a      	ldr	r1, [pc, #488]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081c2:	e05d      	b.n	8008280 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081c4:	4b78      	ldr	r3, [pc, #480]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	061b      	lsls	r3, r3, #24
 80081d2:	4975      	ldr	r1, [pc, #468]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081d8:	e052      	b.n	8008280 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d035      	beq.n	800824e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081e2:	4b71      	ldr	r3, [pc, #452]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a70      	ldr	r2, [pc, #448]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80081e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ee:	f7ff f885 	bl	80072fc <HAL_GetTick>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081f4:	e008      	b.n	8008208 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081f6:	f7ff f881 	bl	80072fc <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e248      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008208:	4b67      	ldr	r3, [pc, #412]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f0      	beq.n	80081f6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008214:	f7ff f8a2 	bl	800735c <HAL_GetREVID>
 8008218:	4603      	mov	r3, r0
 800821a:	f241 0203 	movw	r2, #4099	; 0x1003
 800821e:	4293      	cmp	r3, r2
 8008220:	d80a      	bhi.n	8008238 <HAL_RCC_OscConfig+0x348>
 8008222:	4b61      	ldr	r3, [pc, #388]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	069b      	lsls	r3, r3, #26
 8008230:	495d      	ldr	r1, [pc, #372]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008232:	4313      	orrs	r3, r2
 8008234:	604b      	str	r3, [r1, #4]
 8008236:	e023      	b.n	8008280 <HAL_RCC_OscConfig+0x390>
 8008238:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	4958      	ldr	r1, [pc, #352]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008248:	4313      	orrs	r3, r2
 800824a:	60cb      	str	r3, [r1, #12]
 800824c:	e018      	b.n	8008280 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800824e:	4b56      	ldr	r3, [pc, #344]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a55      	ldr	r2, [pc, #340]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7ff f84f 	bl	80072fc <HAL_GetTick>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008262:	f7ff f84b 	bl	80072fc <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e212      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008274:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f0      	bne.n	8008262 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d036      	beq.n	80082fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008294:	4b44      	ldr	r3, [pc, #272]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	4a43      	ldr	r2, [pc, #268]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a0:	f7ff f82c 	bl	80072fc <HAL_GetTick>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082a8:	f7ff f828 	bl	80072fc <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e1ef      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082ba:	4b3b      	ldr	r3, [pc, #236]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80082bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f0      	beq.n	80082a8 <HAL_RCC_OscConfig+0x3b8>
 80082c6:	e018      	b.n	80082fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c8:	4b37      	ldr	r3, [pc, #220]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80082ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082cc:	4a36      	ldr	r2, [pc, #216]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d4:	f7ff f812 	bl	80072fc <HAL_GetTick>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082da:	e008      	b.n	80082ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082dc:	f7ff f80e 	bl	80072fc <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e1d5      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 80082f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f0      	bne.n	80082dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d036      	beq.n	8008374 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d019      	beq.n	8008342 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a25      	ldr	r2, [pc, #148]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800831a:	f7fe ffef 	bl	80072fc <HAL_GetTick>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008322:	f7fe ffeb 	bl	80072fc <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e1b2      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCC_OscConfig+0x432>
 8008340:	e018      	b.n	8008374 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 8008348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800834e:	f7fe ffd5 	bl	80072fc <HAL_GetTick>
 8008352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008356:	f7fe ffd1 	bl	80072fc <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e198      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <HAL_RCC_OscConfig+0x4b8>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f0      	bne.n	8008356 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8085 	beq.w	800848c <HAL_RCC_OscConfig+0x59c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_RCC_OscConfig+0x4bc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a09      	ldr	r2, [pc, #36]	; (80083ac <HAL_RCC_OscConfig+0x4bc>)
 8008388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800838e:	f7fe ffb5 	bl	80072fc <HAL_GetTick>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008394:	e00c      	b.n	80083b0 <HAL_RCC_OscConfig+0x4c0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008396:	f7fe ffb1 	bl	80072fc <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2b64      	cmp	r3, #100	; 0x64
 80083a2:	d905      	bls.n	80083b0 <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e178      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
 80083a8:	58024400 	.word	0x58024400
 80083ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b0:	4b96      	ldr	r3, [pc, #600]	; (800860c <HAL_RCC_OscConfig+0x71c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0ec      	beq.n	8008396 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d106      	bne.n	80083d2 <HAL_RCC_OscConfig+0x4e2>
 80083c4:	4b92      	ldr	r3, [pc, #584]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	4a91      	ldr	r2, [pc, #580]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083ca:	f043 0301 	orr.w	r3, r3, #1
 80083ce:	6713      	str	r3, [r2, #112]	; 0x70
 80083d0:	e02d      	b.n	800842e <HAL_RCC_OscConfig+0x53e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10c      	bne.n	80083f4 <HAL_RCC_OscConfig+0x504>
 80083da:	4b8d      	ldr	r3, [pc, #564]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	4a8c      	ldr	r2, [pc, #560]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	6713      	str	r3, [r2, #112]	; 0x70
 80083e6:	4b8a      	ldr	r3, [pc, #552]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	4a89      	ldr	r2, [pc, #548]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083ec:	f023 0304 	bic.w	r3, r3, #4
 80083f0:	6713      	str	r3, [r2, #112]	; 0x70
 80083f2:	e01c      	b.n	800842e <HAL_RCC_OscConfig+0x53e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b05      	cmp	r3, #5
 80083fa:	d10c      	bne.n	8008416 <HAL_RCC_OscConfig+0x526>
 80083fc:	4b84      	ldr	r3, [pc, #528]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008400:	4a83      	ldr	r2, [pc, #524]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008402:	f043 0304 	orr.w	r3, r3, #4
 8008406:	6713      	str	r3, [r2, #112]	; 0x70
 8008408:	4b81      	ldr	r3, [pc, #516]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800840a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840c:	4a80      	ldr	r2, [pc, #512]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6713      	str	r3, [r2, #112]	; 0x70
 8008414:	e00b      	b.n	800842e <HAL_RCC_OscConfig+0x53e>
 8008416:	4b7e      	ldr	r3, [pc, #504]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	4a7d      	ldr	r2, [pc, #500]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	6713      	str	r3, [r2, #112]	; 0x70
 8008422:	4b7b      	ldr	r3, [pc, #492]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	4a7a      	ldr	r2, [pc, #488]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008428:	f023 0304 	bic.w	r3, r3, #4
 800842c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d015      	beq.n	8008462 <HAL_RCC_OscConfig+0x572>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008436:	f7fe ff61 	bl	80072fc <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800843c:	e00a      	b.n	8008454 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800843e:	f7fe ff5d 	bl	80072fc <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f241 3288 	movw	r2, #5000	; 0x1388
 800844c:	4293      	cmp	r3, r2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e122      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008454:	4b6e      	ldr	r3, [pc, #440]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0ee      	beq.n	800843e <HAL_RCC_OscConfig+0x54e>
 8008460:	e014      	b.n	800848c <HAL_RCC_OscConfig+0x59c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008462:	f7fe ff4b 	bl	80072fc <HAL_GetTick>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008468:	e00a      	b.n	8008480 <HAL_RCC_OscConfig+0x590>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800846a:	f7fe ff47 	bl	80072fc <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	f241 3288 	movw	r2, #5000	; 0x1388
 8008478:	4293      	cmp	r3, r2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e10c      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008480:	4b63      	ldr	r3, [pc, #396]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1ee      	bne.n	800846a <HAL_RCC_OscConfig+0x57a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8101 	beq.w	8008698 <HAL_RCC_OscConfig+0x7a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008496:	4b5e      	ldr	r3, [pc, #376]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800849e:	2b18      	cmp	r3, #24
 80084a0:	f000 80bc 	beq.w	800861c <HAL_RCC_OscConfig+0x72c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	f040 8095 	bne.w	80085d8 <HAL_RCC_OscConfig+0x6e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a57      	ldr	r2, [pc, #348]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80084b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ba:	f7fe ff1f 	bl	80072fc <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c2:	f7fe ff1b 	bl	80072fc <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e0e2      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084d4:	4b4e      	ldr	r3, [pc, #312]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f0      	bne.n	80084c2 <HAL_RCC_OscConfig+0x5d2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084e0:	4b4b      	ldr	r3, [pc, #300]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80084e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084e4:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <HAL_RCC_OscConfig+0x724>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80084f0:	0112      	lsls	r2, r2, #4
 80084f2:	430a      	orrs	r2, r1
 80084f4:	4946      	ldr	r1, [pc, #280]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	628b      	str	r3, [r1, #40]	; 0x28
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	3b01      	subs	r3, #1
 8008500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	3b01      	subs	r3, #1
 800850a:	025b      	lsls	r3, r3, #9
 800850c:	b29b      	uxth	r3, r3
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	3b01      	subs	r3, #1
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	3b01      	subs	r3, #1
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800852a:	4939      	ldr	r1, [pc, #228]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800852c:	4313      	orrs	r3, r2
 800852e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008530:	4b37      	ldr	r3, [pc, #220]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800853c:	4b34      	ldr	r3, [pc, #208]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800853e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008540:	4b35      	ldr	r3, [pc, #212]	; (8008618 <HAL_RCC_OscConfig+0x728>)
 8008542:	4013      	ands	r3, r2
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008548:	00d2      	lsls	r2, r2, #3
 800854a:	4931      	ldr	r1, [pc, #196]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800854c:	4313      	orrs	r3, r2
 800854e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008550:	4b2f      	ldr	r3, [pc, #188]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	f023 020c 	bic.w	r2, r3, #12
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	492c      	ldr	r1, [pc, #176]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800855e:	4313      	orrs	r3, r2
 8008560:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008562:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f023 0202 	bic.w	r2, r3, #2
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	4928      	ldr	r1, [pc, #160]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008570:	4313      	orrs	r3, r2
 8008572:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008574:	4b26      	ldr	r3, [pc, #152]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a25      	ldr	r2, [pc, #148]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800857a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	4a22      	ldr	r2, [pc, #136]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800858c:	4b20      	ldr	r3, [pc, #128]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008598:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80085aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fe fea4 	bl	80072fc <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x6da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085b8:	f7fe fea0 	bl	80072fc <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x6da>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e067      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0x6c8>
 80085d6:	e05f      	b.n	8008698 <HAL_RCC_OscConfig+0x7a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d8:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a0c      	ldr	r2, [pc, #48]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 80085de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fe fe8a 	bl	80072fc <HAL_GetTick>
 80085e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ec:	f7fe fe86 	bl	80072fc <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e04d      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085fe:	4b04      	ldr	r3, [pc, #16]	; (8008610 <HAL_RCC_OscConfig+0x720>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <HAL_RCC_OscConfig+0x6fc>
 800860a:	e045      	b.n	8008698 <HAL_RCC_OscConfig+0x7a8>
 800860c:	58024800 	.word	0x58024800
 8008610:	58024400 	.word	0x58024400
 8008614:	fffffc0c 	.word	0xfffffc0c
 8008618:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800861c:	4b21      	ldr	r3, [pc, #132]	; (80086a4 <HAL_RCC_OscConfig+0x7b4>)
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008622:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <HAL_RCC_OscConfig+0x7b4>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b01      	cmp	r3, #1
 800862e:	d031      	beq.n	8008694 <HAL_RCC_OscConfig+0x7a4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f003 0203 	and.w	r2, r3, #3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800863a:	429a      	cmp	r2, r3
 800863c:	d12a      	bne.n	8008694 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800864a:	429a      	cmp	r2, r3
 800864c:	d122      	bne.n	8008694 <HAL_RCC_OscConfig+0x7a4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800865a:	429a      	cmp	r2, r3
 800865c:	d11a      	bne.n	8008694 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	0a5b      	lsrs	r3, r3, #9
 8008662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800866c:	429a      	cmp	r2, r3
 800866e:	d111      	bne.n	8008694 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800867e:	429a      	cmp	r2, r3
 8008680:	d108      	bne.n	8008694 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	0e1b      	lsrs	r3, r3, #24
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008690:	429a      	cmp	r2, r3
 8008692:	d001      	beq.n	8008698 <HAL_RCC_OscConfig+0x7a8>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <HAL_RCC_OscConfig+0x7aa>
      }
    }
  }
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3730      	adds	r7, #48	; 0x30
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	58024400 	.word	0x58024400

080086a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e18d      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086bc:	4b8a      	ldr	r3, [pc, #552]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d910      	bls.n	80086ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ca:	4b87      	ldr	r3, [pc, #540]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f023 020f 	bic.w	r2, r3, #15
 80086d2:	4985      	ldr	r1, [pc, #532]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086da:	4b83      	ldr	r3, [pc, #524]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e175      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d010      	beq.n	800871a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	4b7b      	ldr	r3, [pc, #492]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008704:	429a      	cmp	r2, r3
 8008706:	d908      	bls.n	800871a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008708:	4b78      	ldr	r3, [pc, #480]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	4975      	ldr	r1, [pc, #468]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008716:	4313      	orrs	r3, r2
 8008718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d010      	beq.n	8008748 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695a      	ldr	r2, [r3, #20]
 800872a:	4b70      	ldr	r3, [pc, #448]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008732:	429a      	cmp	r2, r3
 8008734:	d908      	bls.n	8008748 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008736:	4b6d      	ldr	r3, [pc, #436]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	496a      	ldr	r1, [pc, #424]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008744:	4313      	orrs	r3, r2
 8008746:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b00      	cmp	r3, #0
 8008752:	d010      	beq.n	8008776 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	4b64      	ldr	r3, [pc, #400]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008760:	429a      	cmp	r2, r3
 8008762:	d908      	bls.n	8008776 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008764:	4b61      	ldr	r3, [pc, #388]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	495e      	ldr	r1, [pc, #376]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008772:	4313      	orrs	r3, r2
 8008774:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69da      	ldr	r2, [r3, #28]
 8008786:	4b59      	ldr	r3, [pc, #356]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800878e:	429a      	cmp	r2, r3
 8008790:	d908      	bls.n	80087a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008792:	4b56      	ldr	r3, [pc, #344]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	4953      	ldr	r1, [pc, #332]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d010      	beq.n	80087d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	429a      	cmp	r2, r3
 80087be:	d908      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087c0:	4b4a      	ldr	r3, [pc, #296]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f023 020f 	bic.w	r2, r3, #15
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	4947      	ldr	r1, [pc, #284]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d055      	beq.n	800888a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087de:	4b43      	ldr	r3, [pc, #268]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	4940      	ldr	r1, [pc, #256]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d107      	bne.n	8008808 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087f8:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d121      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0e7      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b03      	cmp	r3, #3
 800880e:	d107      	bne.n	8008820 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008810:	4b36      	ldr	r3, [pc, #216]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d115      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0db      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d107      	bne.n	8008838 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008828:	4b30      	ldr	r3, [pc, #192]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0cf      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008838:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0c7      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008848:	4b28      	ldr	r3, [pc, #160]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f023 0207 	bic.w	r2, r3, #7
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	4925      	ldr	r1, [pc, #148]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885a:	f7fe fd4f 	bl	80072fc <HAL_GetTick>
 800885e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008860:	e00a      	b.n	8008878 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008862:	f7fe fd4b 	bl	80072fc <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008870:	4293      	cmp	r3, r2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e0af      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008878:	4b1c      	ldr	r3, [pc, #112]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	429a      	cmp	r2, r3
 8008888:	d1eb      	bne.n	8008862 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d010      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d208      	bcs.n	80088b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a6:	4b11      	ldr	r3, [pc, #68]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f023 020f 	bic.w	r2, r3, #15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	490e      	ldr	r1, [pc, #56]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d214      	bcs.n	80088f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c6:	4b08      	ldr	r3, [pc, #32]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 020f 	bic.w	r2, r3, #15
 80088ce:	4906      	ldr	r1, [pc, #24]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088d6:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d005      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e077      	b.n	80089d8 <HAL_RCC_ClockConfig+0x330>
 80088e8:	52002000 	.word	0x52002000
 80088ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d010      	beq.n	800891e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	4b37      	ldr	r3, [pc, #220]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008908:	429a      	cmp	r2, r3
 800890a:	d208      	bcs.n	800891e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800890c:	4b34      	ldr	r3, [pc, #208]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	4931      	ldr	r1, [pc, #196]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800891a:	4313      	orrs	r3, r2
 800891c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d010      	beq.n	800894c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	4b2c      	ldr	r3, [pc, #176]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008936:	429a      	cmp	r2, r3
 8008938:	d208      	bcs.n	800894c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800893a:	4b29      	ldr	r3, [pc, #164]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	4926      	ldr	r1, [pc, #152]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 8008948:	4313      	orrs	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d010      	beq.n	800897a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008964:	429a      	cmp	r2, r3
 8008966:	d208      	bcs.n	800897a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	491a      	ldr	r1, [pc, #104]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 8008976:	4313      	orrs	r3, r2
 8008978:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69da      	ldr	r2, [r3, #28]
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008992:	429a      	cmp	r2, r3
 8008994:	d208      	bcs.n	80089a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	490f      	ldr	r1, [pc, #60]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089a8:	f000 f822 	bl	80089f0 <HAL_RCC_GetSysClockFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <HAL_RCC_ClockConfig+0x338>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	490a      	ldr	r1, [pc, #40]	; (80089e4 <HAL_RCC_ClockConfig+0x33c>)
 80089ba:	5ccb      	ldrb	r3, [r1, r3]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <HAL_RCC_ClockConfig+0x340>)
 80089c6:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80089c8:	4b08      	ldr	r3, [pc, #32]	; (80089ec <HAL_RCC_ClockConfig+0x344>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fc4b 	bl	8007268 <HAL_InitTick>
 80089d2:	4603      	mov	r3, r0
 80089d4:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80089d6:	7afb      	ldrb	r3, [r7, #11]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	58024400 	.word	0x58024400
 80089e4:	08012bb0 	.word	0x08012bb0
 80089e8:	24000028 	.word	0x24000028
 80089ec:	24000108 	.word	0x24000108

080089f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b089      	sub	sp, #36	; 0x24
 80089f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089f6:	4bb3      	ldr	r3, [pc, #716]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089fe:	2b18      	cmp	r3, #24
 8008a00:	f200 8155 	bhi.w	8008cae <HAL_RCC_GetSysClockFreq+0x2be>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a71 	.word	0x08008a71
 8008a10:	08008caf 	.word	0x08008caf
 8008a14:	08008caf 	.word	0x08008caf
 8008a18:	08008caf 	.word	0x08008caf
 8008a1c:	08008caf 	.word	0x08008caf
 8008a20:	08008caf 	.word	0x08008caf
 8008a24:	08008caf 	.word	0x08008caf
 8008a28:	08008caf 	.word	0x08008caf
 8008a2c:	08008a97 	.word	0x08008a97
 8008a30:	08008caf 	.word	0x08008caf
 8008a34:	08008caf 	.word	0x08008caf
 8008a38:	08008caf 	.word	0x08008caf
 8008a3c:	08008caf 	.word	0x08008caf
 8008a40:	08008caf 	.word	0x08008caf
 8008a44:	08008caf 	.word	0x08008caf
 8008a48:	08008caf 	.word	0x08008caf
 8008a4c:	08008a9d 	.word	0x08008a9d
 8008a50:	08008caf 	.word	0x08008caf
 8008a54:	08008caf 	.word	0x08008caf
 8008a58:	08008caf 	.word	0x08008caf
 8008a5c:	08008caf 	.word	0x08008caf
 8008a60:	08008caf 	.word	0x08008caf
 8008a64:	08008caf 	.word	0x08008caf
 8008a68:	08008caf 	.word	0x08008caf
 8008a6c:	08008aa3 	.word	0x08008aa3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a70:	4b94      	ldr	r3, [pc, #592]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a7c:	4b91      	ldr	r3, [pc, #580]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	08db      	lsrs	r3, r3, #3
 8008a82:	f003 0303 	and.w	r3, r3, #3
 8008a86:	4a90      	ldr	r2, [pc, #576]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a88:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008a8e:	e111      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a90:	4b8d      	ldr	r3, [pc, #564]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a92:	61bb      	str	r3, [r7, #24]
    break;
 8008a94:	e10e      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008a96:	4b8d      	ldr	r3, [pc, #564]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a98:	61bb      	str	r3, [r7, #24]
    break;
 8008a9a:	e10b      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008a9c:	4b8c      	ldr	r3, [pc, #560]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a9e:	61bb      	str	r3, [r7, #24]
    break;
 8008aa0:	e108      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aa2:	4b88      	ldr	r3, [pc, #544]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008aac:	4b85      	ldr	r3, [pc, #532]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	091b      	lsrs	r3, r3, #4
 8008ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ab8:	4b82      	ldr	r3, [pc, #520]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ac2:	4b80      	ldr	r3, [pc, #512]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	08db      	lsrs	r3, r3, #3
 8008ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	fb02 f303 	mul.w	r3, r2, r3
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80e1 	beq.w	8008ca8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	f000 8083 	beq.w	8008bf4 <HAL_RCC_GetSysClockFreq+0x204>
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	f200 80a1 	bhi.w	8008c38 <HAL_RCC_GetSysClockFreq+0x248>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_RCC_GetSysClockFreq+0x114>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d056      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b02:	e099      	b.n	8008c38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b04:	4b6f      	ldr	r3, [pc, #444]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02d      	beq.n	8008b6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b10:	4b6c      	ldr	r3, [pc, #432]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a6b      	ldr	r2, [pc, #428]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	4b62      	ldr	r3, [pc, #392]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008b6a:	e087      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008cd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7e:	4b51      	ldr	r3, [pc, #324]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bae:	e065      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b40      	ldr	r3, [pc, #256]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bf2:	e043      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ce0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b2f      	ldr	r3, [pc, #188]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c36:	e021      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008c7c:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c80:	0a5b      	lsrs	r3, r3, #9
 8008c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c86:	3301      	adds	r3, #1
 8008c88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca0:	ee17 3a90 	vmov	r3, s15
 8008ca4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008ca6:	e005      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
    break;
 8008cac:	e002      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cb0:	61bb      	str	r3, [r7, #24]
    break;
 8008cb2:	bf00      	nop
  }

  return sysclockfreq;
 8008cb4:	69bb      	ldr	r3, [r7, #24]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3724      	adds	r7, #36	; 0x24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	03d09000 	.word	0x03d09000
 8008ccc:	003d0900 	.word	0x003d0900
 8008cd0:	017d7840 	.word	0x017d7840
 8008cd4:	46000000 	.word	0x46000000
 8008cd8:	4c742400 	.word	0x4c742400
 8008cdc:	4a742400 	.word	0x4a742400
 8008ce0:	4bbebc20 	.word	0x4bbebc20

08008ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ce8:	f001 fa28 	bl	800a13c <HAL_RCCEx_GetD1SysClockFreq>
 8008cec:	4602      	mov	r2, r0
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	4907      	ldr	r1, [pc, #28]	; (8008d14 <HAL_RCC_GetHCLKFreq+0x30>)
 8008cf8:	5ccb      	ldrb	r3, [r1, r3]
 8008cfa:	f003 031f 	and.w	r3, r3, #31
 8008cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008d02:	4a05      	ldr	r2, [pc, #20]	; (8008d18 <HAL_RCC_GetHCLKFreq+0x34>)
 8008d04:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 8008d06:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <HAL_RCC_GetHCLKFreq+0x34>)
 8008d08:	681b      	ldr	r3, [r3, #0]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	58024400 	.word	0x58024400
 8008d14:	08012bb0 	.word	0x08012bb0
 8008d18:	2400002c 	.word	0x2400002c

08008d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d20:	f7ff ffe0 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	4904      	ldr	r1, [pc, #16]	; (8008d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d32:	5ccb      	ldrb	r3, [r1, r3]
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	58024400 	.word	0x58024400
 8008d44:	08012bb0 	.word	0x08012bb0

08008d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d4c:	f7ff ffca 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8008d50:	4602      	mov	r2, r0
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	4904      	ldr	r1, [pc, #16]	; (8008d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d5e:	5ccb      	ldrb	r3, [r1, r3]
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	08012bb0 	.word	0x08012bb0

08008d74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d80:	2300      	movs	r3, #0
 8008d82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d03f      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d98:	d02a      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d9e:	d824      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008da4:	d018      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008daa:	d81e      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db4:	d007      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008db6:	e018      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db8:	4ba3      	ldr	r3, [pc, #652]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	4aa2      	ldr	r2, [pc, #648]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008dc4:	e015      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	2102      	movs	r1, #2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 f9d1 	bl	800a174 <RCCEx_PLL2_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008dd6:	e00c      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3324      	adds	r3, #36	; 0x24
 8008ddc:	2102      	movs	r1, #2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 fa7a 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
      break;
 8008dee:	e000      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008df8:	4b93      	ldr	r3, [pc, #588]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e04:	4990      	ldr	r1, [pc, #576]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	650b      	str	r3, [r1, #80]	; 0x50
 8008e0a:	e001      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d03d      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d826      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008e24:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e4f 	.word	0x08008e4f
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e79 	.word	0x08008e79
 8008e3c:	08008e79 	.word	0x08008e79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e40:	4b81      	ldr	r3, [pc, #516]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a80      	ldr	r2, [pc, #512]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e4c:	e015      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 f98d 	bl	800a174 <RCCEx_PLL2_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e5e:	e00c      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3324      	adds	r3, #36	; 0x24
 8008e64:	2100      	movs	r1, #0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 fa36 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
      break;
 8008e76:	e000      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e80:	4b71      	ldr	r3, [pc, #452]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e84:	f023 0207 	bic.w	r2, r3, #7
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8c:	496e      	ldr	r1, [pc, #440]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	650b      	str	r3, [r1, #80]	; 0x50
 8008e92:	e001      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d042      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eac:	d02b      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb2:	d825      	bhi.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008eb4:	2bc0      	cmp	r3, #192	; 0xc0
 8008eb6:	d028      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8008eba:	d821      	bhi.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ebc:	2b80      	cmp	r3, #128	; 0x80
 8008ebe:	d016      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008ec0:	2b80      	cmp	r3, #128	; 0x80
 8008ec2:	d81d      	bhi.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	d007      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008ecc:	e018      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ece:	4b5e      	ldr	r3, [pc, #376]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	4a5d      	ldr	r2, [pc, #372]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008eda:	e017      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f946 	bl	800a174 <RCCEx_PLL2_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008eec:	e00e      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3324      	adds	r3, #36	; 0x24
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 f9ef 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008efe:	e005      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	75fb      	strb	r3, [r7, #23]
      break;
 8008f04:	e002      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008f12:	4b4d      	ldr	r3, [pc, #308]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1e:	494a      	ldr	r1, [pc, #296]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	650b      	str	r3, [r1, #80]	; 0x50
 8008f24:	e001      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d049      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f40:	d030      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f46:	d82a      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f4c:	d02c      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f52:	d824      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f58:	d018      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f5e:	d81e      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f68:	d007      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008f6a:	e018      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f6c:	4b36      	ldr	r3, [pc, #216]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	4a35      	ldr	r2, [pc, #212]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f78:	e017      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f8f7 	bl	800a174 <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f8a:	e00e      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f9a0 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f9c:	e005      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa2:	e002      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fb0:	4b25      	ldr	r3, [pc, #148]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fbe:	4922      	ldr	r1, [pc, #136]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	658b      	str	r3, [r1, #88]	; 0x58
 8008fc4:	e001      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d04b      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe0:	d030      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe6:	d82a      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fec:	d02e      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ff2:	d824      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff8:	d018      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ffe:	d81e      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009008:	d007      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800900a:	e018      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a0d      	ldr	r2, [pc, #52]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009018:	e019      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f8a7 	bl	800a174 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800902a:	e010      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3324      	adds	r3, #36	; 0x24
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f950 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800903c:	e007      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
      break;
 8009042:	e004      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009044:	bf00      	nop
 8009046:	e002      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009048:	58024400 	.word	0x58024400
      break;
 800904c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009054:	4b99      	ldr	r3, [pc, #612]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009062:	4996      	ldr	r1, [pc, #600]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009064:	4313      	orrs	r3, r2
 8009066:	658b      	str	r3, [r1, #88]	; 0x58
 8009068:	e001      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d032      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907e:	2b30      	cmp	r3, #48	; 0x30
 8009080:	d01c      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009082:	2b30      	cmp	r3, #48	; 0x30
 8009084:	d817      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009086:	2b20      	cmp	r3, #32
 8009088:	d00c      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800908a:	2b20      	cmp	r3, #32
 800908c:	d813      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d016      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009092:	2b10      	cmp	r3, #16
 8009094:	d10f      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009096:	4b89      	ldr	r3, [pc, #548]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a88      	ldr	r2, [pc, #544]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800909c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80090a2:	e00e      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3304      	adds	r3, #4
 80090a8:	2102      	movs	r1, #2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f862 	bl	800a174 <RCCEx_PLL2_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80090b4:	e005      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	e002      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80090bc:	bf00      	nop
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80090c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d109      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80090c8:	4b7c      	ldr	r3, [pc, #496]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80090ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d4:	4979      	ldr	r1, [pc, #484]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80090da:	e001      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d047      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f4:	d030      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80090f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090fa:	d82a      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80090fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009100:	d02c      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009106:	d824      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800910c:	d018      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800910e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009112:	d81e      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911c:	d007      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800911e:	e018      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009120:	4b66      	ldr	r3, [pc, #408]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	4a65      	ldr	r2, [pc, #404]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800912c:	e017      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3304      	adds	r3, #4
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f001 f81d 	bl	800a174 <RCCEx_PLL2_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800913e:	e00e      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	2100      	movs	r1, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f001 f8c6 	bl	800a2d8 <RCCEx_PLL3_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009150:	e005      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
      break;
 8009156:	e002      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009158:	bf00      	nop
 800915a:	e000      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800915c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009164:	4b55      	ldr	r3, [pc, #340]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009168:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009170:	4952      	ldr	r1, [pc, #328]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009172:	4313      	orrs	r3, r2
 8009174:	650b      	str	r3, [r1, #80]	; 0x50
 8009176:	e001      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d049      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800918c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009190:	d02e      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009196:	d828      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800919c:	d02a      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800919e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091a2:	d822      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80091a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091a8:	d026      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80091aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091ae:	d81c      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80091b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091b4:	d010      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80091b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ba:	d816      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01d      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80091c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c4:	d111      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	2101      	movs	r1, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 ffd1 	bl	800a174 <RCCEx_PLL2_Config>
 80091d2:	4603      	mov	r3, r0
 80091d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80091d6:	e012      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3324      	adds	r3, #36	; 0x24
 80091dc:	2101      	movs	r1, #1
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 f87a 	bl	800a2d8 <RCCEx_PLL3_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80091e8:	e009      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
      break;
 80091ee:	e006      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80091f0:	bf00      	nop
 80091f2:	e004      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80091f4:	bf00      	nop
 80091f6:	e002      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80091f8:	bf00      	nop
 80091fa:	e000      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80091fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009204:	4b2d      	ldr	r3, [pc, #180]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009208:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009210:	492a      	ldr	r1, [pc, #168]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009212:	4313      	orrs	r3, r2
 8009214:	650b      	str	r3, [r1, #80]	; 0x50
 8009216:	e001      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d04d      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800922e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009232:	d02e      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009238:	d828      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923e:	d02a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009244:	d822      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800924a:	d026      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800924c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009250:	d81c      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009256:	d010      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925c:	d816      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01d      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009266:	d111      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3304      	adds	r3, #4
 800926c:	2101      	movs	r1, #1
 800926e:	4618      	mov	r0, r3
 8009270:	f000 ff80 	bl	800a174 <RCCEx_PLL2_Config>
 8009274:	4603      	mov	r3, r0
 8009276:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009278:	e012      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3324      	adds	r3, #36	; 0x24
 800927e:	2101      	movs	r1, #1
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f829 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800928a:	e009      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]
      break;
 8009290:	e006      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009292:	bf00      	nop
 8009294:	e004      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009296:	bf00      	nop
 8009298:	e002      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800929a:	bf00      	nop
 800929c:	e000      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800929e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10c      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092b4:	4901      	ldr	r1, [pc, #4]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	658b      	str	r3, [r1, #88]	; 0x58
 80092ba:	e003      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80092bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d02f      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092d8:	d00e      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80092da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092de:	d814      	bhi.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d015      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80092e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092e8:	d10f      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ea:	4baf      	ldr	r3, [pc, #700]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	4aae      	ldr	r2, [pc, #696]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80092f6:	e00c      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3304      	adds	r3, #4
 80092fc:	2101      	movs	r1, #1
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 ff38 	bl	800a174 <RCCEx_PLL2_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	e000      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d109      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009318:	4ba3      	ldr	r3, [pc, #652]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009324:	49a0      	ldr	r1, [pc, #640]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009326:	4313      	orrs	r3, r2
 8009328:	650b      	str	r3, [r1, #80]	; 0x50
 800932a:	e001      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d032      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009340:	2b03      	cmp	r3, #3
 8009342:	d81b      	bhi.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	08009383 	.word	0x08009383
 8009350:	0800935d 	.word	0x0800935d
 8009354:	0800936b 	.word	0x0800936b
 8009358:	08009383 	.word	0x08009383
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935c:	4b92      	ldr	r3, [pc, #584]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a91      	ldr	r2, [pc, #580]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009368:	e00c      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3304      	adds	r3, #4
 800936e:	2102      	movs	r1, #2
 8009370:	4618      	mov	r0, r3
 8009372:	f000 feff 	bl	800a174 <RCCEx_PLL2_Config>
 8009376:	4603      	mov	r3, r0
 8009378:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800937a:	e003      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
      break;
 8009380:	e000      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800938a:	4b87      	ldr	r3, [pc, #540]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800938c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938e:	f023 0203 	bic.w	r2, r3, #3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	4984      	ldr	r1, [pc, #528]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009398:	4313      	orrs	r3, r2
 800939a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800939c:	e001      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8086 	beq.w	80094bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093b0:	4b7e      	ldr	r3, [pc, #504]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a7d      	ldr	r2, [pc, #500]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80093b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093bc:	f7fd ff9e 	bl	80072fc <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c2:	e009      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093c4:	f7fd ff9a 	bl	80072fc <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b64      	cmp	r3, #100	; 0x64
 80093d0:	d902      	bls.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	75fb      	strb	r3, [r7, #23]
        break;
 80093d6:	e005      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093d8:	4b74      	ldr	r3, [pc, #464]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ef      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d166      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093ea:	4b6f      	ldr	r3, [pc, #444]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093f4:	4053      	eors	r3, r2
 80093f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d013      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093fe:	4b6a      	ldr	r3, [pc, #424]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009406:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009408:	4b67      	ldr	r3, [pc, #412]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940c:	4a66      	ldr	r2, [pc, #408]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800940e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009412:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009414:	4b64      	ldr	r3, [pc, #400]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009418:	4a63      	ldr	r2, [pc, #396]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800941a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800941e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009420:	4a61      	ldr	r2, [pc, #388]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800942c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009430:	d115      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009432:	f7fd ff63 	bl	80072fc <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009438:	e00b      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800943a:	f7fd ff5f 	bl	80072fc <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	d902      	bls.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	75fb      	strb	r3, [r7, #23]
            break;
 8009450:	e005      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009452:	4b55      	ldr	r3, [pc, #340]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0ed      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d126      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800946a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009472:	d10d      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009474:	4b4c      	ldr	r3, [pc, #304]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009482:	0919      	lsrs	r1, r3, #4
 8009484:	4b4a      	ldr	r3, [pc, #296]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009486:	400b      	ands	r3, r1
 8009488:	4947      	ldr	r1, [pc, #284]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800948a:	4313      	orrs	r3, r2
 800948c:	610b      	str	r3, [r1, #16]
 800948e:	e005      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009490:	4b45      	ldr	r3, [pc, #276]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4a44      	ldr	r2, [pc, #272]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009496:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800949a:	6113      	str	r3, [r2, #16]
 800949c:	4b42      	ldr	r3, [pc, #264]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800949e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	493f      	ldr	r1, [pc, #252]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	670b      	str	r3, [r1, #112]	; 0x70
 80094b0:	e004      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	75bb      	strb	r3, [r7, #22]
 80094b6:	e001      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8085 	beq.w	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ce:	2b28      	cmp	r3, #40	; 0x28
 80094d0:	d866      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	080095b5 	.word	0x080095b5
 80094dc:	080095a1 	.word	0x080095a1
 80094e0:	080095a1 	.word	0x080095a1
 80094e4:	080095a1 	.word	0x080095a1
 80094e8:	080095a1 	.word	0x080095a1
 80094ec:	080095a1 	.word	0x080095a1
 80094f0:	080095a1 	.word	0x080095a1
 80094f4:	080095a1 	.word	0x080095a1
 80094f8:	0800957d 	.word	0x0800957d
 80094fc:	080095a1 	.word	0x080095a1
 8009500:	080095a1 	.word	0x080095a1
 8009504:	080095a1 	.word	0x080095a1
 8009508:	080095a1 	.word	0x080095a1
 800950c:	080095a1 	.word	0x080095a1
 8009510:	080095a1 	.word	0x080095a1
 8009514:	080095a1 	.word	0x080095a1
 8009518:	0800958f 	.word	0x0800958f
 800951c:	080095a1 	.word	0x080095a1
 8009520:	080095a1 	.word	0x080095a1
 8009524:	080095a1 	.word	0x080095a1
 8009528:	080095a1 	.word	0x080095a1
 800952c:	080095a1 	.word	0x080095a1
 8009530:	080095a1 	.word	0x080095a1
 8009534:	080095a1 	.word	0x080095a1
 8009538:	080095b5 	.word	0x080095b5
 800953c:	080095a1 	.word	0x080095a1
 8009540:	080095a1 	.word	0x080095a1
 8009544:	080095a1 	.word	0x080095a1
 8009548:	080095a1 	.word	0x080095a1
 800954c:	080095a1 	.word	0x080095a1
 8009550:	080095a1 	.word	0x080095a1
 8009554:	080095a1 	.word	0x080095a1
 8009558:	080095b5 	.word	0x080095b5
 800955c:	080095a1 	.word	0x080095a1
 8009560:	080095a1 	.word	0x080095a1
 8009564:	080095a1 	.word	0x080095a1
 8009568:	080095a1 	.word	0x080095a1
 800956c:	080095a1 	.word	0x080095a1
 8009570:	080095a1 	.word	0x080095a1
 8009574:	080095a1 	.word	0x080095a1
 8009578:	080095b5 	.word	0x080095b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	2101      	movs	r1, #1
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fdf6 	bl	800a174 <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800958c:	e013      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3324      	adds	r3, #36	; 0x24
 8009592:	2101      	movs	r1, #1
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fe9f 	bl	800a2d8 <RCCEx_PLL3_Config>
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800959e:	e00a      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	75fb      	strb	r3, [r7, #23]
      break;
 80095a4:	e007      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80095a6:	bf00      	nop
 80095a8:	58024400 	.word	0x58024400
 80095ac:	58024800 	.word	0x58024800
 80095b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80095b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d109      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095bc:	4b96      	ldr	r3, [pc, #600]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80095be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095c8:	4993      	ldr	r1, [pc, #588]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	654b      	str	r3, [r1, #84]	; 0x54
 80095ce:	e001      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d038      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e4:	2b05      	cmp	r3, #5
 80095e6:	d821      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009633 	.word	0x08009633
 80095f4:	08009609 	.word	0x08009609
 80095f8:	0800961b 	.word	0x0800961b
 80095fc:	08009633 	.word	0x08009633
 8009600:	08009633 	.word	0x08009633
 8009604:	08009633 	.word	0x08009633
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3304      	adds	r3, #4
 800960c:	2101      	movs	r1, #1
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fdb0 	bl	800a174 <RCCEx_PLL2_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009618:	e00c      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3324      	adds	r3, #36	; 0x24
 800961e:	2101      	movs	r1, #1
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fe59 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800962a:	e003      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
      break;
 8009630:	e000      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800963a:	4b77      	ldr	r3, [pc, #476]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	f023 0207 	bic.w	r2, r3, #7
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009646:	4974      	ldr	r1, [pc, #464]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009648:	4313      	orrs	r3, r2
 800964a:	654b      	str	r3, [r1, #84]	; 0x54
 800964c:	e001      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d03a      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009664:	2b05      	cmp	r3, #5
 8009666:	d821      	bhi.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009668:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	080096b3 	.word	0x080096b3
 8009674:	08009689 	.word	0x08009689
 8009678:	0800969b 	.word	0x0800969b
 800967c:	080096b3 	.word	0x080096b3
 8009680:	080096b3 	.word	0x080096b3
 8009684:	080096b3 	.word	0x080096b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fd70 	bl	800a174 <RCCEx_PLL2_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009698:	e00c      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3324      	adds	r3, #36	; 0x24
 800969e:	2101      	movs	r1, #1
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fe19 	bl	800a2d8 <RCCEx_PLL3_Config>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80096aa:	e003      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	75fb      	strb	r3, [r7, #23]
      break;
 80096b0:	e000      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80096b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096ba:	4b57      	ldr	r3, [pc, #348]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096be:	f023 0207 	bic.w	r2, r3, #7
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c8:	4953      	ldr	r1, [pc, #332]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	658b      	str	r3, [r1, #88]	; 0x58
 80096ce:	e001      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d04b      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ea:	d02e      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80096ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096f0:	d828      	bhi.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80096f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f6:	d02a      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80096f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fc:	d822      	bhi.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80096fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009702:	d026      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009708:	d81c      	bhi.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800970a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970e:	d010      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009714:	d816      	bhi.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01d      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800971a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800971e:	d111      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3304      	adds	r3, #4
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fd24 	bl	800a174 <RCCEx_PLL2_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009730:	e012      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3324      	adds	r3, #36	; 0x24
 8009736:	2102      	movs	r1, #2
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fdcd 	bl	800a2d8 <RCCEx_PLL3_Config>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009742:	e009      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
      break;
 8009748:	e006      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800974a:	bf00      	nop
 800974c:	e004      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800974e:	bf00      	nop
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800976c:	492a      	ldr	r1, [pc, #168]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800976e:	4313      	orrs	r3, r2
 8009770:	654b      	str	r3, [r1, #84]	; 0x54
 8009772:	e001      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	d04d      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800978a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800978e:	d02e      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009790:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009794:	d828      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979a:	d02a      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800979c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a0:	d822      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80097a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097a6:	d026      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80097a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097ac:	d81c      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80097ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b2:	d010      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80097b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b8:	d816      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01d      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80097be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c2:	d111      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fcd2 	bl	800a174 <RCCEx_PLL2_Config>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80097d4:	e012      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3324      	adds	r3, #36	; 0x24
 80097da:	2102      	movs	r1, #2
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fd7b 	bl	800a2d8 <RCCEx_PLL3_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80097e6:	e009      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
      break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80097fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10c      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009810:	4901      	ldr	r1, [pc, #4]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009812:	4313      	orrs	r3, r2
 8009814:	658b      	str	r3, [r1, #88]	; 0x58
 8009816:	e003      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009828:	2b00      	cmp	r3, #0
 800982a:	d04b      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009832:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009836:	d02e      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009838:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800983c:	d828      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800983e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009842:	d02a      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009848:	d822      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800984a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800984e:	d026      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009850:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009854:	d81c      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800985a:	d010      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800985c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009860:	d816      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01d      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800986a:	d111      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3304      	adds	r3, #4
 8009870:	2100      	movs	r1, #0
 8009872:	4618      	mov	r0, r3
 8009874:	f000 fc7e 	bl	800a174 <RCCEx_PLL2_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800987c:	e012      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3324      	adds	r3, #36	; 0x24
 8009882:	2102      	movs	r1, #2
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fd27 	bl	800a2d8 <RCCEx_PLL3_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800988e:	e009      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
      break;
 8009894:	e006      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009896:	bf00      	nop
 8009898:	e004      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800989a:	bf00      	nop
 800989c:	e002      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800989e:	bf00      	nop
 80098a0:	e000      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80098a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098aa:	4b9d      	ldr	r3, [pc, #628]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098b8:	4999      	ldr	r1, [pc, #612]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	658b      	str	r3, [r1, #88]	; 0x58
 80098be:	e001      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01a      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098da:	d10a      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3324      	adds	r3, #36	; 0x24
 80098e0:	2102      	movs	r1, #2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fcf8 	bl	800a2d8 <RCCEx_PLL3_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098f2:	4b8b      	ldr	r3, [pc, #556]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009900:	4987      	ldr	r1, [pc, #540]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009902:	4313      	orrs	r3, r2
 8009904:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0310 	and.w	r3, r3, #16
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01a      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800991c:	d10a      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3324      	adds	r3, #36	; 0x24
 8009922:	2102      	movs	r1, #2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fcd7 	bl	800a2d8 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009934:	4b7a      	ldr	r3, [pc, #488]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009942:	4977      	ldr	r1, [pc, #476]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009944:	4313      	orrs	r3, r2
 8009946:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d034      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800995a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800995e:	d01d      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009964:	d817      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800996a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996e:	d009      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009970:	e011      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3304      	adds	r3, #4
 8009976:	2100      	movs	r1, #0
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fbfb 	bl	800a174 <RCCEx_PLL2_Config>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009982:	e00c      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3324      	adds	r3, #36	; 0x24
 8009988:	2102      	movs	r1, #2
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fca4 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009994:	e003      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	75fb      	strb	r3, [r7, #23]
      break;
 800999a:	e000      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800999c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099a4:	4b5e      	ldr	r3, [pc, #376]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099b2:	495b      	ldr	r1, [pc, #364]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	658b      	str	r3, [r1, #88]	; 0x58
 80099b8:	e001      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d033      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80099d4:	d01c      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80099d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80099da:	d816      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80099dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099e0:	d003      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80099e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099e6:	d007      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80099e8:	e00f      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ea:	4b4d      	ldr	r3, [pc, #308]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4a4c      	ldr	r2, [pc, #304]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80099f6:	e00c      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3324      	adds	r3, #36	; 0x24
 80099fc:	2101      	movs	r1, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 fc6a 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10a      	bne.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a26:	493e      	ldr	r1, [pc, #248]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a2c:	e001      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d029      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4a:	d007      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009a4c:	e00f      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4e:	4b34      	ldr	r3, [pc, #208]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	4a33      	ldr	r2, [pc, #204]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009a5a:	e00b      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	2102      	movs	r1, #2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fb86 	bl	800a174 <RCCEx_PLL2_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009a6c:	e002      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	75fb      	strb	r3, [r7, #23]
      break;
 8009a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a7a:	4b29      	ldr	r3, [pc, #164]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	4926      	ldr	r1, [pc, #152]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a8c:	e001      	b.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3324      	adds	r3, #36	; 0x24
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fc17 	bl	800a2d8 <RCCEx_PLL3_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d033      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ac8:	d017      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ace:	d811      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad4:	d013      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ada:	d80b      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d010      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae4:	d106      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009af2:	e007      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	e004      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10c      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b16:	4902      	ldr	r1, [pc, #8]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b1c:	e004      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d008      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b34:	4b21      	ldr	r3, [pc, #132]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b40:	491e      	ldr	r1, [pc, #120]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d008      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b52:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5e:	4917      	ldr	r1, [pc, #92]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00d      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xe18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b70:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4a11      	ldr	r2, [pc, #68]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b7a:	6113      	str	r3, [r2, #16]
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b86:	490d      	ldr	r1, [pc, #52]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da08      	bge.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xe32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b94:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba0:	4906      	ldr	r1, [pc, #24]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
  {
    return HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e000      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xe3e>
  }
  return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	58024400 	.word	0x58024400

08009bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009bc4:	f7ff f88e 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	091b      	lsrs	r3, r3, #4
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	4904      	ldr	r1, [pc, #16]	; (8009be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bd6:	5ccb      	ldrb	r3, [r1, r3]
 8009bd8:	f003 031f 	and.w	r3, r3, #31
 8009bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	58024400 	.word	0x58024400
 8009be8:	08012bb0 	.word	0x08012bb0

08009bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b089      	sub	sp, #36	; 0x24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bf4:	4ba1      	ldr	r3, [pc, #644]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009bfe:	4b9f      	ldr	r3, [pc, #636]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c02:	0b1b      	lsrs	r3, r3, #12
 8009c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c0a:	4b9c      	ldr	r3, [pc, #624]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	091b      	lsrs	r3, r3, #4
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c16:	4b99      	ldr	r3, [pc, #612]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1a:	08db      	lsrs	r3, r3, #3
 8009c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8111 	beq.w	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	f000 8083 	beq.w	8009d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	f200 80a1 	bhi.w	8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d056      	beq.n	8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c56:	e099      	b.n	8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c58:	4b88      	ldr	r3, [pc, #544]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0320 	and.w	r3, r3, #32
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d02d      	beq.n	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c64:	4b85      	ldr	r3, [pc, #532]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	08db      	lsrs	r3, r3, #3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	4a84      	ldr	r2, [pc, #528]	; (8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c70:	fa22 f303 	lsr.w	r3, r2, r3
 8009c74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8e:	4b7b      	ldr	r3, [pc, #492]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cbe:	e087      	b.n	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd2:	4b6a      	ldr	r3, [pc, #424]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ce6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d02:	e065      	b.n	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d16:	4b59      	ldr	r3, [pc, #356]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d46:	e043      	b.n	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5a:	4b48      	ldr	r3, [pc, #288]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d8a:	e021      	b.n	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9e:	4b37      	ldr	r3, [pc, #220]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009dd0:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	0a5b      	lsrs	r3, r3, #9
 8009dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df6:	ee17 2a90 	vmov	r2, s15
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009dfe:	4b1f      	ldr	r3, [pc, #124]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	0c1b      	lsrs	r3, r3, #16
 8009e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e24:	ee17 2a90 	vmov	r2, s15
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009e2c:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	0e1b      	lsrs	r3, r3, #24
 8009e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e52:	ee17 2a90 	vmov	r2, s15
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e5a:	e008      	b.n	8009e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
}
 8009e6e:	bf00      	nop
 8009e70:	3724      	adds	r7, #36	; 0x24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	58024400 	.word	0x58024400
 8009e80:	03d09000 	.word	0x03d09000
 8009e84:	46000000 	.word	0x46000000
 8009e88:	4c742400 	.word	0x4c742400
 8009e8c:	4a742400 	.word	0x4a742400
 8009e90:	4bbebc20 	.word	0x4bbebc20

08009e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b089      	sub	sp, #36	; 0x24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e9c:	4ba1      	ldr	r3, [pc, #644]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	f003 0303 	and.w	r3, r3, #3
 8009ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ea6:	4b9f      	ldr	r3, [pc, #636]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eaa:	0d1b      	lsrs	r3, r3, #20
 8009eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009eb2:	4b9c      	ldr	r3, [pc, #624]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ebe:	4b99      	ldr	r3, [pc, #612]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec2:	08db      	lsrs	r3, r3, #3
 8009ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 8111 	beq.w	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	f000 8083 	beq.w	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	f200 80a1 	bhi.w	800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d056      	beq.n	8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009efe:	e099      	b.n	800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f00:	4b88      	ldr	r3, [pc, #544]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d02d      	beq.n	8009f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f0c:	4b85      	ldr	r3, [pc, #532]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	08db      	lsrs	r3, r3, #3
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	4a84      	ldr	r2, [pc, #528]	; (800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f18:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f36:	4b7b      	ldr	r3, [pc, #492]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f66:	e087      	b.n	800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7a:	4b6a      	ldr	r3, [pc, #424]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009faa:	e065      	b.n	800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b59      	ldr	r3, [pc, #356]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fee:	e043      	b.n	800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b48      	ldr	r3, [pc, #288]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a03 	vldr	s12, [r7, #12]
 800a016:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a032:	e021      	b.n	800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b37      	ldr	r3, [pc, #220]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a03 	vldr	s12, [r7, #12]
 800a05a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a078:	4b2a      	ldr	r3, [pc, #168]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07c:	0a5b      	lsrs	r3, r3, #9
 800a07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a08e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a092:	edd7 6a07 	vldr	s13, [r7, #28]
 800a096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a09e:	ee17 2a90 	vmov	r2, s15
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a0a6:	4b1f      	ldr	r3, [pc, #124]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	0c1b      	lsrs	r3, r3, #16
 800a0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0cc:	ee17 2a90 	vmov	r2, s15
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a0d4:	4b13      	ldr	r3, [pc, #76]	; (800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d8:	0e1b      	lsrs	r3, r3, #24
 800a0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fa:	ee17 2a90 	vmov	r2, s15
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a102:	e008      	b.n	800a116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	609a      	str	r2, [r3, #8]
}
 800a116:	bf00      	nop
 800a118:	3724      	adds	r7, #36	; 0x24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
 800a128:	03d09000 	.word	0x03d09000
 800a12c:	46000000 	.word	0x46000000
 800a130:	4c742400 	.word	0x4c742400
 800a134:	4a742400 	.word	0x4a742400
 800a138:	4bbebc20 	.word	0x4bbebc20

0800a13c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a140:	f7fe fc56 	bl	80089f0 <HAL_RCC_GetSysClockFreq>
 800a144:	4602      	mov	r2, r0
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	4906      	ldr	r1, [pc, #24]	; (800a16c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800a152:	5ccb      	ldrb	r3, [r1, r3]
 800a154:	f003 031f 	and.w	r3, r3, #31
 800a158:	fa22 f303 	lsr.w	r3, r2, r3
 800a15c:	4a04      	ldr	r2, [pc, #16]	; (800a170 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800a15e:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 800a160:	4b03      	ldr	r3, [pc, #12]	; (800a170 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800a162:	681b      	ldr	r3, [r3, #0]
}
 800a164:	4618      	mov	r0, r3
 800a166:	bd80      	pop	{r7, pc}
 800a168:	58024400 	.word	0x58024400
 800a16c:	08012bb0 	.word	0x08012bb0
 800a170:	24000028 	.word	0x24000028

0800a174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a182:	4b53      	ldr	r3, [pc, #332]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d101      	bne.n	800a192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e099      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a192:	4b4f      	ldr	r3, [pc, #316]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a4e      	ldr	r2, [pc, #312]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a198:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19e:	f7fd f8ad 	bl	80072fc <HAL_GetTick>
 800a1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1a4:	e008      	b.n	800a1b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1a6:	f7fd f8a9 	bl	80072fc <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e086      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1b8:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f0      	bne.n	800a1a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1c4:	4b42      	ldr	r3, [pc, #264]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	031b      	lsls	r3, r3, #12
 800a1d2:	493f      	ldr	r1, [pc, #252]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	025b      	lsls	r3, r3, #9
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	3b01      	subs	r3, #1
 800a202:	061b      	lsls	r3, r3, #24
 800a204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a208:	4931      	ldr	r1, [pc, #196]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a20e:	4b30      	ldr	r3, [pc, #192]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	492d      	ldr	r1, [pc, #180]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a220:	4b2b      	ldr	r3, [pc, #172]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	f023 0220 	bic.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	4928      	ldr	r1, [pc, #160]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a232:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	4a26      	ldr	r2, [pc, #152]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a242:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <RCCEx_PLL2_Config+0x160>)
 800a244:	4013      	ands	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	69d2      	ldr	r2, [r2, #28]
 800a24a:	00d2      	lsls	r2, r2, #3
 800a24c:	4920      	ldr	r1, [pc, #128]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a252:	4b1f      	ldr	r3, [pc, #124]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a1e      	ldr	r2, [pc, #120]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a258:	f043 0310 	orr.w	r3, r3, #16
 800a25c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a264:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	4a19      	ldr	r2, [pc, #100]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a26a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a26e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a270:	e00f      	b.n	800a292 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d106      	bne.n	800a286 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	4a14      	ldr	r2, [pc, #80]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a282:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a284:	e005      	b.n	800a292 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a286:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	4a11      	ldr	r2, [pc, #68]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a292:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a0e      	ldr	r2, [pc, #56]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a29c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a29e:	f7fd f82d 	bl	80072fc <HAL_GetTick>
 800a2a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2a4:	e008      	b.n	800a2b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2a6:	f7fd f829 	bl	80072fc <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d901      	bls.n	800a2b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e006      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0f0      	beq.n	800a2a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	ffff0007 	.word	0xffff0007

0800a2d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2e6:	4b53      	ldr	r3, [pc, #332]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d101      	bne.n	800a2f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e099      	b.n	800a42a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2f6:	4b4f      	ldr	r3, [pc, #316]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a4e      	ldr	r2, [pc, #312]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a302:	f7fc fffb 	bl	80072fc <HAL_GetTick>
 800a306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a308:	e008      	b.n	800a31c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a30a:	f7fc fff7 	bl	80072fc <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	d901      	bls.n	800a31c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e086      	b.n	800a42a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a31c:	4b45      	ldr	r3, [pc, #276]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1f0      	bne.n	800a30a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a328:	4b42      	ldr	r3, [pc, #264]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	051b      	lsls	r3, r3, #20
 800a336:	493f      	ldr	r1, [pc, #252]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	628b      	str	r3, [r1, #40]	; 0x28
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	3b01      	subs	r3, #1
 800a342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	025b      	lsls	r3, r3, #9
 800a34e:	b29b      	uxth	r3, r3
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a36c:	4931      	ldr	r1, [pc, #196]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a372:	4b30      	ldr	r3, [pc, #192]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	492d      	ldr	r1, [pc, #180]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a380:	4313      	orrs	r3, r2
 800a382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a384:	4b2b      	ldr	r3, [pc, #172]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	4928      	ldr	r1, [pc, #160]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a396:	4b27      	ldr	r3, [pc, #156]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a26      	ldr	r2, [pc, #152]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a39c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3a2:	4b24      	ldr	r3, [pc, #144]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3a6:	4b24      	ldr	r3, [pc, #144]	; (800a438 <RCCEx_PLL3_Config+0x160>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	69d2      	ldr	r2, [r2, #28]
 800a3ae:	00d2      	lsls	r2, r2, #3
 800a3b0:	4920      	ldr	r1, [pc, #128]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	4a1e      	ldr	r2, [pc, #120]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3c8:	4b1a      	ldr	r3, [pc, #104]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	4a19      	ldr	r2, [pc, #100]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3d4:	e00f      	b.n	800a3f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d106      	bne.n	800a3ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3dc:	4b15      	ldr	r3, [pc, #84]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	4a14      	ldr	r2, [pc, #80]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3e8:	e005      	b.n	800a3f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3ea:	4b12      	ldr	r3, [pc, #72]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	4a11      	ldr	r2, [pc, #68]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a0e      	ldr	r2, [pc, #56]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a402:	f7fc ff7b 	bl	80072fc <HAL_GetTick>
 800a406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a408:	e008      	b.n	800a41c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a40a:	f7fc ff77 	bl	80072fc <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e006      	b.n	800a42a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0f0      	beq.n	800a40a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
 800a438:	ffff0007 	.word	0xffff0007

0800a43c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e01d      	b.n	800a48a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7f9 f962 	bl	800372c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3304      	adds	r3, #4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f000 feaa 	bl	800b1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <HAL_TIM_Base_Start+0x50>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b06      	cmp	r3, #6
 800a4b4:	d00b      	beq.n	800a4ce <HAL_TIM_Base_Start+0x3a>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4bc:	d007      	beq.n	800a4ce <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f042 0201 	orr.w	r2, r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	00010007 	.word	0x00010007

0800a4e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800a502:	4013      	ands	r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10f      	bne.n	800a528 <HAL_TIM_Base_Stop+0x40>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6a1a      	ldr	r2, [r3, #32]
 800a50e:	f240 4344 	movw	r3, #1092	; 0x444
 800a512:	4013      	ands	r3, r2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d107      	bne.n	800a528 <HAL_TIM_Base_Stop+0x40>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0201 	bic.w	r2, r2, #1
 800a526:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f042 0201 	orr.w	r2, r2, #1
 800a556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <HAL_TIM_Base_Start_IT+0x50>)
 800a560:	4013      	ands	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b06      	cmp	r3, #6
 800a568:	d00b      	beq.n	800a582 <HAL_TIM_Base_Start_IT+0x42>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a570:	d007      	beq.n	800a582 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f042 0201 	orr.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	00010007 	.word	0x00010007

0800a594 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0201 	bic.w	r2, r2, #1
 800a5aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a1a      	ldr	r2, [r3, #32]
 800a5b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10f      	bne.n	800a5dc <HAL_TIM_Base_Stop_IT+0x48>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6a1a      	ldr	r2, [r3, #32]
 800a5c2:	f240 4344 	movw	r3, #1092	; 0x444
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <HAL_TIM_Base_Stop_IT+0x48>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0201 	bic.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e01d      	b.n	800a638 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f815 	bl	800a640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2202      	movs	r2, #2
 800a61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f000 fdd3 	bl	800b1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2201      	movs	r2, #1
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fae4 	bl	800bc34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1e      	ldr	r2, [pc, #120]	; (800a6ec <HAL_TIM_PWM_Start+0x98>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d013      	beq.n	800a69e <HAL_TIM_PWM_Start+0x4a>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1d      	ldr	r2, [pc, #116]	; (800a6f0 <HAL_TIM_PWM_Start+0x9c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00e      	beq.n	800a69e <HAL_TIM_PWM_Start+0x4a>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1b      	ldr	r2, [pc, #108]	; (800a6f4 <HAL_TIM_PWM_Start+0xa0>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d009      	beq.n	800a69e <HAL_TIM_PWM_Start+0x4a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1a      	ldr	r2, [pc, #104]	; (800a6f8 <HAL_TIM_PWM_Start+0xa4>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d004      	beq.n	800a69e <HAL_TIM_PWM_Start+0x4a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a18      	ldr	r2, [pc, #96]	; (800a6fc <HAL_TIM_PWM_Start+0xa8>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d101      	bne.n	800a6a2 <HAL_TIM_PWM_Start+0x4e>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e000      	b.n	800a6a4 <HAL_TIM_PWM_Start+0x50>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <HAL_TIM_PWM_Start+0xac>)
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d00b      	beq.n	800a6e2 <HAL_TIM_PWM_Start+0x8e>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d0:	d007      	beq.n	800a6e2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0201 	orr.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40010000 	.word	0x40010000
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40014400 	.word	0x40014400
 800a6fc:	40014800 	.word	0x40014800
 800a700:	00010007 	.word	0x00010007

0800a704 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2200      	movs	r2, #0
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fa8c 	bl	800bc34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a2a      	ldr	r2, [pc, #168]	; (800a7cc <HAL_TIM_PWM_Stop+0xc8>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d013      	beq.n	800a74e <HAL_TIM_PWM_Stop+0x4a>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a29      	ldr	r2, [pc, #164]	; (800a7d0 <HAL_TIM_PWM_Stop+0xcc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00e      	beq.n	800a74e <HAL_TIM_PWM_Stop+0x4a>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a27      	ldr	r2, [pc, #156]	; (800a7d4 <HAL_TIM_PWM_Stop+0xd0>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d009      	beq.n	800a74e <HAL_TIM_PWM_Stop+0x4a>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a26      	ldr	r2, [pc, #152]	; (800a7d8 <HAL_TIM_PWM_Stop+0xd4>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d004      	beq.n	800a74e <HAL_TIM_PWM_Stop+0x4a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a24      	ldr	r2, [pc, #144]	; (800a7dc <HAL_TIM_PWM_Stop+0xd8>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d101      	bne.n	800a752 <HAL_TIM_PWM_Stop+0x4e>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <HAL_TIM_PWM_Stop+0x50>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d017      	beq.n	800a788 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6a1a      	ldr	r2, [r3, #32]
 800a75e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a762:	4013      	ands	r3, r2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10f      	bne.n	800a788 <HAL_TIM_PWM_Stop+0x84>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	f240 4344 	movw	r3, #1092	; 0x444
 800a772:	4013      	ands	r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d107      	bne.n	800a788 <HAL_TIM_PWM_Stop+0x84>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a786:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6a1a      	ldr	r2, [r3, #32]
 800a78e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a792:	4013      	ands	r3, r2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10f      	bne.n	800a7b8 <HAL_TIM_PWM_Stop+0xb4>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	f240 4344 	movw	r3, #1092	; 0x444
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d107      	bne.n	800a7b8 <HAL_TIM_PWM_Stop+0xb4>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	40010000 	.word	0x40010000
 800a7d0:	40010400 	.word	0x40010400
 800a7d4:	40014000 	.word	0x40014000
 800a7d8:	40014400 	.word	0x40014400
 800a7dc:	40014800 	.word	0x40014800

0800a7e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e01d      	b.n	800a82e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f815 	bl	800a836 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f000 fcd8 	bl	800b1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
	...

0800a84c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b0c      	cmp	r3, #12
 800a85a:	d841      	bhi.n	800a8e0 <HAL_TIM_IC_Start_IT+0x94>
 800a85c:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <HAL_TIM_IC_Start_IT+0x18>)
 800a85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a862:	bf00      	nop
 800a864:	0800a899 	.word	0x0800a899
 800a868:	0800a8e1 	.word	0x0800a8e1
 800a86c:	0800a8e1 	.word	0x0800a8e1
 800a870:	0800a8e1 	.word	0x0800a8e1
 800a874:	0800a8ab 	.word	0x0800a8ab
 800a878:	0800a8e1 	.word	0x0800a8e1
 800a87c:	0800a8e1 	.word	0x0800a8e1
 800a880:	0800a8e1 	.word	0x0800a8e1
 800a884:	0800a8bd 	.word	0x0800a8bd
 800a888:	0800a8e1 	.word	0x0800a8e1
 800a88c:	0800a8e1 	.word	0x0800a8e1
 800a890:	0800a8e1 	.word	0x0800a8e1
 800a894:	0800a8cf 	.word	0x0800a8cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0202 	orr.w	r2, r2, #2
 800a8a6:	60da      	str	r2, [r3, #12]
      break;
 800a8a8:	e01b      	b.n	800a8e2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f042 0204 	orr.w	r2, r2, #4
 800a8b8:	60da      	str	r2, [r3, #12]
      break;
 800a8ba:	e012      	b.n	800a8e2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0208 	orr.w	r2, r2, #8
 800a8ca:	60da      	str	r2, [r3, #12]
      break;
 800a8cc:	e009      	b.n	800a8e2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68da      	ldr	r2, [r3, #12]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0210 	orr.w	r2, r2, #16
 800a8dc:	60da      	str	r2, [r3, #12]
      break;
 800a8de:	e000      	b.n	800a8e2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800a8e0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 f9a2 	bl	800bc34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	; (800a924 <HAL_TIM_IC_Start_IT+0xd8>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b06      	cmp	r3, #6
 800a900:	d00b      	beq.n	800a91a <HAL_TIM_IC_Start_IT+0xce>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a908:	d007      	beq.n	800a91a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f042 0201 	orr.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	00010007 	.word	0x00010007

0800a928 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b0c      	cmp	r3, #12
 800a936:	d841      	bhi.n	800a9bc <HAL_TIM_IC_Stop_IT+0x94>
 800a938:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <HAL_TIM_IC_Stop_IT+0x18>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a975 	.word	0x0800a975
 800a944:	0800a9bd 	.word	0x0800a9bd
 800a948:	0800a9bd 	.word	0x0800a9bd
 800a94c:	0800a9bd 	.word	0x0800a9bd
 800a950:	0800a987 	.word	0x0800a987
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a9bd 	.word	0x0800a9bd
 800a95c:	0800a9bd 	.word	0x0800a9bd
 800a960:	0800a999 	.word	0x0800a999
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a9ab 	.word	0x0800a9ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0202 	bic.w	r2, r2, #2
 800a982:	60da      	str	r2, [r3, #12]
      break;
 800a984:	e01b      	b.n	800a9be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68da      	ldr	r2, [r3, #12]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0204 	bic.w	r2, r2, #4
 800a994:	60da      	str	r2, [r3, #12]
      break;
 800a996:	e012      	b.n	800a9be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0208 	bic.w	r2, r2, #8
 800a9a6:	60da      	str	r2, [r3, #12]
      break;
 800a9a8:	e009      	b.n	800a9be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68da      	ldr	r2, [r3, #12]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0210 	bic.w	r2, r2, #16
 800a9b8:	60da      	str	r2, [r3, #12]
      break;
 800a9ba:	e000      	b.n	800a9be <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800a9bc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 f934 	bl	800bc34 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6a1a      	ldr	r2, [r3, #32]
 800a9d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10f      	bne.n	800a9fc <HAL_TIM_IC_Stop_IT+0xd4>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a1a      	ldr	r2, [r3, #32]
 800a9e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <HAL_TIM_IC_Stop_IT+0xd4>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 0201 	bic.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop

0800aa08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d122      	bne.n	800aa64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d11b      	bne.n	800aa64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f06f 0202 	mvn.w	r2, #2
 800aa34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f7 fb3e 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 800aa50:	e005      	b.n	800aa5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fba0 	bl	800b198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fba7 	bl	800b1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d122      	bne.n	800aab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	f003 0304 	and.w	r3, r3, #4
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d11b      	bne.n	800aab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f06f 0204 	mvn.w	r2, #4
 800aa88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7f7 fb14 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 800aaa4:	e005      	b.n	800aab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fb76 	bl	800b198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fb7d 	bl	800b1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f003 0308 	and.w	r3, r3, #8
 800aac2:	2b08      	cmp	r3, #8
 800aac4:	d122      	bne.n	800ab0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d11b      	bne.n	800ab0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f06f 0208 	mvn.w	r2, #8
 800aadc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2204      	movs	r2, #4
 800aae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7f7 faea 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 800aaf8:	e005      	b.n	800ab06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb4c 	bl	800b198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fb53 	bl	800b1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	f003 0310 	and.w	r3, r3, #16
 800ab16:	2b10      	cmp	r3, #16
 800ab18:	d122      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f003 0310 	and.w	r3, r3, #16
 800ab24:	2b10      	cmp	r3, #16
 800ab26:	d11b      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f06f 0210 	mvn.w	r2, #16
 800ab30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2208      	movs	r2, #8
 800ab36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7f7 fac0 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 800ab4c:	e005      	b.n	800ab5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fb22 	bl	800b198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fb29 	bl	800b1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d10e      	bne.n	800ab8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d107      	bne.n	800ab8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f06f 0201 	mvn.w	r2, #1
 800ab84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7f7 fb1a 	bl	80021c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d10e      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba4:	2b80      	cmp	r3, #128	; 0x80
 800aba6:	d107      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 f8f6 	bl	800bda4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc6:	d10e      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d107      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f001 f8e9 	bl	800bdb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b40      	cmp	r3, #64	; 0x40
 800abf2:	d10e      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfe:	2b40      	cmp	r3, #64	; 0x40
 800ac00:	d107      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fad7 	bl	800b1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d10e      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b20      	cmp	r3, #32
 800ac2c:	d107      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f06f 0220 	mvn.w	r2, #32
 800ac36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 f8a9 	bl	800bd90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_TIM_IC_ConfigChannel+0x1a>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e08a      	b.n	800ad76 <HAL_TIM_IC_ConfigChannel+0x130>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d11b      	bne.n	800acae <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	6819      	ldr	r1, [r3, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f000 fe0d 	bl	800b8a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 020c 	bic.w	r2, r2, #12
 800ac98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6999      	ldr	r1, [r3, #24]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	619a      	str	r2, [r3, #24]
 800acac:	e05a      	b.n	800ad64 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d11c      	bne.n	800acee <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6818      	ldr	r0, [r3, #0]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f000 fe91 	bl	800b9ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	699a      	ldr	r2, [r3, #24]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800acd6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6999      	ldr	r1, [r3, #24]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	021a      	lsls	r2, r3, #8
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	619a      	str	r2, [r3, #24]
 800acec:	e03a      	b.n	800ad64 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d11b      	bne.n	800ad2c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f000 fede 	bl	800bac4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	69da      	ldr	r2, [r3, #28]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 020c 	bic.w	r2, r2, #12
 800ad16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69d9      	ldr	r1, [r3, #28]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	61da      	str	r2, [r3, #28]
 800ad2a:	e01b      	b.n	800ad64 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6819      	ldr	r1, [r3, #0]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f000 fefe 	bl	800bb3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69da      	ldr	r2, [r3, #28]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ad4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	69d9      	ldr	r1, [r3, #28]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	021a      	lsls	r2, r3, #8
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e105      	b.n	800afa6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b14      	cmp	r3, #20
 800adae:	f200 80f0 	bhi.w	800af92 <HAL_TIM_PWM_ConfigChannel+0x212>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800af93 	.word	0x0800af93
 800adc0:	0800af93 	.word	0x0800af93
 800adc4:	0800af93 	.word	0x0800af93
 800adc8:	0800ae4d 	.word	0x0800ae4d
 800adcc:	0800af93 	.word	0x0800af93
 800add0:	0800af93 	.word	0x0800af93
 800add4:	0800af93 	.word	0x0800af93
 800add8:	0800ae8f 	.word	0x0800ae8f
 800addc:	0800af93 	.word	0x0800af93
 800ade0:	0800af93 	.word	0x0800af93
 800ade4:	0800af93 	.word	0x0800af93
 800ade8:	0800aecf 	.word	0x0800aecf
 800adec:	0800af93 	.word	0x0800af93
 800adf0:	0800af93 	.word	0x0800af93
 800adf4:	0800af93 	.word	0x0800af93
 800adf8:	0800af11 	.word	0x0800af11
 800adfc:	0800af93 	.word	0x0800af93
 800ae00:	0800af93 	.word	0x0800af93
 800ae04:	0800af93 	.word	0x0800af93
 800ae08:	0800af51 	.word	0x0800af51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fa78 	bl	800b308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f042 0208 	orr.w	r2, r2, #8
 800ae26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f022 0204 	bic.w	r2, r2, #4
 800ae36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6999      	ldr	r1, [r3, #24]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	691a      	ldr	r2, [r3, #16]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	619a      	str	r2, [r3, #24]
      break;
 800ae4a:	e0a3      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fae8 	bl	800b428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	699a      	ldr	r2, [r3, #24]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	699a      	ldr	r2, [r3, #24]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6999      	ldr	r1, [r3, #24]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	021a      	lsls	r2, r3, #8
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	619a      	str	r2, [r3, #24]
      break;
 800ae8c:	e082      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fb51 	bl	800b53c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f042 0208 	orr.w	r2, r2, #8
 800aea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0204 	bic.w	r2, r2, #4
 800aeb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69d9      	ldr	r1, [r3, #28]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	430a      	orrs	r2, r1
 800aeca:	61da      	str	r2, [r3, #28]
      break;
 800aecc:	e062      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fbb7 	bl	800b648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69da      	ldr	r2, [r3, #28]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69da      	ldr	r2, [r3, #28]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69d9      	ldr	r1, [r3, #28]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	021a      	lsls	r2, r3, #8
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	61da      	str	r2, [r3, #28]
      break;
 800af0e:	e041      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 fbfe 	bl	800b718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0208 	orr.w	r2, r2, #8
 800af2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0204 	bic.w	r2, r2, #4
 800af3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af4e:	e021      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fc40 	bl	800b7dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	021a      	lsls	r2, r3, #8
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af90:	e000      	b.n	800af94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800af92:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop

0800afb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_TIM_ConfigClockSource+0x18>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e0db      	b.n	800b180 <HAL_TIM_ConfigClockSource+0x1d0>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4b69      	ldr	r3, [pc, #420]	; (800b188 <HAL_TIM_ConfigClockSource+0x1d8>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a63      	ldr	r2, [pc, #396]	; (800b18c <HAL_TIM_ConfigClockSource+0x1dc>)
 800affe:	4293      	cmp	r3, r2
 800b000:	f000 80a9 	beq.w	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b004:	4a61      	ldr	r2, [pc, #388]	; (800b18c <HAL_TIM_ConfigClockSource+0x1dc>)
 800b006:	4293      	cmp	r3, r2
 800b008:	f200 80ae 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b00c:	4a60      	ldr	r2, [pc, #384]	; (800b190 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	f000 80a1 	beq.w	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b014:	4a5e      	ldr	r2, [pc, #376]	; (800b190 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b016:	4293      	cmp	r3, r2
 800b018:	f200 80a6 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b01c:	4a5d      	ldr	r2, [pc, #372]	; (800b194 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	f000 8099 	beq.w	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b024:	4a5b      	ldr	r2, [pc, #364]	; (800b194 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	f200 809e 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b02c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b030:	f000 8091 	beq.w	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b034:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b038:	f200 8096 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b040:	f000 8089 	beq.w	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b048:	f200 808e 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b04c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b050:	d03e      	beq.n	800b0d0 <HAL_TIM_ConfigClockSource+0x120>
 800b052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b056:	f200 8087 	bhi.w	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b05a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b05e:	f000 8085 	beq.w	800b16c <HAL_TIM_ConfigClockSource+0x1bc>
 800b062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b066:	d87f      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b068:	2b70      	cmp	r3, #112	; 0x70
 800b06a:	d01a      	beq.n	800b0a2 <HAL_TIM_ConfigClockSource+0xf2>
 800b06c:	2b70      	cmp	r3, #112	; 0x70
 800b06e:	d87b      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b070:	2b60      	cmp	r3, #96	; 0x60
 800b072:	d050      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x166>
 800b074:	2b60      	cmp	r3, #96	; 0x60
 800b076:	d877      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b078:	2b50      	cmp	r3, #80	; 0x50
 800b07a:	d03c      	beq.n	800b0f6 <HAL_TIM_ConfigClockSource+0x146>
 800b07c:	2b50      	cmp	r3, #80	; 0x50
 800b07e:	d873      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b080:	2b40      	cmp	r3, #64	; 0x40
 800b082:	d058      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0x186>
 800b084:	2b40      	cmp	r3, #64	; 0x40
 800b086:	d86f      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b088:	2b30      	cmp	r3, #48	; 0x30
 800b08a:	d064      	beq.n	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b08c:	2b30      	cmp	r3, #48	; 0x30
 800b08e:	d86b      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b090:	2b20      	cmp	r3, #32
 800b092:	d060      	beq.n	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b094:	2b20      	cmp	r3, #32
 800b096:	d867      	bhi.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d05c      	beq.n	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
 800b09c:	2b10      	cmp	r3, #16
 800b09e:	d05a      	beq.n	800b156 <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b0a0:	e062      	b.n	800b168 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	6899      	ldr	r1, [r3, #8]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f000 fd9f 	bl	800bbf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b0c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	609a      	str	r2, [r3, #8]
      break;
 800b0ce:	e04e      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	6899      	ldr	r1, [r3, #8]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f000 fd88 	bl	800bbf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	689a      	ldr	r2, [r3, #8]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0f2:	609a      	str	r2, [r3, #8]
      break;
 800b0f4:	e03b      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6859      	ldr	r1, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	461a      	mov	r2, r3
 800b104:	f000 fc42 	bl	800b98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2150      	movs	r1, #80	; 0x50
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fd52 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b114:	e02b      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6859      	ldr	r1, [r3, #4]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	461a      	mov	r2, r3
 800b124:	f000 fc9e 	bl	800ba64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2160      	movs	r1, #96	; 0x60
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fd42 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b134:	e01b      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6859      	ldr	r1, [r3, #4]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	461a      	mov	r2, r3
 800b144:	f000 fc22 	bl	800b98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2140      	movs	r1, #64	; 0x40
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fd32 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b154:	e00b      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4619      	mov	r1, r3
 800b160:	4610      	mov	r0, r2
 800b162:	f000 fd29 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b166:	e002      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b168:	bf00      	nop
 800b16a:	e000      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b16c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	ffceff88 	.word	0xffceff88
 800b18c:	00100040 	.word	0x00100040
 800b190:	00100030 	.word	0x00100030
 800b194:	00100020 	.word	0x00100020

0800b198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a40      	ldr	r2, [pc, #256]	; (800b2e8 <TIM_Base_SetConfig+0x114>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d013      	beq.n	800b214 <TIM_Base_SetConfig+0x40>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f2:	d00f      	beq.n	800b214 <TIM_Base_SetConfig+0x40>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a3d      	ldr	r2, [pc, #244]	; (800b2ec <TIM_Base_SetConfig+0x118>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00b      	beq.n	800b214 <TIM_Base_SetConfig+0x40>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a3c      	ldr	r2, [pc, #240]	; (800b2f0 <TIM_Base_SetConfig+0x11c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d007      	beq.n	800b214 <TIM_Base_SetConfig+0x40>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a3b      	ldr	r2, [pc, #236]	; (800b2f4 <TIM_Base_SetConfig+0x120>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d003      	beq.n	800b214 <TIM_Base_SetConfig+0x40>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a3a      	ldr	r2, [pc, #232]	; (800b2f8 <TIM_Base_SetConfig+0x124>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d108      	bne.n	800b226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a2f      	ldr	r2, [pc, #188]	; (800b2e8 <TIM_Base_SetConfig+0x114>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d01f      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b234:	d01b      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a2c      	ldr	r2, [pc, #176]	; (800b2ec <TIM_Base_SetConfig+0x118>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d017      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a2b      	ldr	r2, [pc, #172]	; (800b2f0 <TIM_Base_SetConfig+0x11c>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d013      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a2a      	ldr	r2, [pc, #168]	; (800b2f4 <TIM_Base_SetConfig+0x120>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00f      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a29      	ldr	r2, [pc, #164]	; (800b2f8 <TIM_Base_SetConfig+0x124>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d00b      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a28      	ldr	r2, [pc, #160]	; (800b2fc <TIM_Base_SetConfig+0x128>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d007      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a27      	ldr	r2, [pc, #156]	; (800b300 <TIM_Base_SetConfig+0x12c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <TIM_Base_SetConfig+0x9a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a26      	ldr	r2, [pc, #152]	; (800b304 <TIM_Base_SetConfig+0x130>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d108      	bne.n	800b280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689a      	ldr	r2, [r3, #8]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a10      	ldr	r2, [pc, #64]	; (800b2e8 <TIM_Base_SetConfig+0x114>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d00f      	beq.n	800b2cc <TIM_Base_SetConfig+0xf8>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a12      	ldr	r2, [pc, #72]	; (800b2f8 <TIM_Base_SetConfig+0x124>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d00b      	beq.n	800b2cc <TIM_Base_SetConfig+0xf8>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <TIM_Base_SetConfig+0x128>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d007      	beq.n	800b2cc <TIM_Base_SetConfig+0xf8>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a10      	ldr	r2, [pc, #64]	; (800b300 <TIM_Base_SetConfig+0x12c>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d003      	beq.n	800b2cc <TIM_Base_SetConfig+0xf8>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a0f      	ldr	r2, [pc, #60]	; (800b304 <TIM_Base_SetConfig+0x130>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d103      	bne.n	800b2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	615a      	str	r2, [r3, #20]
}
 800b2da:	bf00      	nop
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40000400 	.word	0x40000400
 800b2f0:	40000800 	.word	0x40000800
 800b2f4:	40000c00 	.word	0x40000c00
 800b2f8:	40010400 	.word	0x40010400
 800b2fc:	40014000 	.word	0x40014000
 800b300:	40014400 	.word	0x40014400
 800b304:	40014800 	.word	0x40014800

0800b308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	f023 0201 	bic.w	r2, r3, #1
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	4b37      	ldr	r3, [pc, #220]	; (800b410 <TIM_OC1_SetConfig+0x108>)
 800b334:	4013      	ands	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 0303 	bic.w	r3, r3, #3
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f023 0302 	bic.w	r3, r3, #2
 800b350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a2d      	ldr	r2, [pc, #180]	; (800b414 <TIM_OC1_SetConfig+0x10c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d00f      	beq.n	800b384 <TIM_OC1_SetConfig+0x7c>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a2c      	ldr	r2, [pc, #176]	; (800b418 <TIM_OC1_SetConfig+0x110>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00b      	beq.n	800b384 <TIM_OC1_SetConfig+0x7c>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a2b      	ldr	r2, [pc, #172]	; (800b41c <TIM_OC1_SetConfig+0x114>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_OC1_SetConfig+0x7c>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a2a      	ldr	r2, [pc, #168]	; (800b420 <TIM_OC1_SetConfig+0x118>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_OC1_SetConfig+0x7c>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a29      	ldr	r2, [pc, #164]	; (800b424 <TIM_OC1_SetConfig+0x11c>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d10c      	bne.n	800b39e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f023 0308 	bic.w	r3, r3, #8
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	4313      	orrs	r3, r2
 800b394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f023 0304 	bic.w	r3, r3, #4
 800b39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a1c      	ldr	r2, [pc, #112]	; (800b414 <TIM_OC1_SetConfig+0x10c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00f      	beq.n	800b3c6 <TIM_OC1_SetConfig+0xbe>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a1b      	ldr	r2, [pc, #108]	; (800b418 <TIM_OC1_SetConfig+0x110>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00b      	beq.n	800b3c6 <TIM_OC1_SetConfig+0xbe>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a1a      	ldr	r2, [pc, #104]	; (800b41c <TIM_OC1_SetConfig+0x114>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d007      	beq.n	800b3c6 <TIM_OC1_SetConfig+0xbe>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a19      	ldr	r2, [pc, #100]	; (800b420 <TIM_OC1_SetConfig+0x118>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d003      	beq.n	800b3c6 <TIM_OC1_SetConfig+0xbe>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a18      	ldr	r2, [pc, #96]	; (800b424 <TIM_OC1_SetConfig+0x11c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d111      	bne.n	800b3ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	621a      	str	r2, [r3, #32]
}
 800b404:	bf00      	nop
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	fffeff8f 	.word	0xfffeff8f
 800b414:	40010000 	.word	0x40010000
 800b418:	40010400 	.word	0x40010400
 800b41c:	40014000 	.word	0x40014000
 800b420:	40014400 	.word	0x40014400
 800b424:	40014800 	.word	0x40014800

0800b428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f023 0210 	bic.w	r2, r3, #16
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4b34      	ldr	r3, [pc, #208]	; (800b524 <TIM_OC2_SetConfig+0xfc>)
 800b454:	4013      	ands	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	4313      	orrs	r3, r2
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0320 	bic.w	r3, r3, #32
 800b472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a29      	ldr	r2, [pc, #164]	; (800b528 <TIM_OC2_SetConfig+0x100>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d003      	beq.n	800b490 <TIM_OC2_SetConfig+0x68>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a28      	ldr	r2, [pc, #160]	; (800b52c <TIM_OC2_SetConfig+0x104>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d10d      	bne.n	800b4ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	011b      	lsls	r3, r3, #4
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <TIM_OC2_SetConfig+0x100>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d00f      	beq.n	800b4d4 <TIM_OC2_SetConfig+0xac>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <TIM_OC2_SetConfig+0x104>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d00b      	beq.n	800b4d4 <TIM_OC2_SetConfig+0xac>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <TIM_OC2_SetConfig+0x108>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d007      	beq.n	800b4d4 <TIM_OC2_SetConfig+0xac>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a1b      	ldr	r2, [pc, #108]	; (800b534 <TIM_OC2_SetConfig+0x10c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <TIM_OC2_SetConfig+0xac>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a1a      	ldr	r2, [pc, #104]	; (800b538 <TIM_OC2_SetConfig+0x110>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d113      	bne.n	800b4fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	621a      	str	r2, [r3, #32]
}
 800b516:	bf00      	nop
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	feff8fff 	.word	0xfeff8fff
 800b528:	40010000 	.word	0x40010000
 800b52c:	40010400 	.word	0x40010400
 800b530:	40014000 	.word	0x40014000
 800b534:	40014400 	.word	0x40014400
 800b538:	40014800 	.word	0x40014800

0800b53c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a27      	ldr	r2, [pc, #156]	; (800b634 <TIM_OC3_SetConfig+0xf8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_OC3_SetConfig+0x66>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a26      	ldr	r2, [pc, #152]	; (800b638 <TIM_OC3_SetConfig+0xfc>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d10d      	bne.n	800b5be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	021b      	lsls	r3, r3, #8
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <TIM_OC3_SetConfig+0xf8>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d00f      	beq.n	800b5e6 <TIM_OC3_SetConfig+0xaa>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a1b      	ldr	r2, [pc, #108]	; (800b638 <TIM_OC3_SetConfig+0xfc>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00b      	beq.n	800b5e6 <TIM_OC3_SetConfig+0xaa>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <TIM_OC3_SetConfig+0x100>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d007      	beq.n	800b5e6 <TIM_OC3_SetConfig+0xaa>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a19      	ldr	r2, [pc, #100]	; (800b640 <TIM_OC3_SetConfig+0x104>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d003      	beq.n	800b5e6 <TIM_OC3_SetConfig+0xaa>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a18      	ldr	r2, [pc, #96]	; (800b644 <TIM_OC3_SetConfig+0x108>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d113      	bne.n	800b60e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	621a      	str	r2, [r3, #32]
}
 800b628:	bf00      	nop
 800b62a:	371c      	adds	r7, #28
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	40010000 	.word	0x40010000
 800b638:	40010400 	.word	0x40010400
 800b63c:	40014000 	.word	0x40014000
 800b640:	40014400 	.word	0x40014400
 800b644:	40014800 	.word	0x40014800

0800b648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	031b      	lsls	r3, r3, #12
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a18      	ldr	r2, [pc, #96]	; (800b704 <TIM_OC4_SetConfig+0xbc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00f      	beq.n	800b6c8 <TIM_OC4_SetConfig+0x80>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a17      	ldr	r2, [pc, #92]	; (800b708 <TIM_OC4_SetConfig+0xc0>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00b      	beq.n	800b6c8 <TIM_OC4_SetConfig+0x80>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a16      	ldr	r2, [pc, #88]	; (800b70c <TIM_OC4_SetConfig+0xc4>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d007      	beq.n	800b6c8 <TIM_OC4_SetConfig+0x80>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a15      	ldr	r2, [pc, #84]	; (800b710 <TIM_OC4_SetConfig+0xc8>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_OC4_SetConfig+0x80>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a14      	ldr	r2, [pc, #80]	; (800b714 <TIM_OC4_SetConfig+0xcc>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d109      	bne.n	800b6dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	019b      	lsls	r3, r3, #6
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40010000 	.word	0x40010000
 800b708:	40010400 	.word	0x40010400
 800b70c:	40014000 	.word	0x40014000
 800b710:	40014400 	.word	0x40014400
 800b714:	40014800 	.word	0x40014800

0800b718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	4313      	orrs	r3, r2
 800b750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	041b      	lsls	r3, r3, #16
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4313      	orrs	r3, r2
 800b764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a17      	ldr	r2, [pc, #92]	; (800b7c8 <TIM_OC5_SetConfig+0xb0>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d00f      	beq.n	800b78e <TIM_OC5_SetConfig+0x76>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a16      	ldr	r2, [pc, #88]	; (800b7cc <TIM_OC5_SetConfig+0xb4>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d00b      	beq.n	800b78e <TIM_OC5_SetConfig+0x76>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a15      	ldr	r2, [pc, #84]	; (800b7d0 <TIM_OC5_SetConfig+0xb8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d007      	beq.n	800b78e <TIM_OC5_SetConfig+0x76>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a14      	ldr	r2, [pc, #80]	; (800b7d4 <TIM_OC5_SetConfig+0xbc>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d003      	beq.n	800b78e <TIM_OC5_SetConfig+0x76>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <TIM_OC5_SetConfig+0xc0>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d109      	bne.n	800b7a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	021b      	lsls	r3, r3, #8
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	621a      	str	r2, [r3, #32]
}
 800b7bc:	bf00      	nop
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	40010400 	.word	0x40010400
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	40014400 	.word	0x40014400
 800b7d8:	40014800 	.word	0x40014800

0800b7dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b80a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b81e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	051b      	lsls	r3, r3, #20
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	4313      	orrs	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a18      	ldr	r2, [pc, #96]	; (800b890 <TIM_OC6_SetConfig+0xb4>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d00f      	beq.n	800b854 <TIM_OC6_SetConfig+0x78>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a17      	ldr	r2, [pc, #92]	; (800b894 <TIM_OC6_SetConfig+0xb8>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00b      	beq.n	800b854 <TIM_OC6_SetConfig+0x78>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a16      	ldr	r2, [pc, #88]	; (800b898 <TIM_OC6_SetConfig+0xbc>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d007      	beq.n	800b854 <TIM_OC6_SetConfig+0x78>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a15      	ldr	r2, [pc, #84]	; (800b89c <TIM_OC6_SetConfig+0xc0>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d003      	beq.n	800b854 <TIM_OC6_SetConfig+0x78>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a14      	ldr	r2, [pc, #80]	; (800b8a0 <TIM_OC6_SetConfig+0xc4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d109      	bne.n	800b868 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b85a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	029b      	lsls	r3, r3, #10
 800b862:	697a      	ldr	r2, [r7, #20]
 800b864:	4313      	orrs	r3, r2
 800b866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	621a      	str	r2, [r3, #32]
}
 800b882:	bf00      	nop
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40010000 	.word	0x40010000
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800

0800b8a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	f023 0201 	bic.w	r2, r3, #1
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6a1b      	ldr	r3, [r3, #32]
 800b8c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	4a28      	ldr	r2, [pc, #160]	; (800b970 <TIM_TI1_SetConfig+0xcc>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d01b      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d8:	d017      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4a25      	ldr	r2, [pc, #148]	; (800b974 <TIM_TI1_SetConfig+0xd0>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d013      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4a24      	ldr	r2, [pc, #144]	; (800b978 <TIM_TI1_SetConfig+0xd4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d00f      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4a23      	ldr	r2, [pc, #140]	; (800b97c <TIM_TI1_SetConfig+0xd8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00b      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4a22      	ldr	r2, [pc, #136]	; (800b980 <TIM_TI1_SetConfig+0xdc>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d007      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4a21      	ldr	r2, [pc, #132]	; (800b984 <TIM_TI1_SetConfig+0xe0>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d003      	beq.n	800b90a <TIM_TI1_SetConfig+0x66>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4a20      	ldr	r2, [pc, #128]	; (800b988 <TIM_TI1_SetConfig+0xe4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d101      	bne.n	800b90e <TIM_TI1_SetConfig+0x6a>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <TIM_TI1_SetConfig+0x6c>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d008      	beq.n	800b926 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f023 0303 	bic.w	r3, r3, #3
 800b91a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4313      	orrs	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e003      	b.n	800b92e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f043 0301 	orr.w	r3, r3, #1
 800b92c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	011b      	lsls	r3, r3, #4
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	4313      	orrs	r3, r2
 800b940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f023 030a 	bic.w	r3, r3, #10
 800b948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f003 030a 	and.w	r3, r3, #10
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	4313      	orrs	r3, r2
 800b954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	621a      	str	r2, [r3, #32]
}
 800b962:	bf00      	nop
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	40010000 	.word	0x40010000
 800b974:	40000400 	.word	0x40000400
 800b978:	40000800 	.word	0x40000800
 800b97c:	40000c00 	.word	0x40000c00
 800b980:	40010400 	.word	0x40010400
 800b984:	40001800 	.word	0x40001800
 800b988:	40014000 	.word	0x40014000

0800b98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	f023 0201 	bic.w	r2, r3, #1
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f023 030a 	bic.w	r3, r3, #10
 800b9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	621a      	str	r2, [r3, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b087      	sub	sp, #28
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6a1b      	ldr	r3, [r3, #32]
 800b9fc:	f023 0210 	bic.w	r2, r3, #16
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	021b      	lsls	r3, r3, #8
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	031b      	lsls	r3, r3, #12
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	621a      	str	r2, [r3, #32]
}
 800ba58:	bf00      	nop
 800ba5a:	371c      	adds	r7, #28
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	f023 0210 	bic.w	r2, r3, #16
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	031b      	lsls	r3, r3, #12
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800baa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	011b      	lsls	r3, r3, #4
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	621a      	str	r2, [r3, #32]
}
 800bab8:	bf00      	nop
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
 800bad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f023 0303 	bic.w	r3, r3, #3
 800baf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	011b      	lsls	r3, r3, #4
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bb14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	621a      	str	r2, [r3, #32]
}
 800bb30:	bf00      	nop
 800bb32:	371c      	adds	r7, #28
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	031b      	lsls	r3, r3, #12
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bb8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	031b      	lsls	r3, r3, #12
 800bb94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
	...

0800bbb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <TIM_ITRx_SetConfig+0x38>)
 800bbcc:	4013      	ands	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	f043 0307 	orr.w	r3, r3, #7
 800bbda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	609a      	str	r2, [r3, #8]
}
 800bbe2:	bf00      	nop
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	ffcfff8f 	.word	0xffcfff8f

0800bbf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	021a      	lsls	r2, r3, #8
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	431a      	orrs	r2, r3
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	609a      	str	r2, [r3, #8]
}
 800bc28:	bf00      	nop
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f003 031f 	and.w	r3, r3, #31
 800bc46:	2201      	movs	r2, #1
 800bc48:	fa02 f303 	lsl.w	r3, r2, r3
 800bc4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1a      	ldr	r2, [r3, #32]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	43db      	mvns	r3, r3
 800bc56:	401a      	ands	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a1a      	ldr	r2, [r3, #32]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f003 031f 	and.w	r3, r3, #31
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	fa01 f303 	lsl.w	r3, r1, r3
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	621a      	str	r2, [r3, #32]
}
 800bc72:	bf00      	nop
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
	...

0800bc80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e068      	b.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a2e      	ldr	r2, [pc, #184]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d004      	beq.n	800bccc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a2d      	ldr	r2, [pc, #180]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d108      	bne.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a1e      	ldr	r2, [pc, #120]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d01d      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd0a:	d018      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a1b      	ldr	r2, [pc, #108]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d013      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a1a      	ldr	r2, [pc, #104]	; (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00e      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a18      	ldr	r2, [pc, #96]	; (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d009      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a13      	ldr	r2, [pc, #76]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d004      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a14      	ldr	r2, [pc, #80]	; (800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d10c      	bne.n	800bd58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	40010400 	.word	0x40010400
 800bd80:	40000400 	.word	0x40000400
 800bd84:	40000800 	.word	0x40000800
 800bd88:	40000c00 	.word	0x40000c00
 800bd8c:	40001800 	.word	0x40001800

0800bd90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e042      	b.n	800be64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7fb f8f3 	bl	8006fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2224      	movs	r2, #36	; 0x24
 800bdfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f022 0201 	bic.w	r2, r2, #1
 800be0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fb22 	bl	800c458 <UART_SetConfig>
 800be14:	4603      	mov	r3, r0
 800be16:	2b01      	cmp	r3, #1
 800be18:	d101      	bne.n	800be1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e022      	b.n	800be64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f002 fe88 	bl	800eb3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0201 	orr.w	r2, r2, #1
 800be5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f002 ff0f 	bl	800ec80 <UART_CheckIdleState>
 800be62:	4603      	mov	r3, r0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08a      	sub	sp, #40	; 0x28
 800be70:	af02      	add	r7, sp, #8
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	4613      	mov	r3, r2
 800be7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be82:	2b20      	cmp	r3, #32
 800be84:	f040 8083 	bne.w	800bf8e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <HAL_UART_Transmit+0x28>
 800be8e:	88fb      	ldrh	r3, [r7, #6]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e07b      	b.n	800bf90 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_UART_Transmit+0x3a>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e074      	b.n	800bf90 <HAL_UART_Transmit+0x124>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2221      	movs	r2, #33	; 0x21
 800beba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bebe:	f7fb fa1d 	bl	80072fc <HAL_GetTick>
 800bec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	88fa      	ldrh	r2, [r7, #6]
 800bec8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	88fa      	ldrh	r2, [r7, #6]
 800bed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bedc:	d108      	bne.n	800bef0 <HAL_UART_Transmit+0x84>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d104      	bne.n	800bef0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	61bb      	str	r3, [r7, #24]
 800beee:	e003      	b.n	800bef8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bef8:	e02c      	b.n	800bf54 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2200      	movs	r2, #0
 800bf02:	2180      	movs	r1, #128	; 0x80
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f002 ff03 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d001      	beq.n	800bf14 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e03d      	b.n	800bf90 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10b      	bne.n	800bf32 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	3302      	adds	r3, #2
 800bf2e:	61bb      	str	r3, [r7, #24]
 800bf30:	e007      	b.n	800bf42 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	781a      	ldrb	r2, [r3, #0]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1cc      	bne.n	800befa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2200      	movs	r2, #0
 800bf68:	2140      	movs	r1, #64	; 0x40
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f002 fed0 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e00a      	b.n	800bf90 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e000      	b.n	800bf90 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bf8e:	2302      	movs	r3, #2
  }
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	f040 80bc 	bne.w	800c12a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_UART_Receive_IT+0x26>
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e0b4      	b.n	800c12c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_UART_Receive_IT+0x38>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e0ad      	b.n	800c12c <HAL_UART_Receive_IT+0x194>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	88fa      	ldrh	r2, [r7, #6]
 800bfe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	88fa      	ldrh	r2, [r7, #6]
 800bfea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffc:	d10e      	bne.n	800c01c <HAL_UART_Receive_IT+0x84>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d105      	bne.n	800c012 <HAL_UART_Receive_IT+0x7a>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c00c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c010:	e02d      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	22ff      	movs	r2, #255	; 0xff
 800c016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c01a:	e028      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10d      	bne.n	800c040 <HAL_UART_Receive_IT+0xa8>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d104      	bne.n	800c036 <HAL_UART_Receive_IT+0x9e>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	22ff      	movs	r2, #255	; 0xff
 800c030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c034:	e01b      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	227f      	movs	r2, #127	; 0x7f
 800c03a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c03e:	e016      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c048:	d10d      	bne.n	800c066 <HAL_UART_Receive_IT+0xce>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d104      	bne.n	800c05c <HAL_UART_Receive_IT+0xc4>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	227f      	movs	r2, #127	; 0x7f
 800c056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c05a:	e008      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	223f      	movs	r2, #63	; 0x3f
 800c060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c064:	e003      	b.n	800c06e <HAL_UART_Receive_IT+0xd6>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2222      	movs	r2, #34	; 0x22
 800c07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f042 0201 	orr.w	r2, r2, #1
 800c08c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c096:	d12a      	bne.n	800c0ee <HAL_UART_Receive_IT+0x156>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c09e:	88fa      	ldrh	r2, [r7, #6]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d324      	bcc.n	800c0ee <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ac:	d107      	bne.n	800c0be <HAL_UART_Receive_IT+0x126>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d103      	bne.n	800c0be <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4a1f      	ldr	r2, [pc, #124]	; (800c138 <HAL_UART_Receive_IT+0x1a0>)
 800c0ba:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0bc:	e002      	b.n	800c0c4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4a1e      	ldr	r2, [pc, #120]	; (800c13c <HAL_UART_Receive_IT+0x1a4>)
 800c0c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0da:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c0ea:	609a      	str	r2, [r3, #8]
 800c0ec:	e01b      	b.n	800c126 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f6:	d107      	bne.n	800c108 <HAL_UART_Receive_IT+0x170>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d103      	bne.n	800c108 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4a0f      	ldr	r2, [pc, #60]	; (800c140 <HAL_UART_Receive_IT+0x1a8>)
 800c104:	66da      	str	r2, [r3, #108]	; 0x6c
 800c106:	e002      	b.n	800c10e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a0e      	ldr	r2, [pc, #56]	; (800c144 <HAL_UART_Receive_IT+0x1ac>)
 800c10c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c124:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	e000      	b.n	800c12c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800c12a:	2302      	movs	r3, #2
  }
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	0800f115 	.word	0x0800f115
 800c13c:	0800f00d 	.word	0x0800f00d
 800c140:	0800ef63 	.word	0x0800ef63
 800c144:	0800eeb9 	.word	0x0800eeb9

0800c148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c168:	69fa      	ldr	r2, [r7, #28]
 800c16a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c16e:	4013      	ands	r3, r2
 800c170:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d118      	bne.n	800c1aa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f003 0320 	and.w	r3, r3, #32
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	f003 0320 	and.w	r3, r3, #32
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d104      	bne.n	800c196 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 8144 	beq.w	800c428 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	4798      	blx	r3
      }
      return;
 800c1a8:	e13e      	b.n	800c428 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 80e8 	beq.w	800c382 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	4b9e      	ldr	r3, [pc, #632]	; (800c430 <HAL_UART_IRQHandler+0x2e8>)
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d105      	bne.n	800c1c8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4b9d      	ldr	r3, [pc, #628]	; (800c434 <HAL_UART_IRQHandler+0x2ec>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80dd 	beq.w	800c382 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d010      	beq.n	800c1f4 <HAL_UART_IRQHandler+0xac>
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ea:	f043 0201 	orr.w	r2, r3, #1
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d010      	beq.n	800c220 <HAL_UART_IRQHandler+0xd8>
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2202      	movs	r2, #2
 800c20e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c216:	f043 0204 	orr.w	r2, r3, #4
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	f003 0304 	and.w	r3, r3, #4
 800c226:	2b00      	cmp	r3, #0
 800c228:	d010      	beq.n	800c24c <HAL_UART_IRQHandler+0x104>
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2204      	movs	r2, #4
 800c23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c242:	f043 0202 	orr.w	r2, r3, #2
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f003 0308 	and.w	r3, r3, #8
 800c252:	2b00      	cmp	r3, #0
 800c254:	d015      	beq.n	800c282 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	4b73      	ldr	r3, [pc, #460]	; (800c430 <HAL_UART_IRQHandler+0x2e8>)
 800c264:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2208      	movs	r2, #8
 800c270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c278:	f043 0208 	orr.w	r2, r3, #8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d011      	beq.n	800c2b0 <HAL_UART_IRQHandler+0x168>
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00c      	beq.n	800c2b0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a6:	f043 0220 	orr.w	r2, r3, #32
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 80b8 	beq.w	800c42c <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f003 0320 	and.w	r3, r3, #32
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d011      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fc:	2b40      	cmp	r3, #64	; 0x40
 800c2fe:	d004      	beq.n	800c30a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c306:	2b00      	cmp	r3, #0
 800c308:	d031      	beq.n	800c36e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f002 fd80 	bl	800ee10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31a:	2b40      	cmp	r3, #64	; 0x40
 800c31c:	d123      	bne.n	800c366 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689a      	ldr	r2, [r3, #8]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c32c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c332:	2b00      	cmp	r3, #0
 800c334:	d013      	beq.n	800c35e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c33a:	4a3f      	ldr	r2, [pc, #252]	; (800c438 <HAL_UART_IRQHandler+0x2f0>)
 800c33c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c342:	4618      	mov	r0, r3
 800c344:	f7fb f958 	bl	80075f8 <HAL_DMA_Abort_IT>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d017      	beq.n	800c37e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c35c:	e00f      	b.n	800c37e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f870 	bl	800c444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c364:	e00b      	b.n	800c37e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f86c 	bl	800c444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c36c:	e007      	b.n	800c37e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f868 	bl	800c444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800c37c:	e056      	b.n	800c42c <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c37e:	bf00      	nop
    return;
 800c380:	e054      	b.n	800c42c <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00d      	beq.n	800c3a8 <HAL_UART_IRQHandler+0x260>
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d008      	beq.n	800c3a8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c39e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f002 ff3b 	bl	800f21c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3a6:	e04a      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d012      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d008      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d036      	beq.n	800c43c <HAL_UART_IRQHandler+0x2f4>
    {
      huart->TxISR(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	4798      	blx	r3
    }
    return;
 800c3d6:	e031      	b.n	800c43c <HAL_UART_IRQHandler+0x2f4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d008      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x2ac>
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f002 fd49 	bl	800ee84 <UART_EndTransmit_IT>
    return;
 800c3f2:	e024      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d008      	beq.n	800c410 <HAL_UART_IRQHandler+0x2c8>
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f002 ff1b 	bl	800f244 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c40e:	e016      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d011      	beq.n	800c43e <HAL_UART_IRQHandler+0x2f6>
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da0e      	bge.n	800c43e <HAL_UART_IRQHandler+0x2f6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f002 ff05 	bl	800f230 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c426:	e00a      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
      return;
 800c428:	bf00      	nop
 800c42a:	e008      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
    return;
 800c42c:	bf00      	nop
 800c42e:	e006      	b.n	800c43e <HAL_UART_IRQHandler+0x2f6>
 800c430:	10000001 	.word	0x10000001
 800c434:	04000120 	.word	0x04000120
 800c438:	0800ee59 	.word	0x0800ee59
    return;
 800c43c:	bf00      	nop
  }
}
 800c43e:	3720      	adds	r7, #32
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c45c:	b0bc      	sub	sp, #240	; 0xf0
 800c45e:	af00      	add	r7, sp, #0
 800c460:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c464:	2300      	movs	r3, #0
 800c466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_StatusTypeDef ret               = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c470:	2300      	movs	r3, #0
 800c472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c47a:	689a      	ldr	r2, [r3, #8]
 800c47c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	431a      	orrs	r2, r3
 800c484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	431a      	orrs	r2, r3
 800c48c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	4313      	orrs	r3, r2
 800c494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  tmpreg |= (uint32_t)huart->FifoMode;
 800c498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c49c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c49e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	49c9      	ldr	r1, [pc, #804]	; (800c7d8 <UART_SetConfig+0x380>)
 800c4b2:	4019      	ands	r1, r3
 800c4b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4d2:	68d9      	ldr	r1, [r3, #12]
 800c4d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	ea40 0301 	orr.w	r3, r0, r1
 800c4de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c4e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	4bba      	ldr	r3, [pc, #744]	; (800c7dc <UART_SetConfig+0x384>)
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d007      	beq.n	800c506 <UART_SetConfig+0xae>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c4f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4fa:	6a1a      	ldr	r2, [r3, #32]
 800c4fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c500:	4313      	orrs	r3, r2
 800c502:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	49b4      	ldr	r1, [pc, #720]	; (800c7e0 <UART_SetConfig+0x388>)
 800c510:	4019      	ands	r1, r3
 800c512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c51c:	430b      	orrs	r3, r1
 800c51e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	f023 000f 	bic.w	r0, r3, #15
 800c52c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	ea40 0301 	orr.w	r3, r0, r1
 800c53c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c53e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	4ba7      	ldr	r3, [pc, #668]	; (800c7e4 <UART_SetConfig+0x38c>)
 800c546:	429a      	cmp	r2, r3
 800c548:	d176      	bne.n	800c638 <UART_SetConfig+0x1e0>
 800c54a:	4ba7      	ldr	r3, [pc, #668]	; (800c7e8 <UART_SetConfig+0x390>)
 800c54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c54e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c552:	2b28      	cmp	r3, #40	; 0x28
 800c554:	d86c      	bhi.n	800c630 <UART_SetConfig+0x1d8>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <UART_SetConfig+0x104>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c601 	.word	0x0800c601
 800c560:	0800c631 	.word	0x0800c631
 800c564:	0800c631 	.word	0x0800c631
 800c568:	0800c631 	.word	0x0800c631
 800c56c:	0800c631 	.word	0x0800c631
 800c570:	0800c631 	.word	0x0800c631
 800c574:	0800c631 	.word	0x0800c631
 800c578:	0800c631 	.word	0x0800c631
 800c57c:	0800c609 	.word	0x0800c609
 800c580:	0800c631 	.word	0x0800c631
 800c584:	0800c631 	.word	0x0800c631
 800c588:	0800c631 	.word	0x0800c631
 800c58c:	0800c631 	.word	0x0800c631
 800c590:	0800c631 	.word	0x0800c631
 800c594:	0800c631 	.word	0x0800c631
 800c598:	0800c631 	.word	0x0800c631
 800c59c:	0800c611 	.word	0x0800c611
 800c5a0:	0800c631 	.word	0x0800c631
 800c5a4:	0800c631 	.word	0x0800c631
 800c5a8:	0800c631 	.word	0x0800c631
 800c5ac:	0800c631 	.word	0x0800c631
 800c5b0:	0800c631 	.word	0x0800c631
 800c5b4:	0800c631 	.word	0x0800c631
 800c5b8:	0800c631 	.word	0x0800c631
 800c5bc:	0800c619 	.word	0x0800c619
 800c5c0:	0800c631 	.word	0x0800c631
 800c5c4:	0800c631 	.word	0x0800c631
 800c5c8:	0800c631 	.word	0x0800c631
 800c5cc:	0800c631 	.word	0x0800c631
 800c5d0:	0800c631 	.word	0x0800c631
 800c5d4:	0800c631 	.word	0x0800c631
 800c5d8:	0800c631 	.word	0x0800c631
 800c5dc:	0800c621 	.word	0x0800c621
 800c5e0:	0800c631 	.word	0x0800c631
 800c5e4:	0800c631 	.word	0x0800c631
 800c5e8:	0800c631 	.word	0x0800c631
 800c5ec:	0800c631 	.word	0x0800c631
 800c5f0:	0800c631 	.word	0x0800c631
 800c5f4:	0800c631 	.word	0x0800c631
 800c5f8:	0800c631 	.word	0x0800c631
 800c5fc:	0800c629 	.word	0x0800c629
 800c600:	2301      	movs	r3, #1
 800c602:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c606:	e232      	b.n	800ca6e <UART_SetConfig+0x616>
 800c608:	2304      	movs	r3, #4
 800c60a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c60e:	e22e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c610:	2308      	movs	r3, #8
 800c612:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c616:	e22a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c618:	2310      	movs	r3, #16
 800c61a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c61e:	e226      	b.n	800ca6e <UART_SetConfig+0x616>
 800c620:	2320      	movs	r3, #32
 800c622:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c626:	e222      	b.n	800ca6e <UART_SetConfig+0x616>
 800c628:	2340      	movs	r3, #64	; 0x40
 800c62a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c62e:	e21e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c630:	2380      	movs	r3, #128	; 0x80
 800c632:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c636:	e21a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b6b      	ldr	r3, [pc, #428]	; (800c7ec <UART_SetConfig+0x394>)
 800c640:	429a      	cmp	r2, r3
 800c642:	d131      	bne.n	800c6a8 <UART_SetConfig+0x250>
 800c644:	4b68      	ldr	r3, [pc, #416]	; (800c7e8 <UART_SetConfig+0x390>)
 800c646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c648:	f003 0307 	and.w	r3, r3, #7
 800c64c:	2b05      	cmp	r3, #5
 800c64e:	d827      	bhi.n	800c6a0 <UART_SetConfig+0x248>
 800c650:	a201      	add	r2, pc, #4	; (adr r2, 800c658 <UART_SetConfig+0x200>)
 800c652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c656:	bf00      	nop
 800c658:	0800c671 	.word	0x0800c671
 800c65c:	0800c679 	.word	0x0800c679
 800c660:	0800c681 	.word	0x0800c681
 800c664:	0800c689 	.word	0x0800c689
 800c668:	0800c691 	.word	0x0800c691
 800c66c:	0800c699 	.word	0x0800c699
 800c670:	2300      	movs	r3, #0
 800c672:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c676:	e1fa      	b.n	800ca6e <UART_SetConfig+0x616>
 800c678:	2304      	movs	r3, #4
 800c67a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c67e:	e1f6      	b.n	800ca6e <UART_SetConfig+0x616>
 800c680:	2308      	movs	r3, #8
 800c682:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c686:	e1f2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c688:	2310      	movs	r3, #16
 800c68a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c68e:	e1ee      	b.n	800ca6e <UART_SetConfig+0x616>
 800c690:	2320      	movs	r3, #32
 800c692:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c696:	e1ea      	b.n	800ca6e <UART_SetConfig+0x616>
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c69e:	e1e6      	b.n	800ca6e <UART_SetConfig+0x616>
 800c6a0:	2380      	movs	r3, #128	; 0x80
 800c6a2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c6a6:	e1e2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c6a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	4b50      	ldr	r3, [pc, #320]	; (800c7f0 <UART_SetConfig+0x398>)
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d131      	bne.n	800c718 <UART_SetConfig+0x2c0>
 800c6b4:	4b4c      	ldr	r3, [pc, #304]	; (800c7e8 <UART_SetConfig+0x390>)
 800c6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	2b05      	cmp	r3, #5
 800c6be:	d827      	bhi.n	800c710 <UART_SetConfig+0x2b8>
 800c6c0:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <UART_SetConfig+0x270>)
 800c6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c6e1 	.word	0x0800c6e1
 800c6cc:	0800c6e9 	.word	0x0800c6e9
 800c6d0:	0800c6f1 	.word	0x0800c6f1
 800c6d4:	0800c6f9 	.word	0x0800c6f9
 800c6d8:	0800c701 	.word	0x0800c701
 800c6dc:	0800c709 	.word	0x0800c709
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c6e6:	e1c2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c6ee:	e1be      	b.n	800ca6e <UART_SetConfig+0x616>
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c6f6:	e1ba      	b.n	800ca6e <UART_SetConfig+0x616>
 800c6f8:	2310      	movs	r3, #16
 800c6fa:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c6fe:	e1b6      	b.n	800ca6e <UART_SetConfig+0x616>
 800c700:	2320      	movs	r3, #32
 800c702:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c706:	e1b2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c708:	2340      	movs	r3, #64	; 0x40
 800c70a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c70e:	e1ae      	b.n	800ca6e <UART_SetConfig+0x616>
 800c710:	2380      	movs	r3, #128	; 0x80
 800c712:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c716:	e1aa      	b.n	800ca6e <UART_SetConfig+0x616>
 800c718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	4b35      	ldr	r3, [pc, #212]	; (800c7f4 <UART_SetConfig+0x39c>)
 800c720:	429a      	cmp	r2, r3
 800c722:	d131      	bne.n	800c788 <UART_SetConfig+0x330>
 800c724:	4b30      	ldr	r3, [pc, #192]	; (800c7e8 <UART_SetConfig+0x390>)
 800c726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	2b05      	cmp	r3, #5
 800c72e:	d827      	bhi.n	800c780 <UART_SetConfig+0x328>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <UART_SetConfig+0x2e0>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c751 	.word	0x0800c751
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	0800c761 	.word	0x0800c761
 800c744:	0800c769 	.word	0x0800c769
 800c748:	0800c771 	.word	0x0800c771
 800c74c:	0800c779 	.word	0x0800c779
 800c750:	2300      	movs	r3, #0
 800c752:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c756:	e18a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c758:	2304      	movs	r3, #4
 800c75a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c75e:	e186      	b.n	800ca6e <UART_SetConfig+0x616>
 800c760:	2308      	movs	r3, #8
 800c762:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c766:	e182      	b.n	800ca6e <UART_SetConfig+0x616>
 800c768:	2310      	movs	r3, #16
 800c76a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c76e:	e17e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c770:	2320      	movs	r3, #32
 800c772:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c776:	e17a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c778:	2340      	movs	r3, #64	; 0x40
 800c77a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c77e:	e176      	b.n	800ca6e <UART_SetConfig+0x616>
 800c780:	2380      	movs	r3, #128	; 0x80
 800c782:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c786:	e172      	b.n	800ca6e <UART_SetConfig+0x616>
 800c788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	4b1a      	ldr	r3, [pc, #104]	; (800c7f8 <UART_SetConfig+0x3a0>)
 800c790:	429a      	cmp	r2, r3
 800c792:	d143      	bne.n	800c81c <UART_SetConfig+0x3c4>
 800c794:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <UART_SetConfig+0x390>)
 800c796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	2b05      	cmp	r3, #5
 800c79e:	d839      	bhi.n	800c814 <UART_SetConfig+0x3bc>
 800c7a0:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <UART_SetConfig+0x350>)
 800c7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a6:	bf00      	nop
 800c7a8:	0800c7c1 	.word	0x0800c7c1
 800c7ac:	0800c7c9 	.word	0x0800c7c9
 800c7b0:	0800c7d1 	.word	0x0800c7d1
 800c7b4:	0800c7fd 	.word	0x0800c7fd
 800c7b8:	0800c805 	.word	0x0800c805
 800c7bc:	0800c80d 	.word	0x0800c80d
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c7c6:	e152      	b.n	800ca6e <UART_SetConfig+0x616>
 800c7c8:	2304      	movs	r3, #4
 800c7ca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c7ce:	e14e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c7d0:	2308      	movs	r3, #8
 800c7d2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c7d6:	e14a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c7d8:	cfff69f3 	.word	0xcfff69f3
 800c7dc:	58000c00 	.word	0x58000c00
 800c7e0:	11fff4ff 	.word	0x11fff4ff
 800c7e4:	40011000 	.word	0x40011000
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	40004400 	.word	0x40004400
 800c7f0:	40004800 	.word	0x40004800
 800c7f4:	40004c00 	.word	0x40004c00
 800c7f8:	40005000 	.word	0x40005000
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c802:	e134      	b.n	800ca6e <UART_SetConfig+0x616>
 800c804:	2320      	movs	r3, #32
 800c806:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c80a:	e130      	b.n	800ca6e <UART_SetConfig+0x616>
 800c80c:	2340      	movs	r3, #64	; 0x40
 800c80e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c812:	e12c      	b.n	800ca6e <UART_SetConfig+0x616>
 800c814:	2380      	movs	r3, #128	; 0x80
 800c816:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c81a:	e128      	b.n	800ca6e <UART_SetConfig+0x616>
 800c81c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4bbe      	ldr	r3, [pc, #760]	; (800cb1c <UART_SetConfig+0x6c4>)
 800c824:	429a      	cmp	r2, r3
 800c826:	d177      	bne.n	800c918 <UART_SetConfig+0x4c0>
 800c828:	4bbd      	ldr	r3, [pc, #756]	; (800cb20 <UART_SetConfig+0x6c8>)
 800c82a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c82c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c830:	2b28      	cmp	r3, #40	; 0x28
 800c832:	d86d      	bhi.n	800c910 <UART_SetConfig+0x4b8>
 800c834:	a201      	add	r2, pc, #4	; (adr r2, 800c83c <UART_SetConfig+0x3e4>)
 800c836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83a:	bf00      	nop
 800c83c:	0800c8e1 	.word	0x0800c8e1
 800c840:	0800c911 	.word	0x0800c911
 800c844:	0800c911 	.word	0x0800c911
 800c848:	0800c911 	.word	0x0800c911
 800c84c:	0800c911 	.word	0x0800c911
 800c850:	0800c911 	.word	0x0800c911
 800c854:	0800c911 	.word	0x0800c911
 800c858:	0800c911 	.word	0x0800c911
 800c85c:	0800c8e9 	.word	0x0800c8e9
 800c860:	0800c911 	.word	0x0800c911
 800c864:	0800c911 	.word	0x0800c911
 800c868:	0800c911 	.word	0x0800c911
 800c86c:	0800c911 	.word	0x0800c911
 800c870:	0800c911 	.word	0x0800c911
 800c874:	0800c911 	.word	0x0800c911
 800c878:	0800c911 	.word	0x0800c911
 800c87c:	0800c8f1 	.word	0x0800c8f1
 800c880:	0800c911 	.word	0x0800c911
 800c884:	0800c911 	.word	0x0800c911
 800c888:	0800c911 	.word	0x0800c911
 800c88c:	0800c911 	.word	0x0800c911
 800c890:	0800c911 	.word	0x0800c911
 800c894:	0800c911 	.word	0x0800c911
 800c898:	0800c911 	.word	0x0800c911
 800c89c:	0800c8f9 	.word	0x0800c8f9
 800c8a0:	0800c911 	.word	0x0800c911
 800c8a4:	0800c911 	.word	0x0800c911
 800c8a8:	0800c911 	.word	0x0800c911
 800c8ac:	0800c911 	.word	0x0800c911
 800c8b0:	0800c911 	.word	0x0800c911
 800c8b4:	0800c911 	.word	0x0800c911
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c901 	.word	0x0800c901
 800c8c0:	0800c911 	.word	0x0800c911
 800c8c4:	0800c911 	.word	0x0800c911
 800c8c8:	0800c911 	.word	0x0800c911
 800c8cc:	0800c911 	.word	0x0800c911
 800c8d0:	0800c911 	.word	0x0800c911
 800c8d4:	0800c911 	.word	0x0800c911
 800c8d8:	0800c911 	.word	0x0800c911
 800c8dc:	0800c909 	.word	0x0800c909
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c8e6:	e0c2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c8ee:	e0be      	b.n	800ca6e <UART_SetConfig+0x616>
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c8f6:	e0ba      	b.n	800ca6e <UART_SetConfig+0x616>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c8fe:	e0b6      	b.n	800ca6e <UART_SetConfig+0x616>
 800c900:	2320      	movs	r3, #32
 800c902:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c906:	e0b2      	b.n	800ca6e <UART_SetConfig+0x616>
 800c908:	2340      	movs	r3, #64	; 0x40
 800c90a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c90e:	e0ae      	b.n	800ca6e <UART_SetConfig+0x616>
 800c910:	2380      	movs	r3, #128	; 0x80
 800c912:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c916:	e0aa      	b.n	800ca6e <UART_SetConfig+0x616>
 800c918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	4b81      	ldr	r3, [pc, #516]	; (800cb24 <UART_SetConfig+0x6cc>)
 800c920:	429a      	cmp	r2, r3
 800c922:	d131      	bne.n	800c988 <UART_SetConfig+0x530>
 800c924:	4b7e      	ldr	r3, [pc, #504]	; (800cb20 <UART_SetConfig+0x6c8>)
 800c926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c928:	f003 0307 	and.w	r3, r3, #7
 800c92c:	2b05      	cmp	r3, #5
 800c92e:	d827      	bhi.n	800c980 <UART_SetConfig+0x528>
 800c930:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <UART_SetConfig+0x4e0>)
 800c932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c936:	bf00      	nop
 800c938:	0800c951 	.word	0x0800c951
 800c93c:	0800c959 	.word	0x0800c959
 800c940:	0800c961 	.word	0x0800c961
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c971 	.word	0x0800c971
 800c94c:	0800c979 	.word	0x0800c979
 800c950:	2300      	movs	r3, #0
 800c952:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c956:	e08a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c958:	2304      	movs	r3, #4
 800c95a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c95e:	e086      	b.n	800ca6e <UART_SetConfig+0x616>
 800c960:	2308      	movs	r3, #8
 800c962:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c966:	e082      	b.n	800ca6e <UART_SetConfig+0x616>
 800c968:	2310      	movs	r3, #16
 800c96a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c96e:	e07e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c970:	2320      	movs	r3, #32
 800c972:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c976:	e07a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c978:	2340      	movs	r3, #64	; 0x40
 800c97a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c97e:	e076      	b.n	800ca6e <UART_SetConfig+0x616>
 800c980:	2380      	movs	r3, #128	; 0x80
 800c982:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c986:	e072      	b.n	800ca6e <UART_SetConfig+0x616>
 800c988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	4b66      	ldr	r3, [pc, #408]	; (800cb28 <UART_SetConfig+0x6d0>)
 800c990:	429a      	cmp	r2, r3
 800c992:	d131      	bne.n	800c9f8 <UART_SetConfig+0x5a0>
 800c994:	4b62      	ldr	r3, [pc, #392]	; (800cb20 <UART_SetConfig+0x6c8>)
 800c996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b05      	cmp	r3, #5
 800c99e:	d827      	bhi.n	800c9f0 <UART_SetConfig+0x598>
 800c9a0:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <UART_SetConfig+0x550>)
 800c9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a6:	bf00      	nop
 800c9a8:	0800c9c1 	.word	0x0800c9c1
 800c9ac:	0800c9c9 	.word	0x0800c9c9
 800c9b0:	0800c9d1 	.word	0x0800c9d1
 800c9b4:	0800c9d9 	.word	0x0800c9d9
 800c9b8:	0800c9e1 	.word	0x0800c9e1
 800c9bc:	0800c9e9 	.word	0x0800c9e9
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9c6:	e052      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9ce:	e04e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9d0:	2308      	movs	r3, #8
 800c9d2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9d6:	e04a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9d8:	2310      	movs	r3, #16
 800c9da:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9de:	e046      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9e6:	e042      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9e8:	2340      	movs	r3, #64	; 0x40
 800c9ea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9ee:	e03e      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9f0:	2380      	movs	r3, #128	; 0x80
 800c9f2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800c9f6:	e03a      	b.n	800ca6e <UART_SetConfig+0x616>
 800c9f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	4b4b      	ldr	r3, [pc, #300]	; (800cb2c <UART_SetConfig+0x6d4>)
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d131      	bne.n	800ca68 <UART_SetConfig+0x610>
 800ca04:	4b46      	ldr	r3, [pc, #280]	; (800cb20 <UART_SetConfig+0x6c8>)
 800ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	2b05      	cmp	r3, #5
 800ca0e:	d827      	bhi.n	800ca60 <UART_SetConfig+0x608>
 800ca10:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <UART_SetConfig+0x5c0>)
 800ca12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca16:	bf00      	nop
 800ca18:	0800ca31 	.word	0x0800ca31
 800ca1c:	0800ca39 	.word	0x0800ca39
 800ca20:	0800ca41 	.word	0x0800ca41
 800ca24:	0800ca49 	.word	0x0800ca49
 800ca28:	0800ca51 	.word	0x0800ca51
 800ca2c:	0800ca59 	.word	0x0800ca59
 800ca30:	2302      	movs	r3, #2
 800ca32:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca36:	e01a      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca3e:	e016      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca40:	2308      	movs	r3, #8
 800ca42:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca46:	e012      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca4e:	e00e      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca50:	2320      	movs	r3, #32
 800ca52:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca56:	e00a      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca58:	2340      	movs	r3, #64	; 0x40
 800ca5a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca5e:	e006      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca60:	2380      	movs	r3, #128	; 0x80
 800ca62:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800ca66:	e002      	b.n	800ca6e <UART_SetConfig+0x616>
 800ca68:	2380      	movs	r3, #128	; 0x80
 800ca6a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	4b2d      	ldr	r3, [pc, #180]	; (800cb2c <UART_SetConfig+0x6d4>)
 800ca76:	429a      	cmp	r2, r3
 800ca78:	f041 808a 	bne.w	800db90 <UART_SetConfig+0x1738>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca7c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	dc47      	bgt.n	800cb14 <UART_SetConfig+0x6bc>
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	f2c0 82fa 	blt.w	800d07e <UART_SetConfig+0xc26>
 800ca8a:	3b02      	subs	r3, #2
 800ca8c:	2b1e      	cmp	r3, #30
 800ca8e:	f200 82f6 	bhi.w	800d07e <UART_SetConfig+0xc26>
 800ca92:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <UART_SetConfig+0x640>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800cb31 	.word	0x0800cb31
 800ca9c:	0800d07f 	.word	0x0800d07f
 800caa0:	0800cbed 	.word	0x0800cbed
 800caa4:	0800d07f 	.word	0x0800d07f
 800caa8:	0800d07f 	.word	0x0800d07f
 800caac:	0800d07f 	.word	0x0800d07f
 800cab0:	0800ccb1 	.word	0x0800ccb1
 800cab4:	0800d07f 	.word	0x0800d07f
 800cab8:	0800d07f 	.word	0x0800d07f
 800cabc:	0800d07f 	.word	0x0800d07f
 800cac0:	0800d07f 	.word	0x0800d07f
 800cac4:	0800d07f 	.word	0x0800d07f
 800cac8:	0800d07f 	.word	0x0800d07f
 800cacc:	0800d07f 	.word	0x0800d07f
 800cad0:	0800cd75 	.word	0x0800cd75
 800cad4:	0800d07f 	.word	0x0800d07f
 800cad8:	0800d07f 	.word	0x0800d07f
 800cadc:	0800d07f 	.word	0x0800d07f
 800cae0:	0800d07f 	.word	0x0800d07f
 800cae4:	0800d07f 	.word	0x0800d07f
 800cae8:	0800d07f 	.word	0x0800d07f
 800caec:	0800d07f 	.word	0x0800d07f
 800caf0:	0800d07f 	.word	0x0800d07f
 800caf4:	0800d07f 	.word	0x0800d07f
 800caf8:	0800d07f 	.word	0x0800d07f
 800cafc:	0800d07f 	.word	0x0800d07f
 800cb00:	0800d07f 	.word	0x0800d07f
 800cb04:	0800d07f 	.word	0x0800d07f
 800cb08:	0800d07f 	.word	0x0800d07f
 800cb0c:	0800d07f 	.word	0x0800d07f
 800cb10:	0800ceff 	.word	0x0800ceff
 800cb14:	2b40      	cmp	r3, #64	; 0x40
 800cb16:	f000 8255 	beq.w	800cfc4 <UART_SetConfig+0xb6c>
 800cb1a:	e2b0      	b.n	800d07e <UART_SetConfig+0xc26>
 800cb1c:	40011400 	.word	0x40011400
 800cb20:	58024400 	.word	0x58024400
 800cb24:	40007800 	.word	0x40007800
 800cb28:	40007c00 	.word	0x40007c00
 800cb2c:	58000c00 	.word	0x58000c00
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cb30:	f7fd f846 	bl	8009bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb34:	4602      	mov	r2, r0
 800cb36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d04f      	beq.n	800cbe0 <UART_SetConfig+0x788>
 800cb40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d048      	beq.n	800cbdc <UART_SetConfig+0x784>
 800cb4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d041      	beq.n	800cbd8 <UART_SetConfig+0x780>
 800cb54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d03a      	beq.n	800cbd4 <UART_SetConfig+0x77c>
 800cb5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	d033      	beq.n	800cbd0 <UART_SetConfig+0x778>
 800cb68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6e:	2b05      	cmp	r3, #5
 800cb70:	d02c      	beq.n	800cbcc <UART_SetConfig+0x774>
 800cb72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	2b06      	cmp	r3, #6
 800cb7a:	d025      	beq.n	800cbc8 <UART_SetConfig+0x770>
 800cb7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb82:	2b07      	cmp	r3, #7
 800cb84:	d01e      	beq.n	800cbc4 <UART_SetConfig+0x76c>
 800cb86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d017      	beq.n	800cbc0 <UART_SetConfig+0x768>
 800cb90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb96:	2b09      	cmp	r3, #9
 800cb98:	d010      	beq.n	800cbbc <UART_SetConfig+0x764>
 800cb9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	2b0a      	cmp	r3, #10
 800cba2:	d009      	beq.n	800cbb8 <UART_SetConfig+0x760>
 800cba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbaa:	2b0b      	cmp	r3, #11
 800cbac:	d102      	bne.n	800cbb4 <UART_SetConfig+0x75c>
 800cbae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbb2:	e016      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e014      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbb8:	2380      	movs	r3, #128	; 0x80
 800cbba:	e012      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbbc:	2340      	movs	r3, #64	; 0x40
 800cbbe:	e010      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbc0:	2320      	movs	r3, #32
 800cbc2:	e00e      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbc4:	2310      	movs	r3, #16
 800cbc6:	e00c      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	e00a      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbcc:	230a      	movs	r3, #10
 800cbce:	e008      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	e006      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbd4:	2306      	movs	r3, #6
 800cbd6:	e004      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbd8:	2304      	movs	r3, #4
 800cbda:	e002      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	e000      	b.n	800cbe2 <UART_SetConfig+0x78a>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800cbea:	e24c      	b.n	800d086 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fc fffb 	bl	8009bec <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cbf6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800cbfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d04f      	beq.n	800cca4 <UART_SetConfig+0x84c>
 800cc04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d048      	beq.n	800cca0 <UART_SetConfig+0x848>
 800cc0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d041      	beq.n	800cc9c <UART_SetConfig+0x844>
 800cc18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d03a      	beq.n	800cc98 <UART_SetConfig+0x840>
 800cc22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	2b04      	cmp	r3, #4
 800cc2a:	d033      	beq.n	800cc94 <UART_SetConfig+0x83c>
 800cc2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc32:	2b05      	cmp	r3, #5
 800cc34:	d02c      	beq.n	800cc90 <UART_SetConfig+0x838>
 800cc36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	2b06      	cmp	r3, #6
 800cc3e:	d025      	beq.n	800cc8c <UART_SetConfig+0x834>
 800cc40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	2b07      	cmp	r3, #7
 800cc48:	d01e      	beq.n	800cc88 <UART_SetConfig+0x830>
 800cc4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d017      	beq.n	800cc84 <UART_SetConfig+0x82c>
 800cc54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	d010      	beq.n	800cc80 <UART_SetConfig+0x828>
 800cc5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	2b0a      	cmp	r3, #10
 800cc66:	d009      	beq.n	800cc7c <UART_SetConfig+0x824>
 800cc68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6e:	2b0b      	cmp	r3, #11
 800cc70:	d102      	bne.n	800cc78 <UART_SetConfig+0x820>
 800cc72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc76:	e016      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e014      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc7c:	2380      	movs	r3, #128	; 0x80
 800cc7e:	e012      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc80:	2340      	movs	r3, #64	; 0x40
 800cc82:	e010      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc84:	2320      	movs	r3, #32
 800cc86:	e00e      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	e00c      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc8c:	230c      	movs	r3, #12
 800cc8e:	e00a      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc90:	230a      	movs	r3, #10
 800cc92:	e008      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc94:	2308      	movs	r3, #8
 800cc96:	e006      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc98:	2306      	movs	r3, #6
 800cc9a:	e004      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cc9c:	2304      	movs	r3, #4
 800cc9e:	e002      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cca0:	2302      	movs	r3, #2
 800cca2:	e000      	b.n	800cca6 <UART_SetConfig+0x84e>
 800cca4:	2301      	movs	r3, #1
 800cca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800ccae:	e1ea      	b.n	800d086 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fd f8ed 	bl	8009e94 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ccba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ccbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d04f      	beq.n	800cd68 <UART_SetConfig+0x910>
 800ccc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d048      	beq.n	800cd64 <UART_SetConfig+0x90c>
 800ccd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d041      	beq.n	800cd60 <UART_SetConfig+0x908>
 800ccdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d03a      	beq.n	800cd5c <UART_SetConfig+0x904>
 800cce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	d033      	beq.n	800cd58 <UART_SetConfig+0x900>
 800ccf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	2b05      	cmp	r3, #5
 800ccf8:	d02c      	beq.n	800cd54 <UART_SetConfig+0x8fc>
 800ccfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d025      	beq.n	800cd50 <UART_SetConfig+0x8f8>
 800cd04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0a:	2b07      	cmp	r3, #7
 800cd0c:	d01e      	beq.n	800cd4c <UART_SetConfig+0x8f4>
 800cd0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d017      	beq.n	800cd48 <UART_SetConfig+0x8f0>
 800cd18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1e:	2b09      	cmp	r3, #9
 800cd20:	d010      	beq.n	800cd44 <UART_SetConfig+0x8ec>
 800cd22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd28:	2b0a      	cmp	r3, #10
 800cd2a:	d009      	beq.n	800cd40 <UART_SetConfig+0x8e8>
 800cd2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	2b0b      	cmp	r3, #11
 800cd34:	d102      	bne.n	800cd3c <UART_SetConfig+0x8e4>
 800cd36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd3a:	e016      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e014      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	e012      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd44:	2340      	movs	r3, #64	; 0x40
 800cd46:	e010      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd48:	2320      	movs	r3, #32
 800cd4a:	e00e      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	e00c      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd50:	230c      	movs	r3, #12
 800cd52:	e00a      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd54:	230a      	movs	r3, #10
 800cd56:	e008      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd58:	2308      	movs	r3, #8
 800cd5a:	e006      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd5c:	2306      	movs	r3, #6
 800cd5e:	e004      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd60:	2304      	movs	r3, #4
 800cd62:	e002      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e000      	b.n	800cd6a <UART_SetConfig+0x912>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800cd72:	e188      	b.n	800d086 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd74:	4b90      	ldr	r3, [pc, #576]	; (800cfb8 <UART_SetConfig+0xb60>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0320 	and.w	r3, r3, #32
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d062      	beq.n	800ce46 <UART_SetConfig+0x9ee>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cd80:	4b8d      	ldr	r3, [pc, #564]	; (800cfb8 <UART_SetConfig+0xb60>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	08db      	lsrs	r3, r3, #3
 800cd86:	f003 0203 	and.w	r2, r3, #3
 800cd8a:	4b8c      	ldr	r3, [pc, #560]	; (800cfbc <UART_SetConfig+0xb64>)
 800cd8c:	fa23 f202 	lsr.w	r2, r3, r2
 800cd90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d04f      	beq.n	800ce3a <UART_SetConfig+0x9e2>
 800cd9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d048      	beq.n	800ce36 <UART_SetConfig+0x9de>
 800cda4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d041      	beq.n	800ce32 <UART_SetConfig+0x9da>
 800cdae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d03a      	beq.n	800ce2e <UART_SetConfig+0x9d6>
 800cdb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d033      	beq.n	800ce2a <UART_SetConfig+0x9d2>
 800cdc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	2b05      	cmp	r3, #5
 800cdca:	d02c      	beq.n	800ce26 <UART_SetConfig+0x9ce>
 800cdcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	2b06      	cmp	r3, #6
 800cdd4:	d025      	beq.n	800ce22 <UART_SetConfig+0x9ca>
 800cdd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	2b07      	cmp	r3, #7
 800cdde:	d01e      	beq.n	800ce1e <UART_SetConfig+0x9c6>
 800cde0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	2b08      	cmp	r3, #8
 800cde8:	d017      	beq.n	800ce1a <UART_SetConfig+0x9c2>
 800cdea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	2b09      	cmp	r3, #9
 800cdf2:	d010      	beq.n	800ce16 <UART_SetConfig+0x9be>
 800cdf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	2b0a      	cmp	r3, #10
 800cdfc:	d009      	beq.n	800ce12 <UART_SetConfig+0x9ba>
 800cdfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b0b      	cmp	r3, #11
 800ce06:	d102      	bne.n	800ce0e <UART_SetConfig+0x9b6>
 800ce08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce0c:	e016      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e014      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce12:	2380      	movs	r3, #128	; 0x80
 800ce14:	e012      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce16:	2340      	movs	r3, #64	; 0x40
 800ce18:	e010      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce1a:	2320      	movs	r3, #32
 800ce1c:	e00e      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce1e:	2310      	movs	r3, #16
 800ce20:	e00c      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce22:	230c      	movs	r3, #12
 800ce24:	e00a      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce26:	230a      	movs	r3, #10
 800ce28:	e008      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce2a:	2308      	movs	r3, #8
 800ce2c:	e006      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce2e:	2306      	movs	r3, #6
 800ce30:	e004      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce32:	2304      	movs	r3, #4
 800ce34:	e002      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce36:	2302      	movs	r3, #2
 800ce38:	e000      	b.n	800ce3c <UART_SetConfig+0x9e4>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800ce44:	e11f      	b.n	800d086 <UART_SetConfig+0xc2e>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ce46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d04f      	beq.n	800cef0 <UART_SetConfig+0xa98>
 800ce50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d048      	beq.n	800ceec <UART_SetConfig+0xa94>
 800ce5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d041      	beq.n	800cee8 <UART_SetConfig+0xa90>
 800ce64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d03a      	beq.n	800cee4 <UART_SetConfig+0xa8c>
 800ce6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	d033      	beq.n	800cee0 <UART_SetConfig+0xa88>
 800ce78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	2b05      	cmp	r3, #5
 800ce80:	d02c      	beq.n	800cedc <UART_SetConfig+0xa84>
 800ce82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	2b06      	cmp	r3, #6
 800ce8a:	d025      	beq.n	800ced8 <UART_SetConfig+0xa80>
 800ce8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce92:	2b07      	cmp	r3, #7
 800ce94:	d01e      	beq.n	800ced4 <UART_SetConfig+0xa7c>
 800ce96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	2b08      	cmp	r3, #8
 800ce9e:	d017      	beq.n	800ced0 <UART_SetConfig+0xa78>
 800cea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	2b09      	cmp	r3, #9
 800cea8:	d010      	beq.n	800cecc <UART_SetConfig+0xa74>
 800ceaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	2b0a      	cmp	r3, #10
 800ceb2:	d009      	beq.n	800cec8 <UART_SetConfig+0xa70>
 800ceb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceba:	2b0b      	cmp	r3, #11
 800cebc:	d102      	bne.n	800cec4 <UART_SetConfig+0xa6c>
 800cebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cec2:	e016      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cec4:	2201      	movs	r2, #1
 800cec6:	e014      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cec8:	2280      	movs	r2, #128	; 0x80
 800ceca:	e012      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cecc:	2240      	movs	r2, #64	; 0x40
 800cece:	e010      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800ced0:	2220      	movs	r2, #32
 800ced2:	e00e      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800ced4:	2210      	movs	r2, #16
 800ced6:	e00c      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800ced8:	220c      	movs	r2, #12
 800ceda:	e00a      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cedc:	220a      	movs	r2, #10
 800cede:	e008      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cee0:	2208      	movs	r2, #8
 800cee2:	e006      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cee4:	2206      	movs	r2, #6
 800cee6:	e004      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cee8:	2204      	movs	r2, #4
 800ceea:	e002      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800ceec:	2202      	movs	r2, #2
 800ceee:	e000      	b.n	800cef2 <UART_SetConfig+0xa9a>
 800cef0:	2201      	movs	r2, #1
 800cef2:	4b32      	ldr	r3, [pc, #200]	; (800cfbc <UART_SetConfig+0xb64>)
 800cef4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800cefc:	e0c3      	b.n	800d086 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cefe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d04f      	beq.n	800cfa8 <UART_SetConfig+0xb50>
 800cf08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d048      	beq.n	800cfa4 <UART_SetConfig+0xb4c>
 800cf12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d041      	beq.n	800cfa0 <UART_SetConfig+0xb48>
 800cf1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d03a      	beq.n	800cf9c <UART_SetConfig+0xb44>
 800cf26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	d033      	beq.n	800cf98 <UART_SetConfig+0xb40>
 800cf30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf36:	2b05      	cmp	r3, #5
 800cf38:	d02c      	beq.n	800cf94 <UART_SetConfig+0xb3c>
 800cf3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	2b06      	cmp	r3, #6
 800cf42:	d025      	beq.n	800cf90 <UART_SetConfig+0xb38>
 800cf44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	2b07      	cmp	r3, #7
 800cf4c:	d01e      	beq.n	800cf8c <UART_SetConfig+0xb34>
 800cf4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d017      	beq.n	800cf88 <UART_SetConfig+0xb30>
 800cf58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5e:	2b09      	cmp	r3, #9
 800cf60:	d010      	beq.n	800cf84 <UART_SetConfig+0xb2c>
 800cf62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	2b0a      	cmp	r3, #10
 800cf6a:	d009      	beq.n	800cf80 <UART_SetConfig+0xb28>
 800cf6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	2b0b      	cmp	r3, #11
 800cf74:	d102      	bne.n	800cf7c <UART_SetConfig+0xb24>
 800cf76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf7a:	e016      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	e014      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf80:	2280      	movs	r2, #128	; 0x80
 800cf82:	e012      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf84:	2240      	movs	r2, #64	; 0x40
 800cf86:	e010      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf88:	2220      	movs	r2, #32
 800cf8a:	e00e      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf8c:	2210      	movs	r2, #16
 800cf8e:	e00c      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf90:	220c      	movs	r2, #12
 800cf92:	e00a      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf94:	220a      	movs	r2, #10
 800cf96:	e008      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf98:	2208      	movs	r2, #8
 800cf9a:	e006      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cf9c:	2206      	movs	r2, #6
 800cf9e:	e004      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cfa0:	2204      	movs	r2, #4
 800cfa2:	e002      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	e000      	b.n	800cfaa <UART_SetConfig+0xb52>
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <UART_SetConfig+0xb68>)
 800cfac:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800cfb4:	e067      	b.n	800d086 <UART_SetConfig+0xc2e>
 800cfb6:	bf00      	nop
 800cfb8:	58024400 	.word	0x58024400
 800cfbc:	03d09000 	.word	0x03d09000
 800cfc0:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cfc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d04f      	beq.n	800d06e <UART_SetConfig+0xc16>
 800cfce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d048      	beq.n	800d06a <UART_SetConfig+0xc12>
 800cfd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d041      	beq.n	800d066 <UART_SetConfig+0xc0e>
 800cfe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d03a      	beq.n	800d062 <UART_SetConfig+0xc0a>
 800cfec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	2b04      	cmp	r3, #4
 800cff4:	d033      	beq.n	800d05e <UART_SetConfig+0xc06>
 800cff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	2b05      	cmp	r3, #5
 800cffe:	d02c      	beq.n	800d05a <UART_SetConfig+0xc02>
 800d000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	2b06      	cmp	r3, #6
 800d008:	d025      	beq.n	800d056 <UART_SetConfig+0xbfe>
 800d00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	2b07      	cmp	r3, #7
 800d012:	d01e      	beq.n	800d052 <UART_SetConfig+0xbfa>
 800d014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01a:	2b08      	cmp	r3, #8
 800d01c:	d017      	beq.n	800d04e <UART_SetConfig+0xbf6>
 800d01e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	2b09      	cmp	r3, #9
 800d026:	d010      	beq.n	800d04a <UART_SetConfig+0xbf2>
 800d028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	2b0a      	cmp	r3, #10
 800d030:	d009      	beq.n	800d046 <UART_SetConfig+0xbee>
 800d032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	2b0b      	cmp	r3, #11
 800d03a:	d102      	bne.n	800d042 <UART_SetConfig+0xbea>
 800d03c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d040:	e016      	b.n	800d070 <UART_SetConfig+0xc18>
 800d042:	2201      	movs	r2, #1
 800d044:	e014      	b.n	800d070 <UART_SetConfig+0xc18>
 800d046:	2280      	movs	r2, #128	; 0x80
 800d048:	e012      	b.n	800d070 <UART_SetConfig+0xc18>
 800d04a:	2240      	movs	r2, #64	; 0x40
 800d04c:	e010      	b.n	800d070 <UART_SetConfig+0xc18>
 800d04e:	2220      	movs	r2, #32
 800d050:	e00e      	b.n	800d070 <UART_SetConfig+0xc18>
 800d052:	2210      	movs	r2, #16
 800d054:	e00c      	b.n	800d070 <UART_SetConfig+0xc18>
 800d056:	220c      	movs	r2, #12
 800d058:	e00a      	b.n	800d070 <UART_SetConfig+0xc18>
 800d05a:	220a      	movs	r2, #10
 800d05c:	e008      	b.n	800d070 <UART_SetConfig+0xc18>
 800d05e:	2208      	movs	r2, #8
 800d060:	e006      	b.n	800d070 <UART_SetConfig+0xc18>
 800d062:	2206      	movs	r2, #6
 800d064:	e004      	b.n	800d070 <UART_SetConfig+0xc18>
 800d066:	2204      	movs	r2, #4
 800d068:	e002      	b.n	800d070 <UART_SetConfig+0xc18>
 800d06a:	2202      	movs	r2, #2
 800d06c:	e000      	b.n	800d070 <UART_SetConfig+0xc18>
 800d06e:	2201      	movs	r2, #1
 800d070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d074:	fbb3 f3f2 	udiv	r3, r3, r2
 800d078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800d07c:	e003      	b.n	800d086 <UART_SetConfig+0xc2e>
      default:
        ret = HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d084:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f001 853d 	beq.w	800eb0a <UART_SetConfig+0x26b2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	4613      	mov	r3, r2
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	441a      	add	r2, r3
 800d09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d307      	bcc.n	800d0b4 <UART_SetConfig+0xc5c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d904      	bls.n	800d0be <UART_SetConfig+0xc66>
      {
        ret = HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800d0ba:	f001 bd26 	b.w	800eb0a <UART_SetConfig+0x26b2>
      }
      else
      {
        switch (clocksource)
 800d0be:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	dc48      	bgt.n	800d158 <UART_SetConfig+0xd00>
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	f2c0 8547 	blt.w	800db5a <UART_SetConfig+0x1702>
 800d0cc:	3b02      	subs	r3, #2
 800d0ce:	2b1e      	cmp	r3, #30
 800d0d0:	f200 8543 	bhi.w	800db5a <UART_SetConfig+0x1702>
 800d0d4:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <UART_SetConfig+0xc84>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d163 	.word	0x0800d163
 800d0e0:	0800db5b 	.word	0x0800db5b
 800d0e4:	0800d2e3 	.word	0x0800d2e3
 800d0e8:	0800db5b 	.word	0x0800db5b
 800d0ec:	0800db5b 	.word	0x0800db5b
 800d0f0:	0800db5b 	.word	0x0800db5b
 800d0f4:	0800d45b 	.word	0x0800d45b
 800d0f8:	0800db5b 	.word	0x0800db5b
 800d0fc:	0800db5b 	.word	0x0800db5b
 800d100:	0800db5b 	.word	0x0800db5b
 800d104:	0800db5b 	.word	0x0800db5b
 800d108:	0800db5b 	.word	0x0800db5b
 800d10c:	0800db5b 	.word	0x0800db5b
 800d110:	0800db5b 	.word	0x0800db5b
 800d114:	0800d5c5 	.word	0x0800d5c5
 800d118:	0800db5b 	.word	0x0800db5b
 800d11c:	0800db5b 	.word	0x0800db5b
 800d120:	0800db5b 	.word	0x0800db5b
 800d124:	0800db5b 	.word	0x0800db5b
 800d128:	0800db5b 	.word	0x0800db5b
 800d12c:	0800db5b 	.word	0x0800db5b
 800d130:	0800db5b 	.word	0x0800db5b
 800d134:	0800db5b 	.word	0x0800db5b
 800d138:	0800db5b 	.word	0x0800db5b
 800d13c:	0800db5b 	.word	0x0800db5b
 800d140:	0800db5b 	.word	0x0800db5b
 800d144:	0800db5b 	.word	0x0800db5b
 800d148:	0800db5b 	.word	0x0800db5b
 800d14c:	0800db5b 	.word	0x0800db5b
 800d150:	0800db5b 	.word	0x0800db5b
 800d154:	0800d8ad 	.word	0x0800d8ad
 800d158:	2b40      	cmp	r3, #64	; 0x40
 800d15a:	f000 8453 	beq.w	800da04 <UART_SetConfig+0x15ac>
 800d15e:	f000 bcfc 	b.w	800db5a <UART_SetConfig+0x1702>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d162:	f7fc fd2d 	bl	8009bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d166:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d16a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d16e:	2200      	movs	r2, #0
 800d170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d174:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d072      	beq.n	800d268 <UART_SetConfig+0xe10>
 800d182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d068      	beq.n	800d25e <UART_SetConfig+0xe06>
 800d18c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d192:	2b02      	cmp	r3, #2
 800d194:	d05e      	beq.n	800d254 <UART_SetConfig+0xdfc>
 800d196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d054      	beq.n	800d24a <UART_SetConfig+0xdf2>
 800d1a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	d04a      	beq.n	800d240 <UART_SetConfig+0xde8>
 800d1aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	2b05      	cmp	r3, #5
 800d1b2:	d040      	beq.n	800d236 <UART_SetConfig+0xdde>
 800d1b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ba:	2b06      	cmp	r3, #6
 800d1bc:	d036      	beq.n	800d22c <UART_SetConfig+0xdd4>
 800d1be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c4:	2b07      	cmp	r3, #7
 800d1c6:	d02c      	beq.n	800d222 <UART_SetConfig+0xdca>
 800d1c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	d022      	beq.n	800d218 <UART_SetConfig+0xdc0>
 800d1d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	d018      	beq.n	800d20e <UART_SetConfig+0xdb6>
 800d1dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e2:	2b0a      	cmp	r3, #10
 800d1e4:	d00e      	beq.n	800d204 <UART_SetConfig+0xdac>
 800d1e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b0b      	cmp	r3, #11
 800d1ee:	d104      	bne.n	800d1fa <UART_SetConfig+0xda2>
 800d1f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	e03a      	b.n	800d270 <UART_SetConfig+0xe18>
 800d1fa:	f04f 0201 	mov.w	r2, #1
 800d1fe:	f04f 0300 	mov.w	r3, #0
 800d202:	e035      	b.n	800d270 <UART_SetConfig+0xe18>
 800d204:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d208:	f04f 0300 	mov.w	r3, #0
 800d20c:	e030      	b.n	800d270 <UART_SetConfig+0xe18>
 800d20e:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d212:	f04f 0300 	mov.w	r3, #0
 800d216:	e02b      	b.n	800d270 <UART_SetConfig+0xe18>
 800d218:	f04f 0220 	mov.w	r2, #32
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	e026      	b.n	800d270 <UART_SetConfig+0xe18>
 800d222:	f04f 0210 	mov.w	r2, #16
 800d226:	f04f 0300 	mov.w	r3, #0
 800d22a:	e021      	b.n	800d270 <UART_SetConfig+0xe18>
 800d22c:	f04f 020c 	mov.w	r2, #12
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	e01c      	b.n	800d270 <UART_SetConfig+0xe18>
 800d236:	f04f 020a 	mov.w	r2, #10
 800d23a:	f04f 0300 	mov.w	r3, #0
 800d23e:	e017      	b.n	800d270 <UART_SetConfig+0xe18>
 800d240:	f04f 0208 	mov.w	r2, #8
 800d244:	f04f 0300 	mov.w	r3, #0
 800d248:	e012      	b.n	800d270 <UART_SetConfig+0xe18>
 800d24a:	f04f 0206 	mov.w	r2, #6
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	e00d      	b.n	800d270 <UART_SetConfig+0xe18>
 800d254:	f04f 0204 	mov.w	r2, #4
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	e008      	b.n	800d270 <UART_SetConfig+0xe18>
 800d25e:	f04f 0202 	mov.w	r2, #2
 800d262:	f04f 0300 	mov.w	r3, #0
 800d266:	e003      	b.n	800d270 <UART_SetConfig+0xe18>
 800d268:	f04f 0201 	mov.w	r2, #1
 800d26c:	f04f 0300 	mov.w	r3, #0
 800d270:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800d274:	f7f3 fa48 	bl	8000708 <__aeabi_uldivmod>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4610      	mov	r0, r2
 800d27e:	4619      	mov	r1, r3
 800d280:	f04f 0200 	mov.w	r2, #0
 800d284:	f04f 0300 	mov.w	r3, #0
 800d288:	020b      	lsls	r3, r1, #8
 800d28a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d28e:	0202      	lsls	r2, r0, #8
 800d290:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d294:	6849      	ldr	r1, [r1, #4]
 800d296:	0849      	lsrs	r1, r1, #1
 800d298:	2000      	movs	r0, #0
 800d29a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800d29e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800d2a2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	1851      	adds	r1, r2, r1
 800d2aa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	eb43 0101 	adc.w	r1, r3, r1
 800d2b4:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800d2b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d2c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d2cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d2d0:	f7f3 fa1a 	bl	8000708 <__aeabi_uldivmod>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4613      	mov	r3, r2
 800d2da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800d2de:	f000 bc40 	b.w	800db62 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fc fc80 	bl	8009bec <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d300:	2b00      	cmp	r3, #0
 800d302:	d072      	beq.n	800d3ea <UART_SetConfig+0xf92>
 800d304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d068      	beq.n	800d3e0 <UART_SetConfig+0xf88>
 800d30e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d314:	2b02      	cmp	r3, #2
 800d316:	d05e      	beq.n	800d3d6 <UART_SetConfig+0xf7e>
 800d318:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d054      	beq.n	800d3cc <UART_SetConfig+0xf74>
 800d322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d04a      	beq.n	800d3c2 <UART_SetConfig+0xf6a>
 800d32c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	2b05      	cmp	r3, #5
 800d334:	d040      	beq.n	800d3b8 <UART_SetConfig+0xf60>
 800d336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	2b06      	cmp	r3, #6
 800d33e:	d036      	beq.n	800d3ae <UART_SetConfig+0xf56>
 800d340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	2b07      	cmp	r3, #7
 800d348:	d02c      	beq.n	800d3a4 <UART_SetConfig+0xf4c>
 800d34a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d350:	2b08      	cmp	r3, #8
 800d352:	d022      	beq.n	800d39a <UART_SetConfig+0xf42>
 800d354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35a:	2b09      	cmp	r3, #9
 800d35c:	d018      	beq.n	800d390 <UART_SetConfig+0xf38>
 800d35e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d364:	2b0a      	cmp	r3, #10
 800d366:	d00e      	beq.n	800d386 <UART_SetConfig+0xf2e>
 800d368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	2b0b      	cmp	r3, #11
 800d370:	d104      	bne.n	800d37c <UART_SetConfig+0xf24>
 800d372:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d376:	f04f 0300 	mov.w	r3, #0
 800d37a:	e03a      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d37c:	f04f 0201 	mov.w	r2, #1
 800d380:	f04f 0300 	mov.w	r3, #0
 800d384:	e035      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d386:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d38a:	f04f 0300 	mov.w	r3, #0
 800d38e:	e030      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d390:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d394:	f04f 0300 	mov.w	r3, #0
 800d398:	e02b      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d39a:	f04f 0220 	mov.w	r2, #32
 800d39e:	f04f 0300 	mov.w	r3, #0
 800d3a2:	e026      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3a4:	f04f 0210 	mov.w	r2, #16
 800d3a8:	f04f 0300 	mov.w	r3, #0
 800d3ac:	e021      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3ae:	f04f 020c 	mov.w	r2, #12
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	e01c      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3b8:	f04f 020a 	mov.w	r2, #10
 800d3bc:	f04f 0300 	mov.w	r3, #0
 800d3c0:	e017      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3c2:	f04f 0208 	mov.w	r2, #8
 800d3c6:	f04f 0300 	mov.w	r3, #0
 800d3ca:	e012      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3cc:	f04f 0206 	mov.w	r2, #6
 800d3d0:	f04f 0300 	mov.w	r3, #0
 800d3d4:	e00d      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3d6:	f04f 0204 	mov.w	r2, #4
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	e008      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3e0:	f04f 0202 	mov.w	r2, #2
 800d3e4:	f04f 0300 	mov.w	r3, #0
 800d3e8:	e003      	b.n	800d3f2 <UART_SetConfig+0xf9a>
 800d3ea:	f04f 0201 	mov.w	r2, #1
 800d3ee:	f04f 0300 	mov.w	r3, #0
 800d3f2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d3f6:	f7f3 f987 	bl	8000708 <__aeabi_uldivmod>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	4610      	mov	r0, r2
 800d400:	4619      	mov	r1, r3
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	f04f 0300 	mov.w	r3, #0
 800d40a:	020b      	lsls	r3, r1, #8
 800d40c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d410:	0202      	lsls	r2, r0, #8
 800d412:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d416:	6849      	ldr	r1, [r1, #4]
 800d418:	0849      	lsrs	r1, r1, #1
 800d41a:	2000      	movs	r0, #0
 800d41c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d420:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800d424:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d428:	4621      	mov	r1, r4
 800d42a:	1851      	adds	r1, r2, r1
 800d42c:	67b9      	str	r1, [r7, #120]	; 0x78
 800d42e:	4629      	mov	r1, r5
 800d430:	eb43 0101 	adc.w	r1, r3, r1
 800d434:	67f9      	str	r1, [r7, #124]	; 0x7c
 800d436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	673b      	str	r3, [r7, #112]	; 0x70
 800d440:	677a      	str	r2, [r7, #116]	; 0x74
 800d442:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d446:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d44a:	f7f3 f95d 	bl	8000708 <__aeabi_uldivmod>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	4613      	mov	r3, r2
 800d454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800d458:	e383      	b.n	800db62 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d45a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fc fd18 	bl	8009e94 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d468:	2200      	movs	r2, #0
 800d46a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d46c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d46e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d072      	beq.n	800d55e <UART_SetConfig+0x1106>
 800d478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d068      	beq.n	800d554 <UART_SetConfig+0x10fc>
 800d482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d05e      	beq.n	800d54a <UART_SetConfig+0x10f2>
 800d48c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d492:	2b03      	cmp	r3, #3
 800d494:	d054      	beq.n	800d540 <UART_SetConfig+0x10e8>
 800d496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	d04a      	beq.n	800d536 <UART_SetConfig+0x10de>
 800d4a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a6:	2b05      	cmp	r3, #5
 800d4a8:	d040      	beq.n	800d52c <UART_SetConfig+0x10d4>
 800d4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b0:	2b06      	cmp	r3, #6
 800d4b2:	d036      	beq.n	800d522 <UART_SetConfig+0x10ca>
 800d4b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	2b07      	cmp	r3, #7
 800d4bc:	d02c      	beq.n	800d518 <UART_SetConfig+0x10c0>
 800d4be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	2b08      	cmp	r3, #8
 800d4c6:	d022      	beq.n	800d50e <UART_SetConfig+0x10b6>
 800d4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	2b09      	cmp	r3, #9
 800d4d0:	d018      	beq.n	800d504 <UART_SetConfig+0x10ac>
 800d4d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	2b0a      	cmp	r3, #10
 800d4da:	d00e      	beq.n	800d4fa <UART_SetConfig+0x10a2>
 800d4dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e2:	2b0b      	cmp	r3, #11
 800d4e4:	d104      	bne.n	800d4f0 <UART_SetConfig+0x1098>
 800d4e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4ea:	f04f 0300 	mov.w	r3, #0
 800d4ee:	e03a      	b.n	800d566 <UART_SetConfig+0x110e>
 800d4f0:	f04f 0201 	mov.w	r2, #1
 800d4f4:	f04f 0300 	mov.w	r3, #0
 800d4f8:	e035      	b.n	800d566 <UART_SetConfig+0x110e>
 800d4fa:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d4fe:	f04f 0300 	mov.w	r3, #0
 800d502:	e030      	b.n	800d566 <UART_SetConfig+0x110e>
 800d504:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d508:	f04f 0300 	mov.w	r3, #0
 800d50c:	e02b      	b.n	800d566 <UART_SetConfig+0x110e>
 800d50e:	f04f 0220 	mov.w	r2, #32
 800d512:	f04f 0300 	mov.w	r3, #0
 800d516:	e026      	b.n	800d566 <UART_SetConfig+0x110e>
 800d518:	f04f 0210 	mov.w	r2, #16
 800d51c:	f04f 0300 	mov.w	r3, #0
 800d520:	e021      	b.n	800d566 <UART_SetConfig+0x110e>
 800d522:	f04f 020c 	mov.w	r2, #12
 800d526:	f04f 0300 	mov.w	r3, #0
 800d52a:	e01c      	b.n	800d566 <UART_SetConfig+0x110e>
 800d52c:	f04f 020a 	mov.w	r2, #10
 800d530:	f04f 0300 	mov.w	r3, #0
 800d534:	e017      	b.n	800d566 <UART_SetConfig+0x110e>
 800d536:	f04f 0208 	mov.w	r2, #8
 800d53a:	f04f 0300 	mov.w	r3, #0
 800d53e:	e012      	b.n	800d566 <UART_SetConfig+0x110e>
 800d540:	f04f 0206 	mov.w	r2, #6
 800d544:	f04f 0300 	mov.w	r3, #0
 800d548:	e00d      	b.n	800d566 <UART_SetConfig+0x110e>
 800d54a:	f04f 0204 	mov.w	r2, #4
 800d54e:	f04f 0300 	mov.w	r3, #0
 800d552:	e008      	b.n	800d566 <UART_SetConfig+0x110e>
 800d554:	f04f 0202 	mov.w	r2, #2
 800d558:	f04f 0300 	mov.w	r3, #0
 800d55c:	e003      	b.n	800d566 <UART_SetConfig+0x110e>
 800d55e:	f04f 0201 	mov.w	r2, #1
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d56a:	f7f3 f8cd 	bl	8000708 <__aeabi_uldivmod>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	4610      	mov	r0, r2
 800d574:	4619      	mov	r1, r3
 800d576:	f04f 0200 	mov.w	r2, #0
 800d57a:	f04f 0300 	mov.w	r3, #0
 800d57e:	020b      	lsls	r3, r1, #8
 800d580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d584:	0202      	lsls	r2, r0, #8
 800d586:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d58a:	6849      	ldr	r1, [r1, #4]
 800d58c:	0849      	lsrs	r1, r1, #1
 800d58e:	2000      	movs	r0, #0
 800d590:	468a      	mov	sl, r1
 800d592:	4683      	mov	fp, r0
 800d594:	eb12 010a 	adds.w	r1, r2, sl
 800d598:	6639      	str	r1, [r7, #96]	; 0x60
 800d59a:	eb43 030b 	adc.w	r3, r3, fp
 800d59e:	667b      	str	r3, [r7, #100]	; 0x64
 800d5a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d5ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d5b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d5b4:	f7f3 f8a8 	bl	8000708 <__aeabi_uldivmod>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4613      	mov	r3, r2
 800d5be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800d5c2:	e2ce      	b.n	800db62 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5c4:	4bb7      	ldr	r3, [pc, #732]	; (800d8a4 <UART_SetConfig+0x144c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 0320 	and.w	r3, r3, #32
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 80b9 	beq.w	800d744 <UART_SetConfig+0x12ec>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5d2:	4bb4      	ldr	r3, [pc, #720]	; (800d8a4 <UART_SetConfig+0x144c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	08db      	lsrs	r3, r3, #3
 800d5d8:	f003 0303 	and.w	r3, r3, #3
 800d5dc:	4ab2      	ldr	r2, [pc, #712]	; (800d8a8 <UART_SetConfig+0x1450>)
 800d5de:	fa22 f303 	lsr.w	r3, r2, r3
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	653b      	str	r3, [r7, #80]	; 0x50
 800d5e6:	657a      	str	r2, [r7, #84]	; 0x54
 800d5e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d072      	beq.n	800d6d8 <UART_SetConfig+0x1280>
 800d5f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d068      	beq.n	800d6ce <UART_SetConfig+0x1276>
 800d5fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	2b02      	cmp	r3, #2
 800d604:	d05e      	beq.n	800d6c4 <UART_SetConfig+0x126c>
 800d606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	d054      	beq.n	800d6ba <UART_SetConfig+0x1262>
 800d610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d616:	2b04      	cmp	r3, #4
 800d618:	d04a      	beq.n	800d6b0 <UART_SetConfig+0x1258>
 800d61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d620:	2b05      	cmp	r3, #5
 800d622:	d040      	beq.n	800d6a6 <UART_SetConfig+0x124e>
 800d624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62a:	2b06      	cmp	r3, #6
 800d62c:	d036      	beq.n	800d69c <UART_SetConfig+0x1244>
 800d62e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	2b07      	cmp	r3, #7
 800d636:	d02c      	beq.n	800d692 <UART_SetConfig+0x123a>
 800d638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	2b08      	cmp	r3, #8
 800d640:	d022      	beq.n	800d688 <UART_SetConfig+0x1230>
 800d642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d648:	2b09      	cmp	r3, #9
 800d64a:	d018      	beq.n	800d67e <UART_SetConfig+0x1226>
 800d64c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d652:	2b0a      	cmp	r3, #10
 800d654:	d00e      	beq.n	800d674 <UART_SetConfig+0x121c>
 800d656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	2b0b      	cmp	r3, #11
 800d65e:	d104      	bne.n	800d66a <UART_SetConfig+0x1212>
 800d660:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d664:	f04f 0300 	mov.w	r3, #0
 800d668:	e03a      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d66a:	f04f 0201 	mov.w	r2, #1
 800d66e:	f04f 0300 	mov.w	r3, #0
 800d672:	e035      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d674:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d678:	f04f 0300 	mov.w	r3, #0
 800d67c:	e030      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d67e:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d682:	f04f 0300 	mov.w	r3, #0
 800d686:	e02b      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d688:	f04f 0220 	mov.w	r2, #32
 800d68c:	f04f 0300 	mov.w	r3, #0
 800d690:	e026      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d692:	f04f 0210 	mov.w	r2, #16
 800d696:	f04f 0300 	mov.w	r3, #0
 800d69a:	e021      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d69c:	f04f 020c 	mov.w	r2, #12
 800d6a0:	f04f 0300 	mov.w	r3, #0
 800d6a4:	e01c      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6a6:	f04f 020a 	mov.w	r2, #10
 800d6aa:	f04f 0300 	mov.w	r3, #0
 800d6ae:	e017      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6b0:	f04f 0208 	mov.w	r2, #8
 800d6b4:	f04f 0300 	mov.w	r3, #0
 800d6b8:	e012      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6ba:	f04f 0206 	mov.w	r2, #6
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	e00d      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6c4:	f04f 0204 	mov.w	r2, #4
 800d6c8:	f04f 0300 	mov.w	r3, #0
 800d6cc:	e008      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6ce:	f04f 0202 	mov.w	r2, #2
 800d6d2:	f04f 0300 	mov.w	r3, #0
 800d6d6:	e003      	b.n	800d6e0 <UART_SetConfig+0x1288>
 800d6d8:	f04f 0201 	mov.w	r2, #1
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d6e4:	f7f3 f810 	bl	8000708 <__aeabi_uldivmod>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	f04f 0300 	mov.w	r3, #0
 800d6f8:	020b      	lsls	r3, r1, #8
 800d6fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6fe:	0202      	lsls	r2, r0, #8
 800d700:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d704:	6849      	ldr	r1, [r1, #4]
 800d706:	0849      	lsrs	r1, r1, #1
 800d708:	2000      	movs	r0, #0
 800d70a:	64b9      	str	r1, [r7, #72]	; 0x48
 800d70c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d70e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d712:	4621      	mov	r1, r4
 800d714:	1851      	adds	r1, r2, r1
 800d716:	6439      	str	r1, [r7, #64]	; 0x40
 800d718:	4629      	mov	r1, r5
 800d71a:	eb43 0101 	adc.w	r1, r3, r1
 800d71e:	6479      	str	r1, [r7, #68]	; 0x44
 800d720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	63bb      	str	r3, [r7, #56]	; 0x38
 800d72a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d72c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d730:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d734:	f7f2 ffe8 	bl	8000708 <__aeabi_uldivmod>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4613      	mov	r3, r2
 800d73e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800d742:	e20e      	b.n	800db62 <UART_SetConfig+0x170a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d072      	beq.n	800d834 <UART_SetConfig+0x13dc>
 800d74e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d754:	2b01      	cmp	r3, #1
 800d756:	d068      	beq.n	800d82a <UART_SetConfig+0x13d2>
 800d758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d05e      	beq.n	800d820 <UART_SetConfig+0x13c8>
 800d762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d054      	beq.n	800d816 <UART_SetConfig+0x13be>
 800d76c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	2b04      	cmp	r3, #4
 800d774:	d04a      	beq.n	800d80c <UART_SetConfig+0x13b4>
 800d776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	2b05      	cmp	r3, #5
 800d77e:	d040      	beq.n	800d802 <UART_SetConfig+0x13aa>
 800d780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d786:	2b06      	cmp	r3, #6
 800d788:	d036      	beq.n	800d7f8 <UART_SetConfig+0x13a0>
 800d78a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	2b07      	cmp	r3, #7
 800d792:	d02c      	beq.n	800d7ee <UART_SetConfig+0x1396>
 800d794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	2b08      	cmp	r3, #8
 800d79c:	d022      	beq.n	800d7e4 <UART_SetConfig+0x138c>
 800d79e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a4:	2b09      	cmp	r3, #9
 800d7a6:	d018      	beq.n	800d7da <UART_SetConfig+0x1382>
 800d7a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ae:	2b0a      	cmp	r3, #10
 800d7b0:	d00e      	beq.n	800d7d0 <UART_SetConfig+0x1378>
 800d7b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	2b0b      	cmp	r3, #11
 800d7ba:	d104      	bne.n	800d7c6 <UART_SetConfig+0x136e>
 800d7bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7c0:	f04f 0300 	mov.w	r3, #0
 800d7c4:	e03a      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7c6:	f04f 0201 	mov.w	r2, #1
 800d7ca:	f04f 0300 	mov.w	r3, #0
 800d7ce:	e035      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7d0:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d7d4:	f04f 0300 	mov.w	r3, #0
 800d7d8:	e030      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7da:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d7de:	f04f 0300 	mov.w	r3, #0
 800d7e2:	e02b      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7e4:	f04f 0220 	mov.w	r2, #32
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	e026      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7ee:	f04f 0210 	mov.w	r2, #16
 800d7f2:	f04f 0300 	mov.w	r3, #0
 800d7f6:	e021      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d7f8:	f04f 020c 	mov.w	r2, #12
 800d7fc:	f04f 0300 	mov.w	r3, #0
 800d800:	e01c      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d802:	f04f 020a 	mov.w	r2, #10
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	e017      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d80c:	f04f 0208 	mov.w	r2, #8
 800d810:	f04f 0300 	mov.w	r3, #0
 800d814:	e012      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d816:	f04f 0206 	mov.w	r2, #6
 800d81a:	f04f 0300 	mov.w	r3, #0
 800d81e:	e00d      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d820:	f04f 0204 	mov.w	r2, #4
 800d824:	f04f 0300 	mov.w	r3, #0
 800d828:	e008      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d82a:	f04f 0202 	mov.w	r2, #2
 800d82e:	f04f 0300 	mov.w	r3, #0
 800d832:	e003      	b.n	800d83c <UART_SetConfig+0x13e4>
 800d834:	f04f 0201 	mov.w	r2, #1
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	481a      	ldr	r0, [pc, #104]	; (800d8a8 <UART_SetConfig+0x1450>)
 800d83e:	f04f 0100 	mov.w	r1, #0
 800d842:	f7f2 ff61 	bl	8000708 <__aeabi_uldivmod>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4610      	mov	r0, r2
 800d84c:	4619      	mov	r1, r3
 800d84e:	f04f 0200 	mov.w	r2, #0
 800d852:	f04f 0300 	mov.w	r3, #0
 800d856:	020b      	lsls	r3, r1, #8
 800d858:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d85c:	0202      	lsls	r2, r0, #8
 800d85e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d862:	6849      	ldr	r1, [r1, #4]
 800d864:	0849      	lsrs	r1, r1, #1
 800d866:	2000      	movs	r0, #0
 800d868:	6339      	str	r1, [r7, #48]	; 0x30
 800d86a:	6378      	str	r0, [r7, #52]	; 0x34
 800d86c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d870:	4621      	mov	r1, r4
 800d872:	1851      	adds	r1, r2, r1
 800d874:	62b9      	str	r1, [r7, #40]	; 0x28
 800d876:	4629      	mov	r1, r5
 800d878:	eb43 0101 	adc.w	r1, r3, r1
 800d87c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d87e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	623b      	str	r3, [r7, #32]
 800d888:	627a      	str	r2, [r7, #36]	; 0x24
 800d88a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d88e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d892:	f7f2 ff39 	bl	8000708 <__aeabi_uldivmod>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4613      	mov	r3, r2
 800d89c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800d8a0:	e15f      	b.n	800db62 <UART_SetConfig+0x170a>
 800d8a2:	bf00      	nop
 800d8a4:	58024400 	.word	0x58024400
 800d8a8:	03d09000 	.word	0x03d09000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d072      	beq.n	800d99c <UART_SetConfig+0x1544>
 800d8b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d068      	beq.n	800d992 <UART_SetConfig+0x153a>
 800d8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d05e      	beq.n	800d988 <UART_SetConfig+0x1530>
 800d8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d054      	beq.n	800d97e <UART_SetConfig+0x1526>
 800d8d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d04a      	beq.n	800d974 <UART_SetConfig+0x151c>
 800d8de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e4:	2b05      	cmp	r3, #5
 800d8e6:	d040      	beq.n	800d96a <UART_SetConfig+0x1512>
 800d8e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ee:	2b06      	cmp	r3, #6
 800d8f0:	d036      	beq.n	800d960 <UART_SetConfig+0x1508>
 800d8f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f8:	2b07      	cmp	r3, #7
 800d8fa:	d02c      	beq.n	800d956 <UART_SetConfig+0x14fe>
 800d8fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	2b08      	cmp	r3, #8
 800d904:	d022      	beq.n	800d94c <UART_SetConfig+0x14f4>
 800d906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90c:	2b09      	cmp	r3, #9
 800d90e:	d018      	beq.n	800d942 <UART_SetConfig+0x14ea>
 800d910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d916:	2b0a      	cmp	r3, #10
 800d918:	d00e      	beq.n	800d938 <UART_SetConfig+0x14e0>
 800d91a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	2b0b      	cmp	r3, #11
 800d922:	d104      	bne.n	800d92e <UART_SetConfig+0x14d6>
 800d924:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d928:	f04f 0300 	mov.w	r3, #0
 800d92c:	e03a      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d92e:	f04f 0201 	mov.w	r2, #1
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	e035      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d938:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d93c:	f04f 0300 	mov.w	r3, #0
 800d940:	e030      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d942:	f04f 0240 	mov.w	r2, #64	; 0x40
 800d946:	f04f 0300 	mov.w	r3, #0
 800d94a:	e02b      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d94c:	f04f 0220 	mov.w	r2, #32
 800d950:	f04f 0300 	mov.w	r3, #0
 800d954:	e026      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d956:	f04f 0210 	mov.w	r2, #16
 800d95a:	f04f 0300 	mov.w	r3, #0
 800d95e:	e021      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d960:	f04f 020c 	mov.w	r2, #12
 800d964:	f04f 0300 	mov.w	r3, #0
 800d968:	e01c      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d96a:	f04f 020a 	mov.w	r2, #10
 800d96e:	f04f 0300 	mov.w	r3, #0
 800d972:	e017      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d974:	f04f 0208 	mov.w	r2, #8
 800d978:	f04f 0300 	mov.w	r3, #0
 800d97c:	e012      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d97e:	f04f 0206 	mov.w	r2, #6
 800d982:	f04f 0300 	mov.w	r3, #0
 800d986:	e00d      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d988:	f04f 0204 	mov.w	r2, #4
 800d98c:	f04f 0300 	mov.w	r3, #0
 800d990:	e008      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d992:	f04f 0202 	mov.w	r2, #2
 800d996:	f04f 0300 	mov.w	r3, #0
 800d99a:	e003      	b.n	800d9a4 <UART_SetConfig+0x154c>
 800d99c:	f04f 0201 	mov.w	r2, #1
 800d9a0:	f04f 0300 	mov.w	r3, #0
 800d9a4:	48a7      	ldr	r0, [pc, #668]	; (800dc44 <UART_SetConfig+0x17ec>)
 800d9a6:	f04f 0100 	mov.w	r1, #0
 800d9aa:	f7f2 fead 	bl	8000708 <__aeabi_uldivmod>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	f04f 0200 	mov.w	r2, #0
 800d9ba:	f04f 0300 	mov.w	r3, #0
 800d9be:	020b      	lsls	r3, r1, #8
 800d9c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d9c4:	0202      	lsls	r2, r0, #8
 800d9c6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d9ca:	6849      	ldr	r1, [r1, #4]
 800d9cc:	0849      	lsrs	r1, r1, #1
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	4688      	mov	r8, r1
 800d9d2:	4681      	mov	r9, r0
 800d9d4:	eb12 0108 	adds.w	r1, r2, r8
 800d9d8:	61b9      	str	r1, [r7, #24]
 800d9da:	eb43 0309 	adc.w	r3, r3, r9
 800d9de:	61fb      	str	r3, [r7, #28]
 800d9e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	613b      	str	r3, [r7, #16]
 800d9ea:	617a      	str	r2, [r7, #20]
 800d9ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d9f4:	f7f2 fe88 	bl	8000708 <__aeabi_uldivmod>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800da02:	e0ae      	b.n	800db62 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d072      	beq.n	800daf4 <UART_SetConfig+0x169c>
 800da0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	2b01      	cmp	r3, #1
 800da16:	d068      	beq.n	800daea <UART_SetConfig+0x1692>
 800da18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d05e      	beq.n	800dae0 <UART_SetConfig+0x1688>
 800da22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d054      	beq.n	800dad6 <UART_SetConfig+0x167e>
 800da2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	2b04      	cmp	r3, #4
 800da34:	d04a      	beq.n	800dacc <UART_SetConfig+0x1674>
 800da36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3c:	2b05      	cmp	r3, #5
 800da3e:	d040      	beq.n	800dac2 <UART_SetConfig+0x166a>
 800da40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da46:	2b06      	cmp	r3, #6
 800da48:	d036      	beq.n	800dab8 <UART_SetConfig+0x1660>
 800da4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	2b07      	cmp	r3, #7
 800da52:	d02c      	beq.n	800daae <UART_SetConfig+0x1656>
 800da54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	2b08      	cmp	r3, #8
 800da5c:	d022      	beq.n	800daa4 <UART_SetConfig+0x164c>
 800da5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da64:	2b09      	cmp	r3, #9
 800da66:	d018      	beq.n	800da9a <UART_SetConfig+0x1642>
 800da68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6e:	2b0a      	cmp	r3, #10
 800da70:	d00e      	beq.n	800da90 <UART_SetConfig+0x1638>
 800da72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da78:	2b0b      	cmp	r3, #11
 800da7a:	d104      	bne.n	800da86 <UART_SetConfig+0x162e>
 800da7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da80:	f04f 0300 	mov.w	r3, #0
 800da84:	e03a      	b.n	800dafc <UART_SetConfig+0x16a4>
 800da86:	f04f 0201 	mov.w	r2, #1
 800da8a:	f04f 0300 	mov.w	r3, #0
 800da8e:	e035      	b.n	800dafc <UART_SetConfig+0x16a4>
 800da90:	f04f 0280 	mov.w	r2, #128	; 0x80
 800da94:	f04f 0300 	mov.w	r3, #0
 800da98:	e030      	b.n	800dafc <UART_SetConfig+0x16a4>
 800da9a:	f04f 0240 	mov.w	r2, #64	; 0x40
 800da9e:	f04f 0300 	mov.w	r3, #0
 800daa2:	e02b      	b.n	800dafc <UART_SetConfig+0x16a4>
 800daa4:	f04f 0220 	mov.w	r2, #32
 800daa8:	f04f 0300 	mov.w	r3, #0
 800daac:	e026      	b.n	800dafc <UART_SetConfig+0x16a4>
 800daae:	f04f 0210 	mov.w	r2, #16
 800dab2:	f04f 0300 	mov.w	r3, #0
 800dab6:	e021      	b.n	800dafc <UART_SetConfig+0x16a4>
 800dab8:	f04f 020c 	mov.w	r2, #12
 800dabc:	f04f 0300 	mov.w	r3, #0
 800dac0:	e01c      	b.n	800dafc <UART_SetConfig+0x16a4>
 800dac2:	f04f 020a 	mov.w	r2, #10
 800dac6:	f04f 0300 	mov.w	r3, #0
 800daca:	e017      	b.n	800dafc <UART_SetConfig+0x16a4>
 800dacc:	f04f 0208 	mov.w	r2, #8
 800dad0:	f04f 0300 	mov.w	r3, #0
 800dad4:	e012      	b.n	800dafc <UART_SetConfig+0x16a4>
 800dad6:	f04f 0206 	mov.w	r2, #6
 800dada:	f04f 0300 	mov.w	r3, #0
 800dade:	e00d      	b.n	800dafc <UART_SetConfig+0x16a4>
 800dae0:	f04f 0204 	mov.w	r2, #4
 800dae4:	f04f 0300 	mov.w	r3, #0
 800dae8:	e008      	b.n	800dafc <UART_SetConfig+0x16a4>
 800daea:	f04f 0202 	mov.w	r2, #2
 800daee:	f04f 0300 	mov.w	r3, #0
 800daf2:	e003      	b.n	800dafc <UART_SetConfig+0x16a4>
 800daf4:	f04f 0201 	mov.w	r2, #1
 800daf8:	f04f 0300 	mov.w	r3, #0
 800dafc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800db00:	f04f 0100 	mov.w	r1, #0
 800db04:	f7f2 fe00 	bl	8000708 <__aeabi_uldivmod>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4610      	mov	r0, r2
 800db0e:	4619      	mov	r1, r3
 800db10:	f04f 0200 	mov.w	r2, #0
 800db14:	f04f 0300 	mov.w	r3, #0
 800db18:	020b      	lsls	r3, r1, #8
 800db1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db1e:	0202      	lsls	r2, r0, #8
 800db20:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800db24:	6849      	ldr	r1, [r1, #4]
 800db26:	0849      	lsrs	r1, r1, #1
 800db28:	2000      	movs	r0, #0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4605      	mov	r5, r0
 800db2e:	1911      	adds	r1, r2, r4
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	416b      	adcs	r3, r5
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	607a      	str	r2, [r7, #4]
 800db42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db4a:	f7f2 fddd 	bl	8000708 <__aeabi_uldivmod>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	4613      	mov	r3, r2
 800db54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800db58:	e003      	b.n	800db62 <UART_SetConfig+0x170a>
          default:
            ret = HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800db60:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db6a:	d30c      	bcc.n	800db86 <UART_SetConfig+0x172e>
 800db6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db74:	d207      	bcs.n	800db86 <UART_SetConfig+0x172e>
        {
          huart->Instance->BRR = usartdiv;
 800db76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800db80:	60da      	str	r2, [r3, #12]
 800db82:	f000 bfc2 	b.w	800eb0a <UART_SetConfig+0x26b2>
        }
        else
        {
          ret = HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800db8c:	f000 bfbd 	b.w	800eb0a <UART_SetConfig+0x26b2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db9a:	f040 83e9 	bne.w	800e370 <UART_SetConfig+0x1f18>
  {
    switch (clocksource)
 800db9e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800dba2:	2b20      	cmp	r3, #32
 800dba4:	dc4a      	bgt.n	800dc3c <UART_SetConfig+0x17e4>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f2c0 83b7 	blt.w	800e31a <UART_SetConfig+0x1ec2>
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	f200 83b4 	bhi.w	800e31a <UART_SetConfig+0x1ec2>
 800dbb2:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <UART_SetConfig+0x1760>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dc49 	.word	0x0800dc49
 800dbbc:	0800dd23 	.word	0x0800dd23
 800dbc0:	0800e31b 	.word	0x0800e31b
 800dbc4:	0800e31b 	.word	0x0800e31b
 800dbc8:	0800ddfd 	.word	0x0800ddfd
 800dbcc:	0800e31b 	.word	0x0800e31b
 800dbd0:	0800e31b 	.word	0x0800e31b
 800dbd4:	0800e31b 	.word	0x0800e31b
 800dbd8:	0800ded9 	.word	0x0800ded9
 800dbdc:	0800e31b 	.word	0x0800e31b
 800dbe0:	0800e31b 	.word	0x0800e31b
 800dbe4:	0800e31b 	.word	0x0800e31b
 800dbe8:	0800e31b 	.word	0x0800e31b
 800dbec:	0800e31b 	.word	0x0800e31b
 800dbf0:	0800e31b 	.word	0x0800e31b
 800dbf4:	0800e31b 	.word	0x0800e31b
 800dbf8:	0800dfb5 	.word	0x0800dfb5
 800dbfc:	0800e31b 	.word	0x0800e31b
 800dc00:	0800e31b 	.word	0x0800e31b
 800dc04:	0800e31b 	.word	0x0800e31b
 800dc08:	0800e31b 	.word	0x0800e31b
 800dc0c:	0800e31b 	.word	0x0800e31b
 800dc10:	0800e31b 	.word	0x0800e31b
 800dc14:	0800e31b 	.word	0x0800e31b
 800dc18:	0800e31b 	.word	0x0800e31b
 800dc1c:	0800e31b 	.word	0x0800e31b
 800dc20:	0800e31b 	.word	0x0800e31b
 800dc24:	0800e31b 	.word	0x0800e31b
 800dc28:	0800e31b 	.word	0x0800e31b
 800dc2c:	0800e31b 	.word	0x0800e31b
 800dc30:	0800e31b 	.word	0x0800e31b
 800dc34:	0800e31b 	.word	0x0800e31b
 800dc38:	0800e16d 	.word	0x0800e16d
 800dc3c:	2b40      	cmp	r3, #64	; 0x40
 800dc3e:	f000 8303 	beq.w	800e248 <UART_SetConfig+0x1df0>
 800dc42:	e36a      	b.n	800e31a <UART_SetConfig+0x1ec2>
 800dc44:	003d0900 	.word	0x003d0900
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc48:	f7fb f868 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800dc4c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d04f      	beq.n	800dcfa <UART_SetConfig+0x18a2>
 800dc5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d048      	beq.n	800dcf6 <UART_SetConfig+0x189e>
 800dc64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d041      	beq.n	800dcf2 <UART_SetConfig+0x189a>
 800dc6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d03a      	beq.n	800dcee <UART_SetConfig+0x1896>
 800dc78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7e:	2b04      	cmp	r3, #4
 800dc80:	d033      	beq.n	800dcea <UART_SetConfig+0x1892>
 800dc82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc88:	2b05      	cmp	r3, #5
 800dc8a:	d02c      	beq.n	800dce6 <UART_SetConfig+0x188e>
 800dc8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc92:	2b06      	cmp	r3, #6
 800dc94:	d025      	beq.n	800dce2 <UART_SetConfig+0x188a>
 800dc96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	2b07      	cmp	r3, #7
 800dc9e:	d01e      	beq.n	800dcde <UART_SetConfig+0x1886>
 800dca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2b08      	cmp	r3, #8
 800dca8:	d017      	beq.n	800dcda <UART_SetConfig+0x1882>
 800dcaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb0:	2b09      	cmp	r3, #9
 800dcb2:	d010      	beq.n	800dcd6 <UART_SetConfig+0x187e>
 800dcb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcba:	2b0a      	cmp	r3, #10
 800dcbc:	d009      	beq.n	800dcd2 <UART_SetConfig+0x187a>
 800dcbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc4:	2b0b      	cmp	r3, #11
 800dcc6:	d102      	bne.n	800dcce <UART_SetConfig+0x1876>
 800dcc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dccc:	e016      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e014      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcd2:	2380      	movs	r3, #128	; 0x80
 800dcd4:	e012      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcd6:	2340      	movs	r3, #64	; 0x40
 800dcd8:	e010      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcda:	2320      	movs	r3, #32
 800dcdc:	e00e      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcde:	2310      	movs	r3, #16
 800dce0:	e00c      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dce2:	230c      	movs	r3, #12
 800dce4:	e00a      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dce6:	230a      	movs	r3, #10
 800dce8:	e008      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcea:	2308      	movs	r3, #8
 800dcec:	e006      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcee:	2306      	movs	r3, #6
 800dcf0:	e004      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcf2:	2304      	movs	r3, #4
 800dcf4:	e002      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcf6:	2302      	movs	r3, #2
 800dcf8:	e000      	b.n	800dcfc <UART_SetConfig+0x18a4>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800dd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd04:	005a      	lsls	r2, r3, #1
 800dd06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	085b      	lsrs	r3, r3, #1
 800dd0e:	441a      	add	r2, r3
 800dd10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800dd20:	e2ff      	b.n	800e322 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd22:	f7fb f811 	bl	8008d48 <HAL_RCC_GetPCLK2Freq>
 800dd26:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d04f      	beq.n	800ddd4 <UART_SetConfig+0x197c>
 800dd34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d048      	beq.n	800ddd0 <UART_SetConfig+0x1978>
 800dd3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d041      	beq.n	800ddcc <UART_SetConfig+0x1974>
 800dd48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d03a      	beq.n	800ddc8 <UART_SetConfig+0x1970>
 800dd52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	d033      	beq.n	800ddc4 <UART_SetConfig+0x196c>
 800dd5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd62:	2b05      	cmp	r3, #5
 800dd64:	d02c      	beq.n	800ddc0 <UART_SetConfig+0x1968>
 800dd66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	2b06      	cmp	r3, #6
 800dd6e:	d025      	beq.n	800ddbc <UART_SetConfig+0x1964>
 800dd70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd76:	2b07      	cmp	r3, #7
 800dd78:	d01e      	beq.n	800ddb8 <UART_SetConfig+0x1960>
 800dd7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd80:	2b08      	cmp	r3, #8
 800dd82:	d017      	beq.n	800ddb4 <UART_SetConfig+0x195c>
 800dd84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d010      	beq.n	800ddb0 <UART_SetConfig+0x1958>
 800dd8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd94:	2b0a      	cmp	r3, #10
 800dd96:	d009      	beq.n	800ddac <UART_SetConfig+0x1954>
 800dd98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	2b0b      	cmp	r3, #11
 800dda0:	d102      	bne.n	800dda8 <UART_SetConfig+0x1950>
 800dda2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dda6:	e016      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e014      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddac:	2380      	movs	r3, #128	; 0x80
 800ddae:	e012      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddb0:	2340      	movs	r3, #64	; 0x40
 800ddb2:	e010      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddb4:	2320      	movs	r3, #32
 800ddb6:	e00e      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddb8:	2310      	movs	r3, #16
 800ddba:	e00c      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddbc:	230c      	movs	r3, #12
 800ddbe:	e00a      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddc0:	230a      	movs	r3, #10
 800ddc2:	e008      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	e006      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddc8:	2306      	movs	r3, #6
 800ddca:	e004      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddcc:	2304      	movs	r3, #4
 800ddce:	e002      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	e000      	b.n	800ddd6 <UART_SetConfig+0x197e>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddde:	005a      	lsls	r2, r3, #1
 800dde0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	085b      	lsrs	r3, r3, #1
 800dde8:	441a      	add	r2, r3
 800ddea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800ddfa:	e292      	b.n	800e322 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddfc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800de00:	4618      	mov	r0, r3
 800de02:	f7fb fef3 	bl	8009bec <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de06:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800de0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de10:	2b00      	cmp	r3, #0
 800de12:	d04f      	beq.n	800deb4 <UART_SetConfig+0x1a5c>
 800de14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d048      	beq.n	800deb0 <UART_SetConfig+0x1a58>
 800de1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de24:	2b02      	cmp	r3, #2
 800de26:	d041      	beq.n	800deac <UART_SetConfig+0x1a54>
 800de28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d03a      	beq.n	800dea8 <UART_SetConfig+0x1a50>
 800de32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de38:	2b04      	cmp	r3, #4
 800de3a:	d033      	beq.n	800dea4 <UART_SetConfig+0x1a4c>
 800de3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	2b05      	cmp	r3, #5
 800de44:	d02c      	beq.n	800dea0 <UART_SetConfig+0x1a48>
 800de46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4c:	2b06      	cmp	r3, #6
 800de4e:	d025      	beq.n	800de9c <UART_SetConfig+0x1a44>
 800de50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	2b07      	cmp	r3, #7
 800de58:	d01e      	beq.n	800de98 <UART_SetConfig+0x1a40>
 800de5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	2b08      	cmp	r3, #8
 800de62:	d017      	beq.n	800de94 <UART_SetConfig+0x1a3c>
 800de64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	2b09      	cmp	r3, #9
 800de6c:	d010      	beq.n	800de90 <UART_SetConfig+0x1a38>
 800de6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de74:	2b0a      	cmp	r3, #10
 800de76:	d009      	beq.n	800de8c <UART_SetConfig+0x1a34>
 800de78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	2b0b      	cmp	r3, #11
 800de80:	d102      	bne.n	800de88 <UART_SetConfig+0x1a30>
 800de82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de86:	e016      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de88:	2301      	movs	r3, #1
 800de8a:	e014      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	e012      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de90:	2340      	movs	r3, #64	; 0x40
 800de92:	e010      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de94:	2320      	movs	r3, #32
 800de96:	e00e      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de98:	2310      	movs	r3, #16
 800de9a:	e00c      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800de9c:	230c      	movs	r3, #12
 800de9e:	e00a      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800dea0:	230a      	movs	r3, #10
 800dea2:	e008      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800dea4:	2308      	movs	r3, #8
 800dea6:	e006      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800dea8:	2306      	movs	r3, #6
 800deaa:	e004      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800deac:	2304      	movs	r3, #4
 800deae:	e002      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800deb0:	2302      	movs	r3, #2
 800deb2:	e000      	b.n	800deb6 <UART_SetConfig+0x1a5e>
 800deb4:	2301      	movs	r3, #1
 800deb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deba:	005a      	lsls	r2, r3, #1
 800debc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	085b      	lsrs	r3, r3, #1
 800dec4:	441a      	add	r2, r3
 800dec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800ded6:	e224      	b.n	800e322 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ded8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fb ffd9 	bl	8009e94 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dee2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800dee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800deea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d04f      	beq.n	800df90 <UART_SetConfig+0x1b38>
 800def0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	2b01      	cmp	r3, #1
 800def8:	d048      	beq.n	800df8c <UART_SetConfig+0x1b34>
 800defa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800defe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df00:	2b02      	cmp	r3, #2
 800df02:	d041      	beq.n	800df88 <UART_SetConfig+0x1b30>
 800df04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d03a      	beq.n	800df84 <UART_SetConfig+0x1b2c>
 800df0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	2b04      	cmp	r3, #4
 800df16:	d033      	beq.n	800df80 <UART_SetConfig+0x1b28>
 800df18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1e:	2b05      	cmp	r3, #5
 800df20:	d02c      	beq.n	800df7c <UART_SetConfig+0x1b24>
 800df22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df28:	2b06      	cmp	r3, #6
 800df2a:	d025      	beq.n	800df78 <UART_SetConfig+0x1b20>
 800df2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	2b07      	cmp	r3, #7
 800df34:	d01e      	beq.n	800df74 <UART_SetConfig+0x1b1c>
 800df36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	2b08      	cmp	r3, #8
 800df3e:	d017      	beq.n	800df70 <UART_SetConfig+0x1b18>
 800df40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	2b09      	cmp	r3, #9
 800df48:	d010      	beq.n	800df6c <UART_SetConfig+0x1b14>
 800df4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df50:	2b0a      	cmp	r3, #10
 800df52:	d009      	beq.n	800df68 <UART_SetConfig+0x1b10>
 800df54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	2b0b      	cmp	r3, #11
 800df5c:	d102      	bne.n	800df64 <UART_SetConfig+0x1b0c>
 800df5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df62:	e016      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df64:	2301      	movs	r3, #1
 800df66:	e014      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df68:	2380      	movs	r3, #128	; 0x80
 800df6a:	e012      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df6c:	2340      	movs	r3, #64	; 0x40
 800df6e:	e010      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df70:	2320      	movs	r3, #32
 800df72:	e00e      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df74:	2310      	movs	r3, #16
 800df76:	e00c      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df78:	230c      	movs	r3, #12
 800df7a:	e00a      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df7c:	230a      	movs	r3, #10
 800df7e:	e008      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df80:	2308      	movs	r3, #8
 800df82:	e006      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df84:	2306      	movs	r3, #6
 800df86:	e004      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df88:	2304      	movs	r3, #4
 800df8a:	e002      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df8c:	2302      	movs	r3, #2
 800df8e:	e000      	b.n	800df92 <UART_SetConfig+0x1b3a>
 800df90:	2301      	movs	r3, #1
 800df92:	fbb2 f3f3 	udiv	r3, r2, r3
 800df96:	005a      	lsls	r2, r3, #1
 800df98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	441a      	add	r2, r3
 800dfa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800dfb2:	e1b6      	b.n	800e322 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfb4:	4ba1      	ldr	r3, [pc, #644]	; (800e23c <UART_SetConfig+0x1de4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0320 	and.w	r3, r3, #32
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d06d      	beq.n	800e09c <UART_SetConfig+0x1c44>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfc0:	4b9e      	ldr	r3, [pc, #632]	; (800e23c <UART_SetConfig+0x1de4>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	08db      	lsrs	r3, r3, #3
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	4a9d      	ldr	r2, [pc, #628]	; (800e240 <UART_SetConfig+0x1de8>)
 800dfcc:	40da      	lsrs	r2, r3
 800dfce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d04f      	beq.n	800e078 <UART_SetConfig+0x1c20>
 800dfd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d048      	beq.n	800e074 <UART_SetConfig+0x1c1c>
 800dfe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d041      	beq.n	800e070 <UART_SetConfig+0x1c18>
 800dfec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d03a      	beq.n	800e06c <UART_SetConfig+0x1c14>
 800dff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	2b04      	cmp	r3, #4
 800dffe:	d033      	beq.n	800e068 <UART_SetConfig+0x1c10>
 800e000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	2b05      	cmp	r3, #5
 800e008:	d02c      	beq.n	800e064 <UART_SetConfig+0x1c0c>
 800e00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	2b06      	cmp	r3, #6
 800e012:	d025      	beq.n	800e060 <UART_SetConfig+0x1c08>
 800e014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01a:	2b07      	cmp	r3, #7
 800e01c:	d01e      	beq.n	800e05c <UART_SetConfig+0x1c04>
 800e01e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	2b08      	cmp	r3, #8
 800e026:	d017      	beq.n	800e058 <UART_SetConfig+0x1c00>
 800e028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	2b09      	cmp	r3, #9
 800e030:	d010      	beq.n	800e054 <UART_SetConfig+0x1bfc>
 800e032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e038:	2b0a      	cmp	r3, #10
 800e03a:	d009      	beq.n	800e050 <UART_SetConfig+0x1bf8>
 800e03c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e042:	2b0b      	cmp	r3, #11
 800e044:	d102      	bne.n	800e04c <UART_SetConfig+0x1bf4>
 800e046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e04a:	e016      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e04c:	2301      	movs	r3, #1
 800e04e:	e014      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e050:	2380      	movs	r3, #128	; 0x80
 800e052:	e012      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e054:	2340      	movs	r3, #64	; 0x40
 800e056:	e010      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e058:	2320      	movs	r3, #32
 800e05a:	e00e      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e05c:	2310      	movs	r3, #16
 800e05e:	e00c      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e060:	230c      	movs	r3, #12
 800e062:	e00a      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e064:	230a      	movs	r3, #10
 800e066:	e008      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e068:	2308      	movs	r3, #8
 800e06a:	e006      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e06c:	2306      	movs	r3, #6
 800e06e:	e004      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e070:	2304      	movs	r3, #4
 800e072:	e002      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e074:	2302      	movs	r3, #2
 800e076:	e000      	b.n	800e07a <UART_SetConfig+0x1c22>
 800e078:	2301      	movs	r3, #1
 800e07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e07e:	005a      	lsls	r2, r3, #1
 800e080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	085b      	lsrs	r3, r3, #1
 800e088:	441a      	add	r2, r3
 800e08a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	fbb2 f3f3 	udiv	r3, r2, r3
 800e094:	b29b      	uxth	r3, r3
 800e096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e09a:	e142      	b.n	800e322 <UART_SetConfig+0x1eca>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e09c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d04f      	beq.n	800e146 <UART_SetConfig+0x1cee>
 800e0a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d048      	beq.n	800e142 <UART_SetConfig+0x1cea>
 800e0b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d041      	beq.n	800e13e <UART_SetConfig+0x1ce6>
 800e0ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c0:	2b03      	cmp	r3, #3
 800e0c2:	d03a      	beq.n	800e13a <UART_SetConfig+0x1ce2>
 800e0c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	2b04      	cmp	r3, #4
 800e0cc:	d033      	beq.n	800e136 <UART_SetConfig+0x1cde>
 800e0ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b05      	cmp	r3, #5
 800e0d6:	d02c      	beq.n	800e132 <UART_SetConfig+0x1cda>
 800e0d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b06      	cmp	r3, #6
 800e0e0:	d025      	beq.n	800e12e <UART_SetConfig+0x1cd6>
 800e0e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e8:	2b07      	cmp	r3, #7
 800e0ea:	d01e      	beq.n	800e12a <UART_SetConfig+0x1cd2>
 800e0ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d017      	beq.n	800e126 <UART_SetConfig+0x1cce>
 800e0f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fc:	2b09      	cmp	r3, #9
 800e0fe:	d010      	beq.n	800e122 <UART_SetConfig+0x1cca>
 800e100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	2b0a      	cmp	r3, #10
 800e108:	d009      	beq.n	800e11e <UART_SetConfig+0x1cc6>
 800e10a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e110:	2b0b      	cmp	r3, #11
 800e112:	d102      	bne.n	800e11a <UART_SetConfig+0x1cc2>
 800e114:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e118:	e016      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e014      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e11e:	2380      	movs	r3, #128	; 0x80
 800e120:	e012      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e122:	2340      	movs	r3, #64	; 0x40
 800e124:	e010      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e126:	2320      	movs	r3, #32
 800e128:	e00e      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e12a:	2310      	movs	r3, #16
 800e12c:	e00c      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e12e:	230c      	movs	r3, #12
 800e130:	e00a      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e132:	230a      	movs	r3, #10
 800e134:	e008      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e136:	2308      	movs	r3, #8
 800e138:	e006      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e13a:	2306      	movs	r3, #6
 800e13c:	e004      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e13e:	2304      	movs	r3, #4
 800e140:	e002      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e142:	2302      	movs	r3, #2
 800e144:	e000      	b.n	800e148 <UART_SetConfig+0x1cf0>
 800e146:	2301      	movs	r3, #1
 800e148:	4a3d      	ldr	r2, [pc, #244]	; (800e240 <UART_SetConfig+0x1de8>)
 800e14a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14e:	005a      	lsls	r2, r3, #1
 800e150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	085b      	lsrs	r3, r3, #1
 800e158:	441a      	add	r2, r3
 800e15a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	fbb2 f3f3 	udiv	r3, r2, r3
 800e164:	b29b      	uxth	r3, r3
 800e166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e16a:	e0da      	b.n	800e322 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	2b00      	cmp	r3, #0
 800e174:	d04f      	beq.n	800e216 <UART_SetConfig+0x1dbe>
 800e176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d048      	beq.n	800e212 <UART_SetConfig+0x1dba>
 800e180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b02      	cmp	r3, #2
 800e188:	d041      	beq.n	800e20e <UART_SetConfig+0x1db6>
 800e18a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e190:	2b03      	cmp	r3, #3
 800e192:	d03a      	beq.n	800e20a <UART_SetConfig+0x1db2>
 800e194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	2b04      	cmp	r3, #4
 800e19c:	d033      	beq.n	800e206 <UART_SetConfig+0x1dae>
 800e19e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	2b05      	cmp	r3, #5
 800e1a6:	d02c      	beq.n	800e202 <UART_SetConfig+0x1daa>
 800e1a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ae:	2b06      	cmp	r3, #6
 800e1b0:	d025      	beq.n	800e1fe <UART_SetConfig+0x1da6>
 800e1b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b8:	2b07      	cmp	r3, #7
 800e1ba:	d01e      	beq.n	800e1fa <UART_SetConfig+0x1da2>
 800e1bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c2:	2b08      	cmp	r3, #8
 800e1c4:	d017      	beq.n	800e1f6 <UART_SetConfig+0x1d9e>
 800e1c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1cc:	2b09      	cmp	r3, #9
 800e1ce:	d010      	beq.n	800e1f2 <UART_SetConfig+0x1d9a>
 800e1d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	2b0a      	cmp	r3, #10
 800e1d8:	d009      	beq.n	800e1ee <UART_SetConfig+0x1d96>
 800e1da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e0:	2b0b      	cmp	r3, #11
 800e1e2:	d102      	bne.n	800e1ea <UART_SetConfig+0x1d92>
 800e1e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1e8:	e016      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e014      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1ee:	2380      	movs	r3, #128	; 0x80
 800e1f0:	e012      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1f2:	2340      	movs	r3, #64	; 0x40
 800e1f4:	e010      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1f6:	2320      	movs	r3, #32
 800e1f8:	e00e      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1fa:	2310      	movs	r3, #16
 800e1fc:	e00c      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e1fe:	230c      	movs	r3, #12
 800e200:	e00a      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e202:	230a      	movs	r3, #10
 800e204:	e008      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e206:	2308      	movs	r3, #8
 800e208:	e006      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e20a:	2306      	movs	r3, #6
 800e20c:	e004      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e20e:	2304      	movs	r3, #4
 800e210:	e002      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e212:	2302      	movs	r3, #2
 800e214:	e000      	b.n	800e218 <UART_SetConfig+0x1dc0>
 800e216:	2301      	movs	r3, #1
 800e218:	4a0a      	ldr	r2, [pc, #40]	; (800e244 <UART_SetConfig+0x1dec>)
 800e21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e21e:	005a      	lsls	r2, r3, #1
 800e220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	085b      	lsrs	r3, r3, #1
 800e228:	441a      	add	r2, r3
 800e22a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	fbb2 f3f3 	udiv	r3, r2, r3
 800e234:	b29b      	uxth	r3, r3
 800e236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e23a:	e072      	b.n	800e322 <UART_SetConfig+0x1eca>
 800e23c:	58024400 	.word	0x58024400
 800e240:	03d09000 	.word	0x03d09000
 800e244:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d04f      	beq.n	800e2f2 <UART_SetConfig+0x1e9a>
 800e252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d048      	beq.n	800e2ee <UART_SetConfig+0x1e96>
 800e25c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e262:	2b02      	cmp	r3, #2
 800e264:	d041      	beq.n	800e2ea <UART_SetConfig+0x1e92>
 800e266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d03a      	beq.n	800e2e6 <UART_SetConfig+0x1e8e>
 800e270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e276:	2b04      	cmp	r3, #4
 800e278:	d033      	beq.n	800e2e2 <UART_SetConfig+0x1e8a>
 800e27a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e280:	2b05      	cmp	r3, #5
 800e282:	d02c      	beq.n	800e2de <UART_SetConfig+0x1e86>
 800e284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	2b06      	cmp	r3, #6
 800e28c:	d025      	beq.n	800e2da <UART_SetConfig+0x1e82>
 800e28e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b07      	cmp	r3, #7
 800e296:	d01e      	beq.n	800e2d6 <UART_SetConfig+0x1e7e>
 800e298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29e:	2b08      	cmp	r3, #8
 800e2a0:	d017      	beq.n	800e2d2 <UART_SetConfig+0x1e7a>
 800e2a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a8:	2b09      	cmp	r3, #9
 800e2aa:	d010      	beq.n	800e2ce <UART_SetConfig+0x1e76>
 800e2ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b2:	2b0a      	cmp	r3, #10
 800e2b4:	d009      	beq.n	800e2ca <UART_SetConfig+0x1e72>
 800e2b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	2b0b      	cmp	r3, #11
 800e2be:	d102      	bne.n	800e2c6 <UART_SetConfig+0x1e6e>
 800e2c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2c4:	e016      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e014      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2ca:	2380      	movs	r3, #128	; 0x80
 800e2cc:	e012      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2ce:	2340      	movs	r3, #64	; 0x40
 800e2d0:	e010      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2d2:	2320      	movs	r3, #32
 800e2d4:	e00e      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	e00c      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2da:	230c      	movs	r3, #12
 800e2dc:	e00a      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2de:	230a      	movs	r3, #10
 800e2e0:	e008      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2e2:	2308      	movs	r3, #8
 800e2e4:	e006      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2e6:	2306      	movs	r3, #6
 800e2e8:	e004      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2ea:	2304      	movs	r3, #4
 800e2ec:	e002      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e000      	b.n	800e2f4 <UART_SetConfig+0x1e9c>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2fc:	005a      	lsls	r2, r3, #1
 800e2fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	085b      	lsrs	r3, r3, #1
 800e306:	441a      	add	r2, r3
 800e308:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e312:	b29b      	uxth	r3, r3
 800e314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e318:	e003      	b.n	800e322 <UART_SetConfig+0x1eca>
      default:
        ret = HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
 800e31c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e326:	2b0f      	cmp	r3, #15
 800e328:	d91e      	bls.n	800e368 <UART_SetConfig+0x1f10>
 800e32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e332:	d219      	bcs.n	800e368 <UART_SetConfig+0x1f10>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e338:	b29b      	uxth	r3, r3
 800e33a:	f023 030f 	bic.w	r3, r3, #15
 800e33e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e346:	085b      	lsrs	r3, r3, #1
 800e348:	b29b      	uxth	r3, r3
 800e34a:	f003 0307 	and.w	r3, r3, #7
 800e34e:	b29a      	uxth	r2, r3
 800e350:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800e354:	4313      	orrs	r3, r2
 800e356:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      huart->Instance->BRR = brrtemp;
 800e35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800e364:	60da      	str	r2, [r3, #12]
 800e366:	e3d0      	b.n	800eb0a <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800e36e:	e3cc      	b.n	800eb0a <UART_SetConfig+0x26b2>
    }
  }
  else
  {
    switch (clocksource)
 800e370:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800e374:	2b20      	cmp	r3, #32
 800e376:	dc4b      	bgt.n	800e410 <UART_SetConfig+0x1fb8>
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f2c0 83af 	blt.w	800eadc <UART_SetConfig+0x2684>
 800e37e:	2b20      	cmp	r3, #32
 800e380:	f200 83ac 	bhi.w	800eadc <UART_SetConfig+0x2684>
 800e384:	a201      	add	r2, pc, #4	; (adr r2, 800e38c <UART_SetConfig+0x1f34>)
 800e386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e38a:	bf00      	nop
 800e38c:	0800e419 	.word	0x0800e419
 800e390:	0800e4f1 	.word	0x0800e4f1
 800e394:	0800eadd 	.word	0x0800eadd
 800e398:	0800eadd 	.word	0x0800eadd
 800e39c:	0800e5c9 	.word	0x0800e5c9
 800e3a0:	0800eadd 	.word	0x0800eadd
 800e3a4:	0800eadd 	.word	0x0800eadd
 800e3a8:	0800eadd 	.word	0x0800eadd
 800e3ac:	0800e6a3 	.word	0x0800e6a3
 800e3b0:	0800eadd 	.word	0x0800eadd
 800e3b4:	0800eadd 	.word	0x0800eadd
 800e3b8:	0800eadd 	.word	0x0800eadd
 800e3bc:	0800eadd 	.word	0x0800eadd
 800e3c0:	0800eadd 	.word	0x0800eadd
 800e3c4:	0800eadd 	.word	0x0800eadd
 800e3c8:	0800eadd 	.word	0x0800eadd
 800e3cc:	0800e77d 	.word	0x0800e77d
 800e3d0:	0800eadd 	.word	0x0800eadd
 800e3d4:	0800eadd 	.word	0x0800eadd
 800e3d8:	0800eadd 	.word	0x0800eadd
 800e3dc:	0800eadd 	.word	0x0800eadd
 800e3e0:	0800eadd 	.word	0x0800eadd
 800e3e4:	0800eadd 	.word	0x0800eadd
 800e3e8:	0800eadd 	.word	0x0800eadd
 800e3ec:	0800eadd 	.word	0x0800eadd
 800e3f0:	0800eadd 	.word	0x0800eadd
 800e3f4:	0800eadd 	.word	0x0800eadd
 800e3f8:	0800eadd 	.word	0x0800eadd
 800e3fc:	0800eadd 	.word	0x0800eadd
 800e400:	0800eadd 	.word	0x0800eadd
 800e404:	0800eadd 	.word	0x0800eadd
 800e408:	0800eadd 	.word	0x0800eadd
 800e40c:	0800e931 	.word	0x0800e931
 800e410:	2b40      	cmp	r3, #64	; 0x40
 800e412:	f000 82fb 	beq.w	800ea0c <UART_SetConfig+0x25b4>
 800e416:	e361      	b.n	800eadc <UART_SetConfig+0x2684>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e418:	f7fa fc80 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800e41c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d04f      	beq.n	800e4ca <UART_SetConfig+0x2072>
 800e42a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e430:	2b01      	cmp	r3, #1
 800e432:	d048      	beq.n	800e4c6 <UART_SetConfig+0x206e>
 800e434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d041      	beq.n	800e4c2 <UART_SetConfig+0x206a>
 800e43e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	2b03      	cmp	r3, #3
 800e446:	d03a      	beq.n	800e4be <UART_SetConfig+0x2066>
 800e448:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d033      	beq.n	800e4ba <UART_SetConfig+0x2062>
 800e452:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e458:	2b05      	cmp	r3, #5
 800e45a:	d02c      	beq.n	800e4b6 <UART_SetConfig+0x205e>
 800e45c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	2b06      	cmp	r3, #6
 800e464:	d025      	beq.n	800e4b2 <UART_SetConfig+0x205a>
 800e466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	d01e      	beq.n	800e4ae <UART_SetConfig+0x2056>
 800e470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e476:	2b08      	cmp	r3, #8
 800e478:	d017      	beq.n	800e4aa <UART_SetConfig+0x2052>
 800e47a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e480:	2b09      	cmp	r3, #9
 800e482:	d010      	beq.n	800e4a6 <UART_SetConfig+0x204e>
 800e484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	2b0a      	cmp	r3, #10
 800e48c:	d009      	beq.n	800e4a2 <UART_SetConfig+0x204a>
 800e48e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	2b0b      	cmp	r3, #11
 800e496:	d102      	bne.n	800e49e <UART_SetConfig+0x2046>
 800e498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e49c:	e016      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e014      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4a2:	2380      	movs	r3, #128	; 0x80
 800e4a4:	e012      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4a6:	2340      	movs	r3, #64	; 0x40
 800e4a8:	e010      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4aa:	2320      	movs	r3, #32
 800e4ac:	e00e      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4ae:	2310      	movs	r3, #16
 800e4b0:	e00c      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4b2:	230c      	movs	r3, #12
 800e4b4:	e00a      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4b6:	230a      	movs	r3, #10
 800e4b8:	e008      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4ba:	2308      	movs	r3, #8
 800e4bc:	e006      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4be:	2306      	movs	r3, #6
 800e4c0:	e004      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4c2:	2304      	movs	r3, #4
 800e4c4:	e002      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4c6:	2302      	movs	r3, #2
 800e4c8:	e000      	b.n	800e4cc <UART_SetConfig+0x2074>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e4d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e4d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	085b      	lsrs	r3, r3, #1
 800e4dc:	441a      	add	r2, r3
 800e4de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e4ee:	e2f9      	b.n	800eae4 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4f0:	f7fa fc2a 	bl	8008d48 <HAL_RCC_GetPCLK2Freq>
 800e4f4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d04f      	beq.n	800e5a2 <UART_SetConfig+0x214a>
 800e502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d048      	beq.n	800e59e <UART_SetConfig+0x2146>
 800e50c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e512:	2b02      	cmp	r3, #2
 800e514:	d041      	beq.n	800e59a <UART_SetConfig+0x2142>
 800e516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d03a      	beq.n	800e596 <UART_SetConfig+0x213e>
 800e520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e526:	2b04      	cmp	r3, #4
 800e528:	d033      	beq.n	800e592 <UART_SetConfig+0x213a>
 800e52a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	2b05      	cmp	r3, #5
 800e532:	d02c      	beq.n	800e58e <UART_SetConfig+0x2136>
 800e534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53a:	2b06      	cmp	r3, #6
 800e53c:	d025      	beq.n	800e58a <UART_SetConfig+0x2132>
 800e53e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e544:	2b07      	cmp	r3, #7
 800e546:	d01e      	beq.n	800e586 <UART_SetConfig+0x212e>
 800e548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	2b08      	cmp	r3, #8
 800e550:	d017      	beq.n	800e582 <UART_SetConfig+0x212a>
 800e552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	2b09      	cmp	r3, #9
 800e55a:	d010      	beq.n	800e57e <UART_SetConfig+0x2126>
 800e55c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	2b0a      	cmp	r3, #10
 800e564:	d009      	beq.n	800e57a <UART_SetConfig+0x2122>
 800e566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56c:	2b0b      	cmp	r3, #11
 800e56e:	d102      	bne.n	800e576 <UART_SetConfig+0x211e>
 800e570:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e574:	e016      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e576:	2301      	movs	r3, #1
 800e578:	e014      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e57a:	2380      	movs	r3, #128	; 0x80
 800e57c:	e012      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e57e:	2340      	movs	r3, #64	; 0x40
 800e580:	e010      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e582:	2320      	movs	r3, #32
 800e584:	e00e      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e586:	2310      	movs	r3, #16
 800e588:	e00c      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e58a:	230c      	movs	r3, #12
 800e58c:	e00a      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e58e:	230a      	movs	r3, #10
 800e590:	e008      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e592:	2308      	movs	r3, #8
 800e594:	e006      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e596:	2306      	movs	r3, #6
 800e598:	e004      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e59a:	2304      	movs	r3, #4
 800e59c:	e002      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	e000      	b.n	800e5a4 <UART_SetConfig+0x214c>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e5a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800e5ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	441a      	add	r2, r3
 800e5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e5c6:	e28d      	b.n	800eae4 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5c8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fb fb0d 	bl	8009bec <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5d2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e5d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d04f      	beq.n	800e680 <UART_SetConfig+0x2228>
 800e5e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d048      	beq.n	800e67c <UART_SetConfig+0x2224>
 800e5ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d041      	beq.n	800e678 <UART_SetConfig+0x2220>
 800e5f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fa:	2b03      	cmp	r3, #3
 800e5fc:	d03a      	beq.n	800e674 <UART_SetConfig+0x221c>
 800e5fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e604:	2b04      	cmp	r3, #4
 800e606:	d033      	beq.n	800e670 <UART_SetConfig+0x2218>
 800e608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60e:	2b05      	cmp	r3, #5
 800e610:	d02c      	beq.n	800e66c <UART_SetConfig+0x2214>
 800e612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	2b06      	cmp	r3, #6
 800e61a:	d025      	beq.n	800e668 <UART_SetConfig+0x2210>
 800e61c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e622:	2b07      	cmp	r3, #7
 800e624:	d01e      	beq.n	800e664 <UART_SetConfig+0x220c>
 800e626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d017      	beq.n	800e660 <UART_SetConfig+0x2208>
 800e630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e636:	2b09      	cmp	r3, #9
 800e638:	d010      	beq.n	800e65c <UART_SetConfig+0x2204>
 800e63a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e640:	2b0a      	cmp	r3, #10
 800e642:	d009      	beq.n	800e658 <UART_SetConfig+0x2200>
 800e644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64a:	2b0b      	cmp	r3, #11
 800e64c:	d102      	bne.n	800e654 <UART_SetConfig+0x21fc>
 800e64e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e652:	e016      	b.n	800e682 <UART_SetConfig+0x222a>
 800e654:	2301      	movs	r3, #1
 800e656:	e014      	b.n	800e682 <UART_SetConfig+0x222a>
 800e658:	2380      	movs	r3, #128	; 0x80
 800e65a:	e012      	b.n	800e682 <UART_SetConfig+0x222a>
 800e65c:	2340      	movs	r3, #64	; 0x40
 800e65e:	e010      	b.n	800e682 <UART_SetConfig+0x222a>
 800e660:	2320      	movs	r3, #32
 800e662:	e00e      	b.n	800e682 <UART_SetConfig+0x222a>
 800e664:	2310      	movs	r3, #16
 800e666:	e00c      	b.n	800e682 <UART_SetConfig+0x222a>
 800e668:	230c      	movs	r3, #12
 800e66a:	e00a      	b.n	800e682 <UART_SetConfig+0x222a>
 800e66c:	230a      	movs	r3, #10
 800e66e:	e008      	b.n	800e682 <UART_SetConfig+0x222a>
 800e670:	2308      	movs	r3, #8
 800e672:	e006      	b.n	800e682 <UART_SetConfig+0x222a>
 800e674:	2306      	movs	r3, #6
 800e676:	e004      	b.n	800e682 <UART_SetConfig+0x222a>
 800e678:	2304      	movs	r3, #4
 800e67a:	e002      	b.n	800e682 <UART_SetConfig+0x222a>
 800e67c:	2302      	movs	r3, #2
 800e67e:	e000      	b.n	800e682 <UART_SetConfig+0x222a>
 800e680:	2301      	movs	r3, #1
 800e682:	fbb2 f2f3 	udiv	r2, r2, r3
 800e686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	441a      	add	r2, r3
 800e690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	fbb2 f3f3 	udiv	r3, r2, r3
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e6a0:	e220      	b.n	800eae4 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fb fbf4 	bl	8009e94 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e6b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d04f      	beq.n	800e75a <UART_SetConfig+0x2302>
 800e6ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d048      	beq.n	800e756 <UART_SetConfig+0x22fe>
 800e6c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ca:	2b02      	cmp	r3, #2
 800e6cc:	d041      	beq.n	800e752 <UART_SetConfig+0x22fa>
 800e6ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d03a      	beq.n	800e74e <UART_SetConfig+0x22f6>
 800e6d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	d033      	beq.n	800e74a <UART_SetConfig+0x22f2>
 800e6e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e8:	2b05      	cmp	r3, #5
 800e6ea:	d02c      	beq.n	800e746 <UART_SetConfig+0x22ee>
 800e6ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f2:	2b06      	cmp	r3, #6
 800e6f4:	d025      	beq.n	800e742 <UART_SetConfig+0x22ea>
 800e6f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	2b07      	cmp	r3, #7
 800e6fe:	d01e      	beq.n	800e73e <UART_SetConfig+0x22e6>
 800e700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	2b08      	cmp	r3, #8
 800e708:	d017      	beq.n	800e73a <UART_SetConfig+0x22e2>
 800e70a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e710:	2b09      	cmp	r3, #9
 800e712:	d010      	beq.n	800e736 <UART_SetConfig+0x22de>
 800e714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71a:	2b0a      	cmp	r3, #10
 800e71c:	d009      	beq.n	800e732 <UART_SetConfig+0x22da>
 800e71e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e724:	2b0b      	cmp	r3, #11
 800e726:	d102      	bne.n	800e72e <UART_SetConfig+0x22d6>
 800e728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e72c:	e016      	b.n	800e75c <UART_SetConfig+0x2304>
 800e72e:	2301      	movs	r3, #1
 800e730:	e014      	b.n	800e75c <UART_SetConfig+0x2304>
 800e732:	2380      	movs	r3, #128	; 0x80
 800e734:	e012      	b.n	800e75c <UART_SetConfig+0x2304>
 800e736:	2340      	movs	r3, #64	; 0x40
 800e738:	e010      	b.n	800e75c <UART_SetConfig+0x2304>
 800e73a:	2320      	movs	r3, #32
 800e73c:	e00e      	b.n	800e75c <UART_SetConfig+0x2304>
 800e73e:	2310      	movs	r3, #16
 800e740:	e00c      	b.n	800e75c <UART_SetConfig+0x2304>
 800e742:	230c      	movs	r3, #12
 800e744:	e00a      	b.n	800e75c <UART_SetConfig+0x2304>
 800e746:	230a      	movs	r3, #10
 800e748:	e008      	b.n	800e75c <UART_SetConfig+0x2304>
 800e74a:	2308      	movs	r3, #8
 800e74c:	e006      	b.n	800e75c <UART_SetConfig+0x2304>
 800e74e:	2306      	movs	r3, #6
 800e750:	e004      	b.n	800e75c <UART_SetConfig+0x2304>
 800e752:	2304      	movs	r3, #4
 800e754:	e002      	b.n	800e75c <UART_SetConfig+0x2304>
 800e756:	2302      	movs	r3, #2
 800e758:	e000      	b.n	800e75c <UART_SetConfig+0x2304>
 800e75a:	2301      	movs	r3, #1
 800e75c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	085b      	lsrs	r3, r3, #1
 800e768:	441a      	add	r2, r3
 800e76a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	fbb2 f3f3 	udiv	r3, r2, r3
 800e774:	b29b      	uxth	r3, r3
 800e776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e77a:	e1b3      	b.n	800eae4 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e77c:	4ba0      	ldr	r3, [pc, #640]	; (800ea00 <UART_SetConfig+0x25a8>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 0320 	and.w	r3, r3, #32
 800e784:	2b00      	cmp	r3, #0
 800e786:	d06c      	beq.n	800e862 <UART_SetConfig+0x240a>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e788:	4b9d      	ldr	r3, [pc, #628]	; (800ea00 <UART_SetConfig+0x25a8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	08db      	lsrs	r3, r3, #3
 800e78e:	f003 0303 	and.w	r3, r3, #3
 800e792:	4a9c      	ldr	r2, [pc, #624]	; (800ea04 <UART_SetConfig+0x25ac>)
 800e794:	40da      	lsrs	r2, r3
 800e796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d04f      	beq.n	800e840 <UART_SetConfig+0x23e8>
 800e7a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d048      	beq.n	800e83c <UART_SetConfig+0x23e4>
 800e7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d041      	beq.n	800e838 <UART_SetConfig+0x23e0>
 800e7b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d03a      	beq.n	800e834 <UART_SetConfig+0x23dc>
 800e7be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c4:	2b04      	cmp	r3, #4
 800e7c6:	d033      	beq.n	800e830 <UART_SetConfig+0x23d8>
 800e7c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ce:	2b05      	cmp	r3, #5
 800e7d0:	d02c      	beq.n	800e82c <UART_SetConfig+0x23d4>
 800e7d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d8:	2b06      	cmp	r3, #6
 800e7da:	d025      	beq.n	800e828 <UART_SetConfig+0x23d0>
 800e7dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e2:	2b07      	cmp	r3, #7
 800e7e4:	d01e      	beq.n	800e824 <UART_SetConfig+0x23cc>
 800e7e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ec:	2b08      	cmp	r3, #8
 800e7ee:	d017      	beq.n	800e820 <UART_SetConfig+0x23c8>
 800e7f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f6:	2b09      	cmp	r3, #9
 800e7f8:	d010      	beq.n	800e81c <UART_SetConfig+0x23c4>
 800e7fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e800:	2b0a      	cmp	r3, #10
 800e802:	d009      	beq.n	800e818 <UART_SetConfig+0x23c0>
 800e804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	2b0b      	cmp	r3, #11
 800e80c:	d102      	bne.n	800e814 <UART_SetConfig+0x23bc>
 800e80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e812:	e016      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e814:	2301      	movs	r3, #1
 800e816:	e014      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e818:	2380      	movs	r3, #128	; 0x80
 800e81a:	e012      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e81c:	2340      	movs	r3, #64	; 0x40
 800e81e:	e010      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e820:	2320      	movs	r3, #32
 800e822:	e00e      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e824:	2310      	movs	r3, #16
 800e826:	e00c      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e828:	230c      	movs	r3, #12
 800e82a:	e00a      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e82c:	230a      	movs	r3, #10
 800e82e:	e008      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e830:	2308      	movs	r3, #8
 800e832:	e006      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e834:	2306      	movs	r3, #6
 800e836:	e004      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e838:	2304      	movs	r3, #4
 800e83a:	e002      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e83c:	2302      	movs	r3, #2
 800e83e:	e000      	b.n	800e842 <UART_SetConfig+0x23ea>
 800e840:	2301      	movs	r3, #1
 800e842:	fbb2 f2f3 	udiv	r2, r2, r3
 800e846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	085b      	lsrs	r3, r3, #1
 800e84e:	441a      	add	r2, r3
 800e850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	fbb2 f3f3 	udiv	r3, r2, r3
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e860:	e140      	b.n	800eae4 <UART_SetConfig+0x268c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d04f      	beq.n	800e90c <UART_SetConfig+0x24b4>
 800e86c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	2b01      	cmp	r3, #1
 800e874:	d048      	beq.n	800e908 <UART_SetConfig+0x24b0>
 800e876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d041      	beq.n	800e904 <UART_SetConfig+0x24ac>
 800e880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e886:	2b03      	cmp	r3, #3
 800e888:	d03a      	beq.n	800e900 <UART_SetConfig+0x24a8>
 800e88a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	2b04      	cmp	r3, #4
 800e892:	d033      	beq.n	800e8fc <UART_SetConfig+0x24a4>
 800e894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89a:	2b05      	cmp	r3, #5
 800e89c:	d02c      	beq.n	800e8f8 <UART_SetConfig+0x24a0>
 800e89e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a4:	2b06      	cmp	r3, #6
 800e8a6:	d025      	beq.n	800e8f4 <UART_SetConfig+0x249c>
 800e8a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	2b07      	cmp	r3, #7
 800e8b0:	d01e      	beq.n	800e8f0 <UART_SetConfig+0x2498>
 800e8b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	2b08      	cmp	r3, #8
 800e8ba:	d017      	beq.n	800e8ec <UART_SetConfig+0x2494>
 800e8bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c2:	2b09      	cmp	r3, #9
 800e8c4:	d010      	beq.n	800e8e8 <UART_SetConfig+0x2490>
 800e8c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	2b0a      	cmp	r3, #10
 800e8ce:	d009      	beq.n	800e8e4 <UART_SetConfig+0x248c>
 800e8d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d6:	2b0b      	cmp	r3, #11
 800e8d8:	d102      	bne.n	800e8e0 <UART_SetConfig+0x2488>
 800e8da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8de:	e016      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e014      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	e012      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8e8:	2340      	movs	r3, #64	; 0x40
 800e8ea:	e010      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8ec:	2320      	movs	r3, #32
 800e8ee:	e00e      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	e00c      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	e00a      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8f8:	230a      	movs	r3, #10
 800e8fa:	e008      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e8fc:	2308      	movs	r3, #8
 800e8fe:	e006      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e900:	2306      	movs	r3, #6
 800e902:	e004      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e904:	2304      	movs	r3, #4
 800e906:	e002      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e908:	2302      	movs	r3, #2
 800e90a:	e000      	b.n	800e90e <UART_SetConfig+0x24b6>
 800e90c:	2301      	movs	r3, #1
 800e90e:	4a3d      	ldr	r2, [pc, #244]	; (800ea04 <UART_SetConfig+0x25ac>)
 800e910:	fbb2 f2f3 	udiv	r2, r2, r3
 800e914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	085b      	lsrs	r3, r3, #1
 800e91c:	441a      	add	r2, r3
 800e91e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	fbb2 f3f3 	udiv	r3, r2, r3
 800e928:	b29b      	uxth	r3, r3
 800e92a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e92e:	e0d9      	b.n	800eae4 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e936:	2b00      	cmp	r3, #0
 800e938:	d04f      	beq.n	800e9da <UART_SetConfig+0x2582>
 800e93a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	2b01      	cmp	r3, #1
 800e942:	d048      	beq.n	800e9d6 <UART_SetConfig+0x257e>
 800e944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d041      	beq.n	800e9d2 <UART_SetConfig+0x257a>
 800e94e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	2b03      	cmp	r3, #3
 800e956:	d03a      	beq.n	800e9ce <UART_SetConfig+0x2576>
 800e958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	2b04      	cmp	r3, #4
 800e960:	d033      	beq.n	800e9ca <UART_SetConfig+0x2572>
 800e962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e968:	2b05      	cmp	r3, #5
 800e96a:	d02c      	beq.n	800e9c6 <UART_SetConfig+0x256e>
 800e96c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e972:	2b06      	cmp	r3, #6
 800e974:	d025      	beq.n	800e9c2 <UART_SetConfig+0x256a>
 800e976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97c:	2b07      	cmp	r3, #7
 800e97e:	d01e      	beq.n	800e9be <UART_SetConfig+0x2566>
 800e980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	2b08      	cmp	r3, #8
 800e988:	d017      	beq.n	800e9ba <UART_SetConfig+0x2562>
 800e98a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e990:	2b09      	cmp	r3, #9
 800e992:	d010      	beq.n	800e9b6 <UART_SetConfig+0x255e>
 800e994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99a:	2b0a      	cmp	r3, #10
 800e99c:	d009      	beq.n	800e9b2 <UART_SetConfig+0x255a>
 800e99e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2b0b      	cmp	r3, #11
 800e9a6:	d102      	bne.n	800e9ae <UART_SetConfig+0x2556>
 800e9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9ac:	e016      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e014      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9b2:	2380      	movs	r3, #128	; 0x80
 800e9b4:	e012      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9b6:	2340      	movs	r3, #64	; 0x40
 800e9b8:	e010      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9ba:	2320      	movs	r3, #32
 800e9bc:	e00e      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9be:	2310      	movs	r3, #16
 800e9c0:	e00c      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9c2:	230c      	movs	r3, #12
 800e9c4:	e00a      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9c6:	230a      	movs	r3, #10
 800e9c8:	e008      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9ca:	2308      	movs	r3, #8
 800e9cc:	e006      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9ce:	2306      	movs	r3, #6
 800e9d0:	e004      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9d2:	2304      	movs	r3, #4
 800e9d4:	e002      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	e000      	b.n	800e9dc <UART_SetConfig+0x2584>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	4a0a      	ldr	r2, [pc, #40]	; (800ea08 <UART_SetConfig+0x25b0>)
 800e9de:	fbb2 f2f3 	udiv	r2, r2, r3
 800e9e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	085b      	lsrs	r3, r3, #1
 800e9ea:	441a      	add	r2, r3
 800e9ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800e9fc:	e072      	b.n	800eae4 <UART_SetConfig+0x268c>
 800e9fe:	bf00      	nop
 800ea00:	58024400 	.word	0x58024400
 800ea04:	03d09000 	.word	0x03d09000
 800ea08:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d04f      	beq.n	800eab6 <UART_SetConfig+0x265e>
 800ea16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d048      	beq.n	800eab2 <UART_SetConfig+0x265a>
 800ea20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d041      	beq.n	800eaae <UART_SetConfig+0x2656>
 800ea2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	d03a      	beq.n	800eaaa <UART_SetConfig+0x2652>
 800ea34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3a:	2b04      	cmp	r3, #4
 800ea3c:	d033      	beq.n	800eaa6 <UART_SetConfig+0x264e>
 800ea3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	2b05      	cmp	r3, #5
 800ea46:	d02c      	beq.n	800eaa2 <UART_SetConfig+0x264a>
 800ea48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4e:	2b06      	cmp	r3, #6
 800ea50:	d025      	beq.n	800ea9e <UART_SetConfig+0x2646>
 800ea52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea58:	2b07      	cmp	r3, #7
 800ea5a:	d01e      	beq.n	800ea9a <UART_SetConfig+0x2642>
 800ea5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	2b08      	cmp	r3, #8
 800ea64:	d017      	beq.n	800ea96 <UART_SetConfig+0x263e>
 800ea66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	2b09      	cmp	r3, #9
 800ea6e:	d010      	beq.n	800ea92 <UART_SetConfig+0x263a>
 800ea70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea76:	2b0a      	cmp	r3, #10
 800ea78:	d009      	beq.n	800ea8e <UART_SetConfig+0x2636>
 800ea7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea80:	2b0b      	cmp	r3, #11
 800ea82:	d102      	bne.n	800ea8a <UART_SetConfig+0x2632>
 800ea84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea88:	e016      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e014      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea8e:	2380      	movs	r3, #128	; 0x80
 800ea90:	e012      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea92:	2340      	movs	r3, #64	; 0x40
 800ea94:	e010      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea96:	2320      	movs	r3, #32
 800ea98:	e00e      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea9a:	2310      	movs	r3, #16
 800ea9c:	e00c      	b.n	800eab8 <UART_SetConfig+0x2660>
 800ea9e:	230c      	movs	r3, #12
 800eaa0:	e00a      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eaa2:	230a      	movs	r3, #10
 800eaa4:	e008      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eaa6:	2308      	movs	r3, #8
 800eaa8:	e006      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eaaa:	2306      	movs	r3, #6
 800eaac:	e004      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eaae:	2304      	movs	r3, #4
 800eab0:	e002      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eab2:	2302      	movs	r3, #2
 800eab4:	e000      	b.n	800eab8 <UART_SetConfig+0x2660>
 800eab6:	2301      	movs	r3, #1
 800eab8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eabc:	fbb2 f2f3 	udiv	r2, r2, r3
 800eac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	085b      	lsrs	r3, r3, #1
 800eac8:	441a      	add	r2, r3
 800eaca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800eada:	e003      	b.n	800eae4 <UART_SetConfig+0x268c>
      default:
        ret = HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800eae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eae8:	2b0f      	cmp	r3, #15
 800eaea:	d90b      	bls.n	800eb04 <UART_SetConfig+0x26ac>
 800eaec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf4:	d206      	bcs.n	800eb04 <UART_SetConfig+0x26ac>
    {
      huart->Instance->BRR = usartdiv;
 800eaf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	e002      	b.n	800eb0a <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb22:	2200      	movs	r2, #0
 800eb24:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800eb26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800eb2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	37f0      	adds	r7, #240	; 0xf0
 800eb36:	46bd      	mov	sp, r7
 800eb38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eb3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00a      	beq.n	800eb66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	430a      	orrs	r2, r1
 800eb64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6a:	f003 0302 	and.w	r3, r3, #2
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00a      	beq.n	800eb88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	430a      	orrs	r2, r1
 800eb86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8c:	f003 0304 	and.w	r3, r3, #4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00a      	beq.n	800ebaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	430a      	orrs	r2, r1
 800eba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebae:	f003 0308 	and.w	r3, r3, #8
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00a      	beq.n	800ebcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd0:	f003 0310 	and.w	r3, r3, #16
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00a      	beq.n	800ebee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	430a      	orrs	r2, r1
 800ebec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf2:	f003 0320 	and.w	r3, r3, #32
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00a      	beq.n	800ec10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	430a      	orrs	r2, r1
 800ec0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d01a      	beq.n	800ec52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec3a:	d10a      	bne.n	800ec52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	430a      	orrs	r2, r1
 800ec50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00a      	beq.n	800ec74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	430a      	orrs	r2, r1
 800ec72:	605a      	str	r2, [r3, #4]
  }
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af02      	add	r7, sp, #8
 800ec86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ec90:	f7f8 fb34 	bl	80072fc <HAL_GetTick>
 800ec94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 0308 	and.w	r3, r3, #8
 800eca0:	2b08      	cmp	r3, #8
 800eca2:	d10e      	bne.n	800ecc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f82c 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e022      	b.n	800ed08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f003 0304 	and.w	r3, r3, #4
 800eccc:	2b04      	cmp	r3, #4
 800ecce:	d10e      	bne.n	800ecee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f816 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e00c      	b.n	800ed08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2220      	movs	r2, #32
 800ecf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed20:	e062      	b.n	800ede8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed28:	d05e      	beq.n	800ede8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed2a:	f7f8 fae7 	bl	80072fc <HAL_GetTick>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	69ba      	ldr	r2, [r7, #24]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d302      	bcc.n	800ed40 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d11d      	bne.n	800ed7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	689a      	ldr	r2, [r3, #8]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f022 0201 	bic.w	r2, r2, #1
 800ed5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2220      	movs	r2, #32
 800ed64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2220      	movs	r2, #32
 800ed6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ed78:	2303      	movs	r3, #3
 800ed7a:	e045      	b.n	800ee08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 0304 	and.w	r3, r3, #4
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d02e      	beq.n	800ede8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	69db      	ldr	r3, [r3, #28]
 800ed90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed98:	d126      	bne.n	800ede8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eda2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800edb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	689a      	ldr	r2, [r3, #8]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f022 0201 	bic.w	r2, r2, #1
 800edc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2220      	movs	r2, #32
 800edc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2220      	movs	r2, #32
 800edd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2220      	movs	r2, #32
 800edd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ede4:	2303      	movs	r3, #3
 800ede6:	e00f      	b.n	800ee08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	69da      	ldr	r2, [r3, #28]
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	4013      	ands	r3, r2
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	bf0c      	ite	eq
 800edf8:	2301      	moveq	r3, #1
 800edfa:	2300      	movne	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	461a      	mov	r2, r3
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d08d      	beq.n	800ed22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6899      	ldr	r1, [r3, #8]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	4b08      	ldr	r3, [pc, #32]	; (800ee54 <UART_EndRxTransfer+0x44>)
 800ee34:	400b      	ands	r3, r1
 800ee36:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2220      	movs	r2, #32
 800ee3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ee46:	bf00      	nop
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	effffffe 	.word	0xeffffffe

0800ee58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f7fd fae4 	bl	800c444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2220      	movs	r2, #32
 800eea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7f3 f902 	bl	80020b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eec6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eece:	2b22      	cmp	r3, #34	; 0x22
 800eed0:	d13b      	bne.n	800ef4a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eeda:	89bb      	ldrh	r3, [r7, #12]
 800eedc:	b2d9      	uxtb	r1, r3
 800eede:	89fb      	ldrh	r3, [r7, #14]
 800eee0:	b2da      	uxtb	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eee6:	400a      	ands	r2, r1
 800eee8:	b2d2      	uxtb	r2, r2
 800eeea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eef0:	1c5a      	adds	r2, r3, #1
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	3b01      	subs	r3, #1
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d122      	bne.n	800ef5a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ef22:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	689a      	ldr	r2, [r3, #8]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f022 0201 	bic.w	r2, r2, #1
 800ef32:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2220      	movs	r2, #32
 800ef38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7f3 f852 	bl	8001fec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef48:	e007      	b.n	800ef5a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	699a      	ldr	r2, [r3, #24]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f042 0208 	orr.w	r2, r2, #8
 800ef58:	619a      	str	r2, [r3, #24]
}
 800ef5a:	bf00      	nop
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef70:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef78:	2b22      	cmp	r3, #34	; 0x22
 800ef7a:	d13b      	bne.n	800eff4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef82:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef88:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ef8a:	89ba      	ldrh	r2, [r7, #12]
 800ef8c:	89fb      	ldrh	r3, [r7, #14]
 800ef8e:	4013      	ands	r3, r2
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef9a:	1c9a      	adds	r2, r3, #2
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	3b01      	subs	r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efb8:	b29b      	uxth	r3, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d122      	bne.n	800f004 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800efcc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	689a      	ldr	r2, [r3, #8]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f022 0201 	bic.w	r2, r2, #1
 800efdc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2220      	movs	r2, #32
 800efe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7f2 fffd 	bl	8001fec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eff2:	e007      	b.n	800f004 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	699a      	ldr	r2, [r3, #24]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f042 0208 	orr.w	r2, r2, #8
 800f002:	619a      	str	r2, [r3, #24]
}
 800f004:	bf00      	nop
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f01a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f022:	2b22      	cmp	r3, #34	; 0x22
 800f024:	d166      	bne.n	800f0f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f02c:	81fb      	strh	r3, [r7, #14]
 800f02e:	e03d      	b.n	800f0ac <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f036:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f038:	893b      	ldrh	r3, [r7, #8]
 800f03a:	b2d9      	uxtb	r1, r3
 800f03c:	89bb      	ldrh	r3, [r7, #12]
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f044:	400a      	ands	r2, r1
 800f046:	b2d2      	uxtb	r2, r2
 800f048:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f04e:	1c5a      	adds	r2, r3, #1
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	3b01      	subs	r3, #1
 800f05e:	b29a      	uxth	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d119      	bne.n	800f0a6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f080:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6899      	ldr	r1, [r3, #8]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	4b1f      	ldr	r3, [pc, #124]	; (800f10c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800f08e:	400b      	ands	r3, r1
 800f090:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2220      	movs	r2, #32
 800f096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7f2 ffa3 	bl	8001fec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f0a6:	89fb      	ldrh	r3, [r7, #14]
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	81fb      	strh	r3, [r7, #14]
 800f0ac:	89fb      	ldrh	r3, [r7, #14]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1be      	bne.n	800f030 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f0ba:	897b      	ldrh	r3, [r7, #10]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d021      	beq.n	800f104 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0c6:	897a      	ldrh	r2, [r7, #10]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d21b      	bcs.n	800f104 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	689a      	ldr	r2, [r3, #8]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f0da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a0c      	ldr	r2, [pc, #48]	; (800f110 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800f0e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f042 0220 	orr.w	r2, r2, #32
 800f0f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0f2:	e007      	b.n	800f104 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	699a      	ldr	r2, [r3, #24]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f042 0208 	orr.w	r2, r2, #8
 800f102:	619a      	str	r2, [r3, #24]
}
 800f104:	bf00      	nop
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	effffffe 	.word	0xeffffffe
 800f110:	0800eeb9 	.word	0x0800eeb9

0800f114 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b086      	sub	sp, #24
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f122:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f12a:	2b22      	cmp	r3, #34	; 0x22
 800f12c:	d166      	bne.n	800f1fc <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f134:	82fb      	strh	r3, [r7, #22]
 800f136:	e03d      	b.n	800f1b4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f144:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f146:	8a3a      	ldrh	r2, [r7, #16]
 800f148:	8abb      	ldrh	r3, [r7, #20]
 800f14a:	4013      	ands	r3, r2
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f156:	1c9a      	adds	r2, r3, #2
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f162:	b29b      	uxth	r3, r3
 800f164:	3b01      	subs	r3, #1
 800f166:	b29a      	uxth	r2, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f174:	b29b      	uxth	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d119      	bne.n	800f1ae <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f188:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6899      	ldr	r1, [r3, #8]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	4b1f      	ldr	r3, [pc, #124]	; (800f214 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800f196:	400b      	ands	r3, r1
 800f198:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2220      	movs	r2, #32
 800f19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f7f2 ff1f 	bl	8001fec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f1ae:	8afb      	ldrh	r3, [r7, #22]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	82fb      	strh	r3, [r7, #22]
 800f1b4:	8afb      	ldrh	r3, [r7, #22]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1be      	bne.n	800f138 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1c0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1c2:	8a7b      	ldrh	r3, [r7, #18]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d021      	beq.n	800f20c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f1ce:	8a7a      	ldrh	r2, [r7, #18]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d21b      	bcs.n	800f20c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	689a      	ldr	r2, [r3, #8]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f1e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a0c      	ldr	r2, [pc, #48]	; (800f218 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800f1e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f042 0220 	orr.w	r2, r2, #32
 800f1f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1fa:	e007      	b.n	800f20c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	699a      	ldr	r2, [r3, #24]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f042 0208 	orr.w	r2, r2, #8
 800f20a:	619a      	str	r2, [r3, #24]
}
 800f20c:	bf00      	nop
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	effffffe 	.word	0xeffffffe
 800f218:	0800ef63 	.word	0x0800ef63

0800f21c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f266:	2b01      	cmp	r3, #1
 800f268:	d101      	bne.n	800f26e <HAL_UARTEx_DisableFifoMode+0x16>
 800f26a:	2302      	movs	r3, #2
 800f26c:	e027      	b.n	800f2be <HAL_UARTEx_DisableFifoMode+0x66>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2224      	movs	r2, #36	; 0x24
 800f27a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f022 0201 	bic.w	r2, r2, #1
 800f294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f29c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2220      	movs	r2, #32
 800f2b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
 800f2d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d101      	bne.n	800f2e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2de:	2302      	movs	r3, #2
 800f2e0:	e02d      	b.n	800f33e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2224      	movs	r2, #36	; 0x24
 800f2ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f022 0201 	bic.w	r2, r2, #1
 800f308:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	430a      	orrs	r2, r1
 800f31c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f850 	bl	800f3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2220      	movs	r2, #32
 800f330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f356:	2b01      	cmp	r3, #1
 800f358:	d101      	bne.n	800f35e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f35a:	2302      	movs	r3, #2
 800f35c:	e02d      	b.n	800f3ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2224      	movs	r2, #36	; 0x24
 800f36a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0201 	bic.w	r2, r2, #1
 800f384:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f812 	bl	800f3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
	...

0800f3c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b089      	sub	sp, #36	; 0x24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800f3cc:	4a2d      	ldr	r2, [pc, #180]	; (800f484 <UARTEx_SetNbDataToProcess+0xc0>)
 800f3ce:	f107 0314 	add.w	r3, r7, #20
 800f3d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800f3da:	4a2b      	ldr	r2, [pc, #172]	; (800f488 <UARTEx_SetNbDataToProcess+0xc4>)
 800f3dc:	f107 030c 	add.w	r3, r7, #12
 800f3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d108      	bne.n	800f402 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f400:	e039      	b.n	800f476 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f402:	2308      	movs	r3, #8
 800f404:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f406:	2308      	movs	r3, #8
 800f408:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	0e5b      	lsrs	r3, r3, #25
 800f412:	b2db      	uxtb	r3, r3
 800f414:	f003 0307 	and.w	r3, r3, #7
 800f418:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	0f5b      	lsrs	r3, r3, #29
 800f422:	b2db      	uxtb	r3, r3
 800f424:	f003 0307 	and.w	r3, r3, #7
 800f428:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800f42a:	7fbb      	ldrb	r3, [r7, #30]
 800f42c:	7f3a      	ldrb	r2, [r7, #28]
 800f42e:	3220      	adds	r2, #32
 800f430:	443a      	add	r2, r7
 800f432:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f436:	fb02 f303 	mul.w	r3, r2, r3
 800f43a:	7f3a      	ldrb	r2, [r7, #28]
 800f43c:	3220      	adds	r2, #32
 800f43e:	443a      	add	r2, r7
 800f440:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f444:	fb93 f3f2 	sdiv	r3, r3, r2
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800f450:	7ffb      	ldrb	r3, [r7, #31]
 800f452:	7f7a      	ldrb	r2, [r7, #29]
 800f454:	3220      	adds	r2, #32
 800f456:	443a      	add	r2, r7
 800f458:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f45c:	fb02 f303 	mul.w	r3, r2, r3
 800f460:	7f7a      	ldrb	r2, [r7, #29]
 800f462:	3220      	adds	r2, #32
 800f464:	443a      	add	r2, r7
 800f466:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f46a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f476:	bf00      	nop
 800f478:	3724      	adds	r7, #36	; 0x24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	08012ba0 	.word	0x08012ba0
 800f488:	08012ba8 	.word	0x08012ba8

0800f48c <__errno>:
 800f48c:	4b01      	ldr	r3, [pc, #4]	; (800f494 <__errno+0x8>)
 800f48e:	6818      	ldr	r0, [r3, #0]
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	24000110 	.word	0x24000110

0800f498 <__libc_init_array>:
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	4d0d      	ldr	r5, [pc, #52]	; (800f4d0 <__libc_init_array+0x38>)
 800f49c:	4c0d      	ldr	r4, [pc, #52]	; (800f4d4 <__libc_init_array+0x3c>)
 800f49e:	1b64      	subs	r4, r4, r5
 800f4a0:	10a4      	asrs	r4, r4, #2
 800f4a2:	2600      	movs	r6, #0
 800f4a4:	42a6      	cmp	r6, r4
 800f4a6:	d109      	bne.n	800f4bc <__libc_init_array+0x24>
 800f4a8:	4d0b      	ldr	r5, [pc, #44]	; (800f4d8 <__libc_init_array+0x40>)
 800f4aa:	4c0c      	ldr	r4, [pc, #48]	; (800f4dc <__libc_init_array+0x44>)
 800f4ac:	f003 fae6 	bl	8012a7c <_init>
 800f4b0:	1b64      	subs	r4, r4, r5
 800f4b2:	10a4      	asrs	r4, r4, #2
 800f4b4:	2600      	movs	r6, #0
 800f4b6:	42a6      	cmp	r6, r4
 800f4b8:	d105      	bne.n	800f4c6 <__libc_init_array+0x2e>
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4c0:	4798      	blx	r3
 800f4c2:	3601      	adds	r6, #1
 800f4c4:	e7ee      	b.n	800f4a4 <__libc_init_array+0xc>
 800f4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ca:	4798      	blx	r3
 800f4cc:	3601      	adds	r6, #1
 800f4ce:	e7f2      	b.n	800f4b6 <__libc_init_array+0x1e>
 800f4d0:	080148b0 	.word	0x080148b0
 800f4d4:	080148b0 	.word	0x080148b0
 800f4d8:	080148b0 	.word	0x080148b0
 800f4dc:	080148b4 	.word	0x080148b4

0800f4e0 <memcpy>:
 800f4e0:	440a      	add	r2, r1
 800f4e2:	4291      	cmp	r1, r2
 800f4e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4e8:	d100      	bne.n	800f4ec <memcpy+0xc>
 800f4ea:	4770      	bx	lr
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4f6:	4291      	cmp	r1, r2
 800f4f8:	d1f9      	bne.n	800f4ee <memcpy+0xe>
 800f4fa:	bd10      	pop	{r4, pc}

0800f4fc <memset>:
 800f4fc:	4402      	add	r2, r0
 800f4fe:	4603      	mov	r3, r0
 800f500:	4293      	cmp	r3, r2
 800f502:	d100      	bne.n	800f506 <memset+0xa>
 800f504:	4770      	bx	lr
 800f506:	f803 1b01 	strb.w	r1, [r3], #1
 800f50a:	e7f9      	b.n	800f500 <memset+0x4>

0800f50c <sulp>:
 800f50c:	b570      	push	{r4, r5, r6, lr}
 800f50e:	4604      	mov	r4, r0
 800f510:	460d      	mov	r5, r1
 800f512:	4616      	mov	r6, r2
 800f514:	ec45 4b10 	vmov	d0, r4, r5
 800f518:	f001 fcc8 	bl	8010eac <__ulp>
 800f51c:	b17e      	cbz	r6, 800f53e <sulp+0x32>
 800f51e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f522:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f526:	2b00      	cmp	r3, #0
 800f528:	dd09      	ble.n	800f53e <sulp+0x32>
 800f52a:	051b      	lsls	r3, r3, #20
 800f52c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f530:	2000      	movs	r0, #0
 800f532:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f536:	ec41 0b17 	vmov	d7, r0, r1
 800f53a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f53e:	bd70      	pop	{r4, r5, r6, pc}

0800f540 <_strtod_l>:
 800f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	ed2d 8b0e 	vpush	{d8-d14}
 800f548:	b097      	sub	sp, #92	; 0x5c
 800f54a:	461f      	mov	r7, r3
 800f54c:	2300      	movs	r3, #0
 800f54e:	9312      	str	r3, [sp, #72]	; 0x48
 800f550:	4ba1      	ldr	r3, [pc, #644]	; (800f7d8 <_strtod_l+0x298>)
 800f552:	920d      	str	r2, [sp, #52]	; 0x34
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	9307      	str	r3, [sp, #28]
 800f558:	4604      	mov	r4, r0
 800f55a:	4618      	mov	r0, r3
 800f55c:	468b      	mov	fp, r1
 800f55e:	f7f0 febf 	bl	80002e0 <strlen>
 800f562:	f04f 0800 	mov.w	r8, #0
 800f566:	4605      	mov	r5, r0
 800f568:	f04f 0900 	mov.w	r9, #0
 800f56c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f572:	7813      	ldrb	r3, [r2, #0]
 800f574:	2b2b      	cmp	r3, #43	; 0x2b
 800f576:	d04d      	beq.n	800f614 <_strtod_l+0xd4>
 800f578:	d83a      	bhi.n	800f5f0 <_strtod_l+0xb0>
 800f57a:	2b0d      	cmp	r3, #13
 800f57c:	d833      	bhi.n	800f5e6 <_strtod_l+0xa6>
 800f57e:	2b08      	cmp	r3, #8
 800f580:	d833      	bhi.n	800f5ea <_strtod_l+0xaa>
 800f582:	2b00      	cmp	r3, #0
 800f584:	d03d      	beq.n	800f602 <_strtod_l+0xc2>
 800f586:	2300      	movs	r3, #0
 800f588:	9308      	str	r3, [sp, #32]
 800f58a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f58c:	7833      	ldrb	r3, [r6, #0]
 800f58e:	2b30      	cmp	r3, #48	; 0x30
 800f590:	f040 80b0 	bne.w	800f6f4 <_strtod_l+0x1b4>
 800f594:	7873      	ldrb	r3, [r6, #1]
 800f596:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f59a:	2b58      	cmp	r3, #88	; 0x58
 800f59c:	d167      	bne.n	800f66e <_strtod_l+0x12e>
 800f59e:	9b08      	ldr	r3, [sp, #32]
 800f5a0:	9301      	str	r3, [sp, #4]
 800f5a2:	ab12      	add	r3, sp, #72	; 0x48
 800f5a4:	9702      	str	r7, [sp, #8]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	4a8c      	ldr	r2, [pc, #560]	; (800f7dc <_strtod_l+0x29c>)
 800f5aa:	ab13      	add	r3, sp, #76	; 0x4c
 800f5ac:	a911      	add	r1, sp, #68	; 0x44
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f000 fdf0 	bl	8010194 <__gethex>
 800f5b4:	f010 0507 	ands.w	r5, r0, #7
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	d005      	beq.n	800f5c8 <_strtod_l+0x88>
 800f5bc:	2d06      	cmp	r5, #6
 800f5be:	d12b      	bne.n	800f618 <_strtod_l+0xd8>
 800f5c0:	3601      	adds	r6, #1
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	9611      	str	r6, [sp, #68]	; 0x44
 800f5c6:	9308      	str	r3, [sp, #32]
 800f5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f040 854e 	bne.w	801006c <_strtod_l+0xb2c>
 800f5d0:	9b08      	ldr	r3, [sp, #32]
 800f5d2:	b1e3      	cbz	r3, 800f60e <_strtod_l+0xce>
 800f5d4:	ec49 8b17 	vmov	d7, r8, r9
 800f5d8:	eeb1 0b47 	vneg.f64	d0, d7
 800f5dc:	b017      	add	sp, #92	; 0x5c
 800f5de:	ecbd 8b0e 	vpop	{d8-d14}
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	d1cd      	bne.n	800f586 <_strtod_l+0x46>
 800f5ea:	3201      	adds	r2, #1
 800f5ec:	9211      	str	r2, [sp, #68]	; 0x44
 800f5ee:	e7bf      	b.n	800f570 <_strtod_l+0x30>
 800f5f0:	2b2d      	cmp	r3, #45	; 0x2d
 800f5f2:	d1c8      	bne.n	800f586 <_strtod_l+0x46>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	9308      	str	r3, [sp, #32]
 800f5f8:	1c53      	adds	r3, r2, #1
 800f5fa:	9311      	str	r3, [sp, #68]	; 0x44
 800f5fc:	7853      	ldrb	r3, [r2, #1]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1c3      	bne.n	800f58a <_strtod_l+0x4a>
 800f602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f604:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f040 852d 	bne.w	8010068 <_strtod_l+0xb28>
 800f60e:	ec49 8b10 	vmov	d0, r8, r9
 800f612:	e7e3      	b.n	800f5dc <_strtod_l+0x9c>
 800f614:	2300      	movs	r3, #0
 800f616:	e7ee      	b.n	800f5f6 <_strtod_l+0xb6>
 800f618:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f61a:	b13a      	cbz	r2, 800f62c <_strtod_l+0xec>
 800f61c:	2135      	movs	r1, #53	; 0x35
 800f61e:	a814      	add	r0, sp, #80	; 0x50
 800f620:	f001 fd4c 	bl	80110bc <__copybits>
 800f624:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f626:	4620      	mov	r0, r4
 800f628:	f001 f90e 	bl	8010848 <_Bfree>
 800f62c:	3d01      	subs	r5, #1
 800f62e:	2d04      	cmp	r5, #4
 800f630:	d806      	bhi.n	800f640 <_strtod_l+0x100>
 800f632:	e8df f005 	tbb	[pc, r5]
 800f636:	030a      	.short	0x030a
 800f638:	1714      	.short	0x1714
 800f63a:	0a          	.byte	0x0a
 800f63b:	00          	.byte	0x00
 800f63c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f640:	073f      	lsls	r7, r7, #28
 800f642:	d5c1      	bpl.n	800f5c8 <_strtod_l+0x88>
 800f644:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f648:	e7be      	b.n	800f5c8 <_strtod_l+0x88>
 800f64a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f64e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f650:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f654:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f658:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f65c:	e7f0      	b.n	800f640 <_strtod_l+0x100>
 800f65e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f7e0 <_strtod_l+0x2a0>
 800f662:	e7ed      	b.n	800f640 <_strtod_l+0x100>
 800f664:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f668:	f04f 38ff 	mov.w	r8, #4294967295
 800f66c:	e7e8      	b.n	800f640 <_strtod_l+0x100>
 800f66e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f670:	1c5a      	adds	r2, r3, #1
 800f672:	9211      	str	r2, [sp, #68]	; 0x44
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	2b30      	cmp	r3, #48	; 0x30
 800f678:	d0f9      	beq.n	800f66e <_strtod_l+0x12e>
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d0a4      	beq.n	800f5c8 <_strtod_l+0x88>
 800f67e:	2301      	movs	r3, #1
 800f680:	f04f 0a00 	mov.w	sl, #0
 800f684:	9304      	str	r3, [sp, #16]
 800f686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f688:	930a      	str	r3, [sp, #40]	; 0x28
 800f68a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f68e:	f8cd a018 	str.w	sl, [sp, #24]
 800f692:	220a      	movs	r2, #10
 800f694:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f696:	7807      	ldrb	r7, [r0, #0]
 800f698:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f69c:	b2d9      	uxtb	r1, r3
 800f69e:	2909      	cmp	r1, #9
 800f6a0:	d92a      	bls.n	800f6f8 <_strtod_l+0x1b8>
 800f6a2:	9907      	ldr	r1, [sp, #28]
 800f6a4:	462a      	mov	r2, r5
 800f6a6:	f001 fe0f 	bl	80112c8 <strncmp>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d033      	beq.n	800f716 <_strtod_l+0x1d6>
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	9b06      	ldr	r3, [sp, #24]
 800f6b2:	463a      	mov	r2, r7
 800f6b4:	4601      	mov	r1, r0
 800f6b6:	4607      	mov	r7, r0
 800f6b8:	2a65      	cmp	r2, #101	; 0x65
 800f6ba:	d001      	beq.n	800f6c0 <_strtod_l+0x180>
 800f6bc:	2a45      	cmp	r2, #69	; 0x45
 800f6be:	d117      	bne.n	800f6f0 <_strtod_l+0x1b0>
 800f6c0:	b91b      	cbnz	r3, 800f6ca <_strtod_l+0x18a>
 800f6c2:	9b04      	ldr	r3, [sp, #16]
 800f6c4:	4303      	orrs	r3, r0
 800f6c6:	d09c      	beq.n	800f602 <_strtod_l+0xc2>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f6ce:	f10b 0201 	add.w	r2, fp, #1
 800f6d2:	9211      	str	r2, [sp, #68]	; 0x44
 800f6d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f6d8:	2a2b      	cmp	r2, #43	; 0x2b
 800f6da:	d071      	beq.n	800f7c0 <_strtod_l+0x280>
 800f6dc:	2a2d      	cmp	r2, #45	; 0x2d
 800f6de:	d077      	beq.n	800f7d0 <_strtod_l+0x290>
 800f6e0:	f04f 0e00 	mov.w	lr, #0
 800f6e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f6e8:	2d09      	cmp	r5, #9
 800f6ea:	d97f      	bls.n	800f7ec <_strtod_l+0x2ac>
 800f6ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f6f0:	2500      	movs	r5, #0
 800f6f2:	e09b      	b.n	800f82c <_strtod_l+0x2ec>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	e7c3      	b.n	800f680 <_strtod_l+0x140>
 800f6f8:	9906      	ldr	r1, [sp, #24]
 800f6fa:	2908      	cmp	r1, #8
 800f6fc:	bfdd      	ittte	le
 800f6fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f700:	fb02 3301 	mlale	r3, r2, r1, r3
 800f704:	9309      	strle	r3, [sp, #36]	; 0x24
 800f706:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f70a:	9b06      	ldr	r3, [sp, #24]
 800f70c:	3001      	adds	r0, #1
 800f70e:	3301      	adds	r3, #1
 800f710:	9306      	str	r3, [sp, #24]
 800f712:	9011      	str	r0, [sp, #68]	; 0x44
 800f714:	e7be      	b.n	800f694 <_strtod_l+0x154>
 800f716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f718:	195a      	adds	r2, r3, r5
 800f71a:	9211      	str	r2, [sp, #68]	; 0x44
 800f71c:	5d5a      	ldrb	r2, [r3, r5]
 800f71e:	9b06      	ldr	r3, [sp, #24]
 800f720:	b3a3      	cbz	r3, 800f78c <_strtod_l+0x24c>
 800f722:	4607      	mov	r7, r0
 800f724:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f728:	2909      	cmp	r1, #9
 800f72a:	d912      	bls.n	800f752 <_strtod_l+0x212>
 800f72c:	2101      	movs	r1, #1
 800f72e:	e7c3      	b.n	800f6b8 <_strtod_l+0x178>
 800f730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	9211      	str	r2, [sp, #68]	; 0x44
 800f736:	785a      	ldrb	r2, [r3, #1]
 800f738:	3001      	adds	r0, #1
 800f73a:	2a30      	cmp	r2, #48	; 0x30
 800f73c:	d0f8      	beq.n	800f730 <_strtod_l+0x1f0>
 800f73e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f742:	2b08      	cmp	r3, #8
 800f744:	f200 8497 	bhi.w	8010076 <_strtod_l+0xb36>
 800f748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f74a:	930a      	str	r3, [sp, #40]	; 0x28
 800f74c:	4607      	mov	r7, r0
 800f74e:	2000      	movs	r0, #0
 800f750:	4603      	mov	r3, r0
 800f752:	3a30      	subs	r2, #48	; 0x30
 800f754:	f100 0101 	add.w	r1, r0, #1
 800f758:	d012      	beq.n	800f780 <_strtod_l+0x240>
 800f75a:	440f      	add	r7, r1
 800f75c:	eb00 0c03 	add.w	ip, r0, r3
 800f760:	4619      	mov	r1, r3
 800f762:	250a      	movs	r5, #10
 800f764:	4561      	cmp	r1, ip
 800f766:	d113      	bne.n	800f790 <_strtod_l+0x250>
 800f768:	1819      	adds	r1, r3, r0
 800f76a:	2908      	cmp	r1, #8
 800f76c:	f103 0301 	add.w	r3, r3, #1
 800f770:	4403      	add	r3, r0
 800f772:	dc1c      	bgt.n	800f7ae <_strtod_l+0x26e>
 800f774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f776:	210a      	movs	r1, #10
 800f778:	fb01 2200 	mla	r2, r1, r0, r2
 800f77c:	9209      	str	r2, [sp, #36]	; 0x24
 800f77e:	2100      	movs	r1, #0
 800f780:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f782:	1c50      	adds	r0, r2, #1
 800f784:	9011      	str	r0, [sp, #68]	; 0x44
 800f786:	7852      	ldrb	r2, [r2, #1]
 800f788:	4608      	mov	r0, r1
 800f78a:	e7cb      	b.n	800f724 <_strtod_l+0x1e4>
 800f78c:	9806      	ldr	r0, [sp, #24]
 800f78e:	e7d4      	b.n	800f73a <_strtod_l+0x1fa>
 800f790:	2908      	cmp	r1, #8
 800f792:	dc04      	bgt.n	800f79e <_strtod_l+0x25e>
 800f794:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f796:	436e      	muls	r6, r5
 800f798:	9609      	str	r6, [sp, #36]	; 0x24
 800f79a:	3101      	adds	r1, #1
 800f79c:	e7e2      	b.n	800f764 <_strtod_l+0x224>
 800f79e:	f101 0e01 	add.w	lr, r1, #1
 800f7a2:	f1be 0f10 	cmp.w	lr, #16
 800f7a6:	bfd8      	it	le
 800f7a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f7ac:	e7f5      	b.n	800f79a <_strtod_l+0x25a>
 800f7ae:	2b10      	cmp	r3, #16
 800f7b0:	bfdc      	itt	le
 800f7b2:	210a      	movle	r1, #10
 800f7b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f7b8:	e7e1      	b.n	800f77e <_strtod_l+0x23e>
 800f7ba:	2700      	movs	r7, #0
 800f7bc:	2101      	movs	r1, #1
 800f7be:	e780      	b.n	800f6c2 <_strtod_l+0x182>
 800f7c0:	f04f 0e00 	mov.w	lr, #0
 800f7c4:	f10b 0202 	add.w	r2, fp, #2
 800f7c8:	9211      	str	r2, [sp, #68]	; 0x44
 800f7ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f7ce:	e789      	b.n	800f6e4 <_strtod_l+0x1a4>
 800f7d0:	f04f 0e01 	mov.w	lr, #1
 800f7d4:	e7f6      	b.n	800f7c4 <_strtod_l+0x284>
 800f7d6:	bf00      	nop
 800f7d8:	08012c98 	.word	0x08012c98
 800f7dc:	08012bd0 	.word	0x08012bd0
 800f7e0:	7ff00000 	.word	0x7ff00000
 800f7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f7e6:	1c55      	adds	r5, r2, #1
 800f7e8:	9511      	str	r5, [sp, #68]	; 0x44
 800f7ea:	7852      	ldrb	r2, [r2, #1]
 800f7ec:	2a30      	cmp	r2, #48	; 0x30
 800f7ee:	d0f9      	beq.n	800f7e4 <_strtod_l+0x2a4>
 800f7f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f7f4:	2d08      	cmp	r5, #8
 800f7f6:	f63f af7b 	bhi.w	800f6f0 <_strtod_l+0x1b0>
 800f7fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f7fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f800:	9207      	str	r2, [sp, #28]
 800f802:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f804:	1c55      	adds	r5, r2, #1
 800f806:	9511      	str	r5, [sp, #68]	; 0x44
 800f808:	7852      	ldrb	r2, [r2, #1]
 800f80a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f80e:	2e09      	cmp	r6, #9
 800f810:	d937      	bls.n	800f882 <_strtod_l+0x342>
 800f812:	9e07      	ldr	r6, [sp, #28]
 800f814:	1bad      	subs	r5, r5, r6
 800f816:	2d08      	cmp	r5, #8
 800f818:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f81c:	dc02      	bgt.n	800f824 <_strtod_l+0x2e4>
 800f81e:	4565      	cmp	r5, ip
 800f820:	bfa8      	it	ge
 800f822:	4665      	movge	r5, ip
 800f824:	f1be 0f00 	cmp.w	lr, #0
 800f828:	d000      	beq.n	800f82c <_strtod_l+0x2ec>
 800f82a:	426d      	negs	r5, r5
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d14d      	bne.n	800f8cc <_strtod_l+0x38c>
 800f830:	9b04      	ldr	r3, [sp, #16]
 800f832:	4303      	orrs	r3, r0
 800f834:	f47f aec8 	bne.w	800f5c8 <_strtod_l+0x88>
 800f838:	2900      	cmp	r1, #0
 800f83a:	f47f aee2 	bne.w	800f602 <_strtod_l+0xc2>
 800f83e:	2a69      	cmp	r2, #105	; 0x69
 800f840:	d027      	beq.n	800f892 <_strtod_l+0x352>
 800f842:	dc24      	bgt.n	800f88e <_strtod_l+0x34e>
 800f844:	2a49      	cmp	r2, #73	; 0x49
 800f846:	d024      	beq.n	800f892 <_strtod_l+0x352>
 800f848:	2a4e      	cmp	r2, #78	; 0x4e
 800f84a:	f47f aeda 	bne.w	800f602 <_strtod_l+0xc2>
 800f84e:	4996      	ldr	r1, [pc, #600]	; (800faa8 <_strtod_l+0x568>)
 800f850:	a811      	add	r0, sp, #68	; 0x44
 800f852:	f000 fef7 	bl	8010644 <__match>
 800f856:	2800      	cmp	r0, #0
 800f858:	f43f aed3 	beq.w	800f602 <_strtod_l+0xc2>
 800f85c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b28      	cmp	r3, #40	; 0x28
 800f862:	d12d      	bne.n	800f8c0 <_strtod_l+0x380>
 800f864:	4991      	ldr	r1, [pc, #580]	; (800faac <_strtod_l+0x56c>)
 800f866:	aa14      	add	r2, sp, #80	; 0x50
 800f868:	a811      	add	r0, sp, #68	; 0x44
 800f86a:	f000 feff 	bl	801066c <__hexnan>
 800f86e:	2805      	cmp	r0, #5
 800f870:	d126      	bne.n	800f8c0 <_strtod_l+0x380>
 800f872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f874:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f878:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f87c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f880:	e6a2      	b.n	800f5c8 <_strtod_l+0x88>
 800f882:	250a      	movs	r5, #10
 800f884:	fb05 250c 	mla	r5, r5, ip, r2
 800f888:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f88c:	e7b9      	b.n	800f802 <_strtod_l+0x2c2>
 800f88e:	2a6e      	cmp	r2, #110	; 0x6e
 800f890:	e7db      	b.n	800f84a <_strtod_l+0x30a>
 800f892:	4987      	ldr	r1, [pc, #540]	; (800fab0 <_strtod_l+0x570>)
 800f894:	a811      	add	r0, sp, #68	; 0x44
 800f896:	f000 fed5 	bl	8010644 <__match>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	f43f aeb1 	beq.w	800f602 <_strtod_l+0xc2>
 800f8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8a2:	4984      	ldr	r1, [pc, #528]	; (800fab4 <_strtod_l+0x574>)
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	a811      	add	r0, sp, #68	; 0x44
 800f8a8:	9311      	str	r3, [sp, #68]	; 0x44
 800f8aa:	f000 fecb 	bl	8010644 <__match>
 800f8ae:	b910      	cbnz	r0, 800f8b6 <_strtod_l+0x376>
 800f8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	9311      	str	r3, [sp, #68]	; 0x44
 800f8b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800fac8 <_strtod_l+0x588>
 800f8ba:	f04f 0800 	mov.w	r8, #0
 800f8be:	e683      	b.n	800f5c8 <_strtod_l+0x88>
 800f8c0:	487d      	ldr	r0, [pc, #500]	; (800fab8 <_strtod_l+0x578>)
 800f8c2:	f001 fce9 	bl	8011298 <nan>
 800f8c6:	ec59 8b10 	vmov	r8, r9, d0
 800f8ca:	e67d      	b.n	800f5c8 <_strtod_l+0x88>
 800f8cc:	1bea      	subs	r2, r5, r7
 800f8ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f8d2:	9207      	str	r2, [sp, #28]
 800f8d4:	9a06      	ldr	r2, [sp, #24]
 800f8d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f8da:	2a00      	cmp	r2, #0
 800f8dc:	bf08      	it	eq
 800f8de:	461a      	moveq	r2, r3
 800f8e0:	2b10      	cmp	r3, #16
 800f8e2:	9206      	str	r2, [sp, #24]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	bfa8      	it	ge
 800f8e8:	2210      	movge	r2, #16
 800f8ea:	2b09      	cmp	r3, #9
 800f8ec:	ec59 8b17 	vmov	r8, r9, d7
 800f8f0:	dd0c      	ble.n	800f90c <_strtod_l+0x3cc>
 800f8f2:	4972      	ldr	r1, [pc, #456]	; (800fabc <_strtod_l+0x57c>)
 800f8f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f8f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f8fc:	ee06 aa90 	vmov	s13, sl
 800f900:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f904:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f908:	ec59 8b16 	vmov	r8, r9, d6
 800f90c:	2b0f      	cmp	r3, #15
 800f90e:	dc36      	bgt.n	800f97e <_strtod_l+0x43e>
 800f910:	9907      	ldr	r1, [sp, #28]
 800f912:	2900      	cmp	r1, #0
 800f914:	f43f ae58 	beq.w	800f5c8 <_strtod_l+0x88>
 800f918:	dd23      	ble.n	800f962 <_strtod_l+0x422>
 800f91a:	2916      	cmp	r1, #22
 800f91c:	dc0b      	bgt.n	800f936 <_strtod_l+0x3f6>
 800f91e:	4b67      	ldr	r3, [pc, #412]	; (800fabc <_strtod_l+0x57c>)
 800f920:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f924:	ed93 7b00 	vldr	d7, [r3]
 800f928:	ec49 8b16 	vmov	d6, r8, r9
 800f92c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f930:	ec59 8b17 	vmov	r8, r9, d7
 800f934:	e648      	b.n	800f5c8 <_strtod_l+0x88>
 800f936:	9807      	ldr	r0, [sp, #28]
 800f938:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f93c:	4281      	cmp	r1, r0
 800f93e:	db1e      	blt.n	800f97e <_strtod_l+0x43e>
 800f940:	4a5e      	ldr	r2, [pc, #376]	; (800fabc <_strtod_l+0x57c>)
 800f942:	f1c3 030f 	rsb	r3, r3, #15
 800f946:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f94a:	ed91 7b00 	vldr	d7, [r1]
 800f94e:	ec49 8b16 	vmov	d6, r8, r9
 800f952:	1ac3      	subs	r3, r0, r3
 800f954:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f95c:	ed92 6b00 	vldr	d6, [r2]
 800f960:	e7e4      	b.n	800f92c <_strtod_l+0x3ec>
 800f962:	9907      	ldr	r1, [sp, #28]
 800f964:	3116      	adds	r1, #22
 800f966:	db0a      	blt.n	800f97e <_strtod_l+0x43e>
 800f968:	4b54      	ldr	r3, [pc, #336]	; (800fabc <_strtod_l+0x57c>)
 800f96a:	1b7d      	subs	r5, r7, r5
 800f96c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f970:	ed95 7b00 	vldr	d7, [r5]
 800f974:	ec49 8b16 	vmov	d6, r8, r9
 800f978:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f97c:	e7d8      	b.n	800f930 <_strtod_l+0x3f0>
 800f97e:	9907      	ldr	r1, [sp, #28]
 800f980:	1a9a      	subs	r2, r3, r2
 800f982:	440a      	add	r2, r1
 800f984:	2a00      	cmp	r2, #0
 800f986:	dd6f      	ble.n	800fa68 <_strtod_l+0x528>
 800f988:	f012 000f 	ands.w	r0, r2, #15
 800f98c:	d00a      	beq.n	800f9a4 <_strtod_l+0x464>
 800f98e:	494b      	ldr	r1, [pc, #300]	; (800fabc <_strtod_l+0x57c>)
 800f990:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f994:	ed91 7b00 	vldr	d7, [r1]
 800f998:	ec49 8b16 	vmov	d6, r8, r9
 800f99c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f9a0:	ec59 8b17 	vmov	r8, r9, d7
 800f9a4:	f032 020f 	bics.w	r2, r2, #15
 800f9a8:	d04f      	beq.n	800fa4a <_strtod_l+0x50a>
 800f9aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f9ae:	dd22      	ble.n	800f9f6 <_strtod_l+0x4b6>
 800f9b0:	2500      	movs	r5, #0
 800f9b2:	462e      	mov	r6, r5
 800f9b4:	9506      	str	r5, [sp, #24]
 800f9b6:	462f      	mov	r7, r5
 800f9b8:	2322      	movs	r3, #34	; 0x22
 800f9ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800fac8 <_strtod_l+0x588>
 800f9be:	6023      	str	r3, [r4, #0]
 800f9c0:	f04f 0800 	mov.w	r8, #0
 800f9c4:	9b06      	ldr	r3, [sp, #24]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f43f adfe 	beq.w	800f5c8 <_strtod_l+0x88>
 800f9cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 ff3a 	bl	8010848 <_Bfree>
 800f9d4:	4639      	mov	r1, r7
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 ff36 	bl	8010848 <_Bfree>
 800f9dc:	4631      	mov	r1, r6
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 ff32 	bl	8010848 <_Bfree>
 800f9e4:	9906      	ldr	r1, [sp, #24]
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f000 ff2e 	bl	8010848 <_Bfree>
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 ff2a 	bl	8010848 <_Bfree>
 800f9f4:	e5e8      	b.n	800f5c8 <_strtod_l+0x88>
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	ec49 8b17 	vmov	d7, r8, r9
 800f9fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800fac0 <_strtod_l+0x580>
 800fa00:	1112      	asrs	r2, r2, #4
 800fa02:	4601      	mov	r1, r0
 800fa04:	2a01      	cmp	r2, #1
 800fa06:	dc23      	bgt.n	800fa50 <_strtod_l+0x510>
 800fa08:	b108      	cbz	r0, 800fa0e <_strtod_l+0x4ce>
 800fa0a:	ec59 8b17 	vmov	r8, r9, d7
 800fa0e:	4a2c      	ldr	r2, [pc, #176]	; (800fac0 <_strtod_l+0x580>)
 800fa10:	482c      	ldr	r0, [pc, #176]	; (800fac4 <_strtod_l+0x584>)
 800fa12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fa16:	ed92 7b00 	vldr	d7, [r2]
 800fa1a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fa1e:	ec49 8b16 	vmov	d6, r8, r9
 800fa22:	4a29      	ldr	r2, [pc, #164]	; (800fac8 <_strtod_l+0x588>)
 800fa24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa28:	ee17 1a90 	vmov	r1, s15
 800fa2c:	400a      	ands	r2, r1
 800fa2e:	4282      	cmp	r2, r0
 800fa30:	ec59 8b17 	vmov	r8, r9, d7
 800fa34:	d8bc      	bhi.n	800f9b0 <_strtod_l+0x470>
 800fa36:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800fa3a:	4282      	cmp	r2, r0
 800fa3c:	bf86      	itte	hi
 800fa3e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800facc <_strtod_l+0x58c>
 800fa42:	f04f 38ff 	movhi.w	r8, #4294967295
 800fa46:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	9204      	str	r2, [sp, #16]
 800fa4e:	e078      	b.n	800fb42 <_strtod_l+0x602>
 800fa50:	07d6      	lsls	r6, r2, #31
 800fa52:	d504      	bpl.n	800fa5e <_strtod_l+0x51e>
 800fa54:	ed9c 6b00 	vldr	d6, [ip]
 800fa58:	2001      	movs	r0, #1
 800fa5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa5e:	3101      	adds	r1, #1
 800fa60:	1052      	asrs	r2, r2, #1
 800fa62:	f10c 0c08 	add.w	ip, ip, #8
 800fa66:	e7cd      	b.n	800fa04 <_strtod_l+0x4c4>
 800fa68:	d0ef      	beq.n	800fa4a <_strtod_l+0x50a>
 800fa6a:	4252      	negs	r2, r2
 800fa6c:	f012 000f 	ands.w	r0, r2, #15
 800fa70:	d00a      	beq.n	800fa88 <_strtod_l+0x548>
 800fa72:	4912      	ldr	r1, [pc, #72]	; (800fabc <_strtod_l+0x57c>)
 800fa74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fa78:	ed91 7b00 	vldr	d7, [r1]
 800fa7c:	ec49 8b16 	vmov	d6, r8, r9
 800fa80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fa84:	ec59 8b17 	vmov	r8, r9, d7
 800fa88:	1112      	asrs	r2, r2, #4
 800fa8a:	d0de      	beq.n	800fa4a <_strtod_l+0x50a>
 800fa8c:	2a1f      	cmp	r2, #31
 800fa8e:	dd1f      	ble.n	800fad0 <_strtod_l+0x590>
 800fa90:	2500      	movs	r5, #0
 800fa92:	462e      	mov	r6, r5
 800fa94:	9506      	str	r5, [sp, #24]
 800fa96:	462f      	mov	r7, r5
 800fa98:	2322      	movs	r3, #34	; 0x22
 800fa9a:	f04f 0800 	mov.w	r8, #0
 800fa9e:	f04f 0900 	mov.w	r9, #0
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	e78e      	b.n	800f9c4 <_strtod_l+0x484>
 800faa6:	bf00      	nop
 800faa8:	08012bcd 	.word	0x08012bcd
 800faac:	08012be4 	.word	0x08012be4
 800fab0:	08012bc4 	.word	0x08012bc4
 800fab4:	08012bc7 	.word	0x08012bc7
 800fab8:	08012e57 	.word	0x08012e57
 800fabc:	08012d48 	.word	0x08012d48
 800fac0:	08012d20 	.word	0x08012d20
 800fac4:	7ca00000 	.word	0x7ca00000
 800fac8:	7ff00000 	.word	0x7ff00000
 800facc:	7fefffff 	.word	0x7fefffff
 800fad0:	f012 0110 	ands.w	r1, r2, #16
 800fad4:	bf18      	it	ne
 800fad6:	216a      	movne	r1, #106	; 0x6a
 800fad8:	9104      	str	r1, [sp, #16]
 800fada:	ec49 8b17 	vmov	d7, r8, r9
 800fade:	49be      	ldr	r1, [pc, #760]	; (800fdd8 <_strtod_l+0x898>)
 800fae0:	2000      	movs	r0, #0
 800fae2:	07d6      	lsls	r6, r2, #31
 800fae4:	d504      	bpl.n	800faf0 <_strtod_l+0x5b0>
 800fae6:	ed91 6b00 	vldr	d6, [r1]
 800faea:	2001      	movs	r0, #1
 800faec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800faf0:	1052      	asrs	r2, r2, #1
 800faf2:	f101 0108 	add.w	r1, r1, #8
 800faf6:	d1f4      	bne.n	800fae2 <_strtod_l+0x5a2>
 800faf8:	b108      	cbz	r0, 800fafe <_strtod_l+0x5be>
 800fafa:	ec59 8b17 	vmov	r8, r9, d7
 800fafe:	9a04      	ldr	r2, [sp, #16]
 800fb00:	b1c2      	cbz	r2, 800fb34 <_strtod_l+0x5f4>
 800fb02:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800fb06:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800fb0a:	2a00      	cmp	r2, #0
 800fb0c:	4648      	mov	r0, r9
 800fb0e:	dd11      	ble.n	800fb34 <_strtod_l+0x5f4>
 800fb10:	2a1f      	cmp	r2, #31
 800fb12:	f340 812e 	ble.w	800fd72 <_strtod_l+0x832>
 800fb16:	2a34      	cmp	r2, #52	; 0x34
 800fb18:	bfde      	ittt	le
 800fb1a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800fb1e:	f04f 32ff 	movle.w	r2, #4294967295
 800fb22:	fa02 f101 	lslle.w	r1, r2, r1
 800fb26:	f04f 0800 	mov.w	r8, #0
 800fb2a:	bfcc      	ite	gt
 800fb2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800fb30:	ea01 0900 	andle.w	r9, r1, r0
 800fb34:	ec49 8b17 	vmov	d7, r8, r9
 800fb38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb40:	d0a6      	beq.n	800fa90 <_strtod_l+0x550>
 800fb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb44:	9200      	str	r2, [sp, #0]
 800fb46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb48:	9a06      	ldr	r2, [sp, #24]
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 fee4 	bl	8010918 <__s2b>
 800fb50:	9006      	str	r0, [sp, #24]
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f43f af2c 	beq.w	800f9b0 <_strtod_l+0x470>
 800fb58:	9b07      	ldr	r3, [sp, #28]
 800fb5a:	1b7d      	subs	r5, r7, r5
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bfb4      	ite	lt
 800fb60:	462b      	movlt	r3, r5
 800fb62:	2300      	movge	r3, #0
 800fb64:	9309      	str	r3, [sp, #36]	; 0x24
 800fb66:	9b07      	ldr	r3, [sp, #28]
 800fb68:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800fdb8 <_strtod_l+0x878>
 800fb6c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800fdc0 <_strtod_l+0x880>
 800fb70:	ed9f bb95 	vldr	d11, [pc, #596]	; 800fdc8 <_strtod_l+0x888>
 800fb74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb78:	2500      	movs	r5, #0
 800fb7a:	930c      	str	r3, [sp, #48]	; 0x30
 800fb7c:	462e      	mov	r6, r5
 800fb7e:	9b06      	ldr	r3, [sp, #24]
 800fb80:	4620      	mov	r0, r4
 800fb82:	6859      	ldr	r1, [r3, #4]
 800fb84:	f000 fe20 	bl	80107c8 <_Balloc>
 800fb88:	4607      	mov	r7, r0
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	f43f af14 	beq.w	800f9b8 <_strtod_l+0x478>
 800fb90:	9b06      	ldr	r3, [sp, #24]
 800fb92:	691a      	ldr	r2, [r3, #16]
 800fb94:	3202      	adds	r2, #2
 800fb96:	f103 010c 	add.w	r1, r3, #12
 800fb9a:	0092      	lsls	r2, r2, #2
 800fb9c:	300c      	adds	r0, #12
 800fb9e:	f7ff fc9f 	bl	800f4e0 <memcpy>
 800fba2:	ec49 8b10 	vmov	d0, r8, r9
 800fba6:	aa14      	add	r2, sp, #80	; 0x50
 800fba8:	a913      	add	r1, sp, #76	; 0x4c
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f001 f9fa 	bl	8010fa4 <__d2b>
 800fbb0:	ec49 8b18 	vmov	d8, r8, r9
 800fbb4:	9012      	str	r0, [sp, #72]	; 0x48
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	f43f aefe 	beq.w	800f9b8 <_strtod_l+0x478>
 800fbbc:	2101      	movs	r1, #1
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 ff44 	bl	8010a4c <__i2b>
 800fbc4:	4606      	mov	r6, r0
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	f43f aef6 	beq.w	800f9b8 <_strtod_l+0x478>
 800fbcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbce:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	bfab      	itete	ge
 800fbd4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800fbd6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800fbd8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800fbdc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800fbe0:	bfac      	ite	ge
 800fbe2:	eb03 0b02 	addge.w	fp, r3, r2
 800fbe6:	eba2 0a03 	sublt.w	sl, r2, r3
 800fbea:	9a04      	ldr	r2, [sp, #16]
 800fbec:	1a9b      	subs	r3, r3, r2
 800fbee:	440b      	add	r3, r1
 800fbf0:	4a7a      	ldr	r2, [pc, #488]	; (800fddc <_strtod_l+0x89c>)
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800fbfa:	f280 80cd 	bge.w	800fd98 <_strtod_l+0x858>
 800fbfe:	1ad2      	subs	r2, r2, r3
 800fc00:	2a1f      	cmp	r2, #31
 800fc02:	eba1 0102 	sub.w	r1, r1, r2
 800fc06:	f04f 0001 	mov.w	r0, #1
 800fc0a:	f300 80b9 	bgt.w	800fd80 <_strtod_l+0x840>
 800fc0e:	fa00 f302 	lsl.w	r3, r0, r2
 800fc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc14:	2300      	movs	r3, #0
 800fc16:	930a      	str	r3, [sp, #40]	; 0x28
 800fc18:	eb0b 0301 	add.w	r3, fp, r1
 800fc1c:	9a04      	ldr	r2, [sp, #16]
 800fc1e:	459b      	cmp	fp, r3
 800fc20:	448a      	add	sl, r1
 800fc22:	4492      	add	sl, r2
 800fc24:	465a      	mov	r2, fp
 800fc26:	bfa8      	it	ge
 800fc28:	461a      	movge	r2, r3
 800fc2a:	4552      	cmp	r2, sl
 800fc2c:	bfa8      	it	ge
 800fc2e:	4652      	movge	r2, sl
 800fc30:	2a00      	cmp	r2, #0
 800fc32:	bfc2      	ittt	gt
 800fc34:	1a9b      	subgt	r3, r3, r2
 800fc36:	ebaa 0a02 	subgt.w	sl, sl, r2
 800fc3a:	ebab 0b02 	subgt.w	fp, fp, r2
 800fc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	dd18      	ble.n	800fc76 <_strtod_l+0x736>
 800fc44:	4631      	mov	r1, r6
 800fc46:	4620      	mov	r0, r4
 800fc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc4a:	f000 ffbf 	bl	8010bcc <__pow5mult>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	2800      	cmp	r0, #0
 800fc52:	f43f aeb1 	beq.w	800f9b8 <_strtod_l+0x478>
 800fc56:	4601      	mov	r1, r0
 800fc58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f000 ff0c 	bl	8010a78 <__multiply>
 800fc60:	900e      	str	r0, [sp, #56]	; 0x38
 800fc62:	2800      	cmp	r0, #0
 800fc64:	f43f aea8 	beq.w	800f9b8 <_strtod_l+0x478>
 800fc68:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 fdec 	bl	8010848 <_Bfree>
 800fc70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc74:	9212      	str	r2, [sp, #72]	; 0x48
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f300 8093 	bgt.w	800fda2 <_strtod_l+0x862>
 800fc7c:	9b07      	ldr	r3, [sp, #28]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	dd08      	ble.n	800fc94 <_strtod_l+0x754>
 800fc82:	4639      	mov	r1, r7
 800fc84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc86:	4620      	mov	r0, r4
 800fc88:	f000 ffa0 	bl	8010bcc <__pow5mult>
 800fc8c:	4607      	mov	r7, r0
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	f43f ae92 	beq.w	800f9b8 <_strtod_l+0x478>
 800fc94:	f1ba 0f00 	cmp.w	sl, #0
 800fc98:	dd08      	ble.n	800fcac <_strtod_l+0x76c>
 800fc9a:	4639      	mov	r1, r7
 800fc9c:	4652      	mov	r2, sl
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 ffee 	bl	8010c80 <__lshift>
 800fca4:	4607      	mov	r7, r0
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f43f ae86 	beq.w	800f9b8 <_strtod_l+0x478>
 800fcac:	f1bb 0f00 	cmp.w	fp, #0
 800fcb0:	dd08      	ble.n	800fcc4 <_strtod_l+0x784>
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	465a      	mov	r2, fp
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	f000 ffe2 	bl	8010c80 <__lshift>
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f43f ae7a 	beq.w	800f9b8 <_strtod_l+0x478>
 800fcc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fcc6:	463a      	mov	r2, r7
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f001 f865 	bl	8010d98 <__mdiff>
 800fcce:	4605      	mov	r5, r0
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	f43f ae71 	beq.w	800f9b8 <_strtod_l+0x478>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800fcdc:	60c3      	str	r3, [r0, #12]
 800fcde:	4631      	mov	r1, r6
 800fce0:	f001 f83e 	bl	8010d60 <__mcmp>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	da7d      	bge.n	800fde4 <_strtod_l+0x8a4>
 800fce8:	ea5a 0308 	orrs.w	r3, sl, r8
 800fcec:	f040 80a3 	bne.w	800fe36 <_strtod_l+0x8f6>
 800fcf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f040 809e 	bne.w	800fe36 <_strtod_l+0x8f6>
 800fcfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fcfe:	0d1b      	lsrs	r3, r3, #20
 800fd00:	051b      	lsls	r3, r3, #20
 800fd02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd06:	f240 8096 	bls.w	800fe36 <_strtod_l+0x8f6>
 800fd0a:	696b      	ldr	r3, [r5, #20]
 800fd0c:	b91b      	cbnz	r3, 800fd16 <_strtod_l+0x7d6>
 800fd0e:	692b      	ldr	r3, [r5, #16]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	f340 8090 	ble.w	800fe36 <_strtod_l+0x8f6>
 800fd16:	4629      	mov	r1, r5
 800fd18:	2201      	movs	r2, #1
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f000 ffb0 	bl	8010c80 <__lshift>
 800fd20:	4631      	mov	r1, r6
 800fd22:	4605      	mov	r5, r0
 800fd24:	f001 f81c 	bl	8010d60 <__mcmp>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	f340 8084 	ble.w	800fe36 <_strtod_l+0x8f6>
 800fd2e:	9904      	ldr	r1, [sp, #16]
 800fd30:	4a2b      	ldr	r2, [pc, #172]	; (800fde0 <_strtod_l+0x8a0>)
 800fd32:	464b      	mov	r3, r9
 800fd34:	2900      	cmp	r1, #0
 800fd36:	f000 809d 	beq.w	800fe74 <_strtod_l+0x934>
 800fd3a:	ea02 0109 	and.w	r1, r2, r9
 800fd3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fd42:	f300 8097 	bgt.w	800fe74 <_strtod_l+0x934>
 800fd46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fd4a:	f77f aea5 	ble.w	800fa98 <_strtod_l+0x558>
 800fd4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fdd0 <_strtod_l+0x890>
 800fd52:	ec49 8b16 	vmov	d6, r8, r9
 800fd56:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fd5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd5e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fd62:	4313      	orrs	r3, r2
 800fd64:	bf08      	it	eq
 800fd66:	2322      	moveq	r3, #34	; 0x22
 800fd68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fd6c:	bf08      	it	eq
 800fd6e:	6023      	streq	r3, [r4, #0]
 800fd70:	e62c      	b.n	800f9cc <_strtod_l+0x48c>
 800fd72:	f04f 31ff 	mov.w	r1, #4294967295
 800fd76:	fa01 f202 	lsl.w	r2, r1, r2
 800fd7a:	ea02 0808 	and.w	r8, r2, r8
 800fd7e:	e6d9      	b.n	800fb34 <_strtod_l+0x5f4>
 800fd80:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800fd84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800fd88:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800fd8c:	33e2      	adds	r3, #226	; 0xe2
 800fd8e:	fa00 f303 	lsl.w	r3, r0, r3
 800fd92:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800fd96:	e73f      	b.n	800fc18 <_strtod_l+0x6d8>
 800fd98:	2200      	movs	r2, #0
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fda0:	e73a      	b.n	800fc18 <_strtod_l+0x6d8>
 800fda2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fda4:	461a      	mov	r2, r3
 800fda6:	4620      	mov	r0, r4
 800fda8:	f000 ff6a 	bl	8010c80 <__lshift>
 800fdac:	9012      	str	r0, [sp, #72]	; 0x48
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f47f af64 	bne.w	800fc7c <_strtod_l+0x73c>
 800fdb4:	e600      	b.n	800f9b8 <_strtod_l+0x478>
 800fdb6:	bf00      	nop
 800fdb8:	94a03595 	.word	0x94a03595
 800fdbc:	3fcfffff 	.word	0x3fcfffff
 800fdc0:	94a03595 	.word	0x94a03595
 800fdc4:	3fdfffff 	.word	0x3fdfffff
 800fdc8:	35afe535 	.word	0x35afe535
 800fdcc:	3fe00000 	.word	0x3fe00000
 800fdd0:	00000000 	.word	0x00000000
 800fdd4:	39500000 	.word	0x39500000
 800fdd8:	08012bf8 	.word	0x08012bf8
 800fddc:	fffffc02 	.word	0xfffffc02
 800fde0:	7ff00000 	.word	0x7ff00000
 800fde4:	46cb      	mov	fp, r9
 800fde6:	d15f      	bne.n	800fea8 <_strtod_l+0x968>
 800fde8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdec:	f1ba 0f00 	cmp.w	sl, #0
 800fdf0:	d02a      	beq.n	800fe48 <_strtod_l+0x908>
 800fdf2:	4aa7      	ldr	r2, [pc, #668]	; (8010090 <_strtod_l+0xb50>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d12b      	bne.n	800fe50 <_strtod_l+0x910>
 800fdf8:	9b04      	ldr	r3, [sp, #16]
 800fdfa:	4642      	mov	r2, r8
 800fdfc:	b1fb      	cbz	r3, 800fe3e <_strtod_l+0x8fe>
 800fdfe:	4ba5      	ldr	r3, [pc, #660]	; (8010094 <_strtod_l+0xb54>)
 800fe00:	ea09 0303 	and.w	r3, r9, r3
 800fe04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe08:	f04f 31ff 	mov.w	r1, #4294967295
 800fe0c:	d81a      	bhi.n	800fe44 <_strtod_l+0x904>
 800fe0e:	0d1b      	lsrs	r3, r3, #20
 800fe10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe14:	fa01 f303 	lsl.w	r3, r1, r3
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d119      	bne.n	800fe50 <_strtod_l+0x910>
 800fe1c:	4b9e      	ldr	r3, [pc, #632]	; (8010098 <_strtod_l+0xb58>)
 800fe1e:	459b      	cmp	fp, r3
 800fe20:	d102      	bne.n	800fe28 <_strtod_l+0x8e8>
 800fe22:	3201      	adds	r2, #1
 800fe24:	f43f adc8 	beq.w	800f9b8 <_strtod_l+0x478>
 800fe28:	4b9a      	ldr	r3, [pc, #616]	; (8010094 <_strtod_l+0xb54>)
 800fe2a:	ea0b 0303 	and.w	r3, fp, r3
 800fe2e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fe32:	f04f 0800 	mov.w	r8, #0
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d188      	bne.n	800fd4e <_strtod_l+0x80e>
 800fe3c:	e5c6      	b.n	800f9cc <_strtod_l+0x48c>
 800fe3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe42:	e7e9      	b.n	800fe18 <_strtod_l+0x8d8>
 800fe44:	460b      	mov	r3, r1
 800fe46:	e7e7      	b.n	800fe18 <_strtod_l+0x8d8>
 800fe48:	ea53 0308 	orrs.w	r3, r3, r8
 800fe4c:	f43f af6f 	beq.w	800fd2e <_strtod_l+0x7ee>
 800fe50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe52:	b1cb      	cbz	r3, 800fe88 <_strtod_l+0x948>
 800fe54:	ea13 0f0b 	tst.w	r3, fp
 800fe58:	d0ed      	beq.n	800fe36 <_strtod_l+0x8f6>
 800fe5a:	9a04      	ldr	r2, [sp, #16]
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4649      	mov	r1, r9
 800fe60:	f1ba 0f00 	cmp.w	sl, #0
 800fe64:	d014      	beq.n	800fe90 <_strtod_l+0x950>
 800fe66:	f7ff fb51 	bl	800f50c <sulp>
 800fe6a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fe6e:	ec59 8b17 	vmov	r8, r9, d7
 800fe72:	e7e0      	b.n	800fe36 <_strtod_l+0x8f6>
 800fe74:	4013      	ands	r3, r2
 800fe76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe7a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fe7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fe82:	f04f 38ff 	mov.w	r8, #4294967295
 800fe86:	e7d6      	b.n	800fe36 <_strtod_l+0x8f6>
 800fe88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe8a:	ea13 0f08 	tst.w	r3, r8
 800fe8e:	e7e3      	b.n	800fe58 <_strtod_l+0x918>
 800fe90:	f7ff fb3c 	bl	800f50c <sulp>
 800fe94:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fe98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea0:	ec59 8b10 	vmov	r8, r9, d0
 800fea4:	d1c7      	bne.n	800fe36 <_strtod_l+0x8f6>
 800fea6:	e5f7      	b.n	800fa98 <_strtod_l+0x558>
 800fea8:	4631      	mov	r1, r6
 800feaa:	4628      	mov	r0, r5
 800feac:	f001 f8d6 	bl	801105c <__ratio>
 800feb0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800feb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800feb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800febc:	d865      	bhi.n	800ff8a <_strtod_l+0xa4a>
 800febe:	f1ba 0f00 	cmp.w	sl, #0
 800fec2:	d042      	beq.n	800ff4a <_strtod_l+0xa0a>
 800fec4:	4b75      	ldr	r3, [pc, #468]	; (801009c <_strtod_l+0xb5c>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fecc:	4871      	ldr	r0, [pc, #452]	; (8010094 <_strtod_l+0xb54>)
 800fece:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80100a8 <_strtod_l+0xb68>
 800fed2:	ea0b 0100 	and.w	r1, fp, r0
 800fed6:	4561      	cmp	r1, ip
 800fed8:	f040 808e 	bne.w	800fff8 <_strtod_l+0xab8>
 800fedc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fee0:	ec49 8b10 	vmov	d0, r8, r9
 800fee4:	ec43 2b1c 	vmov	d12, r2, r3
 800fee8:	910a      	str	r1, [sp, #40]	; 0x28
 800feea:	f000 ffdf 	bl	8010eac <__ulp>
 800feee:	ec49 8b1e 	vmov	d14, r8, r9
 800fef2:	4868      	ldr	r0, [pc, #416]	; (8010094 <_strtod_l+0xb54>)
 800fef4:	eeac eb00 	vfma.f64	d14, d12, d0
 800fef8:	ee1e 3a90 	vmov	r3, s29
 800fefc:	4a68      	ldr	r2, [pc, #416]	; (80100a0 <_strtod_l+0xb60>)
 800fefe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff00:	4018      	ands	r0, r3
 800ff02:	4290      	cmp	r0, r2
 800ff04:	ec59 8b1e 	vmov	r8, r9, d14
 800ff08:	d94e      	bls.n	800ffa8 <_strtod_l+0xa68>
 800ff0a:	ee18 3a90 	vmov	r3, s17
 800ff0e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d104      	bne.n	800ff20 <_strtod_l+0x9e0>
 800ff16:	ee18 3a10 	vmov	r3, s16
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	f43f ad4c 	beq.w	800f9b8 <_strtod_l+0x478>
 800ff20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8010098 <_strtod_l+0xb58>
 800ff24:	f04f 38ff 	mov.w	r8, #4294967295
 800ff28:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f000 fc8c 	bl	8010848 <_Bfree>
 800ff30:	4639      	mov	r1, r7
 800ff32:	4620      	mov	r0, r4
 800ff34:	f000 fc88 	bl	8010848 <_Bfree>
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 fc84 	bl	8010848 <_Bfree>
 800ff40:	4629      	mov	r1, r5
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fc80 	bl	8010848 <_Bfree>
 800ff48:	e619      	b.n	800fb7e <_strtod_l+0x63e>
 800ff4a:	f1b8 0f00 	cmp.w	r8, #0
 800ff4e:	d112      	bne.n	800ff76 <_strtod_l+0xa36>
 800ff50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff54:	b9b3      	cbnz	r3, 800ff84 <_strtod_l+0xa44>
 800ff56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ff5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ff5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ff66:	bf58      	it	pl
 800ff68:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800ff6c:	eeb1 7b4d 	vneg.f64	d7, d13
 800ff70:	ec53 2b17 	vmov	r2, r3, d7
 800ff74:	e7aa      	b.n	800fecc <_strtod_l+0x98c>
 800ff76:	f1b8 0f01 	cmp.w	r8, #1
 800ff7a:	d103      	bne.n	800ff84 <_strtod_l+0xa44>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	f43f ad8a 	beq.w	800fa98 <_strtod_l+0x558>
 800ff84:	4b47      	ldr	r3, [pc, #284]	; (80100a4 <_strtod_l+0xb64>)
 800ff86:	2200      	movs	r2, #0
 800ff88:	e79e      	b.n	800fec8 <_strtod_l+0x988>
 800ff8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ff8e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ff92:	f1ba 0f00 	cmp.w	sl, #0
 800ff96:	d104      	bne.n	800ffa2 <_strtod_l+0xa62>
 800ff98:	eeb1 7b4d 	vneg.f64	d7, d13
 800ff9c:	ec53 2b17 	vmov	r2, r3, d7
 800ffa0:	e794      	b.n	800fecc <_strtod_l+0x98c>
 800ffa2:	eeb0 7b4d 	vmov.f64	d7, d13
 800ffa6:	e7f9      	b.n	800ff9c <_strtod_l+0xa5c>
 800ffa8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ffac:	9b04      	ldr	r3, [sp, #16]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1ba      	bne.n	800ff28 <_strtod_l+0x9e8>
 800ffb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffb6:	0d1b      	lsrs	r3, r3, #20
 800ffb8:	051b      	lsls	r3, r3, #20
 800ffba:	4299      	cmp	r1, r3
 800ffbc:	d1b4      	bne.n	800ff28 <_strtod_l+0x9e8>
 800ffbe:	ec51 0b1d 	vmov	r0, r1, d13
 800ffc2:	f7f0 fbb9 	bl	8000738 <__aeabi_d2lz>
 800ffc6:	f7f0 fb71 	bl	80006ac <__aeabi_l2d>
 800ffca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffce:	ec41 0b17 	vmov	d7, r0, r1
 800ffd2:	ea43 0308 	orr.w	r3, r3, r8
 800ffd6:	ea53 030a 	orrs.w	r3, r3, sl
 800ffda:	ee3d db47 	vsub.f64	d13, d13, d7
 800ffde:	d03c      	beq.n	801005a <_strtod_l+0xb1a>
 800ffe0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe8:	f53f acf0 	bmi.w	800f9cc <_strtod_l+0x48c>
 800ffec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff4:	dd98      	ble.n	800ff28 <_strtod_l+0x9e8>
 800fff6:	e4e9      	b.n	800f9cc <_strtod_l+0x48c>
 800fff8:	9804      	ldr	r0, [sp, #16]
 800fffa:	b1f0      	cbz	r0, 801003a <_strtod_l+0xafa>
 800fffc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8010000:	d81b      	bhi.n	801003a <_strtod_l+0xafa>
 8010002:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8010088 <_strtod_l+0xb48>
 8010006:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801000e:	d811      	bhi.n	8010034 <_strtod_l+0xaf4>
 8010010:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8010014:	ee1d 3a10 	vmov	r3, s26
 8010018:	2b01      	cmp	r3, #1
 801001a:	bf38      	it	cc
 801001c:	2301      	movcc	r3, #1
 801001e:	ee0d 3a10 	vmov	s26, r3
 8010022:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8010026:	f1ba 0f00 	cmp.w	sl, #0
 801002a:	d113      	bne.n	8010054 <_strtod_l+0xb14>
 801002c:	eeb1 7b4d 	vneg.f64	d7, d13
 8010030:	ec53 2b17 	vmov	r2, r3, d7
 8010034:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8010038:	1a43      	subs	r3, r0, r1
 801003a:	eeb0 0b48 	vmov.f64	d0, d8
 801003e:	ec43 2b1c 	vmov	d12, r2, r3
 8010042:	910a      	str	r1, [sp, #40]	; 0x28
 8010044:	f000 ff32 	bl	8010eac <__ulp>
 8010048:	990a      	ldr	r1, [sp, #40]	; 0x28
 801004a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801004e:	ec59 8b18 	vmov	r8, r9, d8
 8010052:	e7ab      	b.n	800ffac <_strtod_l+0xa6c>
 8010054:	eeb0 7b4d 	vmov.f64	d7, d13
 8010058:	e7ea      	b.n	8010030 <_strtod_l+0xaf0>
 801005a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801005e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010062:	f57f af61 	bpl.w	800ff28 <_strtod_l+0x9e8>
 8010066:	e4b1      	b.n	800f9cc <_strtod_l+0x48c>
 8010068:	2300      	movs	r3, #0
 801006a:	9308      	str	r3, [sp, #32]
 801006c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801006e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010070:	6013      	str	r3, [r2, #0]
 8010072:	f7ff baad 	b.w	800f5d0 <_strtod_l+0x90>
 8010076:	2a65      	cmp	r2, #101	; 0x65
 8010078:	f43f ab9f 	beq.w	800f7ba <_strtod_l+0x27a>
 801007c:	2a45      	cmp	r2, #69	; 0x45
 801007e:	f43f ab9c 	beq.w	800f7ba <_strtod_l+0x27a>
 8010082:	2101      	movs	r1, #1
 8010084:	f7ff bbd4 	b.w	800f830 <_strtod_l+0x2f0>
 8010088:	ffc00000 	.word	0xffc00000
 801008c:	41dfffff 	.word	0x41dfffff
 8010090:	000fffff 	.word	0x000fffff
 8010094:	7ff00000 	.word	0x7ff00000
 8010098:	7fefffff 	.word	0x7fefffff
 801009c:	3ff00000 	.word	0x3ff00000
 80100a0:	7c9fffff 	.word	0x7c9fffff
 80100a4:	bff00000 	.word	0xbff00000
 80100a8:	7fe00000 	.word	0x7fe00000

080100ac <strtod>:
 80100ac:	460a      	mov	r2, r1
 80100ae:	4601      	mov	r1, r0
 80100b0:	4802      	ldr	r0, [pc, #8]	; (80100bc <strtod+0x10>)
 80100b2:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <strtod+0x14>)
 80100b4:	6800      	ldr	r0, [r0, #0]
 80100b6:	f7ff ba43 	b.w	800f540 <_strtod_l>
 80100ba:	bf00      	nop
 80100bc:	24000110 	.word	0x24000110
 80100c0:	24000178 	.word	0x24000178

080100c4 <rshift>:
 80100c4:	6903      	ldr	r3, [r0, #16]
 80100c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100d2:	f100 0414 	add.w	r4, r0, #20
 80100d6:	dd45      	ble.n	8010164 <rshift+0xa0>
 80100d8:	f011 011f 	ands.w	r1, r1, #31
 80100dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80100e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80100e4:	d10c      	bne.n	8010100 <rshift+0x3c>
 80100e6:	f100 0710 	add.w	r7, r0, #16
 80100ea:	4629      	mov	r1, r5
 80100ec:	42b1      	cmp	r1, r6
 80100ee:	d334      	bcc.n	801015a <rshift+0x96>
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	1eea      	subs	r2, r5, #3
 80100f6:	4296      	cmp	r6, r2
 80100f8:	bf38      	it	cc
 80100fa:	2300      	movcc	r3, #0
 80100fc:	4423      	add	r3, r4
 80100fe:	e015      	b.n	801012c <rshift+0x68>
 8010100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010104:	f1c1 0820 	rsb	r8, r1, #32
 8010108:	40cf      	lsrs	r7, r1
 801010a:	f105 0e04 	add.w	lr, r5, #4
 801010e:	46a1      	mov	r9, r4
 8010110:	4576      	cmp	r6, lr
 8010112:	46f4      	mov	ip, lr
 8010114:	d815      	bhi.n	8010142 <rshift+0x7e>
 8010116:	1a9a      	subs	r2, r3, r2
 8010118:	0092      	lsls	r2, r2, #2
 801011a:	3a04      	subs	r2, #4
 801011c:	3501      	adds	r5, #1
 801011e:	42ae      	cmp	r6, r5
 8010120:	bf38      	it	cc
 8010122:	2200      	movcc	r2, #0
 8010124:	18a3      	adds	r3, r4, r2
 8010126:	50a7      	str	r7, [r4, r2]
 8010128:	b107      	cbz	r7, 801012c <rshift+0x68>
 801012a:	3304      	adds	r3, #4
 801012c:	1b1a      	subs	r2, r3, r4
 801012e:	42a3      	cmp	r3, r4
 8010130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010134:	bf08      	it	eq
 8010136:	2300      	moveq	r3, #0
 8010138:	6102      	str	r2, [r0, #16]
 801013a:	bf08      	it	eq
 801013c:	6143      	streq	r3, [r0, #20]
 801013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010142:	f8dc c000 	ldr.w	ip, [ip]
 8010146:	fa0c fc08 	lsl.w	ip, ip, r8
 801014a:	ea4c 0707 	orr.w	r7, ip, r7
 801014e:	f849 7b04 	str.w	r7, [r9], #4
 8010152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010156:	40cf      	lsrs	r7, r1
 8010158:	e7da      	b.n	8010110 <rshift+0x4c>
 801015a:	f851 cb04 	ldr.w	ip, [r1], #4
 801015e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010162:	e7c3      	b.n	80100ec <rshift+0x28>
 8010164:	4623      	mov	r3, r4
 8010166:	e7e1      	b.n	801012c <rshift+0x68>

08010168 <__hexdig_fun>:
 8010168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801016c:	2b09      	cmp	r3, #9
 801016e:	d802      	bhi.n	8010176 <__hexdig_fun+0xe>
 8010170:	3820      	subs	r0, #32
 8010172:	b2c0      	uxtb	r0, r0
 8010174:	4770      	bx	lr
 8010176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801017a:	2b05      	cmp	r3, #5
 801017c:	d801      	bhi.n	8010182 <__hexdig_fun+0x1a>
 801017e:	3847      	subs	r0, #71	; 0x47
 8010180:	e7f7      	b.n	8010172 <__hexdig_fun+0xa>
 8010182:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010186:	2b05      	cmp	r3, #5
 8010188:	d801      	bhi.n	801018e <__hexdig_fun+0x26>
 801018a:	3827      	subs	r0, #39	; 0x27
 801018c:	e7f1      	b.n	8010172 <__hexdig_fun+0xa>
 801018e:	2000      	movs	r0, #0
 8010190:	4770      	bx	lr
	...

08010194 <__gethex>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	ed2d 8b02 	vpush	{d8}
 801019c:	b089      	sub	sp, #36	; 0x24
 801019e:	ee08 0a10 	vmov	s16, r0
 80101a2:	9304      	str	r3, [sp, #16]
 80101a4:	4bb4      	ldr	r3, [pc, #720]	; (8010478 <__gethex+0x2e4>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	4618      	mov	r0, r3
 80101ac:	468b      	mov	fp, r1
 80101ae:	4690      	mov	r8, r2
 80101b0:	f7f0 f896 	bl	80002e0 <strlen>
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	f8db 2000 	ldr.w	r2, [fp]
 80101ba:	4403      	add	r3, r0
 80101bc:	4682      	mov	sl, r0
 80101be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80101c2:	9305      	str	r3, [sp, #20]
 80101c4:	1c93      	adds	r3, r2, #2
 80101c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80101ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80101ce:	32fe      	adds	r2, #254	; 0xfe
 80101d0:	18d1      	adds	r1, r2, r3
 80101d2:	461f      	mov	r7, r3
 80101d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101d8:	9100      	str	r1, [sp, #0]
 80101da:	2830      	cmp	r0, #48	; 0x30
 80101dc:	d0f8      	beq.n	80101d0 <__gethex+0x3c>
 80101de:	f7ff ffc3 	bl	8010168 <__hexdig_fun>
 80101e2:	4604      	mov	r4, r0
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d13a      	bne.n	801025e <__gethex+0xca>
 80101e8:	9901      	ldr	r1, [sp, #4]
 80101ea:	4652      	mov	r2, sl
 80101ec:	4638      	mov	r0, r7
 80101ee:	f001 f86b 	bl	80112c8 <strncmp>
 80101f2:	4605      	mov	r5, r0
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d168      	bne.n	80102ca <__gethex+0x136>
 80101f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80101fc:	eb07 060a 	add.w	r6, r7, sl
 8010200:	f7ff ffb2 	bl	8010168 <__hexdig_fun>
 8010204:	2800      	cmp	r0, #0
 8010206:	d062      	beq.n	80102ce <__gethex+0x13a>
 8010208:	4633      	mov	r3, r6
 801020a:	7818      	ldrb	r0, [r3, #0]
 801020c:	2830      	cmp	r0, #48	; 0x30
 801020e:	461f      	mov	r7, r3
 8010210:	f103 0301 	add.w	r3, r3, #1
 8010214:	d0f9      	beq.n	801020a <__gethex+0x76>
 8010216:	f7ff ffa7 	bl	8010168 <__hexdig_fun>
 801021a:	2301      	movs	r3, #1
 801021c:	fab0 f480 	clz	r4, r0
 8010220:	0964      	lsrs	r4, r4, #5
 8010222:	4635      	mov	r5, r6
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	463a      	mov	r2, r7
 8010228:	4616      	mov	r6, r2
 801022a:	3201      	adds	r2, #1
 801022c:	7830      	ldrb	r0, [r6, #0]
 801022e:	f7ff ff9b 	bl	8010168 <__hexdig_fun>
 8010232:	2800      	cmp	r0, #0
 8010234:	d1f8      	bne.n	8010228 <__gethex+0x94>
 8010236:	9901      	ldr	r1, [sp, #4]
 8010238:	4652      	mov	r2, sl
 801023a:	4630      	mov	r0, r6
 801023c:	f001 f844 	bl	80112c8 <strncmp>
 8010240:	b980      	cbnz	r0, 8010264 <__gethex+0xd0>
 8010242:	b94d      	cbnz	r5, 8010258 <__gethex+0xc4>
 8010244:	eb06 050a 	add.w	r5, r6, sl
 8010248:	462a      	mov	r2, r5
 801024a:	4616      	mov	r6, r2
 801024c:	3201      	adds	r2, #1
 801024e:	7830      	ldrb	r0, [r6, #0]
 8010250:	f7ff ff8a 	bl	8010168 <__hexdig_fun>
 8010254:	2800      	cmp	r0, #0
 8010256:	d1f8      	bne.n	801024a <__gethex+0xb6>
 8010258:	1bad      	subs	r5, r5, r6
 801025a:	00ad      	lsls	r5, r5, #2
 801025c:	e004      	b.n	8010268 <__gethex+0xd4>
 801025e:	2400      	movs	r4, #0
 8010260:	4625      	mov	r5, r4
 8010262:	e7e0      	b.n	8010226 <__gethex+0x92>
 8010264:	2d00      	cmp	r5, #0
 8010266:	d1f7      	bne.n	8010258 <__gethex+0xc4>
 8010268:	7833      	ldrb	r3, [r6, #0]
 801026a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801026e:	2b50      	cmp	r3, #80	; 0x50
 8010270:	d13b      	bne.n	80102ea <__gethex+0x156>
 8010272:	7873      	ldrb	r3, [r6, #1]
 8010274:	2b2b      	cmp	r3, #43	; 0x2b
 8010276:	d02c      	beq.n	80102d2 <__gethex+0x13e>
 8010278:	2b2d      	cmp	r3, #45	; 0x2d
 801027a:	d02e      	beq.n	80102da <__gethex+0x146>
 801027c:	1c71      	adds	r1, r6, #1
 801027e:	f04f 0900 	mov.w	r9, #0
 8010282:	7808      	ldrb	r0, [r1, #0]
 8010284:	f7ff ff70 	bl	8010168 <__hexdig_fun>
 8010288:	1e43      	subs	r3, r0, #1
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b18      	cmp	r3, #24
 801028e:	d82c      	bhi.n	80102ea <__gethex+0x156>
 8010290:	f1a0 0210 	sub.w	r2, r0, #16
 8010294:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010298:	f7ff ff66 	bl	8010168 <__hexdig_fun>
 801029c:	1e43      	subs	r3, r0, #1
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	2b18      	cmp	r3, #24
 80102a2:	d91d      	bls.n	80102e0 <__gethex+0x14c>
 80102a4:	f1b9 0f00 	cmp.w	r9, #0
 80102a8:	d000      	beq.n	80102ac <__gethex+0x118>
 80102aa:	4252      	negs	r2, r2
 80102ac:	4415      	add	r5, r2
 80102ae:	f8cb 1000 	str.w	r1, [fp]
 80102b2:	b1e4      	cbz	r4, 80102ee <__gethex+0x15a>
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	bf14      	ite	ne
 80102ba:	2700      	movne	r7, #0
 80102bc:	2706      	moveq	r7, #6
 80102be:	4638      	mov	r0, r7
 80102c0:	b009      	add	sp, #36	; 0x24
 80102c2:	ecbd 8b02 	vpop	{d8}
 80102c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ca:	463e      	mov	r6, r7
 80102cc:	4625      	mov	r5, r4
 80102ce:	2401      	movs	r4, #1
 80102d0:	e7ca      	b.n	8010268 <__gethex+0xd4>
 80102d2:	f04f 0900 	mov.w	r9, #0
 80102d6:	1cb1      	adds	r1, r6, #2
 80102d8:	e7d3      	b.n	8010282 <__gethex+0xee>
 80102da:	f04f 0901 	mov.w	r9, #1
 80102de:	e7fa      	b.n	80102d6 <__gethex+0x142>
 80102e0:	230a      	movs	r3, #10
 80102e2:	fb03 0202 	mla	r2, r3, r2, r0
 80102e6:	3a10      	subs	r2, #16
 80102e8:	e7d4      	b.n	8010294 <__gethex+0x100>
 80102ea:	4631      	mov	r1, r6
 80102ec:	e7df      	b.n	80102ae <__gethex+0x11a>
 80102ee:	1bf3      	subs	r3, r6, r7
 80102f0:	3b01      	subs	r3, #1
 80102f2:	4621      	mov	r1, r4
 80102f4:	2b07      	cmp	r3, #7
 80102f6:	dc0b      	bgt.n	8010310 <__gethex+0x17c>
 80102f8:	ee18 0a10 	vmov	r0, s16
 80102fc:	f000 fa64 	bl	80107c8 <_Balloc>
 8010300:	4604      	mov	r4, r0
 8010302:	b940      	cbnz	r0, 8010316 <__gethex+0x182>
 8010304:	4b5d      	ldr	r3, [pc, #372]	; (801047c <__gethex+0x2e8>)
 8010306:	4602      	mov	r2, r0
 8010308:	21de      	movs	r1, #222	; 0xde
 801030a:	485d      	ldr	r0, [pc, #372]	; (8010480 <__gethex+0x2ec>)
 801030c:	f000 fffe 	bl	801130c <__assert_func>
 8010310:	3101      	adds	r1, #1
 8010312:	105b      	asrs	r3, r3, #1
 8010314:	e7ee      	b.n	80102f4 <__gethex+0x160>
 8010316:	f100 0914 	add.w	r9, r0, #20
 801031a:	f04f 0b00 	mov.w	fp, #0
 801031e:	f1ca 0301 	rsb	r3, sl, #1
 8010322:	f8cd 9008 	str.w	r9, [sp, #8]
 8010326:	f8cd b000 	str.w	fp, [sp]
 801032a:	9306      	str	r3, [sp, #24]
 801032c:	42b7      	cmp	r7, r6
 801032e:	d340      	bcc.n	80103b2 <__gethex+0x21e>
 8010330:	9802      	ldr	r0, [sp, #8]
 8010332:	9b00      	ldr	r3, [sp, #0]
 8010334:	f840 3b04 	str.w	r3, [r0], #4
 8010338:	eba0 0009 	sub.w	r0, r0, r9
 801033c:	1080      	asrs	r0, r0, #2
 801033e:	0146      	lsls	r6, r0, #5
 8010340:	6120      	str	r0, [r4, #16]
 8010342:	4618      	mov	r0, r3
 8010344:	f000 fb32 	bl	80109ac <__hi0bits>
 8010348:	1a30      	subs	r0, r6, r0
 801034a:	f8d8 6000 	ldr.w	r6, [r8]
 801034e:	42b0      	cmp	r0, r6
 8010350:	dd63      	ble.n	801041a <__gethex+0x286>
 8010352:	1b87      	subs	r7, r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	4620      	mov	r0, r4
 8010358:	f000 fed3 	bl	8011102 <__any_on>
 801035c:	4682      	mov	sl, r0
 801035e:	b1a8      	cbz	r0, 801038c <__gethex+0x1f8>
 8010360:	1e7b      	subs	r3, r7, #1
 8010362:	1159      	asrs	r1, r3, #5
 8010364:	f003 021f 	and.w	r2, r3, #31
 8010368:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801036c:	f04f 0a01 	mov.w	sl, #1
 8010370:	fa0a f202 	lsl.w	r2, sl, r2
 8010374:	420a      	tst	r2, r1
 8010376:	d009      	beq.n	801038c <__gethex+0x1f8>
 8010378:	4553      	cmp	r3, sl
 801037a:	dd05      	ble.n	8010388 <__gethex+0x1f4>
 801037c:	1eb9      	subs	r1, r7, #2
 801037e:	4620      	mov	r0, r4
 8010380:	f000 febf 	bl	8011102 <__any_on>
 8010384:	2800      	cmp	r0, #0
 8010386:	d145      	bne.n	8010414 <__gethex+0x280>
 8010388:	f04f 0a02 	mov.w	sl, #2
 801038c:	4639      	mov	r1, r7
 801038e:	4620      	mov	r0, r4
 8010390:	f7ff fe98 	bl	80100c4 <rshift>
 8010394:	443d      	add	r5, r7
 8010396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801039a:	42ab      	cmp	r3, r5
 801039c:	da4c      	bge.n	8010438 <__gethex+0x2a4>
 801039e:	ee18 0a10 	vmov	r0, s16
 80103a2:	4621      	mov	r1, r4
 80103a4:	f000 fa50 	bl	8010848 <_Bfree>
 80103a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103aa:	2300      	movs	r3, #0
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	27a3      	movs	r7, #163	; 0xa3
 80103b0:	e785      	b.n	80102be <__gethex+0x12a>
 80103b2:	1e73      	subs	r3, r6, #1
 80103b4:	9a05      	ldr	r2, [sp, #20]
 80103b6:	9303      	str	r3, [sp, #12]
 80103b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103bc:	4293      	cmp	r3, r2
 80103be:	d019      	beq.n	80103f4 <__gethex+0x260>
 80103c0:	f1bb 0f20 	cmp.w	fp, #32
 80103c4:	d107      	bne.n	80103d6 <__gethex+0x242>
 80103c6:	9b02      	ldr	r3, [sp, #8]
 80103c8:	9a00      	ldr	r2, [sp, #0]
 80103ca:	f843 2b04 	str.w	r2, [r3], #4
 80103ce:	9302      	str	r3, [sp, #8]
 80103d0:	2300      	movs	r3, #0
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	469b      	mov	fp, r3
 80103d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80103da:	f7ff fec5 	bl	8010168 <__hexdig_fun>
 80103de:	9b00      	ldr	r3, [sp, #0]
 80103e0:	f000 000f 	and.w	r0, r0, #15
 80103e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80103e8:	4303      	orrs	r3, r0
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	f10b 0b04 	add.w	fp, fp, #4
 80103f0:	9b03      	ldr	r3, [sp, #12]
 80103f2:	e00d      	b.n	8010410 <__gethex+0x27c>
 80103f4:	9b03      	ldr	r3, [sp, #12]
 80103f6:	9a06      	ldr	r2, [sp, #24]
 80103f8:	4413      	add	r3, r2
 80103fa:	42bb      	cmp	r3, r7
 80103fc:	d3e0      	bcc.n	80103c0 <__gethex+0x22c>
 80103fe:	4618      	mov	r0, r3
 8010400:	9901      	ldr	r1, [sp, #4]
 8010402:	9307      	str	r3, [sp, #28]
 8010404:	4652      	mov	r2, sl
 8010406:	f000 ff5f 	bl	80112c8 <strncmp>
 801040a:	9b07      	ldr	r3, [sp, #28]
 801040c:	2800      	cmp	r0, #0
 801040e:	d1d7      	bne.n	80103c0 <__gethex+0x22c>
 8010410:	461e      	mov	r6, r3
 8010412:	e78b      	b.n	801032c <__gethex+0x198>
 8010414:	f04f 0a03 	mov.w	sl, #3
 8010418:	e7b8      	b.n	801038c <__gethex+0x1f8>
 801041a:	da0a      	bge.n	8010432 <__gethex+0x29e>
 801041c:	1a37      	subs	r7, r6, r0
 801041e:	4621      	mov	r1, r4
 8010420:	ee18 0a10 	vmov	r0, s16
 8010424:	463a      	mov	r2, r7
 8010426:	f000 fc2b 	bl	8010c80 <__lshift>
 801042a:	1bed      	subs	r5, r5, r7
 801042c:	4604      	mov	r4, r0
 801042e:	f100 0914 	add.w	r9, r0, #20
 8010432:	f04f 0a00 	mov.w	sl, #0
 8010436:	e7ae      	b.n	8010396 <__gethex+0x202>
 8010438:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801043c:	42a8      	cmp	r0, r5
 801043e:	dd72      	ble.n	8010526 <__gethex+0x392>
 8010440:	1b45      	subs	r5, r0, r5
 8010442:	42ae      	cmp	r6, r5
 8010444:	dc36      	bgt.n	80104b4 <__gethex+0x320>
 8010446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801044a:	2b02      	cmp	r3, #2
 801044c:	d02a      	beq.n	80104a4 <__gethex+0x310>
 801044e:	2b03      	cmp	r3, #3
 8010450:	d02c      	beq.n	80104ac <__gethex+0x318>
 8010452:	2b01      	cmp	r3, #1
 8010454:	d11c      	bne.n	8010490 <__gethex+0x2fc>
 8010456:	42ae      	cmp	r6, r5
 8010458:	d11a      	bne.n	8010490 <__gethex+0x2fc>
 801045a:	2e01      	cmp	r6, #1
 801045c:	d112      	bne.n	8010484 <__gethex+0x2f0>
 801045e:	9a04      	ldr	r2, [sp, #16]
 8010460:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	2301      	movs	r3, #1
 8010468:	6123      	str	r3, [r4, #16]
 801046a:	f8c9 3000 	str.w	r3, [r9]
 801046e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010470:	2762      	movs	r7, #98	; 0x62
 8010472:	601c      	str	r4, [r3, #0]
 8010474:	e723      	b.n	80102be <__gethex+0x12a>
 8010476:	bf00      	nop
 8010478:	08012c98 	.word	0x08012c98
 801047c:	08012c20 	.word	0x08012c20
 8010480:	08012c31 	.word	0x08012c31
 8010484:	1e71      	subs	r1, r6, #1
 8010486:	4620      	mov	r0, r4
 8010488:	f000 fe3b 	bl	8011102 <__any_on>
 801048c:	2800      	cmp	r0, #0
 801048e:	d1e6      	bne.n	801045e <__gethex+0x2ca>
 8010490:	ee18 0a10 	vmov	r0, s16
 8010494:	4621      	mov	r1, r4
 8010496:	f000 f9d7 	bl	8010848 <_Bfree>
 801049a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801049c:	2300      	movs	r3, #0
 801049e:	6013      	str	r3, [r2, #0]
 80104a0:	2750      	movs	r7, #80	; 0x50
 80104a2:	e70c      	b.n	80102be <__gethex+0x12a>
 80104a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1f2      	bne.n	8010490 <__gethex+0x2fc>
 80104aa:	e7d8      	b.n	801045e <__gethex+0x2ca>
 80104ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1d5      	bne.n	801045e <__gethex+0x2ca>
 80104b2:	e7ed      	b.n	8010490 <__gethex+0x2fc>
 80104b4:	1e6f      	subs	r7, r5, #1
 80104b6:	f1ba 0f00 	cmp.w	sl, #0
 80104ba:	d131      	bne.n	8010520 <__gethex+0x38c>
 80104bc:	b127      	cbz	r7, 80104c8 <__gethex+0x334>
 80104be:	4639      	mov	r1, r7
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fe1e 	bl	8011102 <__any_on>
 80104c6:	4682      	mov	sl, r0
 80104c8:	117b      	asrs	r3, r7, #5
 80104ca:	2101      	movs	r1, #1
 80104cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80104d0:	f007 071f 	and.w	r7, r7, #31
 80104d4:	fa01 f707 	lsl.w	r7, r1, r7
 80104d8:	421f      	tst	r7, r3
 80104da:	4629      	mov	r1, r5
 80104dc:	4620      	mov	r0, r4
 80104de:	bf18      	it	ne
 80104e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80104e4:	1b76      	subs	r6, r6, r5
 80104e6:	f7ff fded 	bl	80100c4 <rshift>
 80104ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80104ee:	2702      	movs	r7, #2
 80104f0:	f1ba 0f00 	cmp.w	sl, #0
 80104f4:	d048      	beq.n	8010588 <__gethex+0x3f4>
 80104f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	d015      	beq.n	801052a <__gethex+0x396>
 80104fe:	2b03      	cmp	r3, #3
 8010500:	d017      	beq.n	8010532 <__gethex+0x39e>
 8010502:	2b01      	cmp	r3, #1
 8010504:	d109      	bne.n	801051a <__gethex+0x386>
 8010506:	f01a 0f02 	tst.w	sl, #2
 801050a:	d006      	beq.n	801051a <__gethex+0x386>
 801050c:	f8d9 0000 	ldr.w	r0, [r9]
 8010510:	ea4a 0a00 	orr.w	sl, sl, r0
 8010514:	f01a 0f01 	tst.w	sl, #1
 8010518:	d10e      	bne.n	8010538 <__gethex+0x3a4>
 801051a:	f047 0710 	orr.w	r7, r7, #16
 801051e:	e033      	b.n	8010588 <__gethex+0x3f4>
 8010520:	f04f 0a01 	mov.w	sl, #1
 8010524:	e7d0      	b.n	80104c8 <__gethex+0x334>
 8010526:	2701      	movs	r7, #1
 8010528:	e7e2      	b.n	80104f0 <__gethex+0x35c>
 801052a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801052c:	f1c3 0301 	rsb	r3, r3, #1
 8010530:	9315      	str	r3, [sp, #84]	; 0x54
 8010532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010534:	2b00      	cmp	r3, #0
 8010536:	d0f0      	beq.n	801051a <__gethex+0x386>
 8010538:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801053c:	f104 0314 	add.w	r3, r4, #20
 8010540:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010544:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010548:	f04f 0c00 	mov.w	ip, #0
 801054c:	4618      	mov	r0, r3
 801054e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010552:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010556:	d01c      	beq.n	8010592 <__gethex+0x3fe>
 8010558:	3201      	adds	r2, #1
 801055a:	6002      	str	r2, [r0, #0]
 801055c:	2f02      	cmp	r7, #2
 801055e:	f104 0314 	add.w	r3, r4, #20
 8010562:	d13f      	bne.n	80105e4 <__gethex+0x450>
 8010564:	f8d8 2000 	ldr.w	r2, [r8]
 8010568:	3a01      	subs	r2, #1
 801056a:	42b2      	cmp	r2, r6
 801056c:	d10a      	bne.n	8010584 <__gethex+0x3f0>
 801056e:	1171      	asrs	r1, r6, #5
 8010570:	2201      	movs	r2, #1
 8010572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010576:	f006 061f 	and.w	r6, r6, #31
 801057a:	fa02 f606 	lsl.w	r6, r2, r6
 801057e:	421e      	tst	r6, r3
 8010580:	bf18      	it	ne
 8010582:	4617      	movne	r7, r2
 8010584:	f047 0720 	orr.w	r7, r7, #32
 8010588:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801058a:	601c      	str	r4, [r3, #0]
 801058c:	9b04      	ldr	r3, [sp, #16]
 801058e:	601d      	str	r5, [r3, #0]
 8010590:	e695      	b.n	80102be <__gethex+0x12a>
 8010592:	4299      	cmp	r1, r3
 8010594:	f843 cc04 	str.w	ip, [r3, #-4]
 8010598:	d8d8      	bhi.n	801054c <__gethex+0x3b8>
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	459b      	cmp	fp, r3
 801059e:	db19      	blt.n	80105d4 <__gethex+0x440>
 80105a0:	6861      	ldr	r1, [r4, #4]
 80105a2:	ee18 0a10 	vmov	r0, s16
 80105a6:	3101      	adds	r1, #1
 80105a8:	f000 f90e 	bl	80107c8 <_Balloc>
 80105ac:	4681      	mov	r9, r0
 80105ae:	b918      	cbnz	r0, 80105b8 <__gethex+0x424>
 80105b0:	4b1a      	ldr	r3, [pc, #104]	; (801061c <__gethex+0x488>)
 80105b2:	4602      	mov	r2, r0
 80105b4:	2184      	movs	r1, #132	; 0x84
 80105b6:	e6a8      	b.n	801030a <__gethex+0x176>
 80105b8:	6922      	ldr	r2, [r4, #16]
 80105ba:	3202      	adds	r2, #2
 80105bc:	f104 010c 	add.w	r1, r4, #12
 80105c0:	0092      	lsls	r2, r2, #2
 80105c2:	300c      	adds	r0, #12
 80105c4:	f7fe ff8c 	bl	800f4e0 <memcpy>
 80105c8:	4621      	mov	r1, r4
 80105ca:	ee18 0a10 	vmov	r0, s16
 80105ce:	f000 f93b 	bl	8010848 <_Bfree>
 80105d2:	464c      	mov	r4, r9
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105dc:	6122      	str	r2, [r4, #16]
 80105de:	2201      	movs	r2, #1
 80105e0:	615a      	str	r2, [r3, #20]
 80105e2:	e7bb      	b.n	801055c <__gethex+0x3c8>
 80105e4:	6922      	ldr	r2, [r4, #16]
 80105e6:	455a      	cmp	r2, fp
 80105e8:	dd0b      	ble.n	8010602 <__gethex+0x46e>
 80105ea:	2101      	movs	r1, #1
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff fd69 	bl	80100c4 <rshift>
 80105f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105f6:	3501      	adds	r5, #1
 80105f8:	42ab      	cmp	r3, r5
 80105fa:	f6ff aed0 	blt.w	801039e <__gethex+0x20a>
 80105fe:	2701      	movs	r7, #1
 8010600:	e7c0      	b.n	8010584 <__gethex+0x3f0>
 8010602:	f016 061f 	ands.w	r6, r6, #31
 8010606:	d0fa      	beq.n	80105fe <__gethex+0x46a>
 8010608:	4453      	add	r3, sl
 801060a:	f1c6 0620 	rsb	r6, r6, #32
 801060e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010612:	f000 f9cb 	bl	80109ac <__hi0bits>
 8010616:	42b0      	cmp	r0, r6
 8010618:	dbe7      	blt.n	80105ea <__gethex+0x456>
 801061a:	e7f0      	b.n	80105fe <__gethex+0x46a>
 801061c:	08012c20 	.word	0x08012c20

08010620 <L_shift>:
 8010620:	f1c2 0208 	rsb	r2, r2, #8
 8010624:	0092      	lsls	r2, r2, #2
 8010626:	b570      	push	{r4, r5, r6, lr}
 8010628:	f1c2 0620 	rsb	r6, r2, #32
 801062c:	6843      	ldr	r3, [r0, #4]
 801062e:	6804      	ldr	r4, [r0, #0]
 8010630:	fa03 f506 	lsl.w	r5, r3, r6
 8010634:	432c      	orrs	r4, r5
 8010636:	40d3      	lsrs	r3, r2
 8010638:	6004      	str	r4, [r0, #0]
 801063a:	f840 3f04 	str.w	r3, [r0, #4]!
 801063e:	4288      	cmp	r0, r1
 8010640:	d3f4      	bcc.n	801062c <L_shift+0xc>
 8010642:	bd70      	pop	{r4, r5, r6, pc}

08010644 <__match>:
 8010644:	b530      	push	{r4, r5, lr}
 8010646:	6803      	ldr	r3, [r0, #0]
 8010648:	3301      	adds	r3, #1
 801064a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801064e:	b914      	cbnz	r4, 8010656 <__match+0x12>
 8010650:	6003      	str	r3, [r0, #0]
 8010652:	2001      	movs	r0, #1
 8010654:	bd30      	pop	{r4, r5, pc}
 8010656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801065e:	2d19      	cmp	r5, #25
 8010660:	bf98      	it	ls
 8010662:	3220      	addls	r2, #32
 8010664:	42a2      	cmp	r2, r4
 8010666:	d0f0      	beq.n	801064a <__match+0x6>
 8010668:	2000      	movs	r0, #0
 801066a:	e7f3      	b.n	8010654 <__match+0x10>

0801066c <__hexnan>:
 801066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	680b      	ldr	r3, [r1, #0]
 8010672:	115e      	asrs	r6, r3, #5
 8010674:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010678:	f013 031f 	ands.w	r3, r3, #31
 801067c:	b087      	sub	sp, #28
 801067e:	bf18      	it	ne
 8010680:	3604      	addne	r6, #4
 8010682:	2500      	movs	r5, #0
 8010684:	1f37      	subs	r7, r6, #4
 8010686:	4690      	mov	r8, r2
 8010688:	6802      	ldr	r2, [r0, #0]
 801068a:	9301      	str	r3, [sp, #4]
 801068c:	4682      	mov	sl, r0
 801068e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010692:	46b9      	mov	r9, r7
 8010694:	463c      	mov	r4, r7
 8010696:	9502      	str	r5, [sp, #8]
 8010698:	46ab      	mov	fp, r5
 801069a:	7851      	ldrb	r1, [r2, #1]
 801069c:	1c53      	adds	r3, r2, #1
 801069e:	9303      	str	r3, [sp, #12]
 80106a0:	b341      	cbz	r1, 80106f4 <__hexnan+0x88>
 80106a2:	4608      	mov	r0, r1
 80106a4:	9205      	str	r2, [sp, #20]
 80106a6:	9104      	str	r1, [sp, #16]
 80106a8:	f7ff fd5e 	bl	8010168 <__hexdig_fun>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d14f      	bne.n	8010750 <__hexnan+0xe4>
 80106b0:	9904      	ldr	r1, [sp, #16]
 80106b2:	9a05      	ldr	r2, [sp, #20]
 80106b4:	2920      	cmp	r1, #32
 80106b6:	d818      	bhi.n	80106ea <__hexnan+0x7e>
 80106b8:	9b02      	ldr	r3, [sp, #8]
 80106ba:	459b      	cmp	fp, r3
 80106bc:	dd13      	ble.n	80106e6 <__hexnan+0x7a>
 80106be:	454c      	cmp	r4, r9
 80106c0:	d206      	bcs.n	80106d0 <__hexnan+0x64>
 80106c2:	2d07      	cmp	r5, #7
 80106c4:	dc04      	bgt.n	80106d0 <__hexnan+0x64>
 80106c6:	462a      	mov	r2, r5
 80106c8:	4649      	mov	r1, r9
 80106ca:	4620      	mov	r0, r4
 80106cc:	f7ff ffa8 	bl	8010620 <L_shift>
 80106d0:	4544      	cmp	r4, r8
 80106d2:	d950      	bls.n	8010776 <__hexnan+0x10a>
 80106d4:	2300      	movs	r3, #0
 80106d6:	f1a4 0904 	sub.w	r9, r4, #4
 80106da:	f844 3c04 	str.w	r3, [r4, #-4]
 80106de:	f8cd b008 	str.w	fp, [sp, #8]
 80106e2:	464c      	mov	r4, r9
 80106e4:	461d      	mov	r5, r3
 80106e6:	9a03      	ldr	r2, [sp, #12]
 80106e8:	e7d7      	b.n	801069a <__hexnan+0x2e>
 80106ea:	2929      	cmp	r1, #41	; 0x29
 80106ec:	d156      	bne.n	801079c <__hexnan+0x130>
 80106ee:	3202      	adds	r2, #2
 80106f0:	f8ca 2000 	str.w	r2, [sl]
 80106f4:	f1bb 0f00 	cmp.w	fp, #0
 80106f8:	d050      	beq.n	801079c <__hexnan+0x130>
 80106fa:	454c      	cmp	r4, r9
 80106fc:	d206      	bcs.n	801070c <__hexnan+0xa0>
 80106fe:	2d07      	cmp	r5, #7
 8010700:	dc04      	bgt.n	801070c <__hexnan+0xa0>
 8010702:	462a      	mov	r2, r5
 8010704:	4649      	mov	r1, r9
 8010706:	4620      	mov	r0, r4
 8010708:	f7ff ff8a 	bl	8010620 <L_shift>
 801070c:	4544      	cmp	r4, r8
 801070e:	d934      	bls.n	801077a <__hexnan+0x10e>
 8010710:	f1a8 0204 	sub.w	r2, r8, #4
 8010714:	4623      	mov	r3, r4
 8010716:	f853 1b04 	ldr.w	r1, [r3], #4
 801071a:	f842 1f04 	str.w	r1, [r2, #4]!
 801071e:	429f      	cmp	r7, r3
 8010720:	d2f9      	bcs.n	8010716 <__hexnan+0xaa>
 8010722:	1b3b      	subs	r3, r7, r4
 8010724:	f023 0303 	bic.w	r3, r3, #3
 8010728:	3304      	adds	r3, #4
 801072a:	3401      	adds	r4, #1
 801072c:	3e03      	subs	r6, #3
 801072e:	42b4      	cmp	r4, r6
 8010730:	bf88      	it	hi
 8010732:	2304      	movhi	r3, #4
 8010734:	4443      	add	r3, r8
 8010736:	2200      	movs	r2, #0
 8010738:	f843 2b04 	str.w	r2, [r3], #4
 801073c:	429f      	cmp	r7, r3
 801073e:	d2fb      	bcs.n	8010738 <__hexnan+0xcc>
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	b91b      	cbnz	r3, 801074c <__hexnan+0xe0>
 8010744:	4547      	cmp	r7, r8
 8010746:	d127      	bne.n	8010798 <__hexnan+0x12c>
 8010748:	2301      	movs	r3, #1
 801074a:	603b      	str	r3, [r7, #0]
 801074c:	2005      	movs	r0, #5
 801074e:	e026      	b.n	801079e <__hexnan+0x132>
 8010750:	3501      	adds	r5, #1
 8010752:	2d08      	cmp	r5, #8
 8010754:	f10b 0b01 	add.w	fp, fp, #1
 8010758:	dd06      	ble.n	8010768 <__hexnan+0xfc>
 801075a:	4544      	cmp	r4, r8
 801075c:	d9c3      	bls.n	80106e6 <__hexnan+0x7a>
 801075e:	2300      	movs	r3, #0
 8010760:	f844 3c04 	str.w	r3, [r4, #-4]
 8010764:	2501      	movs	r5, #1
 8010766:	3c04      	subs	r4, #4
 8010768:	6822      	ldr	r2, [r4, #0]
 801076a:	f000 000f 	and.w	r0, r0, #15
 801076e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010772:	6022      	str	r2, [r4, #0]
 8010774:	e7b7      	b.n	80106e6 <__hexnan+0x7a>
 8010776:	2508      	movs	r5, #8
 8010778:	e7b5      	b.n	80106e6 <__hexnan+0x7a>
 801077a:	9b01      	ldr	r3, [sp, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d0df      	beq.n	8010740 <__hexnan+0xd4>
 8010780:	f04f 32ff 	mov.w	r2, #4294967295
 8010784:	f1c3 0320 	rsb	r3, r3, #32
 8010788:	fa22 f303 	lsr.w	r3, r2, r3
 801078c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010790:	401a      	ands	r2, r3
 8010792:	f846 2c04 	str.w	r2, [r6, #-4]
 8010796:	e7d3      	b.n	8010740 <__hexnan+0xd4>
 8010798:	3f04      	subs	r7, #4
 801079a:	e7d1      	b.n	8010740 <__hexnan+0xd4>
 801079c:	2004      	movs	r0, #4
 801079e:	b007      	add	sp, #28
 80107a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107a4 <__ascii_mbtowc>:
 80107a4:	b082      	sub	sp, #8
 80107a6:	b901      	cbnz	r1, 80107aa <__ascii_mbtowc+0x6>
 80107a8:	a901      	add	r1, sp, #4
 80107aa:	b142      	cbz	r2, 80107be <__ascii_mbtowc+0x1a>
 80107ac:	b14b      	cbz	r3, 80107c2 <__ascii_mbtowc+0x1e>
 80107ae:	7813      	ldrb	r3, [r2, #0]
 80107b0:	600b      	str	r3, [r1, #0]
 80107b2:	7812      	ldrb	r2, [r2, #0]
 80107b4:	1e10      	subs	r0, r2, #0
 80107b6:	bf18      	it	ne
 80107b8:	2001      	movne	r0, #1
 80107ba:	b002      	add	sp, #8
 80107bc:	4770      	bx	lr
 80107be:	4610      	mov	r0, r2
 80107c0:	e7fb      	b.n	80107ba <__ascii_mbtowc+0x16>
 80107c2:	f06f 0001 	mvn.w	r0, #1
 80107c6:	e7f8      	b.n	80107ba <__ascii_mbtowc+0x16>

080107c8 <_Balloc>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80107cc:	4604      	mov	r4, r0
 80107ce:	460d      	mov	r5, r1
 80107d0:	b976      	cbnz	r6, 80107f0 <_Balloc+0x28>
 80107d2:	2010      	movs	r0, #16
 80107d4:	f000 fdca 	bl	801136c <malloc>
 80107d8:	4602      	mov	r2, r0
 80107da:	6260      	str	r0, [r4, #36]	; 0x24
 80107dc:	b920      	cbnz	r0, 80107e8 <_Balloc+0x20>
 80107de:	4b18      	ldr	r3, [pc, #96]	; (8010840 <_Balloc+0x78>)
 80107e0:	4818      	ldr	r0, [pc, #96]	; (8010844 <_Balloc+0x7c>)
 80107e2:	2166      	movs	r1, #102	; 0x66
 80107e4:	f000 fd92 	bl	801130c <__assert_func>
 80107e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107ec:	6006      	str	r6, [r0, #0]
 80107ee:	60c6      	str	r6, [r0, #12]
 80107f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80107f2:	68f3      	ldr	r3, [r6, #12]
 80107f4:	b183      	cbz	r3, 8010818 <_Balloc+0x50>
 80107f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107fe:	b9b8      	cbnz	r0, 8010830 <_Balloc+0x68>
 8010800:	2101      	movs	r1, #1
 8010802:	fa01 f605 	lsl.w	r6, r1, r5
 8010806:	1d72      	adds	r2, r6, #5
 8010808:	0092      	lsls	r2, r2, #2
 801080a:	4620      	mov	r0, r4
 801080c:	f000 fc9a 	bl	8011144 <_calloc_r>
 8010810:	b160      	cbz	r0, 801082c <_Balloc+0x64>
 8010812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010816:	e00e      	b.n	8010836 <_Balloc+0x6e>
 8010818:	2221      	movs	r2, #33	; 0x21
 801081a:	2104      	movs	r1, #4
 801081c:	4620      	mov	r0, r4
 801081e:	f000 fc91 	bl	8011144 <_calloc_r>
 8010822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010824:	60f0      	str	r0, [r6, #12]
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1e4      	bne.n	80107f6 <_Balloc+0x2e>
 801082c:	2000      	movs	r0, #0
 801082e:	bd70      	pop	{r4, r5, r6, pc}
 8010830:	6802      	ldr	r2, [r0, #0]
 8010832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010836:	2300      	movs	r3, #0
 8010838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801083c:	e7f7      	b.n	801082e <_Balloc+0x66>
 801083e:	bf00      	nop
 8010840:	08012cac 	.word	0x08012cac
 8010844:	08012cc3 	.word	0x08012cc3

08010848 <_Bfree>:
 8010848:	b570      	push	{r4, r5, r6, lr}
 801084a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801084c:	4605      	mov	r5, r0
 801084e:	460c      	mov	r4, r1
 8010850:	b976      	cbnz	r6, 8010870 <_Bfree+0x28>
 8010852:	2010      	movs	r0, #16
 8010854:	f000 fd8a 	bl	801136c <malloc>
 8010858:	4602      	mov	r2, r0
 801085a:	6268      	str	r0, [r5, #36]	; 0x24
 801085c:	b920      	cbnz	r0, 8010868 <_Bfree+0x20>
 801085e:	4b09      	ldr	r3, [pc, #36]	; (8010884 <_Bfree+0x3c>)
 8010860:	4809      	ldr	r0, [pc, #36]	; (8010888 <_Bfree+0x40>)
 8010862:	218a      	movs	r1, #138	; 0x8a
 8010864:	f000 fd52 	bl	801130c <__assert_func>
 8010868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801086c:	6006      	str	r6, [r0, #0]
 801086e:	60c6      	str	r6, [r0, #12]
 8010870:	b13c      	cbz	r4, 8010882 <_Bfree+0x3a>
 8010872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010874:	6862      	ldr	r2, [r4, #4]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801087c:	6021      	str	r1, [r4, #0]
 801087e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	08012cac 	.word	0x08012cac
 8010888:	08012cc3 	.word	0x08012cc3

0801088c <__multadd>:
 801088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010890:	690d      	ldr	r5, [r1, #16]
 8010892:	4607      	mov	r7, r0
 8010894:	460c      	mov	r4, r1
 8010896:	461e      	mov	r6, r3
 8010898:	f101 0c14 	add.w	ip, r1, #20
 801089c:	2000      	movs	r0, #0
 801089e:	f8dc 3000 	ldr.w	r3, [ip]
 80108a2:	b299      	uxth	r1, r3
 80108a4:	fb02 6101 	mla	r1, r2, r1, r6
 80108a8:	0c1e      	lsrs	r6, r3, #16
 80108aa:	0c0b      	lsrs	r3, r1, #16
 80108ac:	fb02 3306 	mla	r3, r2, r6, r3
 80108b0:	b289      	uxth	r1, r1
 80108b2:	3001      	adds	r0, #1
 80108b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108b8:	4285      	cmp	r5, r0
 80108ba:	f84c 1b04 	str.w	r1, [ip], #4
 80108be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108c2:	dcec      	bgt.n	801089e <__multadd+0x12>
 80108c4:	b30e      	cbz	r6, 801090a <__multadd+0x7e>
 80108c6:	68a3      	ldr	r3, [r4, #8]
 80108c8:	42ab      	cmp	r3, r5
 80108ca:	dc19      	bgt.n	8010900 <__multadd+0x74>
 80108cc:	6861      	ldr	r1, [r4, #4]
 80108ce:	4638      	mov	r0, r7
 80108d0:	3101      	adds	r1, #1
 80108d2:	f7ff ff79 	bl	80107c8 <_Balloc>
 80108d6:	4680      	mov	r8, r0
 80108d8:	b928      	cbnz	r0, 80108e6 <__multadd+0x5a>
 80108da:	4602      	mov	r2, r0
 80108dc:	4b0c      	ldr	r3, [pc, #48]	; (8010910 <__multadd+0x84>)
 80108de:	480d      	ldr	r0, [pc, #52]	; (8010914 <__multadd+0x88>)
 80108e0:	21b5      	movs	r1, #181	; 0xb5
 80108e2:	f000 fd13 	bl	801130c <__assert_func>
 80108e6:	6922      	ldr	r2, [r4, #16]
 80108e8:	3202      	adds	r2, #2
 80108ea:	f104 010c 	add.w	r1, r4, #12
 80108ee:	0092      	lsls	r2, r2, #2
 80108f0:	300c      	adds	r0, #12
 80108f2:	f7fe fdf5 	bl	800f4e0 <memcpy>
 80108f6:	4621      	mov	r1, r4
 80108f8:	4638      	mov	r0, r7
 80108fa:	f7ff ffa5 	bl	8010848 <_Bfree>
 80108fe:	4644      	mov	r4, r8
 8010900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010904:	3501      	adds	r5, #1
 8010906:	615e      	str	r6, [r3, #20]
 8010908:	6125      	str	r5, [r4, #16]
 801090a:	4620      	mov	r0, r4
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	08012c20 	.word	0x08012c20
 8010914:	08012cc3 	.word	0x08012cc3

08010918 <__s2b>:
 8010918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801091c:	460c      	mov	r4, r1
 801091e:	4615      	mov	r5, r2
 8010920:	461f      	mov	r7, r3
 8010922:	2209      	movs	r2, #9
 8010924:	3308      	adds	r3, #8
 8010926:	4606      	mov	r6, r0
 8010928:	fb93 f3f2 	sdiv	r3, r3, r2
 801092c:	2100      	movs	r1, #0
 801092e:	2201      	movs	r2, #1
 8010930:	429a      	cmp	r2, r3
 8010932:	db09      	blt.n	8010948 <__s2b+0x30>
 8010934:	4630      	mov	r0, r6
 8010936:	f7ff ff47 	bl	80107c8 <_Balloc>
 801093a:	b940      	cbnz	r0, 801094e <__s2b+0x36>
 801093c:	4602      	mov	r2, r0
 801093e:	4b19      	ldr	r3, [pc, #100]	; (80109a4 <__s2b+0x8c>)
 8010940:	4819      	ldr	r0, [pc, #100]	; (80109a8 <__s2b+0x90>)
 8010942:	21ce      	movs	r1, #206	; 0xce
 8010944:	f000 fce2 	bl	801130c <__assert_func>
 8010948:	0052      	lsls	r2, r2, #1
 801094a:	3101      	adds	r1, #1
 801094c:	e7f0      	b.n	8010930 <__s2b+0x18>
 801094e:	9b08      	ldr	r3, [sp, #32]
 8010950:	6143      	str	r3, [r0, #20]
 8010952:	2d09      	cmp	r5, #9
 8010954:	f04f 0301 	mov.w	r3, #1
 8010958:	6103      	str	r3, [r0, #16]
 801095a:	dd16      	ble.n	801098a <__s2b+0x72>
 801095c:	f104 0909 	add.w	r9, r4, #9
 8010960:	46c8      	mov	r8, r9
 8010962:	442c      	add	r4, r5
 8010964:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010968:	4601      	mov	r1, r0
 801096a:	3b30      	subs	r3, #48	; 0x30
 801096c:	220a      	movs	r2, #10
 801096e:	4630      	mov	r0, r6
 8010970:	f7ff ff8c 	bl	801088c <__multadd>
 8010974:	45a0      	cmp	r8, r4
 8010976:	d1f5      	bne.n	8010964 <__s2b+0x4c>
 8010978:	f1a5 0408 	sub.w	r4, r5, #8
 801097c:	444c      	add	r4, r9
 801097e:	1b2d      	subs	r5, r5, r4
 8010980:	1963      	adds	r3, r4, r5
 8010982:	42bb      	cmp	r3, r7
 8010984:	db04      	blt.n	8010990 <__s2b+0x78>
 8010986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801098a:	340a      	adds	r4, #10
 801098c:	2509      	movs	r5, #9
 801098e:	e7f6      	b.n	801097e <__s2b+0x66>
 8010990:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010994:	4601      	mov	r1, r0
 8010996:	3b30      	subs	r3, #48	; 0x30
 8010998:	220a      	movs	r2, #10
 801099a:	4630      	mov	r0, r6
 801099c:	f7ff ff76 	bl	801088c <__multadd>
 80109a0:	e7ee      	b.n	8010980 <__s2b+0x68>
 80109a2:	bf00      	nop
 80109a4:	08012c20 	.word	0x08012c20
 80109a8:	08012cc3 	.word	0x08012cc3

080109ac <__hi0bits>:
 80109ac:	0c03      	lsrs	r3, r0, #16
 80109ae:	041b      	lsls	r3, r3, #16
 80109b0:	b9d3      	cbnz	r3, 80109e8 <__hi0bits+0x3c>
 80109b2:	0400      	lsls	r0, r0, #16
 80109b4:	2310      	movs	r3, #16
 80109b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109ba:	bf04      	itt	eq
 80109bc:	0200      	lsleq	r0, r0, #8
 80109be:	3308      	addeq	r3, #8
 80109c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109c4:	bf04      	itt	eq
 80109c6:	0100      	lsleq	r0, r0, #4
 80109c8:	3304      	addeq	r3, #4
 80109ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109ce:	bf04      	itt	eq
 80109d0:	0080      	lsleq	r0, r0, #2
 80109d2:	3302      	addeq	r3, #2
 80109d4:	2800      	cmp	r0, #0
 80109d6:	db05      	blt.n	80109e4 <__hi0bits+0x38>
 80109d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80109dc:	f103 0301 	add.w	r3, r3, #1
 80109e0:	bf08      	it	eq
 80109e2:	2320      	moveq	r3, #32
 80109e4:	4618      	mov	r0, r3
 80109e6:	4770      	bx	lr
 80109e8:	2300      	movs	r3, #0
 80109ea:	e7e4      	b.n	80109b6 <__hi0bits+0xa>

080109ec <__lo0bits>:
 80109ec:	6803      	ldr	r3, [r0, #0]
 80109ee:	f013 0207 	ands.w	r2, r3, #7
 80109f2:	4601      	mov	r1, r0
 80109f4:	d00b      	beq.n	8010a0e <__lo0bits+0x22>
 80109f6:	07da      	lsls	r2, r3, #31
 80109f8:	d423      	bmi.n	8010a42 <__lo0bits+0x56>
 80109fa:	0798      	lsls	r0, r3, #30
 80109fc:	bf49      	itett	mi
 80109fe:	085b      	lsrmi	r3, r3, #1
 8010a00:	089b      	lsrpl	r3, r3, #2
 8010a02:	2001      	movmi	r0, #1
 8010a04:	600b      	strmi	r3, [r1, #0]
 8010a06:	bf5c      	itt	pl
 8010a08:	600b      	strpl	r3, [r1, #0]
 8010a0a:	2002      	movpl	r0, #2
 8010a0c:	4770      	bx	lr
 8010a0e:	b298      	uxth	r0, r3
 8010a10:	b9a8      	cbnz	r0, 8010a3e <__lo0bits+0x52>
 8010a12:	0c1b      	lsrs	r3, r3, #16
 8010a14:	2010      	movs	r0, #16
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	b90a      	cbnz	r2, 8010a1e <__lo0bits+0x32>
 8010a1a:	3008      	adds	r0, #8
 8010a1c:	0a1b      	lsrs	r3, r3, #8
 8010a1e:	071a      	lsls	r2, r3, #28
 8010a20:	bf04      	itt	eq
 8010a22:	091b      	lsreq	r3, r3, #4
 8010a24:	3004      	addeq	r0, #4
 8010a26:	079a      	lsls	r2, r3, #30
 8010a28:	bf04      	itt	eq
 8010a2a:	089b      	lsreq	r3, r3, #2
 8010a2c:	3002      	addeq	r0, #2
 8010a2e:	07da      	lsls	r2, r3, #31
 8010a30:	d403      	bmi.n	8010a3a <__lo0bits+0x4e>
 8010a32:	085b      	lsrs	r3, r3, #1
 8010a34:	f100 0001 	add.w	r0, r0, #1
 8010a38:	d005      	beq.n	8010a46 <__lo0bits+0x5a>
 8010a3a:	600b      	str	r3, [r1, #0]
 8010a3c:	4770      	bx	lr
 8010a3e:	4610      	mov	r0, r2
 8010a40:	e7e9      	b.n	8010a16 <__lo0bits+0x2a>
 8010a42:	2000      	movs	r0, #0
 8010a44:	4770      	bx	lr
 8010a46:	2020      	movs	r0, #32
 8010a48:	4770      	bx	lr
	...

08010a4c <__i2b>:
 8010a4c:	b510      	push	{r4, lr}
 8010a4e:	460c      	mov	r4, r1
 8010a50:	2101      	movs	r1, #1
 8010a52:	f7ff feb9 	bl	80107c8 <_Balloc>
 8010a56:	4602      	mov	r2, r0
 8010a58:	b928      	cbnz	r0, 8010a66 <__i2b+0x1a>
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <__i2b+0x24>)
 8010a5c:	4805      	ldr	r0, [pc, #20]	; (8010a74 <__i2b+0x28>)
 8010a5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a62:	f000 fc53 	bl	801130c <__assert_func>
 8010a66:	2301      	movs	r3, #1
 8010a68:	6144      	str	r4, [r0, #20]
 8010a6a:	6103      	str	r3, [r0, #16]
 8010a6c:	bd10      	pop	{r4, pc}
 8010a6e:	bf00      	nop
 8010a70:	08012c20 	.word	0x08012c20
 8010a74:	08012cc3 	.word	0x08012cc3

08010a78 <__multiply>:
 8010a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a7c:	4691      	mov	r9, r2
 8010a7e:	690a      	ldr	r2, [r1, #16]
 8010a80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	bfb8      	it	lt
 8010a88:	460b      	movlt	r3, r1
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	bfbc      	itt	lt
 8010a8e:	464c      	movlt	r4, r9
 8010a90:	4699      	movlt	r9, r3
 8010a92:	6927      	ldr	r7, [r4, #16]
 8010a94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010a98:	68a3      	ldr	r3, [r4, #8]
 8010a9a:	6861      	ldr	r1, [r4, #4]
 8010a9c:	eb07 060a 	add.w	r6, r7, sl
 8010aa0:	42b3      	cmp	r3, r6
 8010aa2:	b085      	sub	sp, #20
 8010aa4:	bfb8      	it	lt
 8010aa6:	3101      	addlt	r1, #1
 8010aa8:	f7ff fe8e 	bl	80107c8 <_Balloc>
 8010aac:	b930      	cbnz	r0, 8010abc <__multiply+0x44>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	4b44      	ldr	r3, [pc, #272]	; (8010bc4 <__multiply+0x14c>)
 8010ab2:	4845      	ldr	r0, [pc, #276]	; (8010bc8 <__multiply+0x150>)
 8010ab4:	f240 115d 	movw	r1, #349	; 0x15d
 8010ab8:	f000 fc28 	bl	801130c <__assert_func>
 8010abc:	f100 0514 	add.w	r5, r0, #20
 8010ac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010ac4:	462b      	mov	r3, r5
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	4543      	cmp	r3, r8
 8010aca:	d321      	bcc.n	8010b10 <__multiply+0x98>
 8010acc:	f104 0314 	add.w	r3, r4, #20
 8010ad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ad4:	f109 0314 	add.w	r3, r9, #20
 8010ad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010adc:	9202      	str	r2, [sp, #8]
 8010ade:	1b3a      	subs	r2, r7, r4
 8010ae0:	3a15      	subs	r2, #21
 8010ae2:	f022 0203 	bic.w	r2, r2, #3
 8010ae6:	3204      	adds	r2, #4
 8010ae8:	f104 0115 	add.w	r1, r4, #21
 8010aec:	428f      	cmp	r7, r1
 8010aee:	bf38      	it	cc
 8010af0:	2204      	movcc	r2, #4
 8010af2:	9201      	str	r2, [sp, #4]
 8010af4:	9a02      	ldr	r2, [sp, #8]
 8010af6:	9303      	str	r3, [sp, #12]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d80c      	bhi.n	8010b16 <__multiply+0x9e>
 8010afc:	2e00      	cmp	r6, #0
 8010afe:	dd03      	ble.n	8010b08 <__multiply+0x90>
 8010b00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d05a      	beq.n	8010bbe <__multiply+0x146>
 8010b08:	6106      	str	r6, [r0, #16]
 8010b0a:	b005      	add	sp, #20
 8010b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b10:	f843 2b04 	str.w	r2, [r3], #4
 8010b14:	e7d8      	b.n	8010ac8 <__multiply+0x50>
 8010b16:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b1a:	f1ba 0f00 	cmp.w	sl, #0
 8010b1e:	d024      	beq.n	8010b6a <__multiply+0xf2>
 8010b20:	f104 0e14 	add.w	lr, r4, #20
 8010b24:	46a9      	mov	r9, r5
 8010b26:	f04f 0c00 	mov.w	ip, #0
 8010b2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b2e:	f8d9 1000 	ldr.w	r1, [r9]
 8010b32:	fa1f fb82 	uxth.w	fp, r2
 8010b36:	b289      	uxth	r1, r1
 8010b38:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b40:	f8d9 2000 	ldr.w	r2, [r9]
 8010b44:	4461      	add	r1, ip
 8010b46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b52:	b289      	uxth	r1, r1
 8010b54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b58:	4577      	cmp	r7, lr
 8010b5a:	f849 1b04 	str.w	r1, [r9], #4
 8010b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b62:	d8e2      	bhi.n	8010b2a <__multiply+0xb2>
 8010b64:	9a01      	ldr	r2, [sp, #4]
 8010b66:	f845 c002 	str.w	ip, [r5, r2]
 8010b6a:	9a03      	ldr	r2, [sp, #12]
 8010b6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b70:	3304      	adds	r3, #4
 8010b72:	f1b9 0f00 	cmp.w	r9, #0
 8010b76:	d020      	beq.n	8010bba <__multiply+0x142>
 8010b78:	6829      	ldr	r1, [r5, #0]
 8010b7a:	f104 0c14 	add.w	ip, r4, #20
 8010b7e:	46ae      	mov	lr, r5
 8010b80:	f04f 0a00 	mov.w	sl, #0
 8010b84:	f8bc b000 	ldrh.w	fp, [ip]
 8010b88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010b8c:	fb09 220b 	mla	r2, r9, fp, r2
 8010b90:	4492      	add	sl, r2
 8010b92:	b289      	uxth	r1, r1
 8010b94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010b98:	f84e 1b04 	str.w	r1, [lr], #4
 8010b9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ba0:	f8be 1000 	ldrh.w	r1, [lr]
 8010ba4:	0c12      	lsrs	r2, r2, #16
 8010ba6:	fb09 1102 	mla	r1, r9, r2, r1
 8010baa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010bae:	4567      	cmp	r7, ip
 8010bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bb4:	d8e6      	bhi.n	8010b84 <__multiply+0x10c>
 8010bb6:	9a01      	ldr	r2, [sp, #4]
 8010bb8:	50a9      	str	r1, [r5, r2]
 8010bba:	3504      	adds	r5, #4
 8010bbc:	e79a      	b.n	8010af4 <__multiply+0x7c>
 8010bbe:	3e01      	subs	r6, #1
 8010bc0:	e79c      	b.n	8010afc <__multiply+0x84>
 8010bc2:	bf00      	nop
 8010bc4:	08012c20 	.word	0x08012c20
 8010bc8:	08012cc3 	.word	0x08012cc3

08010bcc <__pow5mult>:
 8010bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bd0:	4615      	mov	r5, r2
 8010bd2:	f012 0203 	ands.w	r2, r2, #3
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	460f      	mov	r7, r1
 8010bda:	d007      	beq.n	8010bec <__pow5mult+0x20>
 8010bdc:	4c25      	ldr	r4, [pc, #148]	; (8010c74 <__pow5mult+0xa8>)
 8010bde:	3a01      	subs	r2, #1
 8010be0:	2300      	movs	r3, #0
 8010be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010be6:	f7ff fe51 	bl	801088c <__multadd>
 8010bea:	4607      	mov	r7, r0
 8010bec:	10ad      	asrs	r5, r5, #2
 8010bee:	d03d      	beq.n	8010c6c <__pow5mult+0xa0>
 8010bf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bf2:	b97c      	cbnz	r4, 8010c14 <__pow5mult+0x48>
 8010bf4:	2010      	movs	r0, #16
 8010bf6:	f000 fbb9 	bl	801136c <malloc>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	6270      	str	r0, [r6, #36]	; 0x24
 8010bfe:	b928      	cbnz	r0, 8010c0c <__pow5mult+0x40>
 8010c00:	4b1d      	ldr	r3, [pc, #116]	; (8010c78 <__pow5mult+0xac>)
 8010c02:	481e      	ldr	r0, [pc, #120]	; (8010c7c <__pow5mult+0xb0>)
 8010c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c08:	f000 fb80 	bl	801130c <__assert_func>
 8010c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c10:	6004      	str	r4, [r0, #0]
 8010c12:	60c4      	str	r4, [r0, #12]
 8010c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c1c:	b94c      	cbnz	r4, 8010c32 <__pow5mult+0x66>
 8010c1e:	f240 2171 	movw	r1, #625	; 0x271
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7ff ff12 	bl	8010a4c <__i2b>
 8010c28:	2300      	movs	r3, #0
 8010c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c2e:	4604      	mov	r4, r0
 8010c30:	6003      	str	r3, [r0, #0]
 8010c32:	f04f 0900 	mov.w	r9, #0
 8010c36:	07eb      	lsls	r3, r5, #31
 8010c38:	d50a      	bpl.n	8010c50 <__pow5mult+0x84>
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	4630      	mov	r0, r6
 8010c40:	f7ff ff1a 	bl	8010a78 <__multiply>
 8010c44:	4639      	mov	r1, r7
 8010c46:	4680      	mov	r8, r0
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f7ff fdfd 	bl	8010848 <_Bfree>
 8010c4e:	4647      	mov	r7, r8
 8010c50:	106d      	asrs	r5, r5, #1
 8010c52:	d00b      	beq.n	8010c6c <__pow5mult+0xa0>
 8010c54:	6820      	ldr	r0, [r4, #0]
 8010c56:	b938      	cbnz	r0, 8010c68 <__pow5mult+0x9c>
 8010c58:	4622      	mov	r2, r4
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f7ff ff0b 	bl	8010a78 <__multiply>
 8010c62:	6020      	str	r0, [r4, #0]
 8010c64:	f8c0 9000 	str.w	r9, [r0]
 8010c68:	4604      	mov	r4, r0
 8010c6a:	e7e4      	b.n	8010c36 <__pow5mult+0x6a>
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c72:	bf00      	nop
 8010c74:	08012e10 	.word	0x08012e10
 8010c78:	08012cac 	.word	0x08012cac
 8010c7c:	08012cc3 	.word	0x08012cc3

08010c80 <__lshift>:
 8010c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c84:	460c      	mov	r4, r1
 8010c86:	6849      	ldr	r1, [r1, #4]
 8010c88:	6923      	ldr	r3, [r4, #16]
 8010c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c8e:	68a3      	ldr	r3, [r4, #8]
 8010c90:	4607      	mov	r7, r0
 8010c92:	4691      	mov	r9, r2
 8010c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c98:	f108 0601 	add.w	r6, r8, #1
 8010c9c:	42b3      	cmp	r3, r6
 8010c9e:	db0b      	blt.n	8010cb8 <__lshift+0x38>
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff fd91 	bl	80107c8 <_Balloc>
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	b948      	cbnz	r0, 8010cbe <__lshift+0x3e>
 8010caa:	4602      	mov	r2, r0
 8010cac:	4b2a      	ldr	r3, [pc, #168]	; (8010d58 <__lshift+0xd8>)
 8010cae:	482b      	ldr	r0, [pc, #172]	; (8010d5c <__lshift+0xdc>)
 8010cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010cb4:	f000 fb2a 	bl	801130c <__assert_func>
 8010cb8:	3101      	adds	r1, #1
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	e7ee      	b.n	8010c9c <__lshift+0x1c>
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	f100 0114 	add.w	r1, r0, #20
 8010cc4:	f100 0210 	add.w	r2, r0, #16
 8010cc8:	4618      	mov	r0, r3
 8010cca:	4553      	cmp	r3, sl
 8010ccc:	db37      	blt.n	8010d3e <__lshift+0xbe>
 8010cce:	6920      	ldr	r0, [r4, #16]
 8010cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cd4:	f104 0314 	add.w	r3, r4, #20
 8010cd8:	f019 091f 	ands.w	r9, r9, #31
 8010cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ce4:	d02f      	beq.n	8010d46 <__lshift+0xc6>
 8010ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8010cea:	468a      	mov	sl, r1
 8010cec:	f04f 0c00 	mov.w	ip, #0
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	fa02 f209 	lsl.w	r2, r2, r9
 8010cf6:	ea42 020c 	orr.w	r2, r2, ip
 8010cfa:	f84a 2b04 	str.w	r2, [sl], #4
 8010cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d02:	4298      	cmp	r0, r3
 8010d04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010d08:	d8f2      	bhi.n	8010cf0 <__lshift+0x70>
 8010d0a:	1b03      	subs	r3, r0, r4
 8010d0c:	3b15      	subs	r3, #21
 8010d0e:	f023 0303 	bic.w	r3, r3, #3
 8010d12:	3304      	adds	r3, #4
 8010d14:	f104 0215 	add.w	r2, r4, #21
 8010d18:	4290      	cmp	r0, r2
 8010d1a:	bf38      	it	cc
 8010d1c:	2304      	movcc	r3, #4
 8010d1e:	f841 c003 	str.w	ip, [r1, r3]
 8010d22:	f1bc 0f00 	cmp.w	ip, #0
 8010d26:	d001      	beq.n	8010d2c <__lshift+0xac>
 8010d28:	f108 0602 	add.w	r6, r8, #2
 8010d2c:	3e01      	subs	r6, #1
 8010d2e:	4638      	mov	r0, r7
 8010d30:	612e      	str	r6, [r5, #16]
 8010d32:	4621      	mov	r1, r4
 8010d34:	f7ff fd88 	bl	8010848 <_Bfree>
 8010d38:	4628      	mov	r0, r5
 8010d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d42:	3301      	adds	r3, #1
 8010d44:	e7c1      	b.n	8010cca <__lshift+0x4a>
 8010d46:	3904      	subs	r1, #4
 8010d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d50:	4298      	cmp	r0, r3
 8010d52:	d8f9      	bhi.n	8010d48 <__lshift+0xc8>
 8010d54:	e7ea      	b.n	8010d2c <__lshift+0xac>
 8010d56:	bf00      	nop
 8010d58:	08012c20 	.word	0x08012c20
 8010d5c:	08012cc3 	.word	0x08012cc3

08010d60 <__mcmp>:
 8010d60:	b530      	push	{r4, r5, lr}
 8010d62:	6902      	ldr	r2, [r0, #16]
 8010d64:	690c      	ldr	r4, [r1, #16]
 8010d66:	1b12      	subs	r2, r2, r4
 8010d68:	d10e      	bne.n	8010d88 <__mcmp+0x28>
 8010d6a:	f100 0314 	add.w	r3, r0, #20
 8010d6e:	3114      	adds	r1, #20
 8010d70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d80:	42a5      	cmp	r5, r4
 8010d82:	d003      	beq.n	8010d8c <__mcmp+0x2c>
 8010d84:	d305      	bcc.n	8010d92 <__mcmp+0x32>
 8010d86:	2201      	movs	r2, #1
 8010d88:	4610      	mov	r0, r2
 8010d8a:	bd30      	pop	{r4, r5, pc}
 8010d8c:	4283      	cmp	r3, r0
 8010d8e:	d3f3      	bcc.n	8010d78 <__mcmp+0x18>
 8010d90:	e7fa      	b.n	8010d88 <__mcmp+0x28>
 8010d92:	f04f 32ff 	mov.w	r2, #4294967295
 8010d96:	e7f7      	b.n	8010d88 <__mcmp+0x28>

08010d98 <__mdiff>:
 8010d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	460c      	mov	r4, r1
 8010d9e:	4606      	mov	r6, r0
 8010da0:	4611      	mov	r1, r2
 8010da2:	4620      	mov	r0, r4
 8010da4:	4690      	mov	r8, r2
 8010da6:	f7ff ffdb 	bl	8010d60 <__mcmp>
 8010daa:	1e05      	subs	r5, r0, #0
 8010dac:	d110      	bne.n	8010dd0 <__mdiff+0x38>
 8010dae:	4629      	mov	r1, r5
 8010db0:	4630      	mov	r0, r6
 8010db2:	f7ff fd09 	bl	80107c8 <_Balloc>
 8010db6:	b930      	cbnz	r0, 8010dc6 <__mdiff+0x2e>
 8010db8:	4b3a      	ldr	r3, [pc, #232]	; (8010ea4 <__mdiff+0x10c>)
 8010dba:	4602      	mov	r2, r0
 8010dbc:	f240 2132 	movw	r1, #562	; 0x232
 8010dc0:	4839      	ldr	r0, [pc, #228]	; (8010ea8 <__mdiff+0x110>)
 8010dc2:	f000 faa3 	bl	801130c <__assert_func>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd0:	bfa4      	itt	ge
 8010dd2:	4643      	movge	r3, r8
 8010dd4:	46a0      	movge	r8, r4
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ddc:	bfa6      	itte	ge
 8010dde:	461c      	movge	r4, r3
 8010de0:	2500      	movge	r5, #0
 8010de2:	2501      	movlt	r5, #1
 8010de4:	f7ff fcf0 	bl	80107c8 <_Balloc>
 8010de8:	b920      	cbnz	r0, 8010df4 <__mdiff+0x5c>
 8010dea:	4b2e      	ldr	r3, [pc, #184]	; (8010ea4 <__mdiff+0x10c>)
 8010dec:	4602      	mov	r2, r0
 8010dee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010df2:	e7e5      	b.n	8010dc0 <__mdiff+0x28>
 8010df4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010df8:	6926      	ldr	r6, [r4, #16]
 8010dfa:	60c5      	str	r5, [r0, #12]
 8010dfc:	f104 0914 	add.w	r9, r4, #20
 8010e00:	f108 0514 	add.w	r5, r8, #20
 8010e04:	f100 0e14 	add.w	lr, r0, #20
 8010e08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e10:	f108 0210 	add.w	r2, r8, #16
 8010e14:	46f2      	mov	sl, lr
 8010e16:	2100      	movs	r1, #0
 8010e18:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e20:	fa1f f883 	uxth.w	r8, r3
 8010e24:	fa11 f18b 	uxtah	r1, r1, fp
 8010e28:	0c1b      	lsrs	r3, r3, #16
 8010e2a:	eba1 0808 	sub.w	r8, r1, r8
 8010e2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e36:	fa1f f888 	uxth.w	r8, r8
 8010e3a:	1419      	asrs	r1, r3, #16
 8010e3c:	454e      	cmp	r6, r9
 8010e3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e42:	f84a 3b04 	str.w	r3, [sl], #4
 8010e46:	d8e7      	bhi.n	8010e18 <__mdiff+0x80>
 8010e48:	1b33      	subs	r3, r6, r4
 8010e4a:	3b15      	subs	r3, #21
 8010e4c:	f023 0303 	bic.w	r3, r3, #3
 8010e50:	3304      	adds	r3, #4
 8010e52:	3415      	adds	r4, #21
 8010e54:	42a6      	cmp	r6, r4
 8010e56:	bf38      	it	cc
 8010e58:	2304      	movcc	r3, #4
 8010e5a:	441d      	add	r5, r3
 8010e5c:	4473      	add	r3, lr
 8010e5e:	469e      	mov	lr, r3
 8010e60:	462e      	mov	r6, r5
 8010e62:	4566      	cmp	r6, ip
 8010e64:	d30e      	bcc.n	8010e84 <__mdiff+0xec>
 8010e66:	f10c 0203 	add.w	r2, ip, #3
 8010e6a:	1b52      	subs	r2, r2, r5
 8010e6c:	f022 0203 	bic.w	r2, r2, #3
 8010e70:	3d03      	subs	r5, #3
 8010e72:	45ac      	cmp	ip, r5
 8010e74:	bf38      	it	cc
 8010e76:	2200      	movcc	r2, #0
 8010e78:	441a      	add	r2, r3
 8010e7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010e7e:	b17b      	cbz	r3, 8010ea0 <__mdiff+0x108>
 8010e80:	6107      	str	r7, [r0, #16]
 8010e82:	e7a3      	b.n	8010dcc <__mdiff+0x34>
 8010e84:	f856 8b04 	ldr.w	r8, [r6], #4
 8010e88:	fa11 f288 	uxtah	r2, r1, r8
 8010e8c:	1414      	asrs	r4, r2, #16
 8010e8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010e92:	b292      	uxth	r2, r2
 8010e94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010e98:	f84e 2b04 	str.w	r2, [lr], #4
 8010e9c:	1421      	asrs	r1, r4, #16
 8010e9e:	e7e0      	b.n	8010e62 <__mdiff+0xca>
 8010ea0:	3f01      	subs	r7, #1
 8010ea2:	e7ea      	b.n	8010e7a <__mdiff+0xe2>
 8010ea4:	08012c20 	.word	0x08012c20
 8010ea8:	08012cc3 	.word	0x08012cc3

08010eac <__ulp>:
 8010eac:	b082      	sub	sp, #8
 8010eae:	ed8d 0b00 	vstr	d0, [sp]
 8010eb2:	9b01      	ldr	r3, [sp, #4]
 8010eb4:	4912      	ldr	r1, [pc, #72]	; (8010f00 <__ulp+0x54>)
 8010eb6:	4019      	ands	r1, r3
 8010eb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010ebc:	2900      	cmp	r1, #0
 8010ebe:	dd05      	ble.n	8010ecc <__ulp+0x20>
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	ec43 2b10 	vmov	d0, r2, r3
 8010ec8:	b002      	add	sp, #8
 8010eca:	4770      	bx	lr
 8010ecc:	4249      	negs	r1, r1
 8010ece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010ed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010ed6:	f04f 0200 	mov.w	r2, #0
 8010eda:	f04f 0300 	mov.w	r3, #0
 8010ede:	da04      	bge.n	8010eea <__ulp+0x3e>
 8010ee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010ee4:	fa41 f300 	asr.w	r3, r1, r0
 8010ee8:	e7ec      	b.n	8010ec4 <__ulp+0x18>
 8010eea:	f1a0 0114 	sub.w	r1, r0, #20
 8010eee:	291e      	cmp	r1, #30
 8010ef0:	bfda      	itte	le
 8010ef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010ef6:	fa20 f101 	lsrle.w	r1, r0, r1
 8010efa:	2101      	movgt	r1, #1
 8010efc:	460a      	mov	r2, r1
 8010efe:	e7e1      	b.n	8010ec4 <__ulp+0x18>
 8010f00:	7ff00000 	.word	0x7ff00000

08010f04 <__b2d>:
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	6905      	ldr	r5, [r0, #16]
 8010f08:	f100 0714 	add.w	r7, r0, #20
 8010f0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010f10:	1f2e      	subs	r6, r5, #4
 8010f12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010f16:	4620      	mov	r0, r4
 8010f18:	f7ff fd48 	bl	80109ac <__hi0bits>
 8010f1c:	f1c0 0320 	rsb	r3, r0, #32
 8010f20:	280a      	cmp	r0, #10
 8010f22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010fa0 <__b2d+0x9c>
 8010f26:	600b      	str	r3, [r1, #0]
 8010f28:	dc14      	bgt.n	8010f54 <__b2d+0x50>
 8010f2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8010f2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010f32:	42b7      	cmp	r7, r6
 8010f34:	ea41 030c 	orr.w	r3, r1, ip
 8010f38:	bf34      	ite	cc
 8010f3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f3e:	2100      	movcs	r1, #0
 8010f40:	3015      	adds	r0, #21
 8010f42:	fa04 f000 	lsl.w	r0, r4, r0
 8010f46:	fa21 f10e 	lsr.w	r1, r1, lr
 8010f4a:	ea40 0201 	orr.w	r2, r0, r1
 8010f4e:	ec43 2b10 	vmov	d0, r2, r3
 8010f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f54:	42b7      	cmp	r7, r6
 8010f56:	bf3a      	itte	cc
 8010f58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010f60:	2100      	movcs	r1, #0
 8010f62:	380b      	subs	r0, #11
 8010f64:	d017      	beq.n	8010f96 <__b2d+0x92>
 8010f66:	f1c0 0c20 	rsb	ip, r0, #32
 8010f6a:	fa04 f500 	lsl.w	r5, r4, r0
 8010f6e:	42be      	cmp	r6, r7
 8010f70:	fa21 f40c 	lsr.w	r4, r1, ip
 8010f74:	ea45 0504 	orr.w	r5, r5, r4
 8010f78:	bf8c      	ite	hi
 8010f7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010f7e:	2400      	movls	r4, #0
 8010f80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010f84:	fa01 f000 	lsl.w	r0, r1, r0
 8010f88:	fa24 f40c 	lsr.w	r4, r4, ip
 8010f8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010f90:	ea40 0204 	orr.w	r2, r0, r4
 8010f94:	e7db      	b.n	8010f4e <__b2d+0x4a>
 8010f96:	ea44 030c 	orr.w	r3, r4, ip
 8010f9a:	460a      	mov	r2, r1
 8010f9c:	e7d7      	b.n	8010f4e <__b2d+0x4a>
 8010f9e:	bf00      	nop
 8010fa0:	3ff00000 	.word	0x3ff00000

08010fa4 <__d2b>:
 8010fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fa8:	4689      	mov	r9, r1
 8010faa:	2101      	movs	r1, #1
 8010fac:	ec57 6b10 	vmov	r6, r7, d0
 8010fb0:	4690      	mov	r8, r2
 8010fb2:	f7ff fc09 	bl	80107c8 <_Balloc>
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	b930      	cbnz	r0, 8010fc8 <__d2b+0x24>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	4b25      	ldr	r3, [pc, #148]	; (8011054 <__d2b+0xb0>)
 8010fbe:	4826      	ldr	r0, [pc, #152]	; (8011058 <__d2b+0xb4>)
 8010fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8010fc4:	f000 f9a2 	bl	801130c <__assert_func>
 8010fc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010fd0:	bb35      	cbnz	r5, 8011020 <__d2b+0x7c>
 8010fd2:	2e00      	cmp	r6, #0
 8010fd4:	9301      	str	r3, [sp, #4]
 8010fd6:	d028      	beq.n	801102a <__d2b+0x86>
 8010fd8:	4668      	mov	r0, sp
 8010fda:	9600      	str	r6, [sp, #0]
 8010fdc:	f7ff fd06 	bl	80109ec <__lo0bits>
 8010fe0:	9900      	ldr	r1, [sp, #0]
 8010fe2:	b300      	cbz	r0, 8011026 <__d2b+0x82>
 8010fe4:	9a01      	ldr	r2, [sp, #4]
 8010fe6:	f1c0 0320 	rsb	r3, r0, #32
 8010fea:	fa02 f303 	lsl.w	r3, r2, r3
 8010fee:	430b      	orrs	r3, r1
 8010ff0:	40c2      	lsrs	r2, r0
 8010ff2:	6163      	str	r3, [r4, #20]
 8010ff4:	9201      	str	r2, [sp, #4]
 8010ff6:	9b01      	ldr	r3, [sp, #4]
 8010ff8:	61a3      	str	r3, [r4, #24]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bf14      	ite	ne
 8010ffe:	2202      	movne	r2, #2
 8011000:	2201      	moveq	r2, #1
 8011002:	6122      	str	r2, [r4, #16]
 8011004:	b1d5      	cbz	r5, 801103c <__d2b+0x98>
 8011006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801100a:	4405      	add	r5, r0
 801100c:	f8c9 5000 	str.w	r5, [r9]
 8011010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011014:	f8c8 0000 	str.w	r0, [r8]
 8011018:	4620      	mov	r0, r4
 801101a:	b003      	add	sp, #12
 801101c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011024:	e7d5      	b.n	8010fd2 <__d2b+0x2e>
 8011026:	6161      	str	r1, [r4, #20]
 8011028:	e7e5      	b.n	8010ff6 <__d2b+0x52>
 801102a:	a801      	add	r0, sp, #4
 801102c:	f7ff fcde 	bl	80109ec <__lo0bits>
 8011030:	9b01      	ldr	r3, [sp, #4]
 8011032:	6163      	str	r3, [r4, #20]
 8011034:	2201      	movs	r2, #1
 8011036:	6122      	str	r2, [r4, #16]
 8011038:	3020      	adds	r0, #32
 801103a:	e7e3      	b.n	8011004 <__d2b+0x60>
 801103c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011044:	f8c9 0000 	str.w	r0, [r9]
 8011048:	6918      	ldr	r0, [r3, #16]
 801104a:	f7ff fcaf 	bl	80109ac <__hi0bits>
 801104e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011052:	e7df      	b.n	8011014 <__d2b+0x70>
 8011054:	08012c20 	.word	0x08012c20
 8011058:	08012cc3 	.word	0x08012cc3

0801105c <__ratio>:
 801105c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011060:	4688      	mov	r8, r1
 8011062:	4669      	mov	r1, sp
 8011064:	4681      	mov	r9, r0
 8011066:	f7ff ff4d 	bl	8010f04 <__b2d>
 801106a:	a901      	add	r1, sp, #4
 801106c:	4640      	mov	r0, r8
 801106e:	ec55 4b10 	vmov	r4, r5, d0
 8011072:	ee10 aa10 	vmov	sl, s0
 8011076:	f7ff ff45 	bl	8010f04 <__b2d>
 801107a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801107e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011082:	1a59      	subs	r1, r3, r1
 8011084:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801108e:	ec57 6b10 	vmov	r6, r7, d0
 8011092:	2b00      	cmp	r3, #0
 8011094:	bfd6      	itet	le
 8011096:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801109a:	462a      	movgt	r2, r5
 801109c:	463a      	movle	r2, r7
 801109e:	46ab      	mov	fp, r5
 80110a0:	bfd6      	itet	le
 80110a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80110a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80110aa:	ee00 3a90 	vmovle	s1, r3
 80110ae:	ec4b ab17 	vmov	d7, sl, fp
 80110b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80110b6:	b003      	add	sp, #12
 80110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110bc <__copybits>:
 80110bc:	3901      	subs	r1, #1
 80110be:	b570      	push	{r4, r5, r6, lr}
 80110c0:	1149      	asrs	r1, r1, #5
 80110c2:	6914      	ldr	r4, [r2, #16]
 80110c4:	3101      	adds	r1, #1
 80110c6:	f102 0314 	add.w	r3, r2, #20
 80110ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80110d2:	1f05      	subs	r5, r0, #4
 80110d4:	42a3      	cmp	r3, r4
 80110d6:	d30c      	bcc.n	80110f2 <__copybits+0x36>
 80110d8:	1aa3      	subs	r3, r4, r2
 80110da:	3b11      	subs	r3, #17
 80110dc:	f023 0303 	bic.w	r3, r3, #3
 80110e0:	3211      	adds	r2, #17
 80110e2:	42a2      	cmp	r2, r4
 80110e4:	bf88      	it	hi
 80110e6:	2300      	movhi	r3, #0
 80110e8:	4418      	add	r0, r3
 80110ea:	2300      	movs	r3, #0
 80110ec:	4288      	cmp	r0, r1
 80110ee:	d305      	bcc.n	80110fc <__copybits+0x40>
 80110f0:	bd70      	pop	{r4, r5, r6, pc}
 80110f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80110f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80110fa:	e7eb      	b.n	80110d4 <__copybits+0x18>
 80110fc:	f840 3b04 	str.w	r3, [r0], #4
 8011100:	e7f4      	b.n	80110ec <__copybits+0x30>

08011102 <__any_on>:
 8011102:	f100 0214 	add.w	r2, r0, #20
 8011106:	6900      	ldr	r0, [r0, #16]
 8011108:	114b      	asrs	r3, r1, #5
 801110a:	4298      	cmp	r0, r3
 801110c:	b510      	push	{r4, lr}
 801110e:	db11      	blt.n	8011134 <__any_on+0x32>
 8011110:	dd0a      	ble.n	8011128 <__any_on+0x26>
 8011112:	f011 011f 	ands.w	r1, r1, #31
 8011116:	d007      	beq.n	8011128 <__any_on+0x26>
 8011118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801111c:	fa24 f001 	lsr.w	r0, r4, r1
 8011120:	fa00 f101 	lsl.w	r1, r0, r1
 8011124:	428c      	cmp	r4, r1
 8011126:	d10b      	bne.n	8011140 <__any_on+0x3e>
 8011128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801112c:	4293      	cmp	r3, r2
 801112e:	d803      	bhi.n	8011138 <__any_on+0x36>
 8011130:	2000      	movs	r0, #0
 8011132:	bd10      	pop	{r4, pc}
 8011134:	4603      	mov	r3, r0
 8011136:	e7f7      	b.n	8011128 <__any_on+0x26>
 8011138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801113c:	2900      	cmp	r1, #0
 801113e:	d0f5      	beq.n	801112c <__any_on+0x2a>
 8011140:	2001      	movs	r0, #1
 8011142:	e7f6      	b.n	8011132 <__any_on+0x30>

08011144 <_calloc_r>:
 8011144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011146:	fba1 2402 	umull	r2, r4, r1, r2
 801114a:	b94c      	cbnz	r4, 8011160 <_calloc_r+0x1c>
 801114c:	4611      	mov	r1, r2
 801114e:	9201      	str	r2, [sp, #4]
 8011150:	f000 f82e 	bl	80111b0 <_malloc_r>
 8011154:	9a01      	ldr	r2, [sp, #4]
 8011156:	4605      	mov	r5, r0
 8011158:	b930      	cbnz	r0, 8011168 <_calloc_r+0x24>
 801115a:	4628      	mov	r0, r5
 801115c:	b003      	add	sp, #12
 801115e:	bd30      	pop	{r4, r5, pc}
 8011160:	220c      	movs	r2, #12
 8011162:	6002      	str	r2, [r0, #0]
 8011164:	2500      	movs	r5, #0
 8011166:	e7f8      	b.n	801115a <_calloc_r+0x16>
 8011168:	4621      	mov	r1, r4
 801116a:	f7fe f9c7 	bl	800f4fc <memset>
 801116e:	e7f4      	b.n	801115a <_calloc_r+0x16>

08011170 <sbrk_aligned>:
 8011170:	b570      	push	{r4, r5, r6, lr}
 8011172:	4e0e      	ldr	r6, [pc, #56]	; (80111ac <sbrk_aligned+0x3c>)
 8011174:	460c      	mov	r4, r1
 8011176:	6831      	ldr	r1, [r6, #0]
 8011178:	4605      	mov	r5, r0
 801117a:	b911      	cbnz	r1, 8011182 <sbrk_aligned+0x12>
 801117c:	f000 f894 	bl	80112a8 <_sbrk_r>
 8011180:	6030      	str	r0, [r6, #0]
 8011182:	4621      	mov	r1, r4
 8011184:	4628      	mov	r0, r5
 8011186:	f000 f88f 	bl	80112a8 <_sbrk_r>
 801118a:	1c43      	adds	r3, r0, #1
 801118c:	d00a      	beq.n	80111a4 <sbrk_aligned+0x34>
 801118e:	1cc4      	adds	r4, r0, #3
 8011190:	f024 0403 	bic.w	r4, r4, #3
 8011194:	42a0      	cmp	r0, r4
 8011196:	d007      	beq.n	80111a8 <sbrk_aligned+0x38>
 8011198:	1a21      	subs	r1, r4, r0
 801119a:	4628      	mov	r0, r5
 801119c:	f000 f884 	bl	80112a8 <_sbrk_r>
 80111a0:	3001      	adds	r0, #1
 80111a2:	d101      	bne.n	80111a8 <sbrk_aligned+0x38>
 80111a4:	f04f 34ff 	mov.w	r4, #4294967295
 80111a8:	4620      	mov	r0, r4
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	24000d2c 	.word	0x24000d2c

080111b0 <_malloc_r>:
 80111b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b4:	1ccd      	adds	r5, r1, #3
 80111b6:	f025 0503 	bic.w	r5, r5, #3
 80111ba:	3508      	adds	r5, #8
 80111bc:	2d0c      	cmp	r5, #12
 80111be:	bf38      	it	cc
 80111c0:	250c      	movcc	r5, #12
 80111c2:	2d00      	cmp	r5, #0
 80111c4:	4607      	mov	r7, r0
 80111c6:	db01      	blt.n	80111cc <_malloc_r+0x1c>
 80111c8:	42a9      	cmp	r1, r5
 80111ca:	d905      	bls.n	80111d8 <_malloc_r+0x28>
 80111cc:	230c      	movs	r3, #12
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	2600      	movs	r6, #0
 80111d2:	4630      	mov	r0, r6
 80111d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d8:	4e2e      	ldr	r6, [pc, #184]	; (8011294 <_malloc_r+0xe4>)
 80111da:	f000 f8cf 	bl	801137c <__malloc_lock>
 80111de:	6833      	ldr	r3, [r6, #0]
 80111e0:	461c      	mov	r4, r3
 80111e2:	bb34      	cbnz	r4, 8011232 <_malloc_r+0x82>
 80111e4:	4629      	mov	r1, r5
 80111e6:	4638      	mov	r0, r7
 80111e8:	f7ff ffc2 	bl	8011170 <sbrk_aligned>
 80111ec:	1c43      	adds	r3, r0, #1
 80111ee:	4604      	mov	r4, r0
 80111f0:	d14d      	bne.n	801128e <_malloc_r+0xde>
 80111f2:	6834      	ldr	r4, [r6, #0]
 80111f4:	4626      	mov	r6, r4
 80111f6:	2e00      	cmp	r6, #0
 80111f8:	d140      	bne.n	801127c <_malloc_r+0xcc>
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	4631      	mov	r1, r6
 80111fe:	4638      	mov	r0, r7
 8011200:	eb04 0803 	add.w	r8, r4, r3
 8011204:	f000 f850 	bl	80112a8 <_sbrk_r>
 8011208:	4580      	cmp	r8, r0
 801120a:	d13a      	bne.n	8011282 <_malloc_r+0xd2>
 801120c:	6821      	ldr	r1, [r4, #0]
 801120e:	3503      	adds	r5, #3
 8011210:	1a6d      	subs	r5, r5, r1
 8011212:	f025 0503 	bic.w	r5, r5, #3
 8011216:	3508      	adds	r5, #8
 8011218:	2d0c      	cmp	r5, #12
 801121a:	bf38      	it	cc
 801121c:	250c      	movcc	r5, #12
 801121e:	4629      	mov	r1, r5
 8011220:	4638      	mov	r0, r7
 8011222:	f7ff ffa5 	bl	8011170 <sbrk_aligned>
 8011226:	3001      	adds	r0, #1
 8011228:	d02b      	beq.n	8011282 <_malloc_r+0xd2>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	442b      	add	r3, r5
 801122e:	6023      	str	r3, [r4, #0]
 8011230:	e00e      	b.n	8011250 <_malloc_r+0xa0>
 8011232:	6822      	ldr	r2, [r4, #0]
 8011234:	1b52      	subs	r2, r2, r5
 8011236:	d41e      	bmi.n	8011276 <_malloc_r+0xc6>
 8011238:	2a0b      	cmp	r2, #11
 801123a:	d916      	bls.n	801126a <_malloc_r+0xba>
 801123c:	1961      	adds	r1, r4, r5
 801123e:	42a3      	cmp	r3, r4
 8011240:	6025      	str	r5, [r4, #0]
 8011242:	bf18      	it	ne
 8011244:	6059      	strne	r1, [r3, #4]
 8011246:	6863      	ldr	r3, [r4, #4]
 8011248:	bf08      	it	eq
 801124a:	6031      	streq	r1, [r6, #0]
 801124c:	5162      	str	r2, [r4, r5]
 801124e:	604b      	str	r3, [r1, #4]
 8011250:	4638      	mov	r0, r7
 8011252:	f104 060b 	add.w	r6, r4, #11
 8011256:	f000 f897 	bl	8011388 <__malloc_unlock>
 801125a:	f026 0607 	bic.w	r6, r6, #7
 801125e:	1d23      	adds	r3, r4, #4
 8011260:	1af2      	subs	r2, r6, r3
 8011262:	d0b6      	beq.n	80111d2 <_malloc_r+0x22>
 8011264:	1b9b      	subs	r3, r3, r6
 8011266:	50a3      	str	r3, [r4, r2]
 8011268:	e7b3      	b.n	80111d2 <_malloc_r+0x22>
 801126a:	6862      	ldr	r2, [r4, #4]
 801126c:	42a3      	cmp	r3, r4
 801126e:	bf0c      	ite	eq
 8011270:	6032      	streq	r2, [r6, #0]
 8011272:	605a      	strne	r2, [r3, #4]
 8011274:	e7ec      	b.n	8011250 <_malloc_r+0xa0>
 8011276:	4623      	mov	r3, r4
 8011278:	6864      	ldr	r4, [r4, #4]
 801127a:	e7b2      	b.n	80111e2 <_malloc_r+0x32>
 801127c:	4634      	mov	r4, r6
 801127e:	6876      	ldr	r6, [r6, #4]
 8011280:	e7b9      	b.n	80111f6 <_malloc_r+0x46>
 8011282:	230c      	movs	r3, #12
 8011284:	603b      	str	r3, [r7, #0]
 8011286:	4638      	mov	r0, r7
 8011288:	f000 f87e 	bl	8011388 <__malloc_unlock>
 801128c:	e7a1      	b.n	80111d2 <_malloc_r+0x22>
 801128e:	6025      	str	r5, [r4, #0]
 8011290:	e7de      	b.n	8011250 <_malloc_r+0xa0>
 8011292:	bf00      	nop
 8011294:	24000d28 	.word	0x24000d28

08011298 <nan>:
 8011298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112a0 <nan+0x8>
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	00000000 	.word	0x00000000
 80112a4:	7ff80000 	.word	0x7ff80000

080112a8 <_sbrk_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	4d06      	ldr	r5, [pc, #24]	; (80112c4 <_sbrk_r+0x1c>)
 80112ac:	2300      	movs	r3, #0
 80112ae:	4604      	mov	r4, r0
 80112b0:	4608      	mov	r0, r1
 80112b2:	602b      	str	r3, [r5, #0]
 80112b4:	f7f1 feb2 	bl	800301c <_sbrk>
 80112b8:	1c43      	adds	r3, r0, #1
 80112ba:	d102      	bne.n	80112c2 <_sbrk_r+0x1a>
 80112bc:	682b      	ldr	r3, [r5, #0]
 80112be:	b103      	cbz	r3, 80112c2 <_sbrk_r+0x1a>
 80112c0:	6023      	str	r3, [r4, #0]
 80112c2:	bd38      	pop	{r3, r4, r5, pc}
 80112c4:	24000d30 	.word	0x24000d30

080112c8 <strncmp>:
 80112c8:	b510      	push	{r4, lr}
 80112ca:	b17a      	cbz	r2, 80112ec <strncmp+0x24>
 80112cc:	4603      	mov	r3, r0
 80112ce:	3901      	subs	r1, #1
 80112d0:	1884      	adds	r4, r0, r2
 80112d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80112d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80112da:	4290      	cmp	r0, r2
 80112dc:	d101      	bne.n	80112e2 <strncmp+0x1a>
 80112de:	42a3      	cmp	r3, r4
 80112e0:	d101      	bne.n	80112e6 <strncmp+0x1e>
 80112e2:	1a80      	subs	r0, r0, r2
 80112e4:	bd10      	pop	{r4, pc}
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d1f3      	bne.n	80112d2 <strncmp+0xa>
 80112ea:	e7fa      	b.n	80112e2 <strncmp+0x1a>
 80112ec:	4610      	mov	r0, r2
 80112ee:	e7f9      	b.n	80112e4 <strncmp+0x1c>

080112f0 <__ascii_wctomb>:
 80112f0:	b149      	cbz	r1, 8011306 <__ascii_wctomb+0x16>
 80112f2:	2aff      	cmp	r2, #255	; 0xff
 80112f4:	bf85      	ittet	hi
 80112f6:	238a      	movhi	r3, #138	; 0x8a
 80112f8:	6003      	strhi	r3, [r0, #0]
 80112fa:	700a      	strbls	r2, [r1, #0]
 80112fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8011300:	bf98      	it	ls
 8011302:	2001      	movls	r0, #1
 8011304:	4770      	bx	lr
 8011306:	4608      	mov	r0, r1
 8011308:	4770      	bx	lr
	...

0801130c <__assert_func>:
 801130c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801130e:	4614      	mov	r4, r2
 8011310:	461a      	mov	r2, r3
 8011312:	4b09      	ldr	r3, [pc, #36]	; (8011338 <__assert_func+0x2c>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4605      	mov	r5, r0
 8011318:	68d8      	ldr	r0, [r3, #12]
 801131a:	b14c      	cbz	r4, 8011330 <__assert_func+0x24>
 801131c:	4b07      	ldr	r3, [pc, #28]	; (801133c <__assert_func+0x30>)
 801131e:	9100      	str	r1, [sp, #0]
 8011320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011324:	4906      	ldr	r1, [pc, #24]	; (8011340 <__assert_func+0x34>)
 8011326:	462b      	mov	r3, r5
 8011328:	f000 f80e 	bl	8011348 <fiprintf>
 801132c:	f000 fc2c 	bl	8011b88 <abort>
 8011330:	4b04      	ldr	r3, [pc, #16]	; (8011344 <__assert_func+0x38>)
 8011332:	461c      	mov	r4, r3
 8011334:	e7f3      	b.n	801131e <__assert_func+0x12>
 8011336:	bf00      	nop
 8011338:	24000110 	.word	0x24000110
 801133c:	08012e1c 	.word	0x08012e1c
 8011340:	08012e29 	.word	0x08012e29
 8011344:	08012e57 	.word	0x08012e57

08011348 <fiprintf>:
 8011348:	b40e      	push	{r1, r2, r3}
 801134a:	b503      	push	{r0, r1, lr}
 801134c:	4601      	mov	r1, r0
 801134e:	ab03      	add	r3, sp, #12
 8011350:	4805      	ldr	r0, [pc, #20]	; (8011368 <fiprintf+0x20>)
 8011352:	f853 2b04 	ldr.w	r2, [r3], #4
 8011356:	6800      	ldr	r0, [r0, #0]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	f000 f891 	bl	8011480 <_vfiprintf_r>
 801135e:	b002      	add	sp, #8
 8011360:	f85d eb04 	ldr.w	lr, [sp], #4
 8011364:	b003      	add	sp, #12
 8011366:	4770      	bx	lr
 8011368:	24000110 	.word	0x24000110

0801136c <malloc>:
 801136c:	4b02      	ldr	r3, [pc, #8]	; (8011378 <malloc+0xc>)
 801136e:	4601      	mov	r1, r0
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	f7ff bf1d 	b.w	80111b0 <_malloc_r>
 8011376:	bf00      	nop
 8011378:	24000110 	.word	0x24000110

0801137c <__malloc_lock>:
 801137c:	4801      	ldr	r0, [pc, #4]	; (8011384 <__malloc_lock+0x8>)
 801137e:	f000 bdc3 	b.w	8011f08 <__retarget_lock_acquire_recursive>
 8011382:	bf00      	nop
 8011384:	24000d34 	.word	0x24000d34

08011388 <__malloc_unlock>:
 8011388:	4801      	ldr	r0, [pc, #4]	; (8011390 <__malloc_unlock+0x8>)
 801138a:	f000 bdbe 	b.w	8011f0a <__retarget_lock_release_recursive>
 801138e:	bf00      	nop
 8011390:	24000d34 	.word	0x24000d34

08011394 <_free_r>:
 8011394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011396:	2900      	cmp	r1, #0
 8011398:	d044      	beq.n	8011424 <_free_r+0x90>
 801139a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801139e:	9001      	str	r0, [sp, #4]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f1a1 0404 	sub.w	r4, r1, #4
 80113a6:	bfb8      	it	lt
 80113a8:	18e4      	addlt	r4, r4, r3
 80113aa:	f7ff ffe7 	bl	801137c <__malloc_lock>
 80113ae:	4a1e      	ldr	r2, [pc, #120]	; (8011428 <_free_r+0x94>)
 80113b0:	9801      	ldr	r0, [sp, #4]
 80113b2:	6813      	ldr	r3, [r2, #0]
 80113b4:	b933      	cbnz	r3, 80113c4 <_free_r+0x30>
 80113b6:	6063      	str	r3, [r4, #4]
 80113b8:	6014      	str	r4, [r2, #0]
 80113ba:	b003      	add	sp, #12
 80113bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113c0:	f7ff bfe2 	b.w	8011388 <__malloc_unlock>
 80113c4:	42a3      	cmp	r3, r4
 80113c6:	d908      	bls.n	80113da <_free_r+0x46>
 80113c8:	6825      	ldr	r5, [r4, #0]
 80113ca:	1961      	adds	r1, r4, r5
 80113cc:	428b      	cmp	r3, r1
 80113ce:	bf01      	itttt	eq
 80113d0:	6819      	ldreq	r1, [r3, #0]
 80113d2:	685b      	ldreq	r3, [r3, #4]
 80113d4:	1949      	addeq	r1, r1, r5
 80113d6:	6021      	streq	r1, [r4, #0]
 80113d8:	e7ed      	b.n	80113b6 <_free_r+0x22>
 80113da:	461a      	mov	r2, r3
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	b10b      	cbz	r3, 80113e4 <_free_r+0x50>
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	d9fa      	bls.n	80113da <_free_r+0x46>
 80113e4:	6811      	ldr	r1, [r2, #0]
 80113e6:	1855      	adds	r5, r2, r1
 80113e8:	42a5      	cmp	r5, r4
 80113ea:	d10b      	bne.n	8011404 <_free_r+0x70>
 80113ec:	6824      	ldr	r4, [r4, #0]
 80113ee:	4421      	add	r1, r4
 80113f0:	1854      	adds	r4, r2, r1
 80113f2:	42a3      	cmp	r3, r4
 80113f4:	6011      	str	r1, [r2, #0]
 80113f6:	d1e0      	bne.n	80113ba <_free_r+0x26>
 80113f8:	681c      	ldr	r4, [r3, #0]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	6053      	str	r3, [r2, #4]
 80113fe:	4421      	add	r1, r4
 8011400:	6011      	str	r1, [r2, #0]
 8011402:	e7da      	b.n	80113ba <_free_r+0x26>
 8011404:	d902      	bls.n	801140c <_free_r+0x78>
 8011406:	230c      	movs	r3, #12
 8011408:	6003      	str	r3, [r0, #0]
 801140a:	e7d6      	b.n	80113ba <_free_r+0x26>
 801140c:	6825      	ldr	r5, [r4, #0]
 801140e:	1961      	adds	r1, r4, r5
 8011410:	428b      	cmp	r3, r1
 8011412:	bf04      	itt	eq
 8011414:	6819      	ldreq	r1, [r3, #0]
 8011416:	685b      	ldreq	r3, [r3, #4]
 8011418:	6063      	str	r3, [r4, #4]
 801141a:	bf04      	itt	eq
 801141c:	1949      	addeq	r1, r1, r5
 801141e:	6021      	streq	r1, [r4, #0]
 8011420:	6054      	str	r4, [r2, #4]
 8011422:	e7ca      	b.n	80113ba <_free_r+0x26>
 8011424:	b003      	add	sp, #12
 8011426:	bd30      	pop	{r4, r5, pc}
 8011428:	24000d28 	.word	0x24000d28

0801142c <__sfputc_r>:
 801142c:	6893      	ldr	r3, [r2, #8]
 801142e:	3b01      	subs	r3, #1
 8011430:	2b00      	cmp	r3, #0
 8011432:	b410      	push	{r4}
 8011434:	6093      	str	r3, [r2, #8]
 8011436:	da08      	bge.n	801144a <__sfputc_r+0x1e>
 8011438:	6994      	ldr	r4, [r2, #24]
 801143a:	42a3      	cmp	r3, r4
 801143c:	db01      	blt.n	8011442 <__sfputc_r+0x16>
 801143e:	290a      	cmp	r1, #10
 8011440:	d103      	bne.n	801144a <__sfputc_r+0x1e>
 8011442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011446:	f000 badf 	b.w	8011a08 <__swbuf_r>
 801144a:	6813      	ldr	r3, [r2, #0]
 801144c:	1c58      	adds	r0, r3, #1
 801144e:	6010      	str	r0, [r2, #0]
 8011450:	7019      	strb	r1, [r3, #0]
 8011452:	4608      	mov	r0, r1
 8011454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011458:	4770      	bx	lr

0801145a <__sfputs_r>:
 801145a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801145c:	4606      	mov	r6, r0
 801145e:	460f      	mov	r7, r1
 8011460:	4614      	mov	r4, r2
 8011462:	18d5      	adds	r5, r2, r3
 8011464:	42ac      	cmp	r4, r5
 8011466:	d101      	bne.n	801146c <__sfputs_r+0x12>
 8011468:	2000      	movs	r0, #0
 801146a:	e007      	b.n	801147c <__sfputs_r+0x22>
 801146c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011470:	463a      	mov	r2, r7
 8011472:	4630      	mov	r0, r6
 8011474:	f7ff ffda 	bl	801142c <__sfputc_r>
 8011478:	1c43      	adds	r3, r0, #1
 801147a:	d1f3      	bne.n	8011464 <__sfputs_r+0xa>
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011480 <_vfiprintf_r>:
 8011480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011484:	460d      	mov	r5, r1
 8011486:	b09d      	sub	sp, #116	; 0x74
 8011488:	4614      	mov	r4, r2
 801148a:	4698      	mov	r8, r3
 801148c:	4606      	mov	r6, r0
 801148e:	b118      	cbz	r0, 8011498 <_vfiprintf_r+0x18>
 8011490:	6983      	ldr	r3, [r0, #24]
 8011492:	b90b      	cbnz	r3, 8011498 <_vfiprintf_r+0x18>
 8011494:	f000 fc9a 	bl	8011dcc <__sinit>
 8011498:	4b89      	ldr	r3, [pc, #548]	; (80116c0 <_vfiprintf_r+0x240>)
 801149a:	429d      	cmp	r5, r3
 801149c:	d11b      	bne.n	80114d6 <_vfiprintf_r+0x56>
 801149e:	6875      	ldr	r5, [r6, #4]
 80114a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114a2:	07d9      	lsls	r1, r3, #31
 80114a4:	d405      	bmi.n	80114b2 <_vfiprintf_r+0x32>
 80114a6:	89ab      	ldrh	r3, [r5, #12]
 80114a8:	059a      	lsls	r2, r3, #22
 80114aa:	d402      	bmi.n	80114b2 <_vfiprintf_r+0x32>
 80114ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114ae:	f000 fd2b 	bl	8011f08 <__retarget_lock_acquire_recursive>
 80114b2:	89ab      	ldrh	r3, [r5, #12]
 80114b4:	071b      	lsls	r3, r3, #28
 80114b6:	d501      	bpl.n	80114bc <_vfiprintf_r+0x3c>
 80114b8:	692b      	ldr	r3, [r5, #16]
 80114ba:	b9eb      	cbnz	r3, 80114f8 <_vfiprintf_r+0x78>
 80114bc:	4629      	mov	r1, r5
 80114be:	4630      	mov	r0, r6
 80114c0:	f000 faf4 	bl	8011aac <__swsetup_r>
 80114c4:	b1c0      	cbz	r0, 80114f8 <_vfiprintf_r+0x78>
 80114c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114c8:	07dc      	lsls	r4, r3, #31
 80114ca:	d50e      	bpl.n	80114ea <_vfiprintf_r+0x6a>
 80114cc:	f04f 30ff 	mov.w	r0, #4294967295
 80114d0:	b01d      	add	sp, #116	; 0x74
 80114d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d6:	4b7b      	ldr	r3, [pc, #492]	; (80116c4 <_vfiprintf_r+0x244>)
 80114d8:	429d      	cmp	r5, r3
 80114da:	d101      	bne.n	80114e0 <_vfiprintf_r+0x60>
 80114dc:	68b5      	ldr	r5, [r6, #8]
 80114de:	e7df      	b.n	80114a0 <_vfiprintf_r+0x20>
 80114e0:	4b79      	ldr	r3, [pc, #484]	; (80116c8 <_vfiprintf_r+0x248>)
 80114e2:	429d      	cmp	r5, r3
 80114e4:	bf08      	it	eq
 80114e6:	68f5      	ldreq	r5, [r6, #12]
 80114e8:	e7da      	b.n	80114a0 <_vfiprintf_r+0x20>
 80114ea:	89ab      	ldrh	r3, [r5, #12]
 80114ec:	0598      	lsls	r0, r3, #22
 80114ee:	d4ed      	bmi.n	80114cc <_vfiprintf_r+0x4c>
 80114f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114f2:	f000 fd0a 	bl	8011f0a <__retarget_lock_release_recursive>
 80114f6:	e7e9      	b.n	80114cc <_vfiprintf_r+0x4c>
 80114f8:	2300      	movs	r3, #0
 80114fa:	9309      	str	r3, [sp, #36]	; 0x24
 80114fc:	2320      	movs	r3, #32
 80114fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011502:	f8cd 800c 	str.w	r8, [sp, #12]
 8011506:	2330      	movs	r3, #48	; 0x30
 8011508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116cc <_vfiprintf_r+0x24c>
 801150c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011510:	f04f 0901 	mov.w	r9, #1
 8011514:	4623      	mov	r3, r4
 8011516:	469a      	mov	sl, r3
 8011518:	f813 2b01 	ldrb.w	r2, [r3], #1
 801151c:	b10a      	cbz	r2, 8011522 <_vfiprintf_r+0xa2>
 801151e:	2a25      	cmp	r2, #37	; 0x25
 8011520:	d1f9      	bne.n	8011516 <_vfiprintf_r+0x96>
 8011522:	ebba 0b04 	subs.w	fp, sl, r4
 8011526:	d00b      	beq.n	8011540 <_vfiprintf_r+0xc0>
 8011528:	465b      	mov	r3, fp
 801152a:	4622      	mov	r2, r4
 801152c:	4629      	mov	r1, r5
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ff93 	bl	801145a <__sfputs_r>
 8011534:	3001      	adds	r0, #1
 8011536:	f000 80aa 	beq.w	801168e <_vfiprintf_r+0x20e>
 801153a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801153c:	445a      	add	r2, fp
 801153e:	9209      	str	r2, [sp, #36]	; 0x24
 8011540:	f89a 3000 	ldrb.w	r3, [sl]
 8011544:	2b00      	cmp	r3, #0
 8011546:	f000 80a2 	beq.w	801168e <_vfiprintf_r+0x20e>
 801154a:	2300      	movs	r3, #0
 801154c:	f04f 32ff 	mov.w	r2, #4294967295
 8011550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011554:	f10a 0a01 	add.w	sl, sl, #1
 8011558:	9304      	str	r3, [sp, #16]
 801155a:	9307      	str	r3, [sp, #28]
 801155c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011560:	931a      	str	r3, [sp, #104]	; 0x68
 8011562:	4654      	mov	r4, sl
 8011564:	2205      	movs	r2, #5
 8011566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801156a:	4858      	ldr	r0, [pc, #352]	; (80116cc <_vfiprintf_r+0x24c>)
 801156c:	f7ee fec0 	bl	80002f0 <memchr>
 8011570:	9a04      	ldr	r2, [sp, #16]
 8011572:	b9d8      	cbnz	r0, 80115ac <_vfiprintf_r+0x12c>
 8011574:	06d1      	lsls	r1, r2, #27
 8011576:	bf44      	itt	mi
 8011578:	2320      	movmi	r3, #32
 801157a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801157e:	0713      	lsls	r3, r2, #28
 8011580:	bf44      	itt	mi
 8011582:	232b      	movmi	r3, #43	; 0x2b
 8011584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011588:	f89a 3000 	ldrb.w	r3, [sl]
 801158c:	2b2a      	cmp	r3, #42	; 0x2a
 801158e:	d015      	beq.n	80115bc <_vfiprintf_r+0x13c>
 8011590:	9a07      	ldr	r2, [sp, #28]
 8011592:	4654      	mov	r4, sl
 8011594:	2000      	movs	r0, #0
 8011596:	f04f 0c0a 	mov.w	ip, #10
 801159a:	4621      	mov	r1, r4
 801159c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115a0:	3b30      	subs	r3, #48	; 0x30
 80115a2:	2b09      	cmp	r3, #9
 80115a4:	d94e      	bls.n	8011644 <_vfiprintf_r+0x1c4>
 80115a6:	b1b0      	cbz	r0, 80115d6 <_vfiprintf_r+0x156>
 80115a8:	9207      	str	r2, [sp, #28]
 80115aa:	e014      	b.n	80115d6 <_vfiprintf_r+0x156>
 80115ac:	eba0 0308 	sub.w	r3, r0, r8
 80115b0:	fa09 f303 	lsl.w	r3, r9, r3
 80115b4:	4313      	orrs	r3, r2
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	46a2      	mov	sl, r4
 80115ba:	e7d2      	b.n	8011562 <_vfiprintf_r+0xe2>
 80115bc:	9b03      	ldr	r3, [sp, #12]
 80115be:	1d19      	adds	r1, r3, #4
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	9103      	str	r1, [sp, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	bfbb      	ittet	lt
 80115c8:	425b      	neglt	r3, r3
 80115ca:	f042 0202 	orrlt.w	r2, r2, #2
 80115ce:	9307      	strge	r3, [sp, #28]
 80115d0:	9307      	strlt	r3, [sp, #28]
 80115d2:	bfb8      	it	lt
 80115d4:	9204      	strlt	r2, [sp, #16]
 80115d6:	7823      	ldrb	r3, [r4, #0]
 80115d8:	2b2e      	cmp	r3, #46	; 0x2e
 80115da:	d10c      	bne.n	80115f6 <_vfiprintf_r+0x176>
 80115dc:	7863      	ldrb	r3, [r4, #1]
 80115de:	2b2a      	cmp	r3, #42	; 0x2a
 80115e0:	d135      	bne.n	801164e <_vfiprintf_r+0x1ce>
 80115e2:	9b03      	ldr	r3, [sp, #12]
 80115e4:	1d1a      	adds	r2, r3, #4
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	9203      	str	r2, [sp, #12]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	bfb8      	it	lt
 80115ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80115f2:	3402      	adds	r4, #2
 80115f4:	9305      	str	r3, [sp, #20]
 80115f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116dc <_vfiprintf_r+0x25c>
 80115fa:	7821      	ldrb	r1, [r4, #0]
 80115fc:	2203      	movs	r2, #3
 80115fe:	4650      	mov	r0, sl
 8011600:	f7ee fe76 	bl	80002f0 <memchr>
 8011604:	b140      	cbz	r0, 8011618 <_vfiprintf_r+0x198>
 8011606:	2340      	movs	r3, #64	; 0x40
 8011608:	eba0 000a 	sub.w	r0, r0, sl
 801160c:	fa03 f000 	lsl.w	r0, r3, r0
 8011610:	9b04      	ldr	r3, [sp, #16]
 8011612:	4303      	orrs	r3, r0
 8011614:	3401      	adds	r4, #1
 8011616:	9304      	str	r3, [sp, #16]
 8011618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161c:	482c      	ldr	r0, [pc, #176]	; (80116d0 <_vfiprintf_r+0x250>)
 801161e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011622:	2206      	movs	r2, #6
 8011624:	f7ee fe64 	bl	80002f0 <memchr>
 8011628:	2800      	cmp	r0, #0
 801162a:	d03f      	beq.n	80116ac <_vfiprintf_r+0x22c>
 801162c:	4b29      	ldr	r3, [pc, #164]	; (80116d4 <_vfiprintf_r+0x254>)
 801162e:	bb1b      	cbnz	r3, 8011678 <_vfiprintf_r+0x1f8>
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	3307      	adds	r3, #7
 8011634:	f023 0307 	bic.w	r3, r3, #7
 8011638:	3308      	adds	r3, #8
 801163a:	9303      	str	r3, [sp, #12]
 801163c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801163e:	443b      	add	r3, r7
 8011640:	9309      	str	r3, [sp, #36]	; 0x24
 8011642:	e767      	b.n	8011514 <_vfiprintf_r+0x94>
 8011644:	fb0c 3202 	mla	r2, ip, r2, r3
 8011648:	460c      	mov	r4, r1
 801164a:	2001      	movs	r0, #1
 801164c:	e7a5      	b.n	801159a <_vfiprintf_r+0x11a>
 801164e:	2300      	movs	r3, #0
 8011650:	3401      	adds	r4, #1
 8011652:	9305      	str	r3, [sp, #20]
 8011654:	4619      	mov	r1, r3
 8011656:	f04f 0c0a 	mov.w	ip, #10
 801165a:	4620      	mov	r0, r4
 801165c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011660:	3a30      	subs	r2, #48	; 0x30
 8011662:	2a09      	cmp	r2, #9
 8011664:	d903      	bls.n	801166e <_vfiprintf_r+0x1ee>
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0c5      	beq.n	80115f6 <_vfiprintf_r+0x176>
 801166a:	9105      	str	r1, [sp, #20]
 801166c:	e7c3      	b.n	80115f6 <_vfiprintf_r+0x176>
 801166e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011672:	4604      	mov	r4, r0
 8011674:	2301      	movs	r3, #1
 8011676:	e7f0      	b.n	801165a <_vfiprintf_r+0x1da>
 8011678:	ab03      	add	r3, sp, #12
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	462a      	mov	r2, r5
 801167e:	4b16      	ldr	r3, [pc, #88]	; (80116d8 <_vfiprintf_r+0x258>)
 8011680:	a904      	add	r1, sp, #16
 8011682:	4630      	mov	r0, r6
 8011684:	f3af 8000 	nop.w
 8011688:	4607      	mov	r7, r0
 801168a:	1c78      	adds	r0, r7, #1
 801168c:	d1d6      	bne.n	801163c <_vfiprintf_r+0x1bc>
 801168e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011690:	07d9      	lsls	r1, r3, #31
 8011692:	d405      	bmi.n	80116a0 <_vfiprintf_r+0x220>
 8011694:	89ab      	ldrh	r3, [r5, #12]
 8011696:	059a      	lsls	r2, r3, #22
 8011698:	d402      	bmi.n	80116a0 <_vfiprintf_r+0x220>
 801169a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801169c:	f000 fc35 	bl	8011f0a <__retarget_lock_release_recursive>
 80116a0:	89ab      	ldrh	r3, [r5, #12]
 80116a2:	065b      	lsls	r3, r3, #25
 80116a4:	f53f af12 	bmi.w	80114cc <_vfiprintf_r+0x4c>
 80116a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116aa:	e711      	b.n	80114d0 <_vfiprintf_r+0x50>
 80116ac:	ab03      	add	r3, sp, #12
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	462a      	mov	r2, r5
 80116b2:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <_vfiprintf_r+0x258>)
 80116b4:	a904      	add	r1, sp, #16
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 f880 	bl	80117bc <_printf_i>
 80116bc:	e7e4      	b.n	8011688 <_vfiprintf_r+0x208>
 80116be:	bf00      	nop
 80116c0:	08012fac 	.word	0x08012fac
 80116c4:	08012fcc 	.word	0x08012fcc
 80116c8:	08012f8c 	.word	0x08012f8c
 80116cc:	08012f59 	.word	0x08012f59
 80116d0:	08012f63 	.word	0x08012f63
 80116d4:	00000000 	.word	0x00000000
 80116d8:	0801145b 	.word	0x0801145b
 80116dc:	08012f5f 	.word	0x08012f5f

080116e0 <_printf_common>:
 80116e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e4:	4616      	mov	r6, r2
 80116e6:	4699      	mov	r9, r3
 80116e8:	688a      	ldr	r2, [r1, #8]
 80116ea:	690b      	ldr	r3, [r1, #16]
 80116ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116f0:	4293      	cmp	r3, r2
 80116f2:	bfb8      	it	lt
 80116f4:	4613      	movlt	r3, r2
 80116f6:	6033      	str	r3, [r6, #0]
 80116f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116fc:	4607      	mov	r7, r0
 80116fe:	460c      	mov	r4, r1
 8011700:	b10a      	cbz	r2, 8011706 <_printf_common+0x26>
 8011702:	3301      	adds	r3, #1
 8011704:	6033      	str	r3, [r6, #0]
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	0699      	lsls	r1, r3, #26
 801170a:	bf42      	ittt	mi
 801170c:	6833      	ldrmi	r3, [r6, #0]
 801170e:	3302      	addmi	r3, #2
 8011710:	6033      	strmi	r3, [r6, #0]
 8011712:	6825      	ldr	r5, [r4, #0]
 8011714:	f015 0506 	ands.w	r5, r5, #6
 8011718:	d106      	bne.n	8011728 <_printf_common+0x48>
 801171a:	f104 0a19 	add.w	sl, r4, #25
 801171e:	68e3      	ldr	r3, [r4, #12]
 8011720:	6832      	ldr	r2, [r6, #0]
 8011722:	1a9b      	subs	r3, r3, r2
 8011724:	42ab      	cmp	r3, r5
 8011726:	dc26      	bgt.n	8011776 <_printf_common+0x96>
 8011728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801172c:	1e13      	subs	r3, r2, #0
 801172e:	6822      	ldr	r2, [r4, #0]
 8011730:	bf18      	it	ne
 8011732:	2301      	movne	r3, #1
 8011734:	0692      	lsls	r2, r2, #26
 8011736:	d42b      	bmi.n	8011790 <_printf_common+0xb0>
 8011738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801173c:	4649      	mov	r1, r9
 801173e:	4638      	mov	r0, r7
 8011740:	47c0      	blx	r8
 8011742:	3001      	adds	r0, #1
 8011744:	d01e      	beq.n	8011784 <_printf_common+0xa4>
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	68e5      	ldr	r5, [r4, #12]
 801174a:	6832      	ldr	r2, [r6, #0]
 801174c:	f003 0306 	and.w	r3, r3, #6
 8011750:	2b04      	cmp	r3, #4
 8011752:	bf08      	it	eq
 8011754:	1aad      	subeq	r5, r5, r2
 8011756:	68a3      	ldr	r3, [r4, #8]
 8011758:	6922      	ldr	r2, [r4, #16]
 801175a:	bf0c      	ite	eq
 801175c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011760:	2500      	movne	r5, #0
 8011762:	4293      	cmp	r3, r2
 8011764:	bfc4      	itt	gt
 8011766:	1a9b      	subgt	r3, r3, r2
 8011768:	18ed      	addgt	r5, r5, r3
 801176a:	2600      	movs	r6, #0
 801176c:	341a      	adds	r4, #26
 801176e:	42b5      	cmp	r5, r6
 8011770:	d11a      	bne.n	80117a8 <_printf_common+0xc8>
 8011772:	2000      	movs	r0, #0
 8011774:	e008      	b.n	8011788 <_printf_common+0xa8>
 8011776:	2301      	movs	r3, #1
 8011778:	4652      	mov	r2, sl
 801177a:	4649      	mov	r1, r9
 801177c:	4638      	mov	r0, r7
 801177e:	47c0      	blx	r8
 8011780:	3001      	adds	r0, #1
 8011782:	d103      	bne.n	801178c <_printf_common+0xac>
 8011784:	f04f 30ff 	mov.w	r0, #4294967295
 8011788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178c:	3501      	adds	r5, #1
 801178e:	e7c6      	b.n	801171e <_printf_common+0x3e>
 8011790:	18e1      	adds	r1, r4, r3
 8011792:	1c5a      	adds	r2, r3, #1
 8011794:	2030      	movs	r0, #48	; 0x30
 8011796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801179a:	4422      	add	r2, r4
 801179c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117a4:	3302      	adds	r3, #2
 80117a6:	e7c7      	b.n	8011738 <_printf_common+0x58>
 80117a8:	2301      	movs	r3, #1
 80117aa:	4622      	mov	r2, r4
 80117ac:	4649      	mov	r1, r9
 80117ae:	4638      	mov	r0, r7
 80117b0:	47c0      	blx	r8
 80117b2:	3001      	adds	r0, #1
 80117b4:	d0e6      	beq.n	8011784 <_printf_common+0xa4>
 80117b6:	3601      	adds	r6, #1
 80117b8:	e7d9      	b.n	801176e <_printf_common+0x8e>
	...

080117bc <_printf_i>:
 80117bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c0:	7e0f      	ldrb	r7, [r1, #24]
 80117c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117c4:	2f78      	cmp	r7, #120	; 0x78
 80117c6:	4691      	mov	r9, r2
 80117c8:	4680      	mov	r8, r0
 80117ca:	460c      	mov	r4, r1
 80117cc:	469a      	mov	sl, r3
 80117ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117d2:	d807      	bhi.n	80117e4 <_printf_i+0x28>
 80117d4:	2f62      	cmp	r7, #98	; 0x62
 80117d6:	d80a      	bhi.n	80117ee <_printf_i+0x32>
 80117d8:	2f00      	cmp	r7, #0
 80117da:	f000 80d8 	beq.w	801198e <_printf_i+0x1d2>
 80117de:	2f58      	cmp	r7, #88	; 0x58
 80117e0:	f000 80a3 	beq.w	801192a <_printf_i+0x16e>
 80117e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117ec:	e03a      	b.n	8011864 <_printf_i+0xa8>
 80117ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117f2:	2b15      	cmp	r3, #21
 80117f4:	d8f6      	bhi.n	80117e4 <_printf_i+0x28>
 80117f6:	a101      	add	r1, pc, #4	; (adr r1, 80117fc <_printf_i+0x40>)
 80117f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117fc:	08011855 	.word	0x08011855
 8011800:	08011869 	.word	0x08011869
 8011804:	080117e5 	.word	0x080117e5
 8011808:	080117e5 	.word	0x080117e5
 801180c:	080117e5 	.word	0x080117e5
 8011810:	080117e5 	.word	0x080117e5
 8011814:	08011869 	.word	0x08011869
 8011818:	080117e5 	.word	0x080117e5
 801181c:	080117e5 	.word	0x080117e5
 8011820:	080117e5 	.word	0x080117e5
 8011824:	080117e5 	.word	0x080117e5
 8011828:	08011975 	.word	0x08011975
 801182c:	08011899 	.word	0x08011899
 8011830:	08011957 	.word	0x08011957
 8011834:	080117e5 	.word	0x080117e5
 8011838:	080117e5 	.word	0x080117e5
 801183c:	08011997 	.word	0x08011997
 8011840:	080117e5 	.word	0x080117e5
 8011844:	08011899 	.word	0x08011899
 8011848:	080117e5 	.word	0x080117e5
 801184c:	080117e5 	.word	0x080117e5
 8011850:	0801195f 	.word	0x0801195f
 8011854:	682b      	ldr	r3, [r5, #0]
 8011856:	1d1a      	adds	r2, r3, #4
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	602a      	str	r2, [r5, #0]
 801185c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011864:	2301      	movs	r3, #1
 8011866:	e0a3      	b.n	80119b0 <_printf_i+0x1f4>
 8011868:	6820      	ldr	r0, [r4, #0]
 801186a:	6829      	ldr	r1, [r5, #0]
 801186c:	0606      	lsls	r6, r0, #24
 801186e:	f101 0304 	add.w	r3, r1, #4
 8011872:	d50a      	bpl.n	801188a <_printf_i+0xce>
 8011874:	680e      	ldr	r6, [r1, #0]
 8011876:	602b      	str	r3, [r5, #0]
 8011878:	2e00      	cmp	r6, #0
 801187a:	da03      	bge.n	8011884 <_printf_i+0xc8>
 801187c:	232d      	movs	r3, #45	; 0x2d
 801187e:	4276      	negs	r6, r6
 8011880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011884:	485e      	ldr	r0, [pc, #376]	; (8011a00 <_printf_i+0x244>)
 8011886:	230a      	movs	r3, #10
 8011888:	e019      	b.n	80118be <_printf_i+0x102>
 801188a:	680e      	ldr	r6, [r1, #0]
 801188c:	602b      	str	r3, [r5, #0]
 801188e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011892:	bf18      	it	ne
 8011894:	b236      	sxthne	r6, r6
 8011896:	e7ef      	b.n	8011878 <_printf_i+0xbc>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	6820      	ldr	r0, [r4, #0]
 801189c:	1d19      	adds	r1, r3, #4
 801189e:	6029      	str	r1, [r5, #0]
 80118a0:	0601      	lsls	r1, r0, #24
 80118a2:	d501      	bpl.n	80118a8 <_printf_i+0xec>
 80118a4:	681e      	ldr	r6, [r3, #0]
 80118a6:	e002      	b.n	80118ae <_printf_i+0xf2>
 80118a8:	0646      	lsls	r6, r0, #25
 80118aa:	d5fb      	bpl.n	80118a4 <_printf_i+0xe8>
 80118ac:	881e      	ldrh	r6, [r3, #0]
 80118ae:	4854      	ldr	r0, [pc, #336]	; (8011a00 <_printf_i+0x244>)
 80118b0:	2f6f      	cmp	r7, #111	; 0x6f
 80118b2:	bf0c      	ite	eq
 80118b4:	2308      	moveq	r3, #8
 80118b6:	230a      	movne	r3, #10
 80118b8:	2100      	movs	r1, #0
 80118ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118be:	6865      	ldr	r5, [r4, #4]
 80118c0:	60a5      	str	r5, [r4, #8]
 80118c2:	2d00      	cmp	r5, #0
 80118c4:	bfa2      	ittt	ge
 80118c6:	6821      	ldrge	r1, [r4, #0]
 80118c8:	f021 0104 	bicge.w	r1, r1, #4
 80118cc:	6021      	strge	r1, [r4, #0]
 80118ce:	b90e      	cbnz	r6, 80118d4 <_printf_i+0x118>
 80118d0:	2d00      	cmp	r5, #0
 80118d2:	d04d      	beq.n	8011970 <_printf_i+0x1b4>
 80118d4:	4615      	mov	r5, r2
 80118d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80118da:	fb03 6711 	mls	r7, r3, r1, r6
 80118de:	5dc7      	ldrb	r7, [r0, r7]
 80118e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118e4:	4637      	mov	r7, r6
 80118e6:	42bb      	cmp	r3, r7
 80118e8:	460e      	mov	r6, r1
 80118ea:	d9f4      	bls.n	80118d6 <_printf_i+0x11a>
 80118ec:	2b08      	cmp	r3, #8
 80118ee:	d10b      	bne.n	8011908 <_printf_i+0x14c>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	07de      	lsls	r6, r3, #31
 80118f4:	d508      	bpl.n	8011908 <_printf_i+0x14c>
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	6861      	ldr	r1, [r4, #4]
 80118fa:	4299      	cmp	r1, r3
 80118fc:	bfde      	ittt	le
 80118fe:	2330      	movle	r3, #48	; 0x30
 8011900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011908:	1b52      	subs	r2, r2, r5
 801190a:	6122      	str	r2, [r4, #16]
 801190c:	f8cd a000 	str.w	sl, [sp]
 8011910:	464b      	mov	r3, r9
 8011912:	aa03      	add	r2, sp, #12
 8011914:	4621      	mov	r1, r4
 8011916:	4640      	mov	r0, r8
 8011918:	f7ff fee2 	bl	80116e0 <_printf_common>
 801191c:	3001      	adds	r0, #1
 801191e:	d14c      	bne.n	80119ba <_printf_i+0x1fe>
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	b004      	add	sp, #16
 8011926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801192a:	4835      	ldr	r0, [pc, #212]	; (8011a00 <_printf_i+0x244>)
 801192c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011930:	6829      	ldr	r1, [r5, #0]
 8011932:	6823      	ldr	r3, [r4, #0]
 8011934:	f851 6b04 	ldr.w	r6, [r1], #4
 8011938:	6029      	str	r1, [r5, #0]
 801193a:	061d      	lsls	r5, r3, #24
 801193c:	d514      	bpl.n	8011968 <_printf_i+0x1ac>
 801193e:	07df      	lsls	r7, r3, #31
 8011940:	bf44      	itt	mi
 8011942:	f043 0320 	orrmi.w	r3, r3, #32
 8011946:	6023      	strmi	r3, [r4, #0]
 8011948:	b91e      	cbnz	r6, 8011952 <_printf_i+0x196>
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	f023 0320 	bic.w	r3, r3, #32
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	2310      	movs	r3, #16
 8011954:	e7b0      	b.n	80118b8 <_printf_i+0xfc>
 8011956:	6823      	ldr	r3, [r4, #0]
 8011958:	f043 0320 	orr.w	r3, r3, #32
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	2378      	movs	r3, #120	; 0x78
 8011960:	4828      	ldr	r0, [pc, #160]	; (8011a04 <_printf_i+0x248>)
 8011962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011966:	e7e3      	b.n	8011930 <_printf_i+0x174>
 8011968:	0659      	lsls	r1, r3, #25
 801196a:	bf48      	it	mi
 801196c:	b2b6      	uxthmi	r6, r6
 801196e:	e7e6      	b.n	801193e <_printf_i+0x182>
 8011970:	4615      	mov	r5, r2
 8011972:	e7bb      	b.n	80118ec <_printf_i+0x130>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	6826      	ldr	r6, [r4, #0]
 8011978:	6961      	ldr	r1, [r4, #20]
 801197a:	1d18      	adds	r0, r3, #4
 801197c:	6028      	str	r0, [r5, #0]
 801197e:	0635      	lsls	r5, r6, #24
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	d501      	bpl.n	8011988 <_printf_i+0x1cc>
 8011984:	6019      	str	r1, [r3, #0]
 8011986:	e002      	b.n	801198e <_printf_i+0x1d2>
 8011988:	0670      	lsls	r0, r6, #25
 801198a:	d5fb      	bpl.n	8011984 <_printf_i+0x1c8>
 801198c:	8019      	strh	r1, [r3, #0]
 801198e:	2300      	movs	r3, #0
 8011990:	6123      	str	r3, [r4, #16]
 8011992:	4615      	mov	r5, r2
 8011994:	e7ba      	b.n	801190c <_printf_i+0x150>
 8011996:	682b      	ldr	r3, [r5, #0]
 8011998:	1d1a      	adds	r2, r3, #4
 801199a:	602a      	str	r2, [r5, #0]
 801199c:	681d      	ldr	r5, [r3, #0]
 801199e:	6862      	ldr	r2, [r4, #4]
 80119a0:	2100      	movs	r1, #0
 80119a2:	4628      	mov	r0, r5
 80119a4:	f7ee fca4 	bl	80002f0 <memchr>
 80119a8:	b108      	cbz	r0, 80119ae <_printf_i+0x1f2>
 80119aa:	1b40      	subs	r0, r0, r5
 80119ac:	6060      	str	r0, [r4, #4]
 80119ae:	6863      	ldr	r3, [r4, #4]
 80119b0:	6123      	str	r3, [r4, #16]
 80119b2:	2300      	movs	r3, #0
 80119b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119b8:	e7a8      	b.n	801190c <_printf_i+0x150>
 80119ba:	6923      	ldr	r3, [r4, #16]
 80119bc:	462a      	mov	r2, r5
 80119be:	4649      	mov	r1, r9
 80119c0:	4640      	mov	r0, r8
 80119c2:	47d0      	blx	sl
 80119c4:	3001      	adds	r0, #1
 80119c6:	d0ab      	beq.n	8011920 <_printf_i+0x164>
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	079b      	lsls	r3, r3, #30
 80119cc:	d413      	bmi.n	80119f6 <_printf_i+0x23a>
 80119ce:	68e0      	ldr	r0, [r4, #12]
 80119d0:	9b03      	ldr	r3, [sp, #12]
 80119d2:	4298      	cmp	r0, r3
 80119d4:	bfb8      	it	lt
 80119d6:	4618      	movlt	r0, r3
 80119d8:	e7a4      	b.n	8011924 <_printf_i+0x168>
 80119da:	2301      	movs	r3, #1
 80119dc:	4632      	mov	r2, r6
 80119de:	4649      	mov	r1, r9
 80119e0:	4640      	mov	r0, r8
 80119e2:	47d0      	blx	sl
 80119e4:	3001      	adds	r0, #1
 80119e6:	d09b      	beq.n	8011920 <_printf_i+0x164>
 80119e8:	3501      	adds	r5, #1
 80119ea:	68e3      	ldr	r3, [r4, #12]
 80119ec:	9903      	ldr	r1, [sp, #12]
 80119ee:	1a5b      	subs	r3, r3, r1
 80119f0:	42ab      	cmp	r3, r5
 80119f2:	dcf2      	bgt.n	80119da <_printf_i+0x21e>
 80119f4:	e7eb      	b.n	80119ce <_printf_i+0x212>
 80119f6:	2500      	movs	r5, #0
 80119f8:	f104 0619 	add.w	r6, r4, #25
 80119fc:	e7f5      	b.n	80119ea <_printf_i+0x22e>
 80119fe:	bf00      	nop
 8011a00:	08012f6a 	.word	0x08012f6a
 8011a04:	08012f7b 	.word	0x08012f7b

08011a08 <__swbuf_r>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	4614      	mov	r4, r2
 8011a0e:	4605      	mov	r5, r0
 8011a10:	b118      	cbz	r0, 8011a1a <__swbuf_r+0x12>
 8011a12:	6983      	ldr	r3, [r0, #24]
 8011a14:	b90b      	cbnz	r3, 8011a1a <__swbuf_r+0x12>
 8011a16:	f000 f9d9 	bl	8011dcc <__sinit>
 8011a1a:	4b21      	ldr	r3, [pc, #132]	; (8011aa0 <__swbuf_r+0x98>)
 8011a1c:	429c      	cmp	r4, r3
 8011a1e:	d12b      	bne.n	8011a78 <__swbuf_r+0x70>
 8011a20:	686c      	ldr	r4, [r5, #4]
 8011a22:	69a3      	ldr	r3, [r4, #24]
 8011a24:	60a3      	str	r3, [r4, #8]
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	071a      	lsls	r2, r3, #28
 8011a2a:	d52f      	bpl.n	8011a8c <__swbuf_r+0x84>
 8011a2c:	6923      	ldr	r3, [r4, #16]
 8011a2e:	b36b      	cbz	r3, 8011a8c <__swbuf_r+0x84>
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	6820      	ldr	r0, [r4, #0]
 8011a34:	1ac0      	subs	r0, r0, r3
 8011a36:	6963      	ldr	r3, [r4, #20]
 8011a38:	b2f6      	uxtb	r6, r6
 8011a3a:	4283      	cmp	r3, r0
 8011a3c:	4637      	mov	r7, r6
 8011a3e:	dc04      	bgt.n	8011a4a <__swbuf_r+0x42>
 8011a40:	4621      	mov	r1, r4
 8011a42:	4628      	mov	r0, r5
 8011a44:	f000 f92e 	bl	8011ca4 <_fflush_r>
 8011a48:	bb30      	cbnz	r0, 8011a98 <__swbuf_r+0x90>
 8011a4a:	68a3      	ldr	r3, [r4, #8]
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	60a3      	str	r3, [r4, #8]
 8011a50:	6823      	ldr	r3, [r4, #0]
 8011a52:	1c5a      	adds	r2, r3, #1
 8011a54:	6022      	str	r2, [r4, #0]
 8011a56:	701e      	strb	r6, [r3, #0]
 8011a58:	6963      	ldr	r3, [r4, #20]
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	4283      	cmp	r3, r0
 8011a5e:	d004      	beq.n	8011a6a <__swbuf_r+0x62>
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	07db      	lsls	r3, r3, #31
 8011a64:	d506      	bpl.n	8011a74 <__swbuf_r+0x6c>
 8011a66:	2e0a      	cmp	r6, #10
 8011a68:	d104      	bne.n	8011a74 <__swbuf_r+0x6c>
 8011a6a:	4621      	mov	r1, r4
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f000 f919 	bl	8011ca4 <_fflush_r>
 8011a72:	b988      	cbnz	r0, 8011a98 <__swbuf_r+0x90>
 8011a74:	4638      	mov	r0, r7
 8011a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a78:	4b0a      	ldr	r3, [pc, #40]	; (8011aa4 <__swbuf_r+0x9c>)
 8011a7a:	429c      	cmp	r4, r3
 8011a7c:	d101      	bne.n	8011a82 <__swbuf_r+0x7a>
 8011a7e:	68ac      	ldr	r4, [r5, #8]
 8011a80:	e7cf      	b.n	8011a22 <__swbuf_r+0x1a>
 8011a82:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <__swbuf_r+0xa0>)
 8011a84:	429c      	cmp	r4, r3
 8011a86:	bf08      	it	eq
 8011a88:	68ec      	ldreq	r4, [r5, #12]
 8011a8a:	e7ca      	b.n	8011a22 <__swbuf_r+0x1a>
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	4628      	mov	r0, r5
 8011a90:	f000 f80c 	bl	8011aac <__swsetup_r>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d0cb      	beq.n	8011a30 <__swbuf_r+0x28>
 8011a98:	f04f 37ff 	mov.w	r7, #4294967295
 8011a9c:	e7ea      	b.n	8011a74 <__swbuf_r+0x6c>
 8011a9e:	bf00      	nop
 8011aa0:	08012fac 	.word	0x08012fac
 8011aa4:	08012fcc 	.word	0x08012fcc
 8011aa8:	08012f8c 	.word	0x08012f8c

08011aac <__swsetup_r>:
 8011aac:	4b32      	ldr	r3, [pc, #200]	; (8011b78 <__swsetup_r+0xcc>)
 8011aae:	b570      	push	{r4, r5, r6, lr}
 8011ab0:	681d      	ldr	r5, [r3, #0]
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	b125      	cbz	r5, 8011ac2 <__swsetup_r+0x16>
 8011ab8:	69ab      	ldr	r3, [r5, #24]
 8011aba:	b913      	cbnz	r3, 8011ac2 <__swsetup_r+0x16>
 8011abc:	4628      	mov	r0, r5
 8011abe:	f000 f985 	bl	8011dcc <__sinit>
 8011ac2:	4b2e      	ldr	r3, [pc, #184]	; (8011b7c <__swsetup_r+0xd0>)
 8011ac4:	429c      	cmp	r4, r3
 8011ac6:	d10f      	bne.n	8011ae8 <__swsetup_r+0x3c>
 8011ac8:	686c      	ldr	r4, [r5, #4]
 8011aca:	89a3      	ldrh	r3, [r4, #12]
 8011acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ad0:	0719      	lsls	r1, r3, #28
 8011ad2:	d42c      	bmi.n	8011b2e <__swsetup_r+0x82>
 8011ad4:	06dd      	lsls	r5, r3, #27
 8011ad6:	d411      	bmi.n	8011afc <__swsetup_r+0x50>
 8011ad8:	2309      	movs	r3, #9
 8011ada:	6033      	str	r3, [r6, #0]
 8011adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ae0:	81a3      	strh	r3, [r4, #12]
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae6:	e03e      	b.n	8011b66 <__swsetup_r+0xba>
 8011ae8:	4b25      	ldr	r3, [pc, #148]	; (8011b80 <__swsetup_r+0xd4>)
 8011aea:	429c      	cmp	r4, r3
 8011aec:	d101      	bne.n	8011af2 <__swsetup_r+0x46>
 8011aee:	68ac      	ldr	r4, [r5, #8]
 8011af0:	e7eb      	b.n	8011aca <__swsetup_r+0x1e>
 8011af2:	4b24      	ldr	r3, [pc, #144]	; (8011b84 <__swsetup_r+0xd8>)
 8011af4:	429c      	cmp	r4, r3
 8011af6:	bf08      	it	eq
 8011af8:	68ec      	ldreq	r4, [r5, #12]
 8011afa:	e7e6      	b.n	8011aca <__swsetup_r+0x1e>
 8011afc:	0758      	lsls	r0, r3, #29
 8011afe:	d512      	bpl.n	8011b26 <__swsetup_r+0x7a>
 8011b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b02:	b141      	cbz	r1, 8011b16 <__swsetup_r+0x6a>
 8011b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b08:	4299      	cmp	r1, r3
 8011b0a:	d002      	beq.n	8011b12 <__swsetup_r+0x66>
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7ff fc41 	bl	8011394 <_free_r>
 8011b12:	2300      	movs	r3, #0
 8011b14:	6363      	str	r3, [r4, #52]	; 0x34
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b1c:	81a3      	strh	r3, [r4, #12]
 8011b1e:	2300      	movs	r3, #0
 8011b20:	6063      	str	r3, [r4, #4]
 8011b22:	6923      	ldr	r3, [r4, #16]
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	f043 0308 	orr.w	r3, r3, #8
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	6923      	ldr	r3, [r4, #16]
 8011b30:	b94b      	cbnz	r3, 8011b46 <__swsetup_r+0x9a>
 8011b32:	89a3      	ldrh	r3, [r4, #12]
 8011b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b3c:	d003      	beq.n	8011b46 <__swsetup_r+0x9a>
 8011b3e:	4621      	mov	r1, r4
 8011b40:	4630      	mov	r0, r6
 8011b42:	f000 fa09 	bl	8011f58 <__smakebuf_r>
 8011b46:	89a0      	ldrh	r0, [r4, #12]
 8011b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b4c:	f010 0301 	ands.w	r3, r0, #1
 8011b50:	d00a      	beq.n	8011b68 <__swsetup_r+0xbc>
 8011b52:	2300      	movs	r3, #0
 8011b54:	60a3      	str	r3, [r4, #8]
 8011b56:	6963      	ldr	r3, [r4, #20]
 8011b58:	425b      	negs	r3, r3
 8011b5a:	61a3      	str	r3, [r4, #24]
 8011b5c:	6923      	ldr	r3, [r4, #16]
 8011b5e:	b943      	cbnz	r3, 8011b72 <__swsetup_r+0xc6>
 8011b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b64:	d1ba      	bne.n	8011adc <__swsetup_r+0x30>
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	0781      	lsls	r1, r0, #30
 8011b6a:	bf58      	it	pl
 8011b6c:	6963      	ldrpl	r3, [r4, #20]
 8011b6e:	60a3      	str	r3, [r4, #8]
 8011b70:	e7f4      	b.n	8011b5c <__swsetup_r+0xb0>
 8011b72:	2000      	movs	r0, #0
 8011b74:	e7f7      	b.n	8011b66 <__swsetup_r+0xba>
 8011b76:	bf00      	nop
 8011b78:	24000110 	.word	0x24000110
 8011b7c:	08012fac 	.word	0x08012fac
 8011b80:	08012fcc 	.word	0x08012fcc
 8011b84:	08012f8c 	.word	0x08012f8c

08011b88 <abort>:
 8011b88:	b508      	push	{r3, lr}
 8011b8a:	2006      	movs	r0, #6
 8011b8c:	f000 fa4c 	bl	8012028 <raise>
 8011b90:	2001      	movs	r0, #1
 8011b92:	f7f1 f9cb 	bl	8002f2c <_exit>
	...

08011b98 <__sflush_r>:
 8011b98:	898a      	ldrh	r2, [r1, #12]
 8011b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	0710      	lsls	r0, r2, #28
 8011ba2:	460c      	mov	r4, r1
 8011ba4:	d458      	bmi.n	8011c58 <__sflush_r+0xc0>
 8011ba6:	684b      	ldr	r3, [r1, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	dc05      	bgt.n	8011bb8 <__sflush_r+0x20>
 8011bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	dc02      	bgt.n	8011bb8 <__sflush_r+0x20>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bba:	2e00      	cmp	r6, #0
 8011bbc:	d0f9      	beq.n	8011bb2 <__sflush_r+0x1a>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bc4:	682f      	ldr	r7, [r5, #0]
 8011bc6:	602b      	str	r3, [r5, #0]
 8011bc8:	d032      	beq.n	8011c30 <__sflush_r+0x98>
 8011bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bcc:	89a3      	ldrh	r3, [r4, #12]
 8011bce:	075a      	lsls	r2, r3, #29
 8011bd0:	d505      	bpl.n	8011bde <__sflush_r+0x46>
 8011bd2:	6863      	ldr	r3, [r4, #4]
 8011bd4:	1ac0      	subs	r0, r0, r3
 8011bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bd8:	b10b      	cbz	r3, 8011bde <__sflush_r+0x46>
 8011bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bdc:	1ac0      	subs	r0, r0, r3
 8011bde:	2300      	movs	r3, #0
 8011be0:	4602      	mov	r2, r0
 8011be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011be4:	6a21      	ldr	r1, [r4, #32]
 8011be6:	4628      	mov	r0, r5
 8011be8:	47b0      	blx	r6
 8011bea:	1c43      	adds	r3, r0, #1
 8011bec:	89a3      	ldrh	r3, [r4, #12]
 8011bee:	d106      	bne.n	8011bfe <__sflush_r+0x66>
 8011bf0:	6829      	ldr	r1, [r5, #0]
 8011bf2:	291d      	cmp	r1, #29
 8011bf4:	d82c      	bhi.n	8011c50 <__sflush_r+0xb8>
 8011bf6:	4a2a      	ldr	r2, [pc, #168]	; (8011ca0 <__sflush_r+0x108>)
 8011bf8:	40ca      	lsrs	r2, r1
 8011bfa:	07d6      	lsls	r6, r2, #31
 8011bfc:	d528      	bpl.n	8011c50 <__sflush_r+0xb8>
 8011bfe:	2200      	movs	r2, #0
 8011c00:	6062      	str	r2, [r4, #4]
 8011c02:	04d9      	lsls	r1, r3, #19
 8011c04:	6922      	ldr	r2, [r4, #16]
 8011c06:	6022      	str	r2, [r4, #0]
 8011c08:	d504      	bpl.n	8011c14 <__sflush_r+0x7c>
 8011c0a:	1c42      	adds	r2, r0, #1
 8011c0c:	d101      	bne.n	8011c12 <__sflush_r+0x7a>
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	b903      	cbnz	r3, 8011c14 <__sflush_r+0x7c>
 8011c12:	6560      	str	r0, [r4, #84]	; 0x54
 8011c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c16:	602f      	str	r7, [r5, #0]
 8011c18:	2900      	cmp	r1, #0
 8011c1a:	d0ca      	beq.n	8011bb2 <__sflush_r+0x1a>
 8011c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c20:	4299      	cmp	r1, r3
 8011c22:	d002      	beq.n	8011c2a <__sflush_r+0x92>
 8011c24:	4628      	mov	r0, r5
 8011c26:	f7ff fbb5 	bl	8011394 <_free_r>
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8011c2e:	e7c1      	b.n	8011bb4 <__sflush_r+0x1c>
 8011c30:	6a21      	ldr	r1, [r4, #32]
 8011c32:	2301      	movs	r3, #1
 8011c34:	4628      	mov	r0, r5
 8011c36:	47b0      	blx	r6
 8011c38:	1c41      	adds	r1, r0, #1
 8011c3a:	d1c7      	bne.n	8011bcc <__sflush_r+0x34>
 8011c3c:	682b      	ldr	r3, [r5, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d0c4      	beq.n	8011bcc <__sflush_r+0x34>
 8011c42:	2b1d      	cmp	r3, #29
 8011c44:	d001      	beq.n	8011c4a <__sflush_r+0xb2>
 8011c46:	2b16      	cmp	r3, #22
 8011c48:	d101      	bne.n	8011c4e <__sflush_r+0xb6>
 8011c4a:	602f      	str	r7, [r5, #0]
 8011c4c:	e7b1      	b.n	8011bb2 <__sflush_r+0x1a>
 8011c4e:	89a3      	ldrh	r3, [r4, #12]
 8011c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c54:	81a3      	strh	r3, [r4, #12]
 8011c56:	e7ad      	b.n	8011bb4 <__sflush_r+0x1c>
 8011c58:	690f      	ldr	r7, [r1, #16]
 8011c5a:	2f00      	cmp	r7, #0
 8011c5c:	d0a9      	beq.n	8011bb2 <__sflush_r+0x1a>
 8011c5e:	0793      	lsls	r3, r2, #30
 8011c60:	680e      	ldr	r6, [r1, #0]
 8011c62:	bf08      	it	eq
 8011c64:	694b      	ldreq	r3, [r1, #20]
 8011c66:	600f      	str	r7, [r1, #0]
 8011c68:	bf18      	it	ne
 8011c6a:	2300      	movne	r3, #0
 8011c6c:	eba6 0807 	sub.w	r8, r6, r7
 8011c70:	608b      	str	r3, [r1, #8]
 8011c72:	f1b8 0f00 	cmp.w	r8, #0
 8011c76:	dd9c      	ble.n	8011bb2 <__sflush_r+0x1a>
 8011c78:	6a21      	ldr	r1, [r4, #32]
 8011c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c7c:	4643      	mov	r3, r8
 8011c7e:	463a      	mov	r2, r7
 8011c80:	4628      	mov	r0, r5
 8011c82:	47b0      	blx	r6
 8011c84:	2800      	cmp	r0, #0
 8011c86:	dc06      	bgt.n	8011c96 <__sflush_r+0xfe>
 8011c88:	89a3      	ldrh	r3, [r4, #12]
 8011c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c8e:	81a3      	strh	r3, [r4, #12]
 8011c90:	f04f 30ff 	mov.w	r0, #4294967295
 8011c94:	e78e      	b.n	8011bb4 <__sflush_r+0x1c>
 8011c96:	4407      	add	r7, r0
 8011c98:	eba8 0800 	sub.w	r8, r8, r0
 8011c9c:	e7e9      	b.n	8011c72 <__sflush_r+0xda>
 8011c9e:	bf00      	nop
 8011ca0:	20400001 	.word	0x20400001

08011ca4 <_fflush_r>:
 8011ca4:	b538      	push	{r3, r4, r5, lr}
 8011ca6:	690b      	ldr	r3, [r1, #16]
 8011ca8:	4605      	mov	r5, r0
 8011caa:	460c      	mov	r4, r1
 8011cac:	b913      	cbnz	r3, 8011cb4 <_fflush_r+0x10>
 8011cae:	2500      	movs	r5, #0
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	bd38      	pop	{r3, r4, r5, pc}
 8011cb4:	b118      	cbz	r0, 8011cbe <_fflush_r+0x1a>
 8011cb6:	6983      	ldr	r3, [r0, #24]
 8011cb8:	b90b      	cbnz	r3, 8011cbe <_fflush_r+0x1a>
 8011cba:	f000 f887 	bl	8011dcc <__sinit>
 8011cbe:	4b14      	ldr	r3, [pc, #80]	; (8011d10 <_fflush_r+0x6c>)
 8011cc0:	429c      	cmp	r4, r3
 8011cc2:	d11b      	bne.n	8011cfc <_fflush_r+0x58>
 8011cc4:	686c      	ldr	r4, [r5, #4]
 8011cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d0ef      	beq.n	8011cae <_fflush_r+0xa>
 8011cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cd0:	07d0      	lsls	r0, r2, #31
 8011cd2:	d404      	bmi.n	8011cde <_fflush_r+0x3a>
 8011cd4:	0599      	lsls	r1, r3, #22
 8011cd6:	d402      	bmi.n	8011cde <_fflush_r+0x3a>
 8011cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cda:	f000 f915 	bl	8011f08 <__retarget_lock_acquire_recursive>
 8011cde:	4628      	mov	r0, r5
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	f7ff ff59 	bl	8011b98 <__sflush_r>
 8011ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ce8:	07da      	lsls	r2, r3, #31
 8011cea:	4605      	mov	r5, r0
 8011cec:	d4e0      	bmi.n	8011cb0 <_fflush_r+0xc>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	059b      	lsls	r3, r3, #22
 8011cf2:	d4dd      	bmi.n	8011cb0 <_fflush_r+0xc>
 8011cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cf6:	f000 f908 	bl	8011f0a <__retarget_lock_release_recursive>
 8011cfa:	e7d9      	b.n	8011cb0 <_fflush_r+0xc>
 8011cfc:	4b05      	ldr	r3, [pc, #20]	; (8011d14 <_fflush_r+0x70>)
 8011cfe:	429c      	cmp	r4, r3
 8011d00:	d101      	bne.n	8011d06 <_fflush_r+0x62>
 8011d02:	68ac      	ldr	r4, [r5, #8]
 8011d04:	e7df      	b.n	8011cc6 <_fflush_r+0x22>
 8011d06:	4b04      	ldr	r3, [pc, #16]	; (8011d18 <_fflush_r+0x74>)
 8011d08:	429c      	cmp	r4, r3
 8011d0a:	bf08      	it	eq
 8011d0c:	68ec      	ldreq	r4, [r5, #12]
 8011d0e:	e7da      	b.n	8011cc6 <_fflush_r+0x22>
 8011d10:	08012fac 	.word	0x08012fac
 8011d14:	08012fcc 	.word	0x08012fcc
 8011d18:	08012f8c 	.word	0x08012f8c

08011d1c <std>:
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	b510      	push	{r4, lr}
 8011d20:	4604      	mov	r4, r0
 8011d22:	e9c0 3300 	strd	r3, r3, [r0]
 8011d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d2a:	6083      	str	r3, [r0, #8]
 8011d2c:	8181      	strh	r1, [r0, #12]
 8011d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d30:	81c2      	strh	r2, [r0, #14]
 8011d32:	6183      	str	r3, [r0, #24]
 8011d34:	4619      	mov	r1, r3
 8011d36:	2208      	movs	r2, #8
 8011d38:	305c      	adds	r0, #92	; 0x5c
 8011d3a:	f7fd fbdf 	bl	800f4fc <memset>
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <std+0x38>)
 8011d40:	6263      	str	r3, [r4, #36]	; 0x24
 8011d42:	4b05      	ldr	r3, [pc, #20]	; (8011d58 <std+0x3c>)
 8011d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d46:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <std+0x40>)
 8011d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d4a:	4b05      	ldr	r3, [pc, #20]	; (8011d60 <std+0x44>)
 8011d4c:	6224      	str	r4, [r4, #32]
 8011d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d50:	bd10      	pop	{r4, pc}
 8011d52:	bf00      	nop
 8011d54:	08012061 	.word	0x08012061
 8011d58:	08012083 	.word	0x08012083
 8011d5c:	080120bb 	.word	0x080120bb
 8011d60:	080120df 	.word	0x080120df

08011d64 <_cleanup_r>:
 8011d64:	4901      	ldr	r1, [pc, #4]	; (8011d6c <_cleanup_r+0x8>)
 8011d66:	f000 b8af 	b.w	8011ec8 <_fwalk_reent>
 8011d6a:	bf00      	nop
 8011d6c:	08011ca5 	.word	0x08011ca5

08011d70 <__sfmoreglue>:
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	2268      	movs	r2, #104	; 0x68
 8011d74:	1e4d      	subs	r5, r1, #1
 8011d76:	4355      	muls	r5, r2
 8011d78:	460e      	mov	r6, r1
 8011d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d7e:	f7ff fa17 	bl	80111b0 <_malloc_r>
 8011d82:	4604      	mov	r4, r0
 8011d84:	b140      	cbz	r0, 8011d98 <__sfmoreglue+0x28>
 8011d86:	2100      	movs	r1, #0
 8011d88:	e9c0 1600 	strd	r1, r6, [r0]
 8011d8c:	300c      	adds	r0, #12
 8011d8e:	60a0      	str	r0, [r4, #8]
 8011d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d94:	f7fd fbb2 	bl	800f4fc <memset>
 8011d98:	4620      	mov	r0, r4
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}

08011d9c <__sfp_lock_acquire>:
 8011d9c:	4801      	ldr	r0, [pc, #4]	; (8011da4 <__sfp_lock_acquire+0x8>)
 8011d9e:	f000 b8b3 	b.w	8011f08 <__retarget_lock_acquire_recursive>
 8011da2:	bf00      	nop
 8011da4:	24000d35 	.word	0x24000d35

08011da8 <__sfp_lock_release>:
 8011da8:	4801      	ldr	r0, [pc, #4]	; (8011db0 <__sfp_lock_release+0x8>)
 8011daa:	f000 b8ae 	b.w	8011f0a <__retarget_lock_release_recursive>
 8011dae:	bf00      	nop
 8011db0:	24000d35 	.word	0x24000d35

08011db4 <__sinit_lock_acquire>:
 8011db4:	4801      	ldr	r0, [pc, #4]	; (8011dbc <__sinit_lock_acquire+0x8>)
 8011db6:	f000 b8a7 	b.w	8011f08 <__retarget_lock_acquire_recursive>
 8011dba:	bf00      	nop
 8011dbc:	24000d36 	.word	0x24000d36

08011dc0 <__sinit_lock_release>:
 8011dc0:	4801      	ldr	r0, [pc, #4]	; (8011dc8 <__sinit_lock_release+0x8>)
 8011dc2:	f000 b8a2 	b.w	8011f0a <__retarget_lock_release_recursive>
 8011dc6:	bf00      	nop
 8011dc8:	24000d36 	.word	0x24000d36

08011dcc <__sinit>:
 8011dcc:	b510      	push	{r4, lr}
 8011dce:	4604      	mov	r4, r0
 8011dd0:	f7ff fff0 	bl	8011db4 <__sinit_lock_acquire>
 8011dd4:	69a3      	ldr	r3, [r4, #24]
 8011dd6:	b11b      	cbz	r3, 8011de0 <__sinit+0x14>
 8011dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ddc:	f7ff bff0 	b.w	8011dc0 <__sinit_lock_release>
 8011de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011de4:	6523      	str	r3, [r4, #80]	; 0x50
 8011de6:	4b13      	ldr	r3, [pc, #76]	; (8011e34 <__sinit+0x68>)
 8011de8:	4a13      	ldr	r2, [pc, #76]	; (8011e38 <__sinit+0x6c>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dee:	42a3      	cmp	r3, r4
 8011df0:	bf04      	itt	eq
 8011df2:	2301      	moveq	r3, #1
 8011df4:	61a3      	streq	r3, [r4, #24]
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 f820 	bl	8011e3c <__sfp>
 8011dfc:	6060      	str	r0, [r4, #4]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 f81c 	bl	8011e3c <__sfp>
 8011e04:	60a0      	str	r0, [r4, #8]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f000 f818 	bl	8011e3c <__sfp>
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	60e0      	str	r0, [r4, #12]
 8011e10:	2104      	movs	r1, #4
 8011e12:	6860      	ldr	r0, [r4, #4]
 8011e14:	f7ff ff82 	bl	8011d1c <std>
 8011e18:	68a0      	ldr	r0, [r4, #8]
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	2109      	movs	r1, #9
 8011e1e:	f7ff ff7d 	bl	8011d1c <std>
 8011e22:	68e0      	ldr	r0, [r4, #12]
 8011e24:	2202      	movs	r2, #2
 8011e26:	2112      	movs	r1, #18
 8011e28:	f7ff ff78 	bl	8011d1c <std>
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	61a3      	str	r3, [r4, #24]
 8011e30:	e7d2      	b.n	8011dd8 <__sinit+0xc>
 8011e32:	bf00      	nop
 8011e34:	08012bc0 	.word	0x08012bc0
 8011e38:	08011d65 	.word	0x08011d65

08011e3c <__sfp>:
 8011e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3e:	4607      	mov	r7, r0
 8011e40:	f7ff ffac 	bl	8011d9c <__sfp_lock_acquire>
 8011e44:	4b1e      	ldr	r3, [pc, #120]	; (8011ec0 <__sfp+0x84>)
 8011e46:	681e      	ldr	r6, [r3, #0]
 8011e48:	69b3      	ldr	r3, [r6, #24]
 8011e4a:	b913      	cbnz	r3, 8011e52 <__sfp+0x16>
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7ff ffbd 	bl	8011dcc <__sinit>
 8011e52:	3648      	adds	r6, #72	; 0x48
 8011e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	d503      	bpl.n	8011e64 <__sfp+0x28>
 8011e5c:	6833      	ldr	r3, [r6, #0]
 8011e5e:	b30b      	cbz	r3, 8011ea4 <__sfp+0x68>
 8011e60:	6836      	ldr	r6, [r6, #0]
 8011e62:	e7f7      	b.n	8011e54 <__sfp+0x18>
 8011e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e68:	b9d5      	cbnz	r5, 8011ea0 <__sfp+0x64>
 8011e6a:	4b16      	ldr	r3, [pc, #88]	; (8011ec4 <__sfp+0x88>)
 8011e6c:	60e3      	str	r3, [r4, #12]
 8011e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e72:	6665      	str	r5, [r4, #100]	; 0x64
 8011e74:	f000 f847 	bl	8011f06 <__retarget_lock_init_recursive>
 8011e78:	f7ff ff96 	bl	8011da8 <__sfp_lock_release>
 8011e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e84:	6025      	str	r5, [r4, #0]
 8011e86:	61a5      	str	r5, [r4, #24]
 8011e88:	2208      	movs	r2, #8
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e90:	f7fd fb34 	bl	800f4fc <memset>
 8011e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ea0:	3468      	adds	r4, #104	; 0x68
 8011ea2:	e7d9      	b.n	8011e58 <__sfp+0x1c>
 8011ea4:	2104      	movs	r1, #4
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	f7ff ff62 	bl	8011d70 <__sfmoreglue>
 8011eac:	4604      	mov	r4, r0
 8011eae:	6030      	str	r0, [r6, #0]
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d1d5      	bne.n	8011e60 <__sfp+0x24>
 8011eb4:	f7ff ff78 	bl	8011da8 <__sfp_lock_release>
 8011eb8:	230c      	movs	r3, #12
 8011eba:	603b      	str	r3, [r7, #0]
 8011ebc:	e7ee      	b.n	8011e9c <__sfp+0x60>
 8011ebe:	bf00      	nop
 8011ec0:	08012bc0 	.word	0x08012bc0
 8011ec4:	ffff0001 	.word	0xffff0001

08011ec8 <_fwalk_reent>:
 8011ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ecc:	4606      	mov	r6, r0
 8011ece:	4688      	mov	r8, r1
 8011ed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ed4:	2700      	movs	r7, #0
 8011ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eda:	f1b9 0901 	subs.w	r9, r9, #1
 8011ede:	d505      	bpl.n	8011eec <_fwalk_reent+0x24>
 8011ee0:	6824      	ldr	r4, [r4, #0]
 8011ee2:	2c00      	cmp	r4, #0
 8011ee4:	d1f7      	bne.n	8011ed6 <_fwalk_reent+0xe>
 8011ee6:	4638      	mov	r0, r7
 8011ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eec:	89ab      	ldrh	r3, [r5, #12]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d907      	bls.n	8011f02 <_fwalk_reent+0x3a>
 8011ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	d003      	beq.n	8011f02 <_fwalk_reent+0x3a>
 8011efa:	4629      	mov	r1, r5
 8011efc:	4630      	mov	r0, r6
 8011efe:	47c0      	blx	r8
 8011f00:	4307      	orrs	r7, r0
 8011f02:	3568      	adds	r5, #104	; 0x68
 8011f04:	e7e9      	b.n	8011eda <_fwalk_reent+0x12>

08011f06 <__retarget_lock_init_recursive>:
 8011f06:	4770      	bx	lr

08011f08 <__retarget_lock_acquire_recursive>:
 8011f08:	4770      	bx	lr

08011f0a <__retarget_lock_release_recursive>:
 8011f0a:	4770      	bx	lr

08011f0c <__swhatbuf_r>:
 8011f0c:	b570      	push	{r4, r5, r6, lr}
 8011f0e:	460e      	mov	r6, r1
 8011f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f14:	2900      	cmp	r1, #0
 8011f16:	b096      	sub	sp, #88	; 0x58
 8011f18:	4614      	mov	r4, r2
 8011f1a:	461d      	mov	r5, r3
 8011f1c:	da08      	bge.n	8011f30 <__swhatbuf_r+0x24>
 8011f1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f22:	2200      	movs	r2, #0
 8011f24:	602a      	str	r2, [r5, #0]
 8011f26:	061a      	lsls	r2, r3, #24
 8011f28:	d410      	bmi.n	8011f4c <__swhatbuf_r+0x40>
 8011f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f2e:	e00e      	b.n	8011f4e <__swhatbuf_r+0x42>
 8011f30:	466a      	mov	r2, sp
 8011f32:	f000 f8fb 	bl	801212c <_fstat_r>
 8011f36:	2800      	cmp	r0, #0
 8011f38:	dbf1      	blt.n	8011f1e <__swhatbuf_r+0x12>
 8011f3a:	9a01      	ldr	r2, [sp, #4]
 8011f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f44:	425a      	negs	r2, r3
 8011f46:	415a      	adcs	r2, r3
 8011f48:	602a      	str	r2, [r5, #0]
 8011f4a:	e7ee      	b.n	8011f2a <__swhatbuf_r+0x1e>
 8011f4c:	2340      	movs	r3, #64	; 0x40
 8011f4e:	2000      	movs	r0, #0
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	b016      	add	sp, #88	; 0x58
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f58 <__smakebuf_r>:
 8011f58:	898b      	ldrh	r3, [r1, #12]
 8011f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f5c:	079d      	lsls	r5, r3, #30
 8011f5e:	4606      	mov	r6, r0
 8011f60:	460c      	mov	r4, r1
 8011f62:	d507      	bpl.n	8011f74 <__smakebuf_r+0x1c>
 8011f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f68:	6023      	str	r3, [r4, #0]
 8011f6a:	6123      	str	r3, [r4, #16]
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	6163      	str	r3, [r4, #20]
 8011f70:	b002      	add	sp, #8
 8011f72:	bd70      	pop	{r4, r5, r6, pc}
 8011f74:	ab01      	add	r3, sp, #4
 8011f76:	466a      	mov	r2, sp
 8011f78:	f7ff ffc8 	bl	8011f0c <__swhatbuf_r>
 8011f7c:	9900      	ldr	r1, [sp, #0]
 8011f7e:	4605      	mov	r5, r0
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7ff f915 	bl	80111b0 <_malloc_r>
 8011f86:	b948      	cbnz	r0, 8011f9c <__smakebuf_r+0x44>
 8011f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f8c:	059a      	lsls	r2, r3, #22
 8011f8e:	d4ef      	bmi.n	8011f70 <__smakebuf_r+0x18>
 8011f90:	f023 0303 	bic.w	r3, r3, #3
 8011f94:	f043 0302 	orr.w	r3, r3, #2
 8011f98:	81a3      	strh	r3, [r4, #12]
 8011f9a:	e7e3      	b.n	8011f64 <__smakebuf_r+0xc>
 8011f9c:	4b0d      	ldr	r3, [pc, #52]	; (8011fd4 <__smakebuf_r+0x7c>)
 8011f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fa0:	89a3      	ldrh	r3, [r4, #12]
 8011fa2:	6020      	str	r0, [r4, #0]
 8011fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fa8:	81a3      	strh	r3, [r4, #12]
 8011faa:	9b00      	ldr	r3, [sp, #0]
 8011fac:	6163      	str	r3, [r4, #20]
 8011fae:	9b01      	ldr	r3, [sp, #4]
 8011fb0:	6120      	str	r0, [r4, #16]
 8011fb2:	b15b      	cbz	r3, 8011fcc <__smakebuf_r+0x74>
 8011fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f000 f8c9 	bl	8012150 <_isatty_r>
 8011fbe:	b128      	cbz	r0, 8011fcc <__smakebuf_r+0x74>
 8011fc0:	89a3      	ldrh	r3, [r4, #12]
 8011fc2:	f023 0303 	bic.w	r3, r3, #3
 8011fc6:	f043 0301 	orr.w	r3, r3, #1
 8011fca:	81a3      	strh	r3, [r4, #12]
 8011fcc:	89a0      	ldrh	r0, [r4, #12]
 8011fce:	4305      	orrs	r5, r0
 8011fd0:	81a5      	strh	r5, [r4, #12]
 8011fd2:	e7cd      	b.n	8011f70 <__smakebuf_r+0x18>
 8011fd4:	08011d65 	.word	0x08011d65

08011fd8 <_raise_r>:
 8011fd8:	291f      	cmp	r1, #31
 8011fda:	b538      	push	{r3, r4, r5, lr}
 8011fdc:	4604      	mov	r4, r0
 8011fde:	460d      	mov	r5, r1
 8011fe0:	d904      	bls.n	8011fec <_raise_r+0x14>
 8011fe2:	2316      	movs	r3, #22
 8011fe4:	6003      	str	r3, [r0, #0]
 8011fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8011fea:	bd38      	pop	{r3, r4, r5, pc}
 8011fec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011fee:	b112      	cbz	r2, 8011ff6 <_raise_r+0x1e>
 8011ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ff4:	b94b      	cbnz	r3, 801200a <_raise_r+0x32>
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f000 f830 	bl	801205c <_getpid_r>
 8011ffc:	462a      	mov	r2, r5
 8011ffe:	4601      	mov	r1, r0
 8012000:	4620      	mov	r0, r4
 8012002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012006:	f000 b817 	b.w	8012038 <_kill_r>
 801200a:	2b01      	cmp	r3, #1
 801200c:	d00a      	beq.n	8012024 <_raise_r+0x4c>
 801200e:	1c59      	adds	r1, r3, #1
 8012010:	d103      	bne.n	801201a <_raise_r+0x42>
 8012012:	2316      	movs	r3, #22
 8012014:	6003      	str	r3, [r0, #0]
 8012016:	2001      	movs	r0, #1
 8012018:	e7e7      	b.n	8011fea <_raise_r+0x12>
 801201a:	2400      	movs	r4, #0
 801201c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012020:	4628      	mov	r0, r5
 8012022:	4798      	blx	r3
 8012024:	2000      	movs	r0, #0
 8012026:	e7e0      	b.n	8011fea <_raise_r+0x12>

08012028 <raise>:
 8012028:	4b02      	ldr	r3, [pc, #8]	; (8012034 <raise+0xc>)
 801202a:	4601      	mov	r1, r0
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	f7ff bfd3 	b.w	8011fd8 <_raise_r>
 8012032:	bf00      	nop
 8012034:	24000110 	.word	0x24000110

08012038 <_kill_r>:
 8012038:	b538      	push	{r3, r4, r5, lr}
 801203a:	4d07      	ldr	r5, [pc, #28]	; (8012058 <_kill_r+0x20>)
 801203c:	2300      	movs	r3, #0
 801203e:	4604      	mov	r4, r0
 8012040:	4608      	mov	r0, r1
 8012042:	4611      	mov	r1, r2
 8012044:	602b      	str	r3, [r5, #0]
 8012046:	f7f0 ff61 	bl	8002f0c <_kill>
 801204a:	1c43      	adds	r3, r0, #1
 801204c:	d102      	bne.n	8012054 <_kill_r+0x1c>
 801204e:	682b      	ldr	r3, [r5, #0]
 8012050:	b103      	cbz	r3, 8012054 <_kill_r+0x1c>
 8012052:	6023      	str	r3, [r4, #0]
 8012054:	bd38      	pop	{r3, r4, r5, pc}
 8012056:	bf00      	nop
 8012058:	24000d30 	.word	0x24000d30

0801205c <_getpid_r>:
 801205c:	f7f0 bf4e 	b.w	8002efc <_getpid>

08012060 <__sread>:
 8012060:	b510      	push	{r4, lr}
 8012062:	460c      	mov	r4, r1
 8012064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012068:	f000 f894 	bl	8012194 <_read_r>
 801206c:	2800      	cmp	r0, #0
 801206e:	bfab      	itete	ge
 8012070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012072:	89a3      	ldrhlt	r3, [r4, #12]
 8012074:	181b      	addge	r3, r3, r0
 8012076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801207a:	bfac      	ite	ge
 801207c:	6563      	strge	r3, [r4, #84]	; 0x54
 801207e:	81a3      	strhlt	r3, [r4, #12]
 8012080:	bd10      	pop	{r4, pc}

08012082 <__swrite>:
 8012082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012086:	461f      	mov	r7, r3
 8012088:	898b      	ldrh	r3, [r1, #12]
 801208a:	05db      	lsls	r3, r3, #23
 801208c:	4605      	mov	r5, r0
 801208e:	460c      	mov	r4, r1
 8012090:	4616      	mov	r6, r2
 8012092:	d505      	bpl.n	80120a0 <__swrite+0x1e>
 8012094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012098:	2302      	movs	r3, #2
 801209a:	2200      	movs	r2, #0
 801209c:	f000 f868 	bl	8012170 <_lseek_r>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120aa:	81a3      	strh	r3, [r4, #12]
 80120ac:	4632      	mov	r2, r6
 80120ae:	463b      	mov	r3, r7
 80120b0:	4628      	mov	r0, r5
 80120b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120b6:	f000 b817 	b.w	80120e8 <_write_r>

080120ba <__sseek>:
 80120ba:	b510      	push	{r4, lr}
 80120bc:	460c      	mov	r4, r1
 80120be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120c2:	f000 f855 	bl	8012170 <_lseek_r>
 80120c6:	1c43      	adds	r3, r0, #1
 80120c8:	89a3      	ldrh	r3, [r4, #12]
 80120ca:	bf15      	itete	ne
 80120cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80120ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120d6:	81a3      	strheq	r3, [r4, #12]
 80120d8:	bf18      	it	ne
 80120da:	81a3      	strhne	r3, [r4, #12]
 80120dc:	bd10      	pop	{r4, pc}

080120de <__sclose>:
 80120de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120e2:	f000 b813 	b.w	801210c <_close_r>
	...

080120e8 <_write_r>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4d07      	ldr	r5, [pc, #28]	; (8012108 <_write_r+0x20>)
 80120ec:	4604      	mov	r4, r0
 80120ee:	4608      	mov	r0, r1
 80120f0:	4611      	mov	r1, r2
 80120f2:	2200      	movs	r2, #0
 80120f4:	602a      	str	r2, [r5, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	f7f0 ff3f 	bl	8002f7a <_write>
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	d102      	bne.n	8012106 <_write_r+0x1e>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	b103      	cbz	r3, 8012106 <_write_r+0x1e>
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	bd38      	pop	{r3, r4, r5, pc}
 8012108:	24000d30 	.word	0x24000d30

0801210c <_close_r>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4d06      	ldr	r5, [pc, #24]	; (8012128 <_close_r+0x1c>)
 8012110:	2300      	movs	r3, #0
 8012112:	4604      	mov	r4, r0
 8012114:	4608      	mov	r0, r1
 8012116:	602b      	str	r3, [r5, #0]
 8012118:	f7f0 ff4b 	bl	8002fb2 <_close>
 801211c:	1c43      	adds	r3, r0, #1
 801211e:	d102      	bne.n	8012126 <_close_r+0x1a>
 8012120:	682b      	ldr	r3, [r5, #0]
 8012122:	b103      	cbz	r3, 8012126 <_close_r+0x1a>
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	24000d30 	.word	0x24000d30

0801212c <_fstat_r>:
 801212c:	b538      	push	{r3, r4, r5, lr}
 801212e:	4d07      	ldr	r5, [pc, #28]	; (801214c <_fstat_r+0x20>)
 8012130:	2300      	movs	r3, #0
 8012132:	4604      	mov	r4, r0
 8012134:	4608      	mov	r0, r1
 8012136:	4611      	mov	r1, r2
 8012138:	602b      	str	r3, [r5, #0]
 801213a:	f7f0 ff46 	bl	8002fca <_fstat>
 801213e:	1c43      	adds	r3, r0, #1
 8012140:	d102      	bne.n	8012148 <_fstat_r+0x1c>
 8012142:	682b      	ldr	r3, [r5, #0]
 8012144:	b103      	cbz	r3, 8012148 <_fstat_r+0x1c>
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	bd38      	pop	{r3, r4, r5, pc}
 801214a:	bf00      	nop
 801214c:	24000d30 	.word	0x24000d30

08012150 <_isatty_r>:
 8012150:	b538      	push	{r3, r4, r5, lr}
 8012152:	4d06      	ldr	r5, [pc, #24]	; (801216c <_isatty_r+0x1c>)
 8012154:	2300      	movs	r3, #0
 8012156:	4604      	mov	r4, r0
 8012158:	4608      	mov	r0, r1
 801215a:	602b      	str	r3, [r5, #0]
 801215c:	f7f0 ff45 	bl	8002fea <_isatty>
 8012160:	1c43      	adds	r3, r0, #1
 8012162:	d102      	bne.n	801216a <_isatty_r+0x1a>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	b103      	cbz	r3, 801216a <_isatty_r+0x1a>
 8012168:	6023      	str	r3, [r4, #0]
 801216a:	bd38      	pop	{r3, r4, r5, pc}
 801216c:	24000d30 	.word	0x24000d30

08012170 <_lseek_r>:
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	4d07      	ldr	r5, [pc, #28]	; (8012190 <_lseek_r+0x20>)
 8012174:	4604      	mov	r4, r0
 8012176:	4608      	mov	r0, r1
 8012178:	4611      	mov	r1, r2
 801217a:	2200      	movs	r2, #0
 801217c:	602a      	str	r2, [r5, #0]
 801217e:	461a      	mov	r2, r3
 8012180:	f7f0 ff3e 	bl	8003000 <_lseek>
 8012184:	1c43      	adds	r3, r0, #1
 8012186:	d102      	bne.n	801218e <_lseek_r+0x1e>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	b103      	cbz	r3, 801218e <_lseek_r+0x1e>
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	bd38      	pop	{r3, r4, r5, pc}
 8012190:	24000d30 	.word	0x24000d30

08012194 <_read_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d07      	ldr	r5, [pc, #28]	; (80121b4 <_read_r+0x20>)
 8012198:	4604      	mov	r4, r0
 801219a:	4608      	mov	r0, r1
 801219c:	4611      	mov	r1, r2
 801219e:	2200      	movs	r2, #0
 80121a0:	602a      	str	r2, [r5, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f7f0 fecc 	bl	8002f40 <_read>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_read_r+0x1e>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_read_r+0x1e>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	24000d30 	.word	0x24000d30

080121b8 <checkint>:
 80121b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121bc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80121c0:	429a      	cmp	r2, r3
 80121c2:	b570      	push	{r4, r5, r6, lr}
 80121c4:	dd2a      	ble.n	801221c <checkint+0x64>
 80121c6:	f240 4333 	movw	r3, #1075	; 0x433
 80121ca:	429a      	cmp	r2, r3
 80121cc:	dc24      	bgt.n	8012218 <checkint+0x60>
 80121ce:	1a9b      	subs	r3, r3, r2
 80121d0:	f1a3 0620 	sub.w	r6, r3, #32
 80121d4:	f04f 32ff 	mov.w	r2, #4294967295
 80121d8:	fa02 f403 	lsl.w	r4, r2, r3
 80121dc:	fa02 f606 	lsl.w	r6, r2, r6
 80121e0:	f1c3 0520 	rsb	r5, r3, #32
 80121e4:	fa22 f505 	lsr.w	r5, r2, r5
 80121e8:	4334      	orrs	r4, r6
 80121ea:	432c      	orrs	r4, r5
 80121ec:	409a      	lsls	r2, r3
 80121ee:	ea20 0202 	bic.w	r2, r0, r2
 80121f2:	ea21 0404 	bic.w	r4, r1, r4
 80121f6:	4322      	orrs	r2, r4
 80121f8:	f1a3 0420 	sub.w	r4, r3, #32
 80121fc:	f1c3 0220 	rsb	r2, r3, #32
 8012200:	d10c      	bne.n	801221c <checkint+0x64>
 8012202:	40d8      	lsrs	r0, r3
 8012204:	fa01 f302 	lsl.w	r3, r1, r2
 8012208:	4318      	orrs	r0, r3
 801220a:	40e1      	lsrs	r1, r4
 801220c:	4308      	orrs	r0, r1
 801220e:	f000 0001 	and.w	r0, r0, #1
 8012212:	f1d0 0002 	rsbs	r0, r0, #2
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	2002      	movs	r0, #2
 801221a:	e7fc      	b.n	8012216 <checkint+0x5e>
 801221c:	2000      	movs	r0, #0
 801221e:	e7fa      	b.n	8012216 <checkint+0x5e>

08012220 <pow>:
 8012220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012224:	ee10 4a90 	vmov	r4, s1
 8012228:	ed2d 8b0a 	vpush	{d8-d12}
 801222c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8012230:	ee11 7a90 	vmov	r7, s3
 8012234:	f10a 32ff 	add.w	r2, sl, #4294967295
 8012238:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801223c:	429a      	cmp	r2, r3
 801223e:	ee10 6a10 	vmov	r6, s0
 8012242:	ee11 0a10 	vmov	r0, s2
 8012246:	b086      	sub	sp, #24
 8012248:	46d4      	mov	ip, sl
 801224a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801224e:	d806      	bhi.n	801225e <pow+0x3e>
 8012250:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8012254:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8012258:	2b7f      	cmp	r3, #127	; 0x7f
 801225a:	f240 8156 	bls.w	801250a <pow+0x2ea>
 801225e:	1802      	adds	r2, r0, r0
 8012260:	eb47 0107 	adc.w	r1, r7, r7
 8012264:	f06f 0e01 	mvn.w	lr, #1
 8012268:	f112 39ff 	adds.w	r9, r2, #4294967295
 801226c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8012270:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8012274:	45ce      	cmp	lr, r9
 8012276:	eb73 0808 	sbcs.w	r8, r3, r8
 801227a:	d23f      	bcs.n	80122fc <pow+0xdc>
 801227c:	ea52 0301 	orrs.w	r3, r2, r1
 8012280:	f04f 0300 	mov.w	r3, #0
 8012284:	d10c      	bne.n	80122a0 <pow+0x80>
 8012286:	19b6      	adds	r6, r6, r6
 8012288:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801228c:	4164      	adcs	r4, r4
 801228e:	42b3      	cmp	r3, r6
 8012290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012294:	41a3      	sbcs	r3, r4
 8012296:	f0c0 808c 	bcc.w	80123b2 <pow+0x192>
 801229a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801229e:	e028      	b.n	80122f2 <pow+0xd2>
 80122a0:	4da3      	ldr	r5, [pc, #652]	; (8012530 <pow+0x310>)
 80122a2:	42ac      	cmp	r4, r5
 80122a4:	bf08      	it	eq
 80122a6:	429e      	cmpeq	r6, r3
 80122a8:	d107      	bne.n	80122ba <pow+0x9a>
 80122aa:	1800      	adds	r0, r0, r0
 80122ac:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80122b0:	417f      	adcs	r7, r7
 80122b2:	4283      	cmp	r3, r0
 80122b4:	4b9f      	ldr	r3, [pc, #636]	; (8012534 <pow+0x314>)
 80122b6:	41bb      	sbcs	r3, r7
 80122b8:	e7ed      	b.n	8012296 <pow+0x76>
 80122ba:	19b6      	adds	r6, r6, r6
 80122bc:	489e      	ldr	r0, [pc, #632]	; (8012538 <pow+0x318>)
 80122be:	4164      	adcs	r4, r4
 80122c0:	42b3      	cmp	r3, r6
 80122c2:	eb70 0504 	sbcs.w	r5, r0, r4
 80122c6:	d374      	bcc.n	80123b2 <pow+0x192>
 80122c8:	4281      	cmp	r1, r0
 80122ca:	bf08      	it	eq
 80122cc:	429a      	cmpeq	r2, r3
 80122ce:	d170      	bne.n	80123b2 <pow+0x192>
 80122d0:	4a9a      	ldr	r2, [pc, #616]	; (801253c <pow+0x31c>)
 80122d2:	4294      	cmp	r4, r2
 80122d4:	bf08      	it	eq
 80122d6:	429e      	cmpeq	r6, r3
 80122d8:	d0df      	beq.n	801229a <pow+0x7a>
 80122da:	4294      	cmp	r4, r2
 80122dc:	ea6f 0707 	mvn.w	r7, r7
 80122e0:	bf34      	ite	cc
 80122e2:	2400      	movcc	r4, #0
 80122e4:	2401      	movcs	r4, #1
 80122e6:	0fff      	lsrs	r7, r7, #31
 80122e8:	42bc      	cmp	r4, r7
 80122ea:	f040 81d9 	bne.w	80126a0 <pow+0x480>
 80122ee:	ee21 0b01 	vmul.f64	d0, d1, d1
 80122f2:	b006      	add	sp, #24
 80122f4:	ecbd 8b0a 	vpop	{d8-d12}
 80122f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fc:	eb16 0806 	adds.w	r8, r6, r6
 8012300:	eb44 0904 	adc.w	r9, r4, r4
 8012304:	f118 31ff 	adds.w	r1, r8, #4294967295
 8012308:	f169 0200 	sbc.w	r2, r9, #0
 801230c:	458e      	cmp	lr, r1
 801230e:	4193      	sbcs	r3, r2
 8012310:	d223      	bcs.n	801235a <pow+0x13a>
 8012312:	ee20 0b00 	vmul.f64	d0, d0, d0
 8012316:	2c00      	cmp	r4, #0
 8012318:	da12      	bge.n	8012340 <pow+0x120>
 801231a:	4639      	mov	r1, r7
 801231c:	f7ff ff4c 	bl	80121b8 <checkint>
 8012320:	2801      	cmp	r0, #1
 8012322:	d10d      	bne.n	8012340 <pow+0x120>
 8012324:	eeb1 0b40 	vneg.f64	d0, d0
 8012328:	ea58 0309 	orrs.w	r3, r8, r9
 801232c:	d10a      	bne.n	8012344 <pow+0x124>
 801232e:	2f00      	cmp	r7, #0
 8012330:	dadf      	bge.n	80122f2 <pow+0xd2>
 8012332:	b006      	add	sp, #24
 8012334:	ecbd 8b0a 	vpop	{d8-d12}
 8012338:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	f000 bb50 	b.w	80129e0 <__math_divzero>
 8012340:	2000      	movs	r0, #0
 8012342:	e7f1      	b.n	8012328 <pow+0x108>
 8012344:	2f00      	cmp	r7, #0
 8012346:	dad4      	bge.n	80122f2 <pow+0xd2>
 8012348:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801234c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012350:	ed8d 7b00 	vstr	d7, [sp]
 8012354:	ed9d 0b00 	vldr	d0, [sp]
 8012358:	e7cb      	b.n	80122f2 <pow+0xd2>
 801235a:	2c00      	cmp	r4, #0
 801235c:	da2c      	bge.n	80123b8 <pow+0x198>
 801235e:	4639      	mov	r1, r7
 8012360:	f7ff ff2a 	bl	80121b8 <checkint>
 8012364:	b930      	cbnz	r0, 8012374 <pow+0x154>
 8012366:	b006      	add	sp, #24
 8012368:	ecbd 8b0a 	vpop	{d8-d12}
 801236c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012370:	f000 bb4e 	b.w	8012a10 <__math_invalid>
 8012374:	2801      	cmp	r0, #1
 8012376:	bf14      	ite	ne
 8012378:	2000      	movne	r0, #0
 801237a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801237e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012382:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8012386:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801238a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801238e:	2b7f      	cmp	r3, #127	; 0x7f
 8012390:	d92d      	bls.n	80123ee <pow+0x1ce>
 8012392:	4b67      	ldr	r3, [pc, #412]	; (8012530 <pow+0x310>)
 8012394:	2000      	movs	r0, #0
 8012396:	429c      	cmp	r4, r3
 8012398:	bf08      	it	eq
 801239a:	4286      	cmpeq	r6, r0
 801239c:	f43f af7d 	beq.w	801229a <pow+0x7a>
 80123a0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80123a4:	428a      	cmp	r2, r1
 80123a6:	d80c      	bhi.n	80123c2 <pow+0x1a2>
 80123a8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80123ac:	42b0      	cmp	r0, r6
 80123ae:	41a3      	sbcs	r3, r4
 80123b0:	d204      	bcs.n	80123bc <pow+0x19c>
 80123b2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80123b6:	e79c      	b.n	80122f2 <pow+0xd2>
 80123b8:	2000      	movs	r0, #0
 80123ba:	e7e4      	b.n	8012386 <pow+0x166>
 80123bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80123c0:	e797      	b.n	80122f2 <pow+0xd2>
 80123c2:	2e01      	cmp	r6, #1
 80123c4:	eb74 0303 	sbcs.w	r3, r4, r3
 80123c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80123cc:	bf34      	ite	cc
 80123ce:	2301      	movcc	r3, #1
 80123d0:	2300      	movcs	r3, #0
 80123d2:	4295      	cmp	r5, r2
 80123d4:	bf8c      	ite	hi
 80123d6:	2500      	movhi	r5, #0
 80123d8:	2501      	movls	r5, #1
 80123da:	42ab      	cmp	r3, r5
 80123dc:	f000 809d 	beq.w	801251a <pow+0x2fa>
 80123e0:	b006      	add	sp, #24
 80123e2:	ecbd 8b0a 	vpop	{d8-d12}
 80123e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123ea:	f000 baf1 	b.w	80129d0 <__math_oflow>
 80123ee:	f1bc 0f00 	cmp.w	ip, #0
 80123f2:	d10b      	bne.n	801240c <pow+0x1ec>
 80123f4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8012528 <pow+0x308>
 80123f8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80123fc:	ec53 2b17 	vmov	r2, r3, d7
 8012400:	ee17 6a10 	vmov	r6, s14
 8012404:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012408:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801240c:	4b4c      	ldr	r3, [pc, #304]	; (8012540 <pow+0x320>)
 801240e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012412:	4423      	add	r3, r4
 8012414:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8012418:	1519      	asrs	r1, r3, #20
 801241a:	0d1b      	lsrs	r3, r3, #20
 801241c:	051b      	lsls	r3, r3, #20
 801241e:	eba4 0903 	sub.w	r9, r4, r3
 8012422:	4b48      	ldr	r3, [pc, #288]	; (8012544 <pow+0x324>)
 8012424:	ee04 1a10 	vmov	s8, r1
 8012428:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801242c:	f1b6 0800 	subs.w	r8, r6, #0
 8012430:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8012434:	ec49 8b15 	vmov	d5, r8, r9
 8012438:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801243c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012440:	ed93 7b00 	vldr	d7, [r3]
 8012444:	ed93 5b02 	vldr	d5, [r3, #8]
 8012448:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801244c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8012450:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8012454:	ee36 ab02 	vadd.f64	d10, d6, d2
 8012458:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801245c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012460:	ed93 5b04 	vldr	d5, [r3, #16]
 8012464:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012468:	ee37 7b02 	vadd.f64	d7, d7, d2
 801246c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012470:	ed93 4b08 	vldr	d4, [r3, #32]
 8012474:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012478:	eeb0 9b40 	vmov.f64	d9, d0
 801247c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8012480:	ed93 5b06 	vldr	d5, [r3, #24]
 8012484:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8012488:	ee26 bb00 	vmul.f64	d11, d6, d0
 801248c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8012490:	eea6 5b04 	vfma.f64	d5, d6, d4
 8012494:	ee3a ab48 	vsub.f64	d10, d10, d8
 8012498:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801249c:	ee37 9b09 	vadd.f64	d9, d7, d9
 80124a0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80124a4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80124a8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80124ac:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80124b0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80124b4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80124b8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80124bc:	eea0 5b04 	vfma.f64	d5, d0, d4
 80124c0:	eeab ab05 	vfma.f64	d10, d11, d5
 80124c4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80124c8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80124cc:	ee17 3a90 	vmov	r3, s15
 80124d0:	eeb0 5b47 	vmov.f64	d5, d7
 80124d4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80124d8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80124dc:	18b2      	adds	r2, r6, r2
 80124de:	2a3e      	cmp	r2, #62	; 0x3e
 80124e0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80124e4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80124e8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80124ec:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80124f0:	d92b      	bls.n	801254a <pow+0x32a>
 80124f2:	2a00      	cmp	r2, #0
 80124f4:	da0b      	bge.n	801250e <pow+0x2ee>
 80124f6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80124fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80124fe:	2800      	cmp	r0, #0
 8012500:	f43f aef7 	beq.w	80122f2 <pow+0xd2>
 8012504:	eeb1 0b40 	vneg.f64	d0, d0
 8012508:	e6f3      	b.n	80122f2 <pow+0xd2>
 801250a:	2000      	movs	r0, #0
 801250c:	e77e      	b.n	801240c <pow+0x1ec>
 801250e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8012512:	d919      	bls.n	8012548 <pow+0x328>
 8012514:	2b00      	cmp	r3, #0
 8012516:	f6bf af63 	bge.w	80123e0 <pow+0x1c0>
 801251a:	b006      	add	sp, #24
 801251c:	ecbd 8b0a 	vpop	{d8-d12}
 8012520:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012524:	f000 ba4c 	b.w	80129c0 <__math_uflow>
 8012528:	00000000 	.word	0x00000000
 801252c:	43300000 	.word	0x43300000
 8012530:	3ff00000 	.word	0x3ff00000
 8012534:	fff00000 	.word	0xfff00000
 8012538:	ffe00000 	.word	0xffe00000
 801253c:	7fe00000 	.word	0x7fe00000
 8012540:	c0196aab 	.word	0xc0196aab
 8012544:	08012ff0 	.word	0x08012ff0
 8012548:	2600      	movs	r6, #0
 801254a:	495d      	ldr	r1, [pc, #372]	; (80126c0 <pow+0x4a0>)
 801254c:	ed91 4b02 	vldr	d4, [r1, #8]
 8012550:	ed91 3b00 	vldr	d3, [r1]
 8012554:	eeb0 6b44 	vmov.f64	d6, d4
 8012558:	eea7 6b03 	vfma.f64	d6, d7, d3
 801255c:	ee16 5a10 	vmov	r5, s12
 8012560:	ee36 6b44 	vsub.f64	d6, d6, d4
 8012564:	ed91 4b04 	vldr	d4, [r1, #16]
 8012568:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801256c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012570:	eeb0 0b47 	vmov.f64	d0, d7
 8012574:	ed91 7b06 	vldr	d7, [r1, #24]
 8012578:	18dc      	adds	r4, r3, r3
 801257a:	f104 030f 	add.w	r3, r4, #15
 801257e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012582:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012586:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801258a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801258e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012592:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8012596:	ed91 5b08 	vldr	d5, [r1, #32]
 801259a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801259e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80125a2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80125a6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80125aa:	eea6 7b05 	vfma.f64	d7, d6, d5
 80125ae:	ee26 6b06 	vmul.f64	d6, d6, d6
 80125b2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80125b6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80125ba:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80125be:	eea0 5b04 	vfma.f64	d5, d0, d4
 80125c2:	1940      	adds	r0, r0, r5
 80125c4:	2700      	movs	r7, #0
 80125c6:	eb17 020c 	adds.w	r2, r7, ip
 80125ca:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80125ce:	eea6 7b05 	vfma.f64	d7, d6, d5
 80125d2:	2e00      	cmp	r6, #0
 80125d4:	d15f      	bne.n	8012696 <pow+0x476>
 80125d6:	42bd      	cmp	r5, r7
 80125d8:	db13      	blt.n	8012602 <pow+0x3e2>
 80125da:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80125de:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80125e2:	4610      	mov	r0, r2
 80125e4:	ec41 0b10 	vmov	d0, r0, r1
 80125e8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80125ec:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80126a8 <pow+0x488>
 80125f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125f4:	b006      	add	sp, #24
 80125f6:	ecbd 8b0a 	vpop	{d8-d12}
 80125fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125fe:	f000 ba1f 	b.w	8012a40 <__math_check_oflow>
 8012602:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012606:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801260a:	4610      	mov	r0, r2
 801260c:	ec41 0b15 	vmov	d5, r0, r1
 8012610:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012614:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012618:	ee35 7b06 	vadd.f64	d7, d5, d6
 801261c:	eeb0 3bc7 	vabs.f64	d3, d7
 8012620:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8012624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012628:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80126b0 <pow+0x490>
 801262c:	d52a      	bpl.n	8012684 <pow+0x464>
 801262e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012632:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801263e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8012642:	bf48      	it	mi
 8012644:	eeb0 4b43 	vmovmi.f64	d4, d3
 8012648:	ee37 3b04 	vadd.f64	d3, d7, d4
 801264c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8012650:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012654:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012658:	ee37 7b03 	vadd.f64	d7, d7, d3
 801265c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012660:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012668:	d104      	bne.n	8012674 <pow+0x454>
 801266a:	4632      	mov	r2, r6
 801266c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012670:	ec43 2b17 	vmov	d7, r2, r3
 8012674:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012678:	ed9d 6b02 	vldr	d6, [sp, #8]
 801267c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8012680:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012684:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012688:	b006      	add	sp, #24
 801268a:	ecbd 8b0a 	vpop	{d8-d12}
 801268e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012692:	f000 b9cc 	b.w	8012a2e <__math_check_uflow>
 8012696:	ec43 2b10 	vmov	d0, r2, r3
 801269a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801269e:	e628      	b.n	80122f2 <pow+0xd2>
 80126a0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80126b8 <pow+0x498>
 80126a4:	e625      	b.n	80122f2 <pow+0xd2>
 80126a6:	bf00      	nop
 80126a8:	00000000 	.word	0x00000000
 80126ac:	7f000000 	.word	0x7f000000
 80126b0:	00000000 	.word	0x00000000
 80126b4:	00100000 	.word	0x00100000
	...
 80126c0:	08014038 	.word	0x08014038

080126c4 <asin>:
 80126c4:	b508      	push	{r3, lr}
 80126c6:	ed2d 8b04 	vpush	{d8-d9}
 80126ca:	eeb0 8b40 	vmov.f64	d8, d0
 80126ce:	f000 f847 	bl	8012760 <__ieee754_asin>
 80126d2:	eeb4 8b48 	vcmp.f64	d8, d8
 80126d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126da:	eeb0 9b40 	vmov.f64	d9, d0
 80126de:	d615      	bvs.n	801270c <asin+0x48>
 80126e0:	eeb0 0b48 	vmov.f64	d0, d8
 80126e4:	f000 f9c0 	bl	8012a68 <fabs>
 80126e8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80126ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80126f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f4:	dd0a      	ble.n	801270c <asin+0x48>
 80126f6:	f7fc fec9 	bl	800f48c <__errno>
 80126fa:	ecbd 8b04 	vpop	{d8-d9}
 80126fe:	2321      	movs	r3, #33	; 0x21
 8012700:	6003      	str	r3, [r0, #0]
 8012702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012706:	4804      	ldr	r0, [pc, #16]	; (8012718 <asin+0x54>)
 8012708:	f7fe bdc6 	b.w	8011298 <nan>
 801270c:	eeb0 0b49 	vmov.f64	d0, d9
 8012710:	ecbd 8b04 	vpop	{d8-d9}
 8012714:	bd08      	pop	{r3, pc}
 8012716:	bf00      	nop
 8012718:	08012e57 	.word	0x08012e57
 801271c:	00000000 	.word	0x00000000

08012720 <sqrt>:
 8012720:	b508      	push	{r3, lr}
 8012722:	ed2d 8b04 	vpush	{d8-d9}
 8012726:	eeb0 8b40 	vmov.f64	d8, d0
 801272a:	f000 f927 	bl	801297c <__ieee754_sqrt>
 801272e:	eeb4 8b48 	vcmp.f64	d8, d8
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	d60c      	bvs.n	8012752 <sqrt+0x32>
 8012738:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8012758 <sqrt+0x38>
 801273c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012744:	d505      	bpl.n	8012752 <sqrt+0x32>
 8012746:	f7fc fea1 	bl	800f48c <__errno>
 801274a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801274e:	2321      	movs	r3, #33	; 0x21
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	ecbd 8b04 	vpop	{d8-d9}
 8012756:	bd08      	pop	{r3, pc}
	...

08012760 <__ieee754_asin>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	ee10 5a90 	vmov	r5, s1
 8012766:	4b82      	ldr	r3, [pc, #520]	; (8012970 <__ieee754_asin+0x210>)
 8012768:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801276c:	429c      	cmp	r4, r3
 801276e:	ed2d 8b06 	vpush	{d8-d10}
 8012772:	dd19      	ble.n	80127a8 <__ieee754_asin+0x48>
 8012774:	ee10 3a10 	vmov	r3, s0
 8012778:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801277c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012780:	4323      	orrs	r3, r4
 8012782:	d10c      	bne.n	801279e <__ieee754_asin+0x3e>
 8012784:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80128f8 <__ieee754_asin+0x198>
 8012788:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012900 <__ieee754_asin+0x1a0>
 801278c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012790:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012794:	eeb0 0b47 	vmov.f64	d0, d7
 8012798:	ecbd 8b06 	vpop	{d8-d10}
 801279c:	bd38      	pop	{r3, r4, r5, pc}
 801279e:	ee30 7b40 	vsub.f64	d7, d0, d0
 80127a2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80127a6:	e7f7      	b.n	8012798 <__ieee754_asin+0x38>
 80127a8:	4b72      	ldr	r3, [pc, #456]	; (8012974 <__ieee754_asin+0x214>)
 80127aa:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80127ae:	429c      	cmp	r4, r3
 80127b0:	dc0b      	bgt.n	80127ca <__ieee754_asin+0x6a>
 80127b2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80127b6:	da52      	bge.n	801285e <__ieee754_asin+0xfe>
 80127b8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012908 <__ieee754_asin+0x1a8>
 80127bc:	ee30 7b07 	vadd.f64	d7, d0, d7
 80127c0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80127c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c8:	dce6      	bgt.n	8012798 <__ieee754_asin+0x38>
 80127ca:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80127ce:	f000 f94b 	bl	8012a68 <fabs>
 80127d2:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012910 <__ieee754_asin+0x1b0>
 80127d6:	ee39 0b40 	vsub.f64	d0, d9, d0
 80127da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80127de:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012918 <__ieee754_asin+0x1b8>
 80127e2:	eeb0 0b48 	vmov.f64	d0, d8
 80127e6:	eea8 6b07 	vfma.f64	d6, d8, d7
 80127ea:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012920 <__ieee754_asin+0x1c0>
 80127ee:	eea6 7b08 	vfma.f64	d7, d6, d8
 80127f2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012928 <__ieee754_asin+0x1c8>
 80127f6:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012930 <__ieee754_asin+0x1d0>
 80127fa:	eea7 6b08 	vfma.f64	d6, d7, d8
 80127fe:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012938 <__ieee754_asin+0x1d8>
 8012802:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012806:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012940 <__ieee754_asin+0x1e0>
 801280a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801280e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8012812:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012948 <__ieee754_asin+0x1e8>
 8012816:	eea8 7b06 	vfma.f64	d7, d8, d6
 801281a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012950 <__ieee754_asin+0x1f0>
 801281e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012822:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012958 <__ieee754_asin+0x1f8>
 8012826:	eea6 7b08 	vfma.f64	d7, d6, d8
 801282a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801282e:	f000 f8a5 	bl	801297c <__ieee754_sqrt>
 8012832:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8012836:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801283a:	4b4f      	ldr	r3, [pc, #316]	; (8012978 <__ieee754_asin+0x218>)
 801283c:	429c      	cmp	r4, r3
 801283e:	dd3d      	ble.n	80128bc <__ieee754_asin+0x15c>
 8012840:	eea0 0b05 	vfma.f64	d0, d0, d5
 8012844:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012960 <__ieee754_asin+0x200>
 8012848:	eea0 7b04 	vfma.f64	d7, d0, d4
 801284c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012900 <__ieee754_asin+0x1a0>
 8012850:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012854:	2d00      	cmp	r5, #0
 8012856:	bfd8      	it	le
 8012858:	eeb1 0b40 	vnegle.f64	d0, d0
 801285c:	e79c      	b.n	8012798 <__ieee754_asin+0x38>
 801285e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012910 <__ieee754_asin+0x1b0>
 8012862:	ee20 7b00 	vmul.f64	d7, d0, d0
 8012866:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012918 <__ieee754_asin+0x1b8>
 801286a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801286e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012920 <__ieee754_asin+0x1c0>
 8012872:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012876:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012928 <__ieee754_asin+0x1c8>
 801287a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801287e:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012938 <__ieee754_asin+0x1d8>
 8012882:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012886:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012930 <__ieee754_asin+0x1d0>
 801288a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012940 <__ieee754_asin+0x1e0>
 801288e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012892:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012896:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012948 <__ieee754_asin+0x1e8>
 801289a:	eea7 5b04 	vfma.f64	d5, d7, d4
 801289e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012950 <__ieee754_asin+0x1f0>
 80128a2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80128a6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012958 <__ieee754_asin+0x1f8>
 80128aa:	eea4 5b07 	vfma.f64	d5, d4, d7
 80128ae:	eea5 9b07 	vfma.f64	d9, d5, d7
 80128b2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80128b6:	eea0 0b07 	vfma.f64	d0, d0, d7
 80128ba:	e76d      	b.n	8012798 <__ieee754_asin+0x38>
 80128bc:	ec53 2b10 	vmov	r2, r3, d0
 80128c0:	2200      	movs	r2, #0
 80128c2:	ec43 2b16 	vmov	d6, r2, r3
 80128c6:	ee30 7b06 	vadd.f64	d7, d0, d6
 80128ca:	eea6 8b46 	vfms.f64	d8, d6, d6
 80128ce:	ee88 3b07 	vdiv.f64	d3, d8, d7
 80128d2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80128f8 <__ieee754_asin+0x198>
 80128d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80128da:	eea3 7b44 	vfms.f64	d7, d3, d4
 80128de:	ee90 7b05 	vfnms.f64	d7, d0, d5
 80128e2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012968 <__ieee754_asin+0x208>
 80128e6:	eeb0 0b45 	vmov.f64	d0, d5
 80128ea:	eea6 0b44 	vfms.f64	d0, d6, d4
 80128ee:	ee37 0b40 	vsub.f64	d0, d7, d0
 80128f2:	ee35 0b40 	vsub.f64	d0, d5, d0
 80128f6:	e7ad      	b.n	8012854 <__ieee754_asin+0xf4>
 80128f8:	33145c07 	.word	0x33145c07
 80128fc:	3c91a626 	.word	0x3c91a626
 8012900:	54442d18 	.word	0x54442d18
 8012904:	3ff921fb 	.word	0x3ff921fb
 8012908:	8800759c 	.word	0x8800759c
 801290c:	7e37e43c 	.word	0x7e37e43c
 8012910:	0dfdf709 	.word	0x0dfdf709
 8012914:	3f023de1 	.word	0x3f023de1
 8012918:	7501b288 	.word	0x7501b288
 801291c:	3f49efe0 	.word	0x3f49efe0
 8012920:	b5688f3b 	.word	0xb5688f3b
 8012924:	bfa48228 	.word	0xbfa48228
 8012928:	0e884455 	.word	0x0e884455
 801292c:	3fc9c155 	.word	0x3fc9c155
 8012930:	55555555 	.word	0x55555555
 8012934:	3fc55555 	.word	0x3fc55555
 8012938:	03eb6f7d 	.word	0x03eb6f7d
 801293c:	bfd4d612 	.word	0xbfd4d612
 8012940:	b12e9282 	.word	0xb12e9282
 8012944:	3fb3b8c5 	.word	0x3fb3b8c5
 8012948:	1b8d0159 	.word	0x1b8d0159
 801294c:	bfe6066c 	.word	0xbfe6066c
 8012950:	9c598ac8 	.word	0x9c598ac8
 8012954:	40002ae5 	.word	0x40002ae5
 8012958:	1c8a2d4b 	.word	0x1c8a2d4b
 801295c:	c0033a27 	.word	0xc0033a27
 8012960:	33145c07 	.word	0x33145c07
 8012964:	bc91a626 	.word	0xbc91a626
 8012968:	54442d18 	.word	0x54442d18
 801296c:	3fe921fb 	.word	0x3fe921fb
 8012970:	3fefffff 	.word	0x3fefffff
 8012974:	3fdfffff 	.word	0x3fdfffff
 8012978:	3fef3332 	.word	0x3fef3332

0801297c <__ieee754_sqrt>:
 801297c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012980:	4770      	bx	lr

08012982 <with_errno>:
 8012982:	b513      	push	{r0, r1, r4, lr}
 8012984:	4604      	mov	r4, r0
 8012986:	ed8d 0b00 	vstr	d0, [sp]
 801298a:	f7fc fd7f 	bl	800f48c <__errno>
 801298e:	ed9d 0b00 	vldr	d0, [sp]
 8012992:	6004      	str	r4, [r0, #0]
 8012994:	b002      	add	sp, #8
 8012996:	bd10      	pop	{r4, pc}

08012998 <xflow>:
 8012998:	b082      	sub	sp, #8
 801299a:	b158      	cbz	r0, 80129b4 <xflow+0x1c>
 801299c:	eeb1 7b40 	vneg.f64	d7, d0
 80129a0:	ed8d 7b00 	vstr	d7, [sp]
 80129a4:	ed9d 7b00 	vldr	d7, [sp]
 80129a8:	2022      	movs	r0, #34	; 0x22
 80129aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80129ae:	b002      	add	sp, #8
 80129b0:	f7ff bfe7 	b.w	8012982 <with_errno>
 80129b4:	eeb0 7b40 	vmov.f64	d7, d0
 80129b8:	e7f2      	b.n	80129a0 <xflow+0x8>
 80129ba:	0000      	movs	r0, r0
 80129bc:	0000      	movs	r0, r0
	...

080129c0 <__math_uflow>:
 80129c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80129c8 <__math_uflow+0x8>
 80129c4:	f7ff bfe8 	b.w	8012998 <xflow>
 80129c8:	00000000 	.word	0x00000000
 80129cc:	10000000 	.word	0x10000000

080129d0 <__math_oflow>:
 80129d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80129d8 <__math_oflow+0x8>
 80129d4:	f7ff bfe0 	b.w	8012998 <xflow>
 80129d8:	00000000 	.word	0x00000000
 80129dc:	70000000 	.word	0x70000000

080129e0 <__math_divzero>:
 80129e0:	b082      	sub	sp, #8
 80129e2:	2800      	cmp	r0, #0
 80129e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80129e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80129ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80129f0:	ed8d 7b00 	vstr	d7, [sp]
 80129f4:	ed9d 0b00 	vldr	d0, [sp]
 80129f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012a08 <__math_divzero+0x28>
 80129fc:	2022      	movs	r0, #34	; 0x22
 80129fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012a02:	b002      	add	sp, #8
 8012a04:	f7ff bfbd 	b.w	8012982 <with_errno>
	...

08012a10 <__math_invalid>:
 8012a10:	eeb0 7b40 	vmov.f64	d7, d0
 8012a14:	eeb4 7b47 	vcmp.f64	d7, d7
 8012a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012a20:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012a24:	d602      	bvs.n	8012a2c <__math_invalid+0x1c>
 8012a26:	2021      	movs	r0, #33	; 0x21
 8012a28:	f7ff bfab 	b.w	8012982 <with_errno>
 8012a2c:	4770      	bx	lr

08012a2e <__math_check_uflow>:
 8012a2e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a36:	d102      	bne.n	8012a3e <__math_check_uflow+0x10>
 8012a38:	2022      	movs	r0, #34	; 0x22
 8012a3a:	f7ff bfa2 	b.w	8012982 <with_errno>
 8012a3e:	4770      	bx	lr

08012a40 <__math_check_oflow>:
 8012a40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012a60 <__math_check_oflow+0x20>
 8012a44:	eeb0 7bc0 	vabs.f64	d7, d0
 8012a48:	eeb4 7b46 	vcmp.f64	d7, d6
 8012a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a50:	dd02      	ble.n	8012a58 <__math_check_oflow+0x18>
 8012a52:	2022      	movs	r0, #34	; 0x22
 8012a54:	f7ff bf95 	b.w	8012982 <with_errno>
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	f3af 8000 	nop.w
 8012a60:	ffffffff 	.word	0xffffffff
 8012a64:	7fefffff 	.word	0x7fefffff

08012a68 <fabs>:
 8012a68:	ec51 0b10 	vmov	r0, r1, d0
 8012a6c:	ee10 2a10 	vmov	r2, s0
 8012a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a74:	ec43 2b10 	vmov	d0, r2, r3
 8012a78:	4770      	bx	lr
	...

08012a7c <_init>:
 8012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7e:	bf00      	nop
 8012a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a82:	bc08      	pop	{r3}
 8012a84:	469e      	mov	lr, r3
 8012a86:	4770      	bx	lr

08012a88 <_fini>:
 8012a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a8a:	bf00      	nop
 8012a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a8e:	bc08      	pop	{r3}
 8012a90:	469e      	mov	lr, r3
 8012a92:	4770      	bx	lr
